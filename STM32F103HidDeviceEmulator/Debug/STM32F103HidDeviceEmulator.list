
STM32F103HidDeviceEmulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009570  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096fc  080096fc  0000b1f0  2**0
                  CONTENTS
  4 .ARM          00000000  080096fc  080096fc  0000b1f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096fc  080096fc  0000b1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096fc  080096fc  0000a6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009700  08009700  0000a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08009704  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001578  200001f0  080098f4  0000b1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001768  080098f4  0000b768  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001185b  00000000  00000000  0000b219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003921  00000000  00000000  0001ca74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00020398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a67  00000000  00000000  00021188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a78f  00000000  00000000  00021bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017316  00000000  00000000  0003c37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b0c  00000000  00000000  00053694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db1a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003918  00000000  00000000  000db1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000deafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009664 	.word	0x08009664

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	08009664 	.word	0x08009664

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <HAL_UART_RxCpltCallback>:
uint8_t length = 0;
uint8_t parsedData = 0;
uint8_t buffer[1024] = {};
uint32_t timer = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint8_t byte = rxcall;
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <HAL_UART_RxCpltCallback+0xb8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	73fb      	strb	r3, [r7, #15]
	if((HAL_GetTick()-timer) > 2){
 8000a72:	f000 ff2f 	bl	80018d4 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <HAL_UART_RxCpltCallback+0xbc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d905      	bls.n	8000a8e <HAL_UART_RxCpltCallback+0x2a>
		length = 0;
 8000a82:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
		parsedData = 0;
 8000a88:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
	}
	if(byte == HEADER || parsedData > 0){
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2bc5      	cmp	r3, #197	@ 0xc5
 8000a92:	d003      	beq.n	8000a9c <HAL_UART_RxCpltCallback+0x38>
 8000a94:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d031      	beq.n	8000b00 <HAL_UART_RxCpltCallback+0x9c>
		buffer[parsedData] = byte;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	5453      	strb	r3, [r2, r1]
		if(parsedData == 4)
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d106      	bne.n	8000abe <HAL_UART_RxCpltCallback+0x5a>
			length = (uint16_t)(buffer[parsedData-1]) | (uint16_t)(buffer[parsedData] << 8);
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000ab8:	5cd2      	ldrb	r2, [r2, r3]
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000abc:	701a      	strb	r2, [r3, #0]
		if(parsedData >= length+5){
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000ac6:	7812      	ldrb	r2, [r2, #0]
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	da13      	bge.n	8000af4 <HAL_UART_RxCpltCallback+0x90>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000acc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad0:	4817      	ldr	r0, [pc, #92]	@ (8000b30 <HAL_UART_RxCpltCallback+0xcc>)
 8000ad2:	f001 fa89 	bl	8001fe8 <HAL_GPIO_TogglePin>
			ParsingData(buffer, parsedData+1);
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000ae2:	f000 fe15 	bl	8001710 <ParsingData>
			length = 0;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
			parsedData = 0;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e005      	b.n	8000b00 <HAL_UART_RxCpltCallback+0x9c>
		}else
			parsedData++;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000afe:	701a      	strb	r2, [r3, #0]
	}
	timer = HAL_GetTick();
 8000b00:	f000 fee8 	bl	80018d4 <HAL_GetTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <HAL_UART_RxCpltCallback+0xbc>)
 8000b08:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart,&rxcall,1);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4903      	ldr	r1, [pc, #12]	@ (8000b1c <HAL_UART_RxCpltCallback+0xb8>)
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f003 fd6d 	bl	80045ee <HAL_UART_Receive_IT>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000065c 	.word	0x2000065c
 8000b20:	20000610 	.word	0x20000610
 8000b24:	2000020c 	.word	0x2000020c
 8000b28:	2000020d 	.word	0x2000020d
 8000b2c:	20000210 	.word	0x20000210
 8000b30:	40011000 	.word	0x40011000

08000b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a23      	ldr	r2, [pc, #140]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b60:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a11      	ldr	r2, [pc, #68]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bae:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_GPIO_Init+0xac>)
 8000bb0:	f001 fa02 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_GPIO_Init+0xac>)
 8000bce:	f001 f86f 	bl	8001cb0 <HAL_GPIO_Init>

}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40011000 	.word	0x40011000

08000be4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART3_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c1c:	f003 fc0c 	bl	8004438 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f000 f8b6 	bl	8000d96 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000614 	.word	0x20000614
 8000c34:	40004800 	.word	0x40004800

08000c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <HAL_UART_MspInit+0x9c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d139      	bne.n	8000ccc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c62:	61d3      	str	r3, [r2, #28]
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a18      	ldr	r2, [pc, #96]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480f      	ldr	r0, [pc, #60]	@ (8000cdc <HAL_UART_MspInit+0xa4>)
 8000c9e:	f001 f807 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ca2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <HAL_UART_MspInit+0xa4>)
 8000cb8:	f000 fffa 	bl	8001cb0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2027      	movs	r0, #39	@ 0x27
 8000cc2:	f000 ff0c 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cc6:	2027      	movs	r0, #39	@ 0x27
 8000cc8:	f000 ff25 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010c00 	.word	0x40010c00

08000ce0 <SystemClock_Config>:
#define INC_INITS_RCC_H_

#include <main.h>

void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	@ 0x50
 8000ce4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cea:	2228      	movs	r2, #40	@ 0x28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f008 fb8c 	bl	800940c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d10:	2301      	movs	r3, #1
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d22:	2302      	movs	r3, #2
 8000d24:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 feb8 	bl	8003aac <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000d42:	f000 f828 	bl	8000d96 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d56:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2101      	movs	r1, #1
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 f924 	bl	8003fb0 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000d6e:	f000 f812 	bl	8000d96 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d72:	2310      	movs	r3, #16
 8000d74:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d7a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 faa4 	bl	80042cc <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000d8a:	f000 f804 	bl	8000d96 <Error_Handler>
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3750      	adds	r7, #80	@ 0x50
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <Error_Handler>:

void Error_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9a:	b672      	cpsid	i
}
 8000d9c:	bf00      	nop
  __disable_irq();
  while (1){}
 8000d9e:	bf00      	nop
 8000da0:	e7fd      	b.n	8000d9e <Error_Handler+0x8>
	...

08000da4 <main>:
Animation animation = {0, 0, {}};

void SystemClock_Config(void);

int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	HAL_Init();
 8000da8:	f000 fd3c 	bl	8001824 <HAL_Init>
	SystemClock_Config();
 8000dac:	f7ff ff98 	bl	8000ce0 <SystemClock_Config>
	MX_GPIO_Init();
 8000db0:	f7ff fec0 	bl	8000b34 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000db4:	f007 ff72 	bl	8008c9c <MX_USB_DEVICE_Init>
	MX_USART3_UART_Init();
 8000db8:	f7ff ff14 	bl	8000be4 <MX_USART3_UART_Init>
	HAL_UART_Receive_IT(&huart3,&rxcall,1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4913      	ldr	r1, [pc, #76]	@ (8000e0c <main+0x68>)
 8000dc0:	4813      	ldr	r0, [pc, #76]	@ (8000e10 <main+0x6c>)
 8000dc2:	f003 fc14 	bl	80045ee <HAL_UART_Receive_IT>

	while (1)
	{
		switch(action.device){
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <main+0x70>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d014      	beq.n	8000df8 <main+0x54>
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	dc19      	bgt.n	8000e06 <main+0x62>
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d002      	beq.n	8000ddc <main+0x38>
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d007      	beq.n	8000dea <main+0x46>
 8000dda:	e014      	b.n	8000e06 <main+0x62>
			case(MOUSE):
				MouseCommandSetup(&action);
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <main+0x70>)
 8000dde:	f000 fbaf 	bl	8001540 <MouseCommandSetup>
				action.device = 0;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <main+0x70>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
				break;
 8000de8:	e00d      	b.n	8000e06 <main+0x62>
			case(KEYBOARD):
				KeyboardSetup(&action);
 8000dea:	480a      	ldr	r0, [pc, #40]	@ (8000e14 <main+0x70>)
 8000dec:	f000 fb10 	bl	8001410 <KeyboardSetup>
				action.device = 0;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <main+0x70>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
				break;
 8000df6:	e006      	b.n	8000e06 <main+0x62>
			case(ANIMATION):
				AnimationSetup(&action);
 8000df8:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <main+0x70>)
 8000dfa:	f000 f885 	bl	8000f08 <AnimationSetup>
				action.device = 0;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <main+0x70>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
				break;
 8000e04:	bf00      	nop
		}
		Animate();
 8000e06:	f000 f8d9 	bl	8000fbc <Animate>
		switch(action.device){
 8000e0a:	e7dc      	b.n	8000dc6 <main+0x22>
 8000e0c:	2000065c 	.word	0x2000065c
 8000e10:	20000614 	.word	0x20000614
 8000e14:	20000660 	.word	0x20000660

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a14      	ldr	r2, [pc, #80]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_MspInit+0x60>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_MspInit+0x60>)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010000 	.word	0x40010000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f000 fcf0 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000eda:	f001 f9ba 	bl	8002252 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20001344 	.word	0x20001344

08000ee8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <USART3_IRQHandler+0x10>)
 8000eee:	f003 fba3 	bl	8004638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000614 	.word	0x20000614

08000efc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <AnimationSetup>:
uint8_t flag = 1;
uint16_t data_set = 0;

uint16_t x = 0, y_pos = 0, y = 0;

void AnimationSetup(Action *act){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d002      	beq.n	8000f1e <AnimationSetup+0x16>
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d009      	beq.n	8000f30 <AnimationSetup+0x28>
				break;
		case(REMOVE_COMMAND):
				AnimationRemove();
				break;
	}
}
 8000f1c:	e00b      	b.n	8000f36 <AnimationSetup+0x2e>
				AnimationSet(act->data, act->length);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	1d1a      	adds	r2, r3, #4
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	885b      	ldrh	r3, [r3, #2]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4610      	mov	r0, r2
 8000f2a:	f000 f809 	bl	8000f40 <AnimationSet>
				break;
 8000f2e:	e002      	b.n	8000f36 <AnimationSetup+0x2e>
				AnimationRemove();
 8000f30:	f000 f838 	bl	8000fa4 <AnimationRemove>
				break;
 8000f34:	bf00      	nop
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <AnimationSet>:

void AnimationSet(uint8_t *data, uint16_t len){
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
	flag = 1;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <AnimationSet+0x5c>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
	animation.id = data[0];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <AnimationSet+0x60>)
 8000f58:	701a      	strb	r2, [r3, #0]
	animation.length = len-1;
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <AnimationSet+0x60>)
 8000f62:	805a      	strh	r2, [r3, #2]
	for(uint8_t i=0; i<animation.length; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e00c      	b.n	8000f84 <AnimationSet+0x44>
		animation.data[i] = data[i+1];
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	441a      	add	r2, r3
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	7811      	ldrb	r1, [r2, #0]
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <AnimationSet+0x60>)
 8000f78:	4413      	add	r3, r2
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	711a      	strb	r2, [r3, #4]
	for(uint8_t i=0; i<animation.length; i++)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	3301      	adds	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <AnimationSet+0x60>)
 8000f8a:	885b      	ldrh	r3, [r3, #2]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3ec      	bcc.n	8000f6a <AnimationSet+0x2a>
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	20000a64 	.word	0x20000a64

08000fa4 <AnimationRemove>:

void AnimationRemove(){
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	animation.id = 0;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <AnimationRemove+0x14>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000a64 	.word	0x20000a64

08000fbc <Animate>:

void Animate(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	switch(animation.id){
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <Animate+0x30>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d00c      	beq.n	8000fe2 <Animate+0x26>
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	dc0d      	bgt.n	8000fe8 <Animate+0x2c>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d002      	beq.n	8000fd6 <Animate+0x1a>
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d003      	beq.n	8000fdc <Animate+0x20>
			break;
		case(MOUSE_ROUND_ANIMATION):
			MouseRoundAnimation();
			break;
	}
}
 8000fd4:	e008      	b.n	8000fe8 <Animate+0x2c>
			MouseMoveAnimation();
 8000fd6:	f000 f80b 	bl	8000ff0 <MouseMoveAnimation>
			break;
 8000fda:	e005      	b.n	8000fe8 <Animate+0x2c>
			KeyboardTextAnimation();
 8000fdc:	f000 f884 	bl	80010e8 <KeyboardTextAnimation>
			break;
 8000fe0:	e002      	b.n	8000fe8 <Animate+0x2c>
			MouseRoundAnimation();
 8000fe2:	f000 f98b 	bl	80012fc <MouseRoundAnimation>
			break;
 8000fe6:	bf00      	nop
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000a64 	.word	0x20000a64

08000ff0 <MouseMoveAnimation>:

void MouseMoveAnimation(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	if((HAL_GetTick()-time) >= 5){
 8000ff6:	f000 fc6d 	bl	80018d4 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	4b37      	ldr	r3, [pc, #220]	@ (80010dc <MouseMoveAnimation+0xec>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b04      	cmp	r3, #4
 8001004:	d965      	bls.n	80010d2 <MouseMoveAnimation+0xe2>
		uint8_t data_out[5] = {0x01, animation.data[1], 0, 0, 0};
 8001006:	2301      	movs	r3, #1
 8001008:	703b      	strb	r3, [r7, #0]
 800100a:	4b35      	ldr	r3, [pc, #212]	@ (80010e0 <MouseMoveAnimation+0xf0>)
 800100c:	795b      	ldrb	r3, [r3, #5]
 800100e:	707b      	strb	r3, [r7, #1]
 8001010:	2300      	movs	r3, #0
 8001012:	70bb      	strb	r3, [r7, #2]
 8001014:	2300      	movs	r3, #0
 8001016:	70fb      	strb	r3, [r7, #3]
 8001018:	2300      	movs	r3, #0
 800101a:	713b      	strb	r3, [r7, #4]
		switch((char)animation.data[0]){
 800101c:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <MouseMoveAnimation+0xf0>)
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	3b62      	subs	r3, #98	@ 0x62
 8001022:	2b12      	cmp	r3, #18
 8001024:	d84a      	bhi.n	80010bc <MouseMoveAnimation+0xcc>
 8001026:	a201      	add	r2, pc, #4	@ (adr r2, 800102c <MouseMoveAnimation+0x3c>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	0800109b 	.word	0x0800109b
 8001030:	080010bd 	.word	0x080010bd
 8001034:	080010bd 	.word	0x080010bd
 8001038:	080010bd 	.word	0x080010bd
 800103c:	080010bd 	.word	0x080010bd
 8001040:	080010bd 	.word	0x080010bd
 8001044:	080010bd 	.word	0x080010bd
 8001048:	080010bd 	.word	0x080010bd
 800104c:	080010bd 	.word	0x080010bd
 8001050:	080010bd 	.word	0x080010bd
 8001054:	08001089 	.word	0x08001089
 8001058:	080010bd 	.word	0x080010bd
 800105c:	080010bd 	.word	0x080010bd
 8001060:	080010bd 	.word	0x080010bd
 8001064:	080010bd 	.word	0x080010bd
 8001068:	080010bd 	.word	0x080010bd
 800106c:	08001079 	.word	0x08001079
 8001070:	080010bd 	.word	0x080010bd
 8001074:	080010ab 	.word	0x080010ab
			case('r'):
				data_out[2] = 1+2*animation.data[2];
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <MouseMoveAnimation+0xf0>)
 800107a:	799b      	ldrb	r3, [r3, #6]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	3301      	adds	r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	70bb      	strb	r3, [r7, #2]
				break;
 8001086:	e019      	b.n	80010bc <MouseMoveAnimation+0xcc>
			case('l'):
				data_out[2] = 254-2*animation.data[2];
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <MouseMoveAnimation+0xf0>)
 800108a:	799b      	ldrb	r3, [r3, #6]
 800108c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001090:	b2db      	uxtb	r3, r3
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	70bb      	strb	r3, [r7, #2]
				break;
 8001098:	e010      	b.n	80010bc <MouseMoveAnimation+0xcc>
			case('b'):
				data_out[3] = 1+2*animation.data[2];
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MouseMoveAnimation+0xf0>)
 800109c:	799b      	ldrb	r3, [r3, #6]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	70fb      	strb	r3, [r7, #3]
				break;
 80010a8:	e008      	b.n	80010bc <MouseMoveAnimation+0xcc>
			case('t'):
				data_out[3] = 254-2*animation.data[2];
 80010aa:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <MouseMoveAnimation+0xf0>)
 80010ac:	799b      	ldrb	r3, [r3, #6]
 80010ae:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	70fb      	strb	r3, [r7, #3]
				break;
 80010ba:	bf00      	nop
		}
		USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80010bc:	463b      	mov	r3, r7
 80010be:	2205      	movs	r2, #5
 80010c0:	4619      	mov	r1, r3
 80010c2:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <MouseMoveAnimation+0xf4>)
 80010c4:	f007 fd10 	bl	8008ae8 <USBD_HID_SendReport>
		time = HAL_GetTick();
 80010c8:	f000 fc04 	bl	80018d4 <HAL_GetTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a03      	ldr	r2, [pc, #12]	@ (80010dc <MouseMoveAnimation+0xec>)
 80010d0:	6013      	str	r3, [r2, #0]
	}
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000e68 	.word	0x20000e68
 80010e0:	20000a64 	.word	0x20000a64
 80010e4:	20000e80 	.word	0x20000e80

080010e8 <KeyboardTextAnimation>:
void KeyboardTextAnimation(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
	static uint32_t repeat_timer = 0;
	if((HAL_GetTick()-time) > 5){
 80010ee:	f000 fbf1 	bl	80018d4 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	4b7a      	ldr	r3, [pc, #488]	@ (80012e0 <KeyboardTextAnimation+0x1f8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	f240 80eb 	bls.w	80012d6 <KeyboardTextAnimation+0x1ee>
		if(flag){
 8001100:	4b78      	ldr	r3, [pc, #480]	@ (80012e4 <KeyboardTextAnimation+0x1fc>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80bf 	beq.w	8001288 <KeyboardTextAnimation+0x1a0>
			uint8_t sp = 0, symb = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	75fb      	strb	r3, [r7, #23]
 800110e:	2300      	movs	r3, #0
 8001110:	75bb      	strb	r3, [r7, #22]
			if (animation.data[data_set] >= (uint8_t)'0' && animation.data[data_set] <= (uint8_t)'9'){
 8001112:	4b75      	ldr	r3, [pc, #468]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	4b74      	ldr	r3, [pc, #464]	@ (80012ec <KeyboardTextAnimation+0x204>)
 800111a:	4413      	add	r3, r2
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001120:	d923      	bls.n	800116a <KeyboardTextAnimation+0x82>
 8001122:	4b71      	ldr	r3, [pc, #452]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b70      	ldr	r3, [pc, #448]	@ (80012ec <KeyboardTextAnimation+0x204>)
 800112a:	4413      	add	r3, r2
 800112c:	791b      	ldrb	r3, [r3, #4]
 800112e:	2b39      	cmp	r3, #57	@ 0x39
 8001130:	d81b      	bhi.n	800116a <KeyboardTextAnimation+0x82>
				if (animation.data[data_set] == 48)
 8001132:	4b6d      	ldr	r3, [pc, #436]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	4b6c      	ldr	r3, [pc, #432]	@ (80012ec <KeyboardTextAnimation+0x204>)
 800113a:	4413      	add	r3, r2
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	2b30      	cmp	r3, #48	@ 0x30
 8001140:	d108      	bne.n	8001154 <KeyboardTextAnimation+0x6c>
					symb = animation.data[data_set]-9;
 8001142:	4b69      	ldr	r3, [pc, #420]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b68      	ldr	r3, [pc, #416]	@ (80012ec <KeyboardTextAnimation+0x204>)
 800114a:	4413      	add	r3, r2
 800114c:	791b      	ldrb	r3, [r3, #4]
 800114e:	3b09      	subs	r3, #9
 8001150:	75bb      	strb	r3, [r7, #22]
 8001152:	e007      	b.n	8001164 <KeyboardTextAnimation+0x7c>
				else
					symb = animation.data[data_set]-19;
 8001154:	4b64      	ldr	r3, [pc, #400]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b64      	ldr	r3, [pc, #400]	@ (80012ec <KeyboardTextAnimation+0x204>)
 800115c:	4413      	add	r3, r2
 800115e:	791b      	ldrb	r3, [r3, #4]
 8001160:	3b13      	subs	r3, #19
 8001162:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	75fb      	strb	r3, [r7, #23]
 8001168:	e04a      	b.n	8001200 <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] >= (uint8_t)'A' && animation.data[data_set] <= (uint8_t)'Z'){
 800116a:	4b5f      	ldr	r3, [pc, #380]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	4b5e      	ldr	r3, [pc, #376]	@ (80012ec <KeyboardTextAnimation+0x204>)
 8001172:	4413      	add	r3, r2
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	2b40      	cmp	r3, #64	@ 0x40
 8001178:	d912      	bls.n	80011a0 <KeyboardTextAnimation+0xb8>
 800117a:	4b5b      	ldr	r3, [pc, #364]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	4b5a      	ldr	r3, [pc, #360]	@ (80012ec <KeyboardTextAnimation+0x204>)
 8001182:	4413      	add	r3, r2
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	2b5a      	cmp	r3, #90	@ 0x5a
 8001188:	d80a      	bhi.n	80011a0 <KeyboardTextAnimation+0xb8>
				symb = animation.data[data_set]-61;
 800118a:	4b57      	ldr	r3, [pc, #348]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4b56      	ldr	r3, [pc, #344]	@ (80012ec <KeyboardTextAnimation+0x204>)
 8001192:	4413      	add	r3, r2
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	3b3d      	subs	r3, #61	@ 0x3d
 8001198:	75bb      	strb	r3, [r7, #22]
				sp = 2;
 800119a:	2302      	movs	r3, #2
 800119c:	75fb      	strb	r3, [r7, #23]
 800119e:	e02f      	b.n	8001200 <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] >= (uint8_t)'a' && animation.data[data_set] <= (uint8_t)'z'){
 80011a0:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b51      	ldr	r3, [pc, #324]	@ (80012ec <KeyboardTextAnimation+0x204>)
 80011a8:	4413      	add	r3, r2
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	2b60      	cmp	r3, #96	@ 0x60
 80011ae:	d912      	bls.n	80011d6 <KeyboardTextAnimation+0xee>
 80011b0:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b4d      	ldr	r3, [pc, #308]	@ (80012ec <KeyboardTextAnimation+0x204>)
 80011b8:	4413      	add	r3, r2
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	2b7a      	cmp	r3, #122	@ 0x7a
 80011be:	d80a      	bhi.n	80011d6 <KeyboardTextAnimation+0xee>
				symb = animation.data[data_set]-93;
 80011c0:	4b49      	ldr	r3, [pc, #292]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b49      	ldr	r3, [pc, #292]	@ (80012ec <KeyboardTextAnimation+0x204>)
 80011c8:	4413      	add	r3, r2
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	3b5d      	subs	r3, #93	@ 0x5d
 80011ce:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	75fb      	strb	r3, [r7, #23]
 80011d4:	e014      	b.n	8001200 <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] == (uint8_t)' '){
 80011d6:	4b44      	ldr	r3, [pc, #272]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4b43      	ldr	r3, [pc, #268]	@ (80012ec <KeyboardTextAnimation+0x204>)
 80011de:	4413      	add	r3, r2
 80011e0:	791b      	ldrb	r3, [r3, #4]
 80011e2:	2b20      	cmp	r3, #32
 80011e4:	d10a      	bne.n	80011fc <KeyboardTextAnimation+0x114>
				symb = animation.data[data_set]+12;
 80011e6:	4b40      	ldr	r3, [pc, #256]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <KeyboardTextAnimation+0x204>)
 80011ee:	4413      	add	r3, r2
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	330c      	adds	r3, #12
 80011f4:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]
 80011fa:	e001      	b.n	8001200 <KeyboardTextAnimation+0x118>
			}else
				symb = 85;
 80011fc:	2355      	movs	r3, #85	@ 0x55
 80011fe:	75bb      	strb	r3, [r7, #22]
			uint8_t data_out[9] = {0x02, sp, 0, symb, 0, 0, 0, 0, 0};
 8001200:	2302      	movs	r3, #2
 8001202:	733b      	strb	r3, [r7, #12]
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	737b      	strb	r3, [r7, #13]
 8001208:	2300      	movs	r3, #0
 800120a:	73bb      	strb	r3, [r7, #14]
 800120c:	7dbb      	ldrb	r3, [r7, #22]
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	2300      	movs	r3, #0
 8001212:	743b      	strb	r3, [r7, #16]
 8001214:	2300      	movs	r3, #0
 8001216:	747b      	strb	r3, [r7, #17]
 8001218:	2300      	movs	r3, #0
 800121a:	74bb      	strb	r3, [r7, #18]
 800121c:	2300      	movs	r3, #0
 800121e:	74fb      	strb	r3, [r7, #19]
 8001220:	2300      	movs	r3, #0
 8001222:	753b      	strb	r3, [r7, #20]
			data_set++;
 8001224:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 800122e:	801a      	strh	r2, [r3, #0]

			USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2209      	movs	r2, #9
 8001236:	4619      	mov	r1, r3
 8001238:	482d      	ldr	r0, [pc, #180]	@ (80012f0 <KeyboardTextAnimation+0x208>)
 800123a:	f007 fc55 	bl	8008ae8 <USBD_HID_SendReport>
			HAL_Delay(30);
 800123e:	201e      	movs	r0, #30
 8001240:	f000 fb52 	bl	80018e8 <HAL_Delay>
			uint8_t data_res[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 8001244:	4a2b      	ldr	r2, [pc, #172]	@ (80012f4 <KeyboardTextAnimation+0x20c>)
 8001246:	463b      	mov	r3, r7
 8001248:	ca07      	ldmia	r2, {r0, r1, r2}
 800124a:	c303      	stmia	r3!, {r0, r1}
 800124c:	701a      	strb	r2, [r3, #0]
			USBD_HID_SendReport(&hUsbDeviceFS, data_res, 9);
 800124e:	463b      	mov	r3, r7
 8001250:	2209      	movs	r2, #9
 8001252:	4619      	mov	r1, r3
 8001254:	4826      	ldr	r0, [pc, #152]	@ (80012f0 <KeyboardTextAnimation+0x208>)
 8001256:	f007 fc47 	bl	8008ae8 <USBD_HID_SendReport>
			HAL_Delay(30);
 800125a:	201e      	movs	r0, #30
 800125c:	f000 fb44 	bl	80018e8 <HAL_Delay>

			if(data_set >= animation.length-1){
 8001260:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <KeyboardTextAnimation+0x204>)
 8001268:	885b      	ldrh	r3, [r3, #2]
 800126a:	3b01      	subs	r3, #1
 800126c:	429a      	cmp	r2, r3
 800126e:	db2d      	blt.n	80012cc <KeyboardTextAnimation+0x1e4>
				data_set = 0;
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <KeyboardTextAnimation+0x200>)
 8001272:	2200      	movs	r2, #0
 8001274:	801a      	strh	r2, [r3, #0]
				flag = 0;
 8001276:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <KeyboardTextAnimation+0x1fc>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
				repeat_timer = HAL_GetTick();
 800127c:	f000 fb2a 	bl	80018d4 <HAL_GetTick>
 8001280:	4603      	mov	r3, r0
 8001282:	4a1d      	ldr	r2, [pc, #116]	@ (80012f8 <KeyboardTextAnimation+0x210>)
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e021      	b.n	80012cc <KeyboardTextAnimation+0x1e4>
			}
		}else if (animation.data[animation.length-1] != 0){
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <KeyboardTextAnimation+0x204>)
 800128a:	885b      	ldrh	r3, [r3, #2]
 800128c:	3b01      	subs	r3, #1
 800128e:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <KeyboardTextAnimation+0x204>)
 8001290:	4413      	add	r3, r2
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d019      	beq.n	80012cc <KeyboardTextAnimation+0x1e4>
			if((HAL_GetTick()-repeat_timer) >= animation.data[animation.length-1]*100){
 8001298:	f000 fb1c 	bl	80018d4 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <KeyboardTextAnimation+0x210>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	4a11      	ldr	r2, [pc, #68]	@ (80012ec <KeyboardTextAnimation+0x204>)
 80012a6:	8852      	ldrh	r2, [r2, #2]
 80012a8:	3a01      	subs	r2, #1
 80012aa:	4910      	ldr	r1, [pc, #64]	@ (80012ec <KeyboardTextAnimation+0x204>)
 80012ac:	440a      	add	r2, r1
 80012ae:	7912      	ldrb	r2, [r2, #4]
 80012b0:	4611      	mov	r1, r2
 80012b2:	2264      	movs	r2, #100	@ 0x64
 80012b4:	fb01 f202 	mul.w	r2, r1, r2
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d307      	bcc.n	80012cc <KeyboardTextAnimation+0x1e4>
				flag = 1;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <KeyboardTextAnimation+0x1fc>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
				repeat_timer = HAL_GetTick();
 80012c2:	f000 fb07 	bl	80018d4 <HAL_GetTick>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <KeyboardTextAnimation+0x210>)
 80012ca:	6013      	str	r3, [r2, #0]
			}
		}
		time = HAL_GetTick();
 80012cc:	f000 fb02 	bl	80018d4 <HAL_GetTick>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a03      	ldr	r2, [pc, #12]	@ (80012e0 <KeyboardTextAnimation+0x1f8>)
 80012d4:	6013      	str	r3, [r2, #0]
	}
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000e68 	.word	0x20000e68
 80012e4:	20000004 	.word	0x20000004
 80012e8:	20000e6c 	.word	0x20000e6c
 80012ec:	20000a64 	.word	0x20000a64
 80012f0:	20000e80 	.word	0x20000e80
 80012f4:	0800967c 	.word	0x0800967c
 80012f8:	20000e74 	.word	0x20000e74

080012fc <MouseRoundAnimation>:
void MouseRoundAnimation(){
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
	uint16_t radius = animation.data[0], speed = animation.data[1], buttons = animation.data[2];
 8001302:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <MouseRoundAnimation+0xfc>)
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	81fb      	strh	r3, [r7, #14]
 8001308:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <MouseRoundAnimation+0xfc>)
 800130a:	795b      	ldrb	r3, [r3, #5]
 800130c:	81bb      	strh	r3, [r7, #12]
 800130e:	4b3a      	ldr	r3, [pc, #232]	@ (80013f8 <MouseRoundAnimation+0xfc>)
 8001310:	799b      	ldrb	r3, [r3, #6]
 8001312:	817b      	strh	r3, [r7, #10]
	if(x == 0)
 8001314:	4b39      	ldr	r3, [pc, #228]	@ (80013fc <MouseRoundAnimation+0x100>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <MouseRoundAnimation+0x26>
		y_pos = radius;
 800131c:	4a38      	ldr	r2, [pc, #224]	@ (8001400 <MouseRoundAnimation+0x104>)
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	8013      	strh	r3, [r2, #0]
	if((HAL_GetTick()-time) >= 5){
 8001322:	f000 fad7 	bl	80018d4 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	4b36      	ldr	r3, [pc, #216]	@ (8001404 <MouseRoundAnimation+0x108>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b04      	cmp	r3, #4
 8001330:	d95e      	bls.n	80013f0 <MouseRoundAnimation+0xf4>
		x+=1+2*speed;
 8001332:	89bb      	ldrh	r3, [r7, #12]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <MouseRoundAnimation+0x100>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	4413      	add	r3, r2
 800133e:	b29b      	uxth	r3, r3
 8001340:	3301      	adds	r3, #1
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <MouseRoundAnimation+0x100>)
 8001346:	801a      	strh	r2, [r3, #0]
		y = abs(y_pos-(uint16_t)sqrt(radius*radius-x*x));
 8001348:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <MouseRoundAnimation+0x104>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	461c      	mov	r4, r3
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	89fa      	ldrh	r2, [r7, #14]
 8001352:	fb03 f202 	mul.w	r2, r3, r2
 8001356:	4b29      	ldr	r3, [pc, #164]	@ (80013fc <MouseRoundAnimation+0x100>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <MouseRoundAnimation+0x100>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	fb01 f303 	mul.w	r3, r1, r3
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f842 	bl	80003f0 <__aeabi_i2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f008 f87c 	bl	8009470 <sqrt>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fb50 	bl	8000a24 <__aeabi_d2uiz>
 8001384:	4603      	mov	r3, r0
 8001386:	b29b      	uxth	r3, r3
 8001388:	1ae3      	subs	r3, r4, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	bfb8      	it	lt
 800138e:	425b      	neglt	r3, r3
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <MouseRoundAnimation+0x10c>)
 8001394:	801a      	strh	r2, [r3, #0]
		y_pos-=y;
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MouseRoundAnimation+0x104>)
 8001398:	881a      	ldrh	r2, [r3, #0]
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MouseRoundAnimation+0x10c>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <MouseRoundAnimation+0x104>)
 80013a4:	801a      	strh	r2, [r3, #0]
		if(x >= radius)
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <MouseRoundAnimation+0x100>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	89fa      	ldrh	r2, [r7, #14]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d802      	bhi.n	80013b6 <MouseRoundAnimation+0xba>
			x = 0;
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MouseRoundAnimation+0x100>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	801a      	strh	r2, [r3, #0]
		uint8_t data_out[5] = {0x01, buttons, 1+2*speed, y, 0};
 80013b6:	2301      	movs	r3, #1
 80013b8:	713b      	strb	r3, [r7, #4]
 80013ba:	897b      	ldrh	r3, [r7, #10]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	717b      	strb	r3, [r7, #5]
 80013c0:	89bb      	ldrh	r3, [r7, #12]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	71bb      	strb	r3, [r7, #6]
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MouseRoundAnimation+0x10c>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	2300      	movs	r3, #0
 80013d8:	723b      	strb	r3, [r7, #8]
		USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2205      	movs	r2, #5
 80013de:	4619      	mov	r1, r3
 80013e0:	480a      	ldr	r0, [pc, #40]	@ (800140c <MouseRoundAnimation+0x110>)
 80013e2:	f007 fb81 	bl	8008ae8 <USBD_HID_SendReport>
		time = HAL_GetTick();
 80013e6:	f000 fa75 	bl	80018d4 <HAL_GetTick>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <MouseRoundAnimation+0x108>)
 80013ee:	6013      	str	r3, [r2, #0]
	}

}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}
 80013f8:	20000a64 	.word	0x20000a64
 80013fc:	20000e6e 	.word	0x20000e6e
 8001400:	20000e70 	.word	0x20000e70
 8001404:	20000e68 	.word	0x20000e68
 8001408:	20000e72 	.word	0x20000e72
 800140c:	20000e80 	.word	0x20000e80

08001410 <KeyboardSetup>:
 */

#include "modules/KeyboardModule.h"
extern USBD_HandleTypeDef hUsbDeviceFS;

void KeyboardSetup(Action *act){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d00c      	beq.n	800143a <KeyboardSetup+0x2a>
 8001420:	2b03      	cmp	r3, #3
 8001422:	dc13      	bgt.n	800144c <KeyboardSetup+0x3c>
 8001424:	2b01      	cmp	r3, #1
 8001426:	d002      	beq.n	800142e <KeyboardSetup+0x1e>
 8001428:	2b02      	cmp	r3, #2
 800142a:	d00c      	beq.n	8001446 <KeyboardSetup+0x36>
				break;
		case(REMOVE_COMMAND):
				KeyboardRemove();
				break;
	}
}
 800142c:	e00e      	b.n	800144c <KeyboardSetup+0x3c>
				KeyboardSet(act->data);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f80e 	bl	8001454 <KeyboardSet>
				break;
 8001438:	e008      	b.n	800144c <KeyboardSetup+0x3c>
				KeyboardClick(act->data);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3304      	adds	r3, #4
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f836 	bl	80014b0 <KeyboardClick>
				break;
 8001444:	e002      	b.n	800144c <KeyboardSetup+0x3c>
				KeyboardRemove();
 8001446:	f000 f865 	bl	8001514 <KeyboardRemove>
				break;
 800144a:	bf00      	nop
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <KeyboardSet>:

void KeyboardSet(uint8_t *data){
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 800146a:	2302      	movs	r3, #2
 800146c:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	e00c      	b.n	800148e <KeyboardSet+0x3a>
		data_out[i+1] = data[i];
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	441a      	add	r2, r3
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	3301      	adds	r3, #1
 800147e:	7812      	ldrb	r2, [r2, #0]
 8001480:	3318      	adds	r3, #24
 8001482:	443b      	add	r3, r7
 8001484:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	3301      	adds	r3, #1
 800148c:	75fb      	strb	r3, [r7, #23]
 800148e:	7dfb      	ldrb	r3, [r7, #23]
 8001490:	2b07      	cmp	r3, #7
 8001492:	d9ef      	bls.n	8001474 <KeyboardSet+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2209      	movs	r2, #9
 800149a:	4619      	mov	r1, r3
 800149c:	4803      	ldr	r0, [pc, #12]	@ (80014ac <KeyboardSet+0x58>)
 800149e:	f007 fb23 	bl	8008ae8 <USBD_HID_SendReport>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000e80 	.word	0x20000e80

080014b0 <KeyboardClick>:

void KeyboardClick(uint8_t *data){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 80014c6:	2302      	movs	r3, #2
 80014c8:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]
 80014ce:	e00c      	b.n	80014ea <KeyboardClick+0x3a>
		data_out[i+1] = data[i];
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	441a      	add	r2, r3
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	3301      	adds	r3, #1
 80014da:	7812      	ldrb	r2, [r2, #0]
 80014dc:	3318      	adds	r3, #24
 80014de:	443b      	add	r3, r7
 80014e0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	3301      	adds	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	2b07      	cmp	r3, #7
 80014ee:	d9ef      	bls.n	80014d0 <KeyboardClick+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2209      	movs	r2, #9
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <KeyboardClick+0x60>)
 80014fa:	f007 faf5 	bl	8008ae8 <USBD_HID_SendReport>
	HAL_Delay(30);
 80014fe:	201e      	movs	r0, #30
 8001500:	f000 f9f2 	bl	80018e8 <HAL_Delay>
	KeyboardRemove();
 8001504:	f000 f806 	bl	8001514 <KeyboardRemove>
}
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000e80 	.word	0x20000e80

08001514 <KeyboardRemove>:

void KeyboardRemove(){
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
	uint8_t data_out[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 800151a:	4a07      	ldr	r2, [pc, #28]	@ (8001538 <KeyboardRemove+0x24>)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001520:	c303      	stmia	r3!, {r0, r1}
 8001522:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2209      	movs	r2, #9
 8001528:	4619      	mov	r1, r3
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <KeyboardRemove+0x28>)
 800152c:	f007 fadc 	bl	8008ae8 <USBD_HID_SendReport>
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	08009688 	.word	0x08009688
 800153c:	20000e80 	.word	0x20000e80

08001540 <MouseCommandSetup>:
 */

#include <modules/MouseModule.h>
extern USBD_HandleTypeDef hUsbDeviceFS;

void MouseCommandSetup(Action *act){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d00c      	beq.n	800156a <MouseCommandSetup+0x2a>
 8001550:	2b03      	cmp	r3, #3
 8001552:	dc13      	bgt.n	800157c <MouseCommandSetup+0x3c>
 8001554:	2b01      	cmp	r3, #1
 8001556:	d002      	beq.n	800155e <MouseCommandSetup+0x1e>
 8001558:	2b02      	cmp	r3, #2
 800155a:	d00c      	beq.n	8001576 <MouseCommandSetup+0x36>
			break;
		case(REMOVE_COMMAND):
			MouseRemove();
			break;
	}
}
 800155c:	e00e      	b.n	800157c <MouseCommandSetup+0x3c>
			MouseSet(act->data);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3304      	adds	r3, #4
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f80e 	bl	8001584 <MouseSet>
			break;
 8001568:	e008      	b.n	800157c <MouseCommandSetup+0x3c>
			MouseClick(act->data[0]);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	791b      	ldrb	r3, [r3, #4]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f836 	bl	80015e0 <MouseClick>
			break;
 8001574:	e002      	b.n	800157c <MouseCommandSetup+0x3c>
			MouseRemove();
 8001576:	f000 f855 	bl	8001624 <MouseRemove>
			break;
 800157a:	bf00      	nop
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <MouseSet>:

void MouseSet(uint8_t *data){
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 800158c:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <MouseSet+0x54>)
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001596:	6018      	str	r0, [r3, #0]
 8001598:	3304      	adds	r3, #4
 800159a:	7019      	strb	r1, [r3, #0]
	for(uint8_t i=0; i<4; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e00c      	b.n	80015bc <MouseSet+0x38>
		data_out[i+1] = data[i];
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	441a      	add	r2, r3
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	3301      	adds	r3, #1
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	3310      	adds	r3, #16
 80015b0:	443b      	add	r3, r7
 80015b2:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i=0; i<4; i++)
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	3301      	adds	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d9ef      	bls.n	80015a2 <MouseSet+0x1e>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	2205      	movs	r2, #5
 80015c8:	4619      	mov	r1, r3
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MouseSet+0x58>)
 80015cc:	f007 fa8c 	bl	8008ae8 <USBD_HID_SendReport>
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	08009694 	.word	0x08009694
 80015dc:	20000e80 	.word	0x20000e80

080015e0 <MouseClick>:

void MouseClick(uint8_t buttons){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[5] = {0x01, buttons, 0, 0, 0};
 80015ea:	2301      	movs	r3, #1
 80015ec:	723b      	strb	r3, [r7, #8]
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	727b      	strb	r3, [r7, #9]
 80015f2:	2300      	movs	r3, #0
 80015f4:	72bb      	strb	r3, [r7, #10]
 80015f6:	2300      	movs	r3, #0
 80015f8:	72fb      	strb	r3, [r7, #11]
 80015fa:	2300      	movs	r3, #0
 80015fc:	733b      	strb	r3, [r7, #12]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	2205      	movs	r2, #5
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	@ (8001620 <MouseClick+0x40>)
 8001608:	f007 fa6e 	bl	8008ae8 <USBD_HID_SendReport>
	HAL_Delay(30);
 800160c:	201e      	movs	r0, #30
 800160e:	f000 f96b 	bl	80018e8 <HAL_Delay>
	MouseRemove();
 8001612:	f000 f807 	bl	8001624 <MouseRemove>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000e80 	.word	0x20000e80

08001624 <MouseRemove>:

void MouseRemove(){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 800162a:	4a08      	ldr	r2, [pc, #32]	@ (800164c <MouseRemove+0x28>)
 800162c:	463b      	mov	r3, r7
 800162e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001632:	6018      	str	r0, [r3, #0]
 8001634:	3304      	adds	r3, #4
 8001636:	7019      	strb	r1, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8001638:	463b      	mov	r3, r7
 800163a:	2205      	movs	r2, #5
 800163c:	4619      	mov	r1, r3
 800163e:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MouseRemove+0x2c>)
 8001640:	f007 fa52 	bl	8008ae8 <USBD_HID_SendReport>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	08009694 	.word	0x08009694
 8001650:	20000e80 	.word	0x20000e80

08001654 <crc8>:
#ifndef INC_CRC8_H_
#define INC_CRC8_H_

#include "main.h"

uint8_t crc8(uint8_t *buffer, uint8_t size) {
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < size; i++) {
 8001664:	2300      	movs	r3, #0
 8001666:	73bb      	strb	r3, [r7, #14]
 8001668:	e027      	b.n	80016ba <crc8+0x66>
		uint8_t data = buffer[i];
 800166a:	7bbb      	ldrb	r3, [r7, #14]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8001674:	2308      	movs	r3, #8
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	e019      	b.n	80016ae <crc8+0x5a>
		crc = ((crc ^ data) & 1) ? (crc >> 1) ^ 0x8C : (crc >> 1);
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	7b7b      	ldrb	r3, [r7, #13]
 800167e:	4053      	eors	r3, r2
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d007      	beq.n	800169a <crc8+0x46>
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001694:	43db      	mvns	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	e002      	b.n	80016a0 <crc8+0x4c>
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	73fb      	strb	r3, [r7, #15]
		data >>= 1;
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	085b      	lsrs	r3, r3, #1
 80016a6:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	dce2      	bgt.n	800167a <crc8+0x26>
	for (uint8_t i = 0; i < size; i++) {
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	3301      	adds	r3, #1
 80016b8:	73bb      	strb	r3, [r7, #14]
 80016ba:	7bba      	ldrb	r2, [r7, #14]
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3d3      	bcc.n	800166a <crc8+0x16>
		}
	}
	return crc;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <answer>:
#include "controllers/UsartController.h"
#include "crc8.h"

extern UART_HandleTypeDef huart3;

void answer(uint8_t data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[3] = {HEADER, data, 0};
 80016da:	23c5      	movs	r3, #197	@ 0xc5
 80016dc:	733b      	strb	r3, [r7, #12]
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	737b      	strb	r3, [r7, #13]
 80016e2:	2300      	movs	r3, #0
 80016e4:	73bb      	strb	r3, [r7, #14]
	data_out[2] = crc8(data_out, 2);
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	2102      	movs	r1, #2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ffb1 	bl	8001654 <crc8>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, data_out, 3, 100);
 80016f6:	f107 010c 	add.w	r1, r7, #12
 80016fa:	2364      	movs	r3, #100	@ 0x64
 80016fc:	2203      	movs	r2, #3
 80016fe:	4803      	ldr	r0, [pc, #12]	@ (800170c <answer+0x3c>)
 8001700:	f002 feea 	bl	80044d8 <HAL_UART_Transmit>
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000614 	.word	0x20000614

08001710 <ParsingData>:

#include <modules/UsartAnswerModule.h>
#include <modules/UsartParserModule.h>
#include "crc8.h"

void ParsingData(uint8_t *buffer, uint16_t len){
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
	if(buffer[0] == HEADER){
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2bc5      	cmp	r3, #197	@ 0xc5
 8001722:	d152      	bne.n	80017ca <ParsingData+0xba>
		uint16_t length_now = (uint16_t)buffer[3] | (uint16_t)(buffer[4] << 8);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3303      	adds	r3, #3
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3304      	adds	r3, #4
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b29b      	uxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	81bb      	strh	r3, [r7, #12]
		if(length_now+6 == len){
 800173a:	89bb      	ldrh	r3, [r7, #12]
 800173c:	1d9a      	adds	r2, r3, #6
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	429a      	cmp	r2, r3
 8001742:	d142      	bne.n	80017ca <ParsingData+0xba>
			if(crc8(buffer, length_now+5) == buffer[length_now+5]){
 8001744:	89bb      	ldrh	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	3305      	adds	r3, #5
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4619      	mov	r1, r3
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff80 	bl	8001654 <crc8>
 8001754:	4603      	mov	r3, r0
 8001756:	4619      	mov	r1, r3
 8001758:	89bb      	ldrh	r3, [r7, #12]
 800175a:	3305      	adds	r3, #5
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	4299      	cmp	r1, r3
 8001764:	d12e      	bne.n	80017c4 <ParsingData+0xb4>
				answer(USART_OK);
 8001766:	2001      	movs	r0, #1
 8001768:	f7ff ffb2 	bl	80016d0 <answer>
				action.command = buffer[2];
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	789a      	ldrb	r2, [r3, #2]
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <ParsingData+0xc4>)
 8001772:	705a      	strb	r2, [r3, #1]
				action.length = (uint16_t)buffer[3] | (uint16_t)(buffer[4] << 8);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3303      	adds	r3, #3
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3304      	adds	r3, #4
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b29b      	uxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <ParsingData+0xc4>)
 800178c:	805a      	strh	r2, [r3, #2]
				for(uint8_t i=0; i<action.length; i++){
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	e00c      	b.n	80017ae <ParsingData+0x9e>
					action.data[i] = buffer[i+5];
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	3305      	adds	r3, #5
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	441a      	add	r2, r3
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	7811      	ldrb	r1, [r2, #0]
 80017a0:	4a0c      	ldr	r2, [pc, #48]	@ (80017d4 <ParsingData+0xc4>)
 80017a2:	4413      	add	r3, r2
 80017a4:	460a      	mov	r2, r1
 80017a6:	711a      	strb	r2, [r3, #4]
				for(uint8_t i=0; i<action.length; i++){
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	3301      	adds	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <ParsingData+0xc4>)
 80017b4:	885b      	ldrh	r3, [r3, #2]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d3ec      	bcc.n	8001794 <ParsingData+0x84>
				}
				action.device = buffer[1];
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	785a      	ldrb	r2, [r3, #1]
 80017be:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <ParsingData+0xc4>)
 80017c0:	701a      	strb	r2, [r3, #0]
			}else
				answer(USART_ERROR);
		}
	}
}
 80017c2:	e002      	b.n	80017ca <ParsingData+0xba>
				answer(USART_ERROR);
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff ff83 	bl	80016d0 <answer>
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000660 	.word	0x20000660

080017d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d8:	f7ff fb90 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017dc:	480b      	ldr	r0, [pc, #44]	@ (800180c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017de:	490c      	ldr	r1, [pc, #48]	@ (8001810 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001814 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e4:	e002      	b.n	80017ec <LoopCopyDataInit>

080017e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ea:	3304      	adds	r3, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f0:	d3f9      	bcc.n	80017e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f2:	4a09      	ldr	r2, [pc, #36]	@ (8001818 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017f4:	4c09      	ldr	r4, [pc, #36]	@ (800181c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f8:	e001      	b.n	80017fe <LoopFillZerobss>

080017fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017fc:	3204      	adds	r2, #4

080017fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001800:	d3fb      	bcc.n	80017fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001802:	f007 fe11 	bl	8009428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001806:	f7ff facd 	bl	8000da4 <main>
  bx lr
 800180a:	4770      	bx	lr
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001814:	08009704 	.word	0x08009704
  ldr r2, =_sbss
 8001818:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800181c:	20001768 	.word	0x20001768

08001820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC1_2_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <HAL_Init+0x28>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	@ (800184c <HAL_Init+0x28>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f947 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff faea 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f95f 	bl	8001b32 <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 f927 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	@ (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000000 	.word	0x20000000
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	20000008 	.word	0x20000008

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_IncTick+0x1c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <HAL_IncTick+0x20>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a03      	ldr	r2, [pc, #12]	@ (80018d0 <HAL_IncTick+0x20>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	2000000c 	.word	0x2000000c
 80018d0:	20000e78 	.word	0x20000e78

080018d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b02      	ldr	r3, [pc, #8]	@ (80018e4 <HAL_GetTick+0x10>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000e78 	.word	0x20000e78

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff fff0 	bl	80018d4 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffe0 	bl	80018d4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000000c 	.word	0x2000000c

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4906      	ldr	r1, [pc, #24]	@ (80019c8 <__NVIC_EnableIRQ+0x34>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	@ (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	@ (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	@ 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	@ 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff90 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff2d 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff42 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff90 	bl	8001a20 <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5f 	bl	80019cc <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff35 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d008      	beq.n	8001b74 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2204      	movs	r2, #4
 8001b66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e020      	b.n	8001bb6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 020e 	bic.w	r2, r2, #14
 8001b82:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d005      	beq.n	8001be4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2204      	movs	r2, #4
 8001bdc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	e051      	b.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 020e 	bic.w	r2, r2, #14
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a22      	ldr	r2, [pc, #136]	@ (8001c94 <HAL_DMA_Abort_IT+0xd4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d029      	beq.n	8001c62 <HAL_DMA_Abort_IT+0xa2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a21      	ldr	r2, [pc, #132]	@ (8001c98 <HAL_DMA_Abort_IT+0xd8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_Abort_IT+0x9e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c9c <HAL_DMA_Abort_IT+0xdc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01a      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x98>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca0 <HAL_DMA_Abort_IT+0xe0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d012      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x92>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <HAL_DMA_Abort_IT+0xe4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00a      	beq.n	8001c4c <HAL_DMA_Abort_IT+0x8c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca8 <HAL_DMA_Abort_IT+0xe8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d102      	bne.n	8001c46 <HAL_DMA_Abort_IT+0x86>
 8001c40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c44:	e00e      	b.n	8001c64 <HAL_DMA_Abort_IT+0xa4>
 8001c46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c4a:	e00b      	b.n	8001c64 <HAL_DMA_Abort_IT+0xa4>
 8001c4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c50:	e008      	b.n	8001c64 <HAL_DMA_Abort_IT+0xa4>
 8001c52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c56:	e005      	b.n	8001c64 <HAL_DMA_Abort_IT+0xa4>
 8001c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c5c:	e002      	b.n	8001c64 <HAL_DMA_Abort_IT+0xa4>
 8001c5e:	2310      	movs	r3, #16
 8001c60:	e000      	b.n	8001c64 <HAL_DMA_Abort_IT+0xa4>
 8001c62:	2301      	movs	r3, #1
 8001c64:	4a11      	ldr	r2, [pc, #68]	@ (8001cac <HAL_DMA_Abort_IT+0xec>)
 8001c66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
    } 
  }
  return status;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40020008 	.word	0x40020008
 8001c98:	4002001c 	.word	0x4002001c
 8001c9c:	40020030 	.word	0x40020030
 8001ca0:	40020044 	.word	0x40020044
 8001ca4:	40020058 	.word	0x40020058
 8001ca8:	4002006c 	.word	0x4002006c
 8001cac:	40020000 	.word	0x40020000

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b08b      	sub	sp, #44	@ 0x2c
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc2:	e169      	b.n	8001f98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	f040 8158 	bne.w	8001f92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a9a      	ldr	r2, [pc, #616]	@ (8001f50 <HAL_GPIO_Init+0x2a0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d05e      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001cec:	4a98      	ldr	r2, [pc, #608]	@ (8001f50 <HAL_GPIO_Init+0x2a0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d875      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001cf2:	4a98      	ldr	r2, [pc, #608]	@ (8001f54 <HAL_GPIO_Init+0x2a4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d058      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001cf8:	4a96      	ldr	r2, [pc, #600]	@ (8001f54 <HAL_GPIO_Init+0x2a4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d86f      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001cfe:	4a96      	ldr	r2, [pc, #600]	@ (8001f58 <HAL_GPIO_Init+0x2a8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d052      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d04:	4a94      	ldr	r2, [pc, #592]	@ (8001f58 <HAL_GPIO_Init+0x2a8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d869      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d0a:	4a94      	ldr	r2, [pc, #592]	@ (8001f5c <HAL_GPIO_Init+0x2ac>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d04c      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d10:	4a92      	ldr	r2, [pc, #584]	@ (8001f5c <HAL_GPIO_Init+0x2ac>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d863      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d16:	4a92      	ldr	r2, [pc, #584]	@ (8001f60 <HAL_GPIO_Init+0x2b0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d046      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d1c:	4a90      	ldr	r2, [pc, #576]	@ (8001f60 <HAL_GPIO_Init+0x2b0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d85d      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d82a      	bhi.n	8001d7c <HAL_GPIO_Init+0xcc>
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d859      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d30 <HAL_GPIO_Init+0x80>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001dab 	.word	0x08001dab
 8001d34:	08001d85 	.word	0x08001d85
 8001d38:	08001d97 	.word	0x08001d97
 8001d3c:	08001dd9 	.word	0x08001dd9
 8001d40:	08001ddf 	.word	0x08001ddf
 8001d44:	08001ddf 	.word	0x08001ddf
 8001d48:	08001ddf 	.word	0x08001ddf
 8001d4c:	08001ddf 	.word	0x08001ddf
 8001d50:	08001ddf 	.word	0x08001ddf
 8001d54:	08001ddf 	.word	0x08001ddf
 8001d58:	08001ddf 	.word	0x08001ddf
 8001d5c:	08001ddf 	.word	0x08001ddf
 8001d60:	08001ddf 	.word	0x08001ddf
 8001d64:	08001ddf 	.word	0x08001ddf
 8001d68:	08001ddf 	.word	0x08001ddf
 8001d6c:	08001ddf 	.word	0x08001ddf
 8001d70:	08001ddf 	.word	0x08001ddf
 8001d74:	08001d8d 	.word	0x08001d8d
 8001d78:	08001da1 	.word	0x08001da1
 8001d7c:	4a79      	ldr	r2, [pc, #484]	@ (8001f64 <HAL_GPIO_Init+0x2b4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d82:	e02c      	b.n	8001dde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	623b      	str	r3, [r7, #32]
          break;
 8001d8a:	e029      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	3304      	adds	r3, #4
 8001d92:	623b      	str	r3, [r7, #32]
          break;
 8001d94:	e024      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	3308      	adds	r3, #8
 8001d9c:	623b      	str	r3, [r7, #32]
          break;
 8001d9e:	e01f      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	330c      	adds	r3, #12
 8001da6:	623b      	str	r3, [r7, #32]
          break;
 8001da8:	e01a      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db2:	2304      	movs	r3, #4
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e013      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	611a      	str	r2, [r3, #16]
          break;
 8001dca:	e009      	b.n	8001de0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	615a      	str	r2, [r3, #20]
          break;
 8001dd6:	e003      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
          break;
 8001ddc:	e000      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          break;
 8001dde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2bff      	cmp	r3, #255	@ 0xff
 8001de4:	d801      	bhi.n	8001dea <HAL_GPIO_Init+0x13a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	e001      	b.n	8001dee <HAL_GPIO_Init+0x13e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2bff      	cmp	r3, #255	@ 0xff
 8001df4:	d802      	bhi.n	8001dfc <HAL_GPIO_Init+0x14c>
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	e002      	b.n	8001e02 <HAL_GPIO_Init+0x152>
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	3b08      	subs	r3, #8
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	210f      	movs	r1, #15
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	6a39      	ldr	r1, [r7, #32]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80b1 	beq.w	8001f92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e30:	4b4d      	ldr	r3, [pc, #308]	@ (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a4c      	ldr	r2, [pc, #304]	@ (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e48:	4a48      	ldr	r2, [pc, #288]	@ (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a40      	ldr	r2, [pc, #256]	@ (8001f70 <HAL_GPIO_Init+0x2c0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <HAL_GPIO_Init+0x1ec>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3f      	ldr	r2, [pc, #252]	@ (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00d      	beq.n	8001e98 <HAL_GPIO_Init+0x1e8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f78 <HAL_GPIO_Init+0x2c8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <HAL_GPIO_Init+0x1e4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3d      	ldr	r2, [pc, #244]	@ (8001f7c <HAL_GPIO_Init+0x2cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_GPIO_Init+0x1e0>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e006      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e90:	2304      	movs	r3, #4
 8001e92:	e004      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e002      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ea0:	f002 0203 	and.w	r2, r2, #3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4093      	lsls	r3, r2
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eae:	492f      	ldr	r1, [pc, #188]	@ (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	492c      	ldr	r1, [pc, #176]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	4928      	ldr	r1, [pc, #160]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ef0:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	4922      	ldr	r1, [pc, #136]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001efe:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	491e      	ldr	r1, [pc, #120]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4918      	ldr	r1, [pc, #96]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4914      	ldr	r1, [pc, #80]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d021      	beq.n	8001f84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f40:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	490e      	ldr	r1, [pc, #56]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e021      	b.n	8001f92 <HAL_GPIO_Init+0x2e2>
 8001f4e:	bf00      	nop
 8001f50:	10320000 	.word	0x10320000
 8001f54:	10310000 	.word	0x10310000
 8001f58:	10220000 	.word	0x10220000
 8001f5c:	10210000 	.word	0x10210000
 8001f60:	10120000 	.word	0x10120000
 8001f64:	10110000 	.word	0x10110000
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40010800 	.word	0x40010800
 8001f74:	40010c00 	.word	0x40010c00
 8001f78:	40011000 	.word	0x40011000
 8001f7c:	40011400 	.word	0x40011400
 8001f80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	4909      	ldr	r1, [pc, #36]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	3301      	adds	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f47f ae8e 	bne.w	8001cc4 <HAL_GPIO_Init+0x14>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	372c      	adds	r7, #44	@ 0x2c
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc8:	787b      	ldrb	r3, [r7, #1]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fd4:	e003      	b.n	8001fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	041a      	lsls	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	041a      	lsls	r2, r3, #16
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43d9      	mvns	r1, r3
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	400b      	ands	r3, r1
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	611a      	str	r2, [r3, #16]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0e8      	b.n	80021fe <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f006 ff5f 	bl	8008f04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2203      	movs	r2, #3
 800204a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f003 f87a 	bl	8005152 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3304      	adds	r3, #4
 8002066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002068:	f003 f850 	bl	800510c <USB_CoreInit>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0bf      	b.n	80021fe <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f003 f87e 	bl	8005186 <USB_SetCurrentMode>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b0      	b.n	80021fe <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e03e      	b.n	8002120 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	440b      	add	r3, r1
 80020b0:	3311      	adds	r3, #17
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	3310      	adds	r3, #16
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	3313      	adds	r3, #19
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	3320      	adds	r3, #32
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	3324      	adds	r3, #36	@ 0x24
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	3301      	adds	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	791b      	ldrb	r3, [r3, #4]
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	429a      	cmp	r2, r3
 8002128:	d3bb      	bcc.n	80020a2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
 800212e:	e044      	b.n	80021ba <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	3301      	adds	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	791b      	ldrb	r3, [r3, #4]
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3b5      	bcc.n	8002130 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ce:	f002 ffe6 	bl	800519e <USB_DevInit>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e00c      	b.n	80021fe <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f005 fa65 	bl	80076c6 <USB_DevDisconnect>

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_PCD_Start+0x16>
 8002218:	2302      	movs	r3, #2
 800221a:	e016      	b.n	800224a <HAL_PCD_Start+0x44>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f002 ff7c 	bl	8005126 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800222e:	2101      	movs	r1, #1
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f007 f8b4 	bl	800939e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f005 fa39 	bl	80076b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b088      	sub	sp, #32
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f005 fa3b 	bl	80076da <USB_ReadInterrupts>
 8002264:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fb03 	bl	800287c <PCD_EP_ISR_Handler>

    return;
 8002276:	e119      	b.n	80024ac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227e:	2b00      	cmp	r3, #0
 8002280:	d013      	beq.n	80022aa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002294:	b292      	uxth	r2, r2
 8002296:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f006 fead 	bl	8008ffa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022a0:	2100      	movs	r1, #0
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f905 	bl	80024b2 <HAL_PCD_SetAddress>

    return;
 80022a8:	e100      	b.n	80024ac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00c      	beq.n	80022ce <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022bc:	b29a      	uxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022c6:	b292      	uxth	r2, r2
 80022c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80022cc:	e0ee      	b.n	80024ac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00c      	beq.n	80022f2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022ea:	b292      	uxth	r2, r2
 80022ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80022f0:	e0dc      	b.n	80024ac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d027      	beq.n	800234c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002304:	b29a      	uxth	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0204 	bic.w	r2, r2, #4
 800230e:	b292      	uxth	r2, r2
 8002310:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800231c:	b29a      	uxth	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0208 	bic.w	r2, r2, #8
 8002326:	b292      	uxth	r2, r2
 8002328:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f006 fe9d 	bl	800906c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002344:	b292      	uxth	r2, r2
 8002346:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800234a:	e0af      	b.n	80024ac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8083 	beq.w	800245e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	77fb      	strb	r3, [r7, #31]
 800235c:	e010      	b.n	8002380 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	7ffb      	ldrb	r3, [r7, #31]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	441a      	add	r2, r3
 800236a:	7ffb      	ldrb	r3, [r7, #31]
 800236c:	8812      	ldrh	r2, [r2, #0]
 800236e:	b292      	uxth	r2, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	3320      	adds	r3, #32
 8002374:	443b      	add	r3, r7
 8002376:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800237a:	7ffb      	ldrb	r3, [r7, #31]
 800237c:	3301      	adds	r3, #1
 800237e:	77fb      	strb	r3, [r7, #31]
 8002380:	7ffb      	ldrb	r3, [r7, #31]
 8002382:	2b07      	cmp	r3, #7
 8002384:	d9eb      	bls.n	800235e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800238e:	b29a      	uxth	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	b292      	uxth	r2, r2
 800239a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	b292      	uxth	r2, r2
 80023b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80023b6:	bf00      	nop
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f6      	beq.n	80023b8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023dc:	b292      	uxth	r2, r2
 80023de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	77fb      	strb	r3, [r7, #31]
 80023e6:	e00f      	b.n	8002408 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80023e8:	7ffb      	ldrb	r3, [r7, #31]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	4611      	mov	r1, r2
 80023f0:	7ffa      	ldrb	r2, [r7, #31]
 80023f2:	0092      	lsls	r2, r2, #2
 80023f4:	440a      	add	r2, r1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	3320      	adds	r3, #32
 80023fa:	443b      	add	r3, r7
 80023fc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002400:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002402:	7ffb      	ldrb	r3, [r7, #31]
 8002404:	3301      	adds	r3, #1
 8002406:	77fb      	strb	r3, [r7, #31]
 8002408:	7ffb      	ldrb	r3, [r7, #31]
 800240a:	2b07      	cmp	r3, #7
 800240c:	d9ec      	bls.n	80023e8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002416:	b29a      	uxth	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0208 	orr.w	r2, r2, #8
 8002420:	b292      	uxth	r2, r2
 8002422:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800242e:	b29a      	uxth	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002438:	b292      	uxth	r2, r2
 800243a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0204 	orr.w	r2, r2, #4
 8002450:	b292      	uxth	r2, r2
 8002452:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f006 fdee 	bl	8009038 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800245c:	e026      	b.n	80024ac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00f      	beq.n	8002488 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800247a:	b292      	uxth	r2, r2
 800247c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f006 fdac 	bl	8008fde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002486:	e011      	b.n	80024ac <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800249a:	b29a      	uxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024a4:	b292      	uxth	r2, r2
 80024a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024aa:	bf00      	nop
  }
}
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	460b      	mov	r3, r1
 80024bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_PCD_SetAddress+0x1a>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e012      	b.n	80024f2 <HAL_PCD_SetAddress+0x40>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f005 f8d2 	bl	800768c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	4608      	mov	r0, r1
 8002504:	4611      	mov	r1, r2
 8002506:	461a      	mov	r2, r3
 8002508:	4603      	mov	r3, r0
 800250a:	70fb      	strb	r3, [r7, #3]
 800250c:	460b      	mov	r3, r1
 800250e:	803b      	strh	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800251c:	2b00      	cmp	r3, #0
 800251e:	da0e      	bge.n	800253e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	f003 0207 	and.w	r2, r3, #7
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	3310      	adds	r3, #16
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	705a      	strb	r2, [r3, #1]
 800253c:	e00e      	b.n	800255c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	f003 0207 	and.w	r2, r3, #7
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002568:	883a      	ldrh	r2, [r7, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	78ba      	ldrb	r2, [r7, #2]
 8002572:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002574:	78bb      	ldrb	r3, [r7, #2]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d102      	bne.n	8002580 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_PCD_EP_Open+0x94>
 800258a:	2302      	movs	r3, #2
 800258c:	e00e      	b.n	80025ac <HAL_PCD_EP_Open+0xb2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	4618      	mov	r0, r3
 800259e:	f002 fe1b 	bl	80051d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80025aa:	7afb      	ldrb	r3, [r7, #11]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da0e      	bge.n	80025e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 0207 	and.w	r2, r3, #7
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	3310      	adds	r3, #16
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	705a      	strb	r2, [r3, #1]
 80025e4:	e00e      	b.n	8002604 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	f003 0207 	and.w	r2, r3, #7
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	b2da      	uxtb	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_PCD_EP_Close+0x6a>
 800261a:	2302      	movs	r3, #2
 800261c:	e00e      	b.n	800263c <HAL_PCD_EP_Close+0x88>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68f9      	ldr	r1, [r7, #12]
 800262c:	4618      	mov	r0, r3
 800262e:	f003 f993 	bl	8005958 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	460b      	mov	r3, r1
 8002652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	f003 0207 	and.w	r2, r3, #7
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2200      	movs	r2, #0
 8002682:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	b2da      	uxtb	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6979      	ldr	r1, [r7, #20]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fb4a 	bl	8005d30 <USB_EPStartXfer>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	460b      	mov	r3, r1
 80026b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	f003 0207 	and.w	r2, r3, #7
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	3310      	adds	r3, #16
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2200      	movs	r2, #0
 80026ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2201      	movs	r2, #1
 80026f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f2:	7afb      	ldrb	r3, [r7, #11]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6979      	ldr	r1, [r7, #20]
 8002704:	4618      	mov	r0, r3
 8002706:	f003 fb13 	bl	8005d30 <USB_EPStartXfer>

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	7912      	ldrb	r2, [r2, #4]
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e04c      	b.n	80027cc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002736:	2b00      	cmp	r3, #0
 8002738:	da0e      	bge.n	8002758 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	f003 0207 	and.w	r2, r3, #7
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	3310      	adds	r3, #16
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	705a      	strb	r2, [r3, #1]
 8002756:	e00c      	b.n	8002772 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	b2da      	uxtb	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_PCD_EP_SetStall+0x7e>
 800278e:	2302      	movs	r3, #2
 8002790:	e01c      	b.n	80027cc <HAL_PCD_EP_SetStall+0xb8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68f9      	ldr	r1, [r7, #12]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f004 fe76 	bl	8007492 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d108      	bne.n	80027c2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f004 ff9b 	bl	80076f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	7912      	ldrb	r2, [r2, #4]
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e040      	b.n	8002874 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da0e      	bge.n	8002818 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 0207 	and.w	r2, r3, #7
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	3310      	adds	r3, #16
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	705a      	strb	r2, [r3, #1]
 8002816:	e00e      	b.n	8002836 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	f003 0207 	and.w	r2, r3, #7
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_PCD_EP_ClrStall+0x82>
 8002852:	2302      	movs	r3, #2
 8002854:	e00e      	b.n	8002874 <HAL_PCD_EP_ClrStall+0xa0>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68f9      	ldr	r1, [r7, #12]
 8002864:	4618      	mov	r0, r3
 8002866:	f004 fe64 	bl	8007532 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b096      	sub	sp, #88	@ 0x58
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002884:	e3bb      	b.n	8002ffe <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800288e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002892:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80028a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f040 8175 	bne.w	8002b94 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80028aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d14e      	bne.n	8002954 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80028c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c6:	81fb      	strh	r3, [r7, #14]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	89fb      	ldrh	r3, [r7, #14]
 80028ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3310      	adds	r3, #16
 80028de:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	3302      	adds	r3, #2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800290a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800290c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	441a      	add	r2, r3
 8002916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002918:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800291a:	2100      	movs	r1, #0
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f006 fb44 	bl	8008faa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7b5b      	ldrb	r3, [r3, #13]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8368 	beq.w	8002ffe <PCD_EP_ISR_Handler+0x782>
 800292e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 8363 	bne.w	8002ffe <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7b5b      	ldrb	r3, [r3, #13]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002942:	b2da      	uxtb	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	735a      	strb	r2, [r3, #13]
 8002952:	e354      	b.n	8002ffe <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800295a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002966:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800296a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800296e:	2b00      	cmp	r3, #0
 8002970:	d034      	beq.n	80029dc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	3306      	adds	r3, #6
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800299a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80029a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80029ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f004 fef1 	bl	8007798 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80029c2:	4013      	ands	r3, r2
 80029c4:	823b      	strh	r3, [r7, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	8a3a      	ldrh	r2, [r7, #16]
 80029cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029d0:	b292      	uxth	r2, r2
 80029d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f006 fabb 	bl	8008f50 <HAL_PCD_SetupStageCallback>
 80029da:	e310      	b.n	8002ffe <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f280 830c 	bge.w	8002ffe <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80029f2:	4013      	ands	r3, r2
 80029f4:	83fb      	strh	r3, [r7, #30]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	8bfa      	ldrh	r2, [r7, #30]
 80029fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a00:	b292      	uxth	r2, r2
 8002a02:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	3306      	adds	r3, #6
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d019      	beq.n	8002a6c <PCD_EP_ISR_Handler+0x1f0>
 8002a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a46:	6959      	ldr	r1, [r3, #20]
 8002a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a4a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a4e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f004 fea1 	bl	8007798 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	441a      	add	r2, r3
 8002a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a62:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a64:	2100      	movs	r1, #0
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f006 fa84 	bl	8008f74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002a76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 82bd 	bne.w	8002ffe <PCD_EP_ISR_Handler+0x782>
 8002a84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a88:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002a8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a90:	f000 82b5 	beq.w	8002ffe <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8002aca:	d91d      	bls.n	8002b08 <PCD_EP_ISR_Handler+0x28c>
 8002acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <PCD_EP_ISR_Handler+0x26a>
 8002ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	029b      	lsls	r3, r3, #10
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4313      	orrs	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	801a      	strh	r2, [r3, #0]
 8002b06:	e026      	b.n	8002b56 <PCD_EP_ISR_Handler+0x2da>
 8002b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <PCD_EP_ISR_Handler+0x2aa>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	801a      	strh	r2, [r3, #0]
 8002b24:	e017      	b.n	8002b56 <PCD_EP_ISR_Handler+0x2da>
 8002b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <PCD_EP_ISR_Handler+0x2c4>
 8002b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	029b      	lsls	r3, r3, #10
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b66:	827b      	strh	r3, [r7, #18]
 8002b68:	8a7b      	ldrh	r3, [r7, #18]
 8002b6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002b6e:	827b      	strh	r3, [r7, #18]
 8002b70:	8a7b      	ldrh	r3, [r7, #18]
 8002b72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002b76:	827b      	strh	r3, [r7, #18]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	8a7b      	ldrh	r3, [r7, #18]
 8002b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	8013      	strh	r3, [r2, #0]
 8002b92:	e234      	b.n	8002ffe <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ba8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f280 80fc 	bge.w	8002daa <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002bc8:	4013      	ands	r3, r2
 8002bca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002be0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002be4:	b292      	uxth	r2, r2
 8002be6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002be8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c00:	7b1b      	ldrb	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d125      	bne.n	8002c52 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3306      	adds	r3, #6
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002c32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8092 	beq.w	8002d60 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c42:	6959      	ldr	r1, [r3, #20]
 8002c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c46:	88da      	ldrh	r2, [r3, #6]
 8002c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c4c:	f004 fda4 	bl	8007798 <USB_ReadPMA>
 8002c50:	e086      	b.n	8002d60 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c54:	78db      	ldrb	r3, [r3, #3]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d10a      	bne.n	8002c70 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f9d9 	bl	800301a <HAL_PCD_EP_DB_Receive>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002c6e:	e077      	b.n	8002d60 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c8a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	441a      	add	r2, r3
 8002c9c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d024      	beq.n	8002d18 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002cfa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d02e      	beq.n	8002d60 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	6959      	ldr	r1, [r3, #20]
 8002d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0c:	891a      	ldrh	r2, [r3, #8]
 8002d0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d12:	f004 fd41 	bl	8007798 <USB_ReadPMA>
 8002d16:	e023      	b.n	8002d60 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3306      	adds	r3, #6
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d40:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002d44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d009      	beq.n	8002d60 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d52:	6959      	ldr	r1, [r3, #20]
 8002d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d56:	895a      	ldrh	r2, [r3, #10]
 8002d58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d5c:	f004 fd1c 	bl	8007798 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d68:	441a      	add	r2, r3
 8002d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d76:	441a      	add	r2, r3
 8002d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <PCD_EP_ISR_Handler+0x514>
 8002d84:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d206      	bcs.n	8002d9e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f006 f8ec 	bl	8008f74 <HAL_PCD_DataOutStageCallback>
 8002d9c:	e005      	b.n	8002daa <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 ffc3 	bl	8005d30 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002daa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8123 	beq.w	8002ffe <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002db8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	3310      	adds	r3, #16
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	441a      	add	r2, r3
 8002df8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0a:	78db      	ldrb	r3, [r3, #3]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	f040 80a2 	bne.w	8002f56 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1a:	7b1b      	ldrb	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8093 	beq.w	8002f48 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d046      	beq.n	8002ebc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d126      	bne.n	8002e84 <PCD_EP_ISR_Handler+0x608>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	4413      	add	r3, r2
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	011a      	lsls	r2, r3, #4
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	4413      	add	r3, r2
 8002e58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	801a      	strh	r2, [r3, #0]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	801a      	strh	r2, [r3, #0]
 8002e82:	e061      	b.n	8002f48 <PCD_EP_ISR_Handler+0x6cc>
 8002e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e86:	785b      	ldrb	r3, [r3, #1]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d15d      	bne.n	8002f48 <PCD_EP_ISR_Handler+0x6cc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea0:	4413      	add	r3, r2
 8002ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	011a      	lsls	r2, r3, #4
 8002eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eac:	4413      	add	r3, r2
 8002eae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	801a      	strh	r2, [r3, #0]
 8002eba:	e045      	b.n	8002f48 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec4:	785b      	ldrb	r3, [r3, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d126      	bne.n	8002f18 <PCD_EP_ISR_Handler+0x69c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ede:	4413      	add	r3, r2
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	011a      	lsls	r2, r3, #4
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eea:	4413      	add	r3, r2
 8002eec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	e017      	b.n	8002f48 <PCD_EP_ISR_Handler+0x6cc>
 8002f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d113      	bne.n	8002f48 <PCD_EP_ISR_Handler+0x6cc>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f2e:	4413      	add	r3, r2
 8002f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	011a      	lsls	r2, r3, #4
 8002f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	2200      	movs	r2, #0
 8002f46:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f006 f82b 	bl	8008faa <HAL_PCD_DataInStageCallback>
 8002f54:	e053      	b.n	8002ffe <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002f56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d146      	bne.n	8002ff0 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4413      	add	r3, r2
 8002f76:	3302      	adds	r3, #2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d907      	bls.n	8002faa <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002fa2:	1ad2      	subs	r2, r2, r3
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa6:	619a      	str	r2, [r3, #24]
 8002fa8:	e002      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d106      	bne.n	8002fc6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f005 fff3 	bl	8008faa <HAL_PCD_DataInStageCallback>
 8002fc4:	e01b      	b.n	8002ffe <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002fce:	441a      	add	r2, r3
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002fdc:	441a      	add	r2, r3
 8002fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f002 fea1 	bl	8005d30 <USB_EPStartXfer>
 8002fee:	e006      	b.n	8002ffe <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ff0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f91b 	bl	8003234 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003006:	b29b      	uxth	r3, r3
 8003008:	b21b      	sxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	f6ff ac3b 	blt.w	8002886 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3758      	adds	r7, #88	@ 0x58
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b088      	sub	sp, #32
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	4613      	mov	r3, r2
 8003026:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d07e      	beq.n	8003130 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800303a:	b29b      	uxth	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	3302      	adds	r3, #2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800305a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	8b7b      	ldrh	r3, [r7, #26]
 8003062:	429a      	cmp	r2, r3
 8003064:	d306      	bcc.n	8003074 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	8b7b      	ldrh	r3, [r7, #26]
 800306c:	1ad2      	subs	r2, r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	619a      	str	r2, [r3, #24]
 8003072:	e002      	b.n	800307a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d123      	bne.n	80030ca <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800309c:	833b      	strh	r3, [r7, #24]
 800309e:	8b3b      	ldrh	r3, [r7, #24]
 80030a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030a4:	833b      	strh	r3, [r7, #24]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	441a      	add	r2, r3
 80030b4:	8b3b      	ldrh	r3, [r7, #24]
 80030b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01f      	beq.n	8003114 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ee:	82fb      	strh	r3, [r7, #22]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	441a      	add	r2, r3
 80030fe:	8afb      	ldrh	r3, [r7, #22]
 8003100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800310c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003110:	b29b      	uxth	r3, r3
 8003112:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003114:	8b7b      	ldrh	r3, [r7, #26]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8087 	beq.w	800322a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	6959      	ldr	r1, [r3, #20]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	891a      	ldrh	r2, [r3, #8]
 8003128:	8b7b      	ldrh	r3, [r7, #26]
 800312a:	f004 fb35 	bl	8007798 <USB_ReadPMA>
 800312e:	e07c      	b.n	800322a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	3306      	adds	r3, #6
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003158:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	8b7b      	ldrh	r3, [r7, #26]
 8003160:	429a      	cmp	r2, r3
 8003162:	d306      	bcc.n	8003172 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	8b7b      	ldrh	r3, [r7, #26]
 800316a:	1ad2      	subs	r2, r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	619a      	str	r2, [r3, #24]
 8003170:	e002      	b.n	8003178 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2200      	movs	r2, #0
 8003176:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d123      	bne.n	80031c8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800319a:	83fb      	strh	r3, [r7, #30]
 800319c:	8bfb      	ldrh	r3, [r7, #30]
 800319e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80031a2:	83fb      	strh	r3, [r7, #30]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	8bfb      	ldrh	r3, [r7, #30]
 80031b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11f      	bne.n	8003212 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ec:	83bb      	strh	r3, [r7, #28]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	441a      	add	r2, r3
 80031fc:	8bbb      	ldrh	r3, [r7, #28]
 80031fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800320a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800320e:	b29b      	uxth	r3, r3
 8003210:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003212:	8b7b      	ldrh	r3, [r7, #26]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	6959      	ldr	r1, [r3, #20]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	895a      	ldrh	r2, [r3, #10]
 8003224:	8b7b      	ldrh	r3, [r7, #26]
 8003226:	f004 fab7 	bl	8007798 <USB_ReadPMA>
    }
  }

  return count;
 800322a:	8b7b      	ldrh	r3, [r7, #26]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b0a4      	sub	sp, #144	@ 0x90
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 81dd 	beq.w	8003608 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003256:	b29b      	uxth	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	3302      	adds	r3, #2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003276:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003282:	429a      	cmp	r2, r3
 8003284:	d907      	bls.n	8003296 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800328e:	1ad2      	subs	r2, r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	619a      	str	r2, [r3, #24]
 8003294:	e002      	b.n	800329c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f040 80b9 	bne.w	8003418 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	785b      	ldrb	r3, [r3, #1]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d126      	bne.n	80032fc <HAL_PCD_EP_DB_Transmit+0xc8>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032bc:	b29b      	uxth	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c2:	4413      	add	r3, r2
 80032c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	011a      	lsls	r2, r3, #4
 80032cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ce:	4413      	add	r3, r2
 80032d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e01a      	b.n	8003332 <HAL_PCD_EP_DB_Transmit+0xfe>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d116      	bne.n	8003332 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	637b      	str	r3, [r7, #52]	@ 0x34
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003318:	4413      	add	r3, r2
 800331a:	637b      	str	r3, [r7, #52]	@ 0x34
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	011a      	lsls	r2, r3, #4
 8003322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003324:	4413      	add	r3, r2
 8003326:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800332a:	633b      	str	r3, [r7, #48]	@ 0x30
 800332c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332e:	2200      	movs	r2, #0
 8003330:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d126      	bne.n	800338e <HAL_PCD_EP_DB_Transmit+0x15a>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800334e:	b29b      	uxth	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	011a      	lsls	r2, r3, #4
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003372:	b29a      	uxth	r2, r3
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003386:	b29a      	uxth	r2, r3
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	801a      	strh	r2, [r3, #0]
 800338c:	e017      	b.n	80033be <HAL_PCD_EP_DB_Transmit+0x18a>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d113      	bne.n	80033be <HAL_PCD_EP_DB_Transmit+0x18a>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800339e:	b29b      	uxth	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	4413      	add	r3, r2
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	011a      	lsls	r2, r3, #4
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	4413      	add	r3, r2
 80033b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	2200      	movs	r2, #0
 80033bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	4619      	mov	r1, r3
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f005 fdf0 	bl	8008faa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 82fc 	beq.w	80039ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033f0:	82fb      	strh	r3, [r7, #22]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	441a      	add	r2, r3
 8003400:	8afb      	ldrh	r3, [r7, #22]
 8003402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800340a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800340e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003412:	b29b      	uxth	r3, r3
 8003414:	8013      	strh	r3, [r2, #0]
 8003416:	e2da      	b.n	80039ce <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d021      	beq.n	8003466 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800345a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800345e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003462:	b29b      	uxth	r3, r3
 8003464:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800346c:	2b01      	cmp	r3, #1
 800346e:	f040 82ae 	bne.w	80039ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800347a:	441a      	add	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003488:	441a      	add	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	429a      	cmp	r2, r3
 8003498:	d30b      	bcc.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6a1a      	ldr	r2, [r3, #32]
 80034a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	621a      	str	r2, [r3, #32]
 80034b0:	e017      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80034ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80034ca:	e00a      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2200      	movs	r2, #0
 80034e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d165      	bne.n	80035b6 <HAL_PCD_EP_DB_Transmit+0x382>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fe:	4413      	add	r3, r2
 8003500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	011a      	lsls	r2, r3, #4
 8003508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800350a:	4413      	add	r3, r2
 800350c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003510:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351c:	b29a      	uxth	r2, r3
 800351e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003520:	801a      	strh	r2, [r3, #0]
 8003522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003526:	2b3e      	cmp	r3, #62	@ 0x3e
 8003528:	d91d      	bls.n	8003566 <HAL_PCD_EP_DB_Transmit+0x332>
 800352a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <HAL_PCD_EP_DB_Transmit+0x310>
 800353e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003540:	3b01      	subs	r3, #1
 8003542:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b29a      	uxth	r2, r3
 800354a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800354c:	b29b      	uxth	r3, r3
 800354e:	029b      	lsls	r3, r3, #10
 8003550:	b29b      	uxth	r3, r3
 8003552:	4313      	orrs	r3, r2
 8003554:	b29b      	uxth	r3, r3
 8003556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800355a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800355e:	b29a      	uxth	r2, r3
 8003560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003562:	801a      	strh	r2, [r3, #0]
 8003564:	e044      	b.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <HAL_PCD_EP_DB_Transmit+0x350>
 800356e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357c:	b29a      	uxth	r2, r3
 800357e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003580:	801a      	strh	r2, [r3, #0]
 8003582:	e035      	b.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003584:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800358c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800359a:	3301      	adds	r3, #1
 800359c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	029b      	lsls	r3, r3, #10
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	4313      	orrs	r3, r2
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	e01c      	b.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	785b      	ldrb	r3, [r3, #1]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d118      	bne.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d2:	4413      	add	r3, r2
 80035d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	011a      	lsls	r2, r3, #4
 80035dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035de:	4413      	add	r3, r2
 80035e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80035e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6959      	ldr	r1, [r3, #20]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	891a      	ldrh	r2, [r3, #8]
 80035fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003600:	b29b      	uxth	r3, r3
 8003602:	f004 f884 	bl	800770e <USB_WritePMA>
 8003606:	e1e2      	b.n	80039ce <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003610:	b29b      	uxth	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	3306      	adds	r3, #6
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003630:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800363c:	429a      	cmp	r2, r3
 800363e:	d307      	bcc.n	8003650 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003648:	1ad2      	subs	r2, r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	619a      	str	r2, [r3, #24]
 800364e:	e002      	b.n	8003656 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2200      	movs	r2, #0
 8003654:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 80c0 	bne.w	80037e0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d126      	bne.n	80036b6 <HAL_PCD_EP_DB_Transmit+0x482>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003676:	b29b      	uxth	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800367c:	4413      	add	r3, r2
 800367e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	011a      	lsls	r2, r3, #4
 8003686:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003688:	4413      	add	r3, r2
 800368a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800368e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003690:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800369a:	b29a      	uxth	r2, r3
 800369c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800369e:	801a      	strh	r2, [r3, #0]
 80036a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036b2:	801a      	strh	r2, [r3, #0]
 80036b4:	e01a      	b.n	80036ec <HAL_PCD_EP_DB_Transmit+0x4b8>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d116      	bne.n	80036ec <HAL_PCD_EP_DB_Transmit+0x4b8>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036d2:	4413      	add	r3, r2
 80036d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	011a      	lsls	r2, r3, #4
 80036dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036de:	4413      	add	r3, r2
 80036e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80036e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036e8:	2200      	movs	r2, #0
 80036ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d12b      	bne.n	8003752 <HAL_PCD_EP_DB_Transmit+0x51e>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003708:	b29b      	uxth	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800370e:	4413      	add	r3, r2
 8003710:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	011a      	lsls	r2, r3, #4
 8003718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800371a:	4413      	add	r3, r2
 800371c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003720:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003724:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003730:	b29a      	uxth	r2, r3
 8003732:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003736:	801a      	strh	r2, [r3, #0]
 8003738:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003748:	b29a      	uxth	r2, r3
 800374a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800374e:	801a      	strh	r2, [r3, #0]
 8003750:	e017      	b.n	8003782 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	785b      	ldrb	r3, [r3, #1]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d113      	bne.n	8003782 <HAL_PCD_EP_DB_Transmit+0x54e>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003762:	b29b      	uxth	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003768:	4413      	add	r3, r2
 800376a:	677b      	str	r3, [r7, #116]	@ 0x74
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	011a      	lsls	r2, r3, #4
 8003772:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003774:	4413      	add	r3, r2
 8003776:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800377a:	673b      	str	r3, [r7, #112]	@ 0x70
 800377c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800377e:	2200      	movs	r2, #0
 8003780:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	4619      	mov	r1, r3
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f005 fc0e 	bl	8008faa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003794:	2b00      	cmp	r3, #0
 8003796:	f040 811a 	bne.w	80039ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80037ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037da:	b29b      	uxth	r3, r3
 80037dc:	8013      	strh	r3, [r2, #0]
 80037de:	e0f6      	b.n	80039ce <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d121      	bne.n	800382e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003804:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800381a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800381e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003822:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800382a:	b29b      	uxth	r3, r3
 800382c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 80ca 	bne.w	80039ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003842:	441a      	add	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003850:	441a      	add	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6a1a      	ldr	r2, [r3, #32]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	429a      	cmp	r2, r3
 8003860:	d30b      	bcc.n	800387a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	6a1a      	ldr	r2, [r3, #32]
 800386e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003872:	1ad2      	subs	r2, r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	621a      	str	r2, [r3, #32]
 8003878:	e017      	b.n	80038aa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d108      	bne.n	8003894 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003882:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003886:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003892:	e00a      	b.n	80038aa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2200      	movs	r2, #0
 80038a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	785b      	ldrb	r3, [r3, #1]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d165      	bne.n	8003984 <HAL_PCD_EP_DB_Transmit+0x750>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038cc:	4413      	add	r3, r2
 80038ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	011a      	lsls	r2, r3, #4
 80038d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038d8:	4413      	add	r3, r2
 80038da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038ee:	801a      	strh	r2, [r3, #0]
 80038f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80038f6:	d91d      	bls.n	8003934 <HAL_PCD_EP_DB_Transmit+0x700>
 80038f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003900:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <HAL_PCD_EP_DB_Transmit+0x6de>
 800390c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800390e:	3b01      	subs	r3, #1
 8003910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003912:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29a      	uxth	r2, r3
 8003918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800391a:	b29b      	uxth	r3, r3
 800391c:	029b      	lsls	r3, r3, #10
 800391e:	b29b      	uxth	r3, r3
 8003920:	4313      	orrs	r3, r2
 8003922:	b29b      	uxth	r3, r3
 8003924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392c:	b29a      	uxth	r2, r3
 800392e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003930:	801a      	strh	r2, [r3, #0]
 8003932:	e041      	b.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <HAL_PCD_EP_DB_Transmit+0x71e>
 800393c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b29b      	uxth	r3, r3
 8003942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800394a:	b29a      	uxth	r2, r3
 800394c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800394e:	801a      	strh	r2, [r3, #0]
 8003950:	e032      	b.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800395a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_PCD_EP_DB_Transmit+0x738>
 8003966:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003968:	3301      	adds	r3, #1
 800396a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800396c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29a      	uxth	r2, r3
 8003972:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003974:	b29b      	uxth	r3, r3
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	b29b      	uxth	r3, r3
 800397a:	4313      	orrs	r3, r2
 800397c:	b29a      	uxth	r2, r3
 800397e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e019      	b.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	785b      	ldrb	r3, [r3, #1]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d115      	bne.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x784>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003994:	b29b      	uxth	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399a:	4413      	add	r3, r2
 800399c:	657b      	str	r3, [r7, #84]	@ 0x54
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	011a      	lsls	r2, r3, #4
 80039a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a6:	4413      	add	r3, r2
 80039a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80039ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6959      	ldr	r1, [r3, #20]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	895a      	ldrh	r2, [r3, #10]
 80039c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f003 fea0 	bl	800770e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039e8:	82bb      	strh	r3, [r7, #20]
 80039ea:	8abb      	ldrh	r3, [r7, #20]
 80039ec:	f083 0310 	eor.w	r3, r3, #16
 80039f0:	82bb      	strh	r3, [r7, #20]
 80039f2:	8abb      	ldrh	r3, [r7, #20]
 80039f4:	f083 0320 	eor.w	r3, r3, #32
 80039f8:	82bb      	strh	r3, [r7, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	8abb      	ldrh	r3, [r7, #20]
 8003a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3790      	adds	r7, #144	@ 0x90
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	817b      	strh	r3, [r7, #10]
 8003a36:	4613      	mov	r3, r2
 8003a38:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00b      	beq.n	8003a5e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a46:	897b      	ldrh	r3, [r7, #10]
 8003a48:	f003 0207 	and.w	r2, r3, #7
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	3310      	adds	r3, #16
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e009      	b.n	8003a72 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a5e:	897a      	ldrh	r2, [r7, #10]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a72:	893b      	ldrh	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d107      	bne.n	8003a88 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	80da      	strh	r2, [r3, #6]
 8003a86:	e00b      	b.n	8003aa0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e272      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 8087 	beq.w	8003bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003acc:	4b92      	ldr	r3, [pc, #584]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d00c      	beq.n	8003af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ad8:	4b8f      	ldr	r3, [pc, #572]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d112      	bne.n	8003b0a <HAL_RCC_OscConfig+0x5e>
 8003ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af0:	d10b      	bne.n	8003b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af2:	4b89      	ldr	r3, [pc, #548]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d06c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x12c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d168      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e24c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x76>
 8003b14:	4b80      	ldr	r3, [pc, #512]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a7f      	ldr	r2, [pc, #508]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	e02e      	b.n	8003b80 <HAL_RCC_OscConfig+0xd4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x98>
 8003b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a7a      	ldr	r2, [pc, #488]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4b78      	ldr	r3, [pc, #480]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a77      	ldr	r2, [pc, #476]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e01d      	b.n	8003b80 <HAL_RCC_OscConfig+0xd4>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0xbc>
 8003b4e:	4b72      	ldr	r3, [pc, #456]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a71      	ldr	r2, [pc, #452]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b6f      	ldr	r3, [pc, #444]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6e      	ldr	r2, [pc, #440]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e00b      	b.n	8003b80 <HAL_RCC_OscConfig+0xd4>
 8003b68:	4b6b      	ldr	r3, [pc, #428]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6a      	ldr	r2, [pc, #424]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b68      	ldr	r3, [pc, #416]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a67      	ldr	r2, [pc, #412]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fd fea4 	bl	80018d4 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fd fea0 	bl	80018d4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	@ 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e200      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0xe4>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fd fe90 	bl	80018d4 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fd fe8c 	bl	80018d4 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	@ 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e1ec      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bca:	4b53      	ldr	r3, [pc, #332]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x10c>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d063      	beq.n	8003cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003be6:	4b4c      	ldr	r3, [pc, #304]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bf2:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d11c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x18c>
 8003bfe:	4b46      	ldr	r3, [pc, #280]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	4b43      	ldr	r3, [pc, #268]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_RCC_OscConfig+0x176>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e1c0      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b3d      	ldr	r3, [pc, #244]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4939      	ldr	r1, [pc, #228]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	e03a      	b.n	8003cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c40:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c46:	f7fd fe45 	bl	80018d4 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fe41 	bl	80018d4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e1a1      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	4b2d      	ldr	r3, [pc, #180]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4927      	ldr	r1, [pc, #156]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
 8003c80:	e015      	b.n	8003cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c82:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <HAL_RCC_OscConfig+0x270>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd fe24 	bl	80018d4 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c90:	f7fd fe20 	bl	80018d4 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e180      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d03a      	beq.n	8003d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d019      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc2:	4b17      	ldr	r3, [pc, #92]	@ (8003d20 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc8:	f7fd fe04 	bl	80018d4 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd0:	f7fd fe00 	bl	80018d4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e160      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f000 face 	bl	8004290 <RCC_Delay>
 8003cf4:	e01c      	b.n	8003d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfc:	f7fd fdea 	bl	80018d4 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d02:	e00f      	b.n	8003d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d04:	f7fd fde6 	bl	80018d4 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d908      	bls.n	8003d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e146      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	42420000 	.word	0x42420000
 8003d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d24:	4b92      	ldr	r3, [pc, #584]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e9      	bne.n	8003d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80a6 	beq.w	8003e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d42:	4b8b      	ldr	r3, [pc, #556]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10d      	bne.n	8003d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	4b88      	ldr	r3, [pc, #544]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4a87      	ldr	r2, [pc, #540]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	61d3      	str	r3, [r2, #28]
 8003d5a:	4b85      	ldr	r3, [pc, #532]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d66:	2301      	movs	r3, #1
 8003d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6a:	4b82      	ldr	r3, [pc, #520]	@ (8003f74 <HAL_RCC_OscConfig+0x4c8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d118      	bne.n	8003da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d76:	4b7f      	ldr	r3, [pc, #508]	@ (8003f74 <HAL_RCC_OscConfig+0x4c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f74 <HAL_RCC_OscConfig+0x4c8>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d82:	f7fd fda7 	bl	80018d4 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8a:	f7fd fda3 	bl	80018d4 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b64      	cmp	r3, #100	@ 0x64
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e103      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9c:	4b75      	ldr	r3, [pc, #468]	@ (8003f74 <HAL_RCC_OscConfig+0x4c8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x312>
 8003db0:	4b6f      	ldr	r3, [pc, #444]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6213      	str	r3, [r2, #32]
 8003dbc:	e02d      	b.n	8003e1a <HAL_RCC_OscConfig+0x36e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x334>
 8003dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	4a69      	ldr	r2, [pc, #420]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6213      	str	r3, [r2, #32]
 8003dd2:	4b67      	ldr	r3, [pc, #412]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	4a66      	ldr	r2, [pc, #408]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	6213      	str	r3, [r2, #32]
 8003dde:	e01c      	b.n	8003e1a <HAL_RCC_OscConfig+0x36e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCC_OscConfig+0x356>
 8003de8:	4b61      	ldr	r3, [pc, #388]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4a60      	ldr	r2, [pc, #384]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	f043 0304 	orr.w	r3, r3, #4
 8003df2:	6213      	str	r3, [r2, #32]
 8003df4:	4b5e      	ldr	r3, [pc, #376]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	4a5d      	ldr	r2, [pc, #372]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6213      	str	r3, [r2, #32]
 8003e00:	e00b      	b.n	8003e1a <HAL_RCC_OscConfig+0x36e>
 8003e02:	4b5b      	ldr	r3, [pc, #364]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4a5a      	ldr	r2, [pc, #360]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	6213      	str	r3, [r2, #32]
 8003e0e:	4b58      	ldr	r3, [pc, #352]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4a57      	ldr	r2, [pc, #348]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d015      	beq.n	8003e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e22:	f7fd fd57 	bl	80018d4 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fd fd53 	bl	80018d4 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e0b1      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	4b4b      	ldr	r3, [pc, #300]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ee      	beq.n	8003e2a <HAL_RCC_OscConfig+0x37e>
 8003e4c:	e014      	b.n	8003e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fd fd41 	bl	80018d4 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd fd3d 	bl	80018d4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e09b      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6c:	4b40      	ldr	r3, [pc, #256]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ee      	bne.n	8003e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d105      	bne.n	8003e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	4a3b      	ldr	r2, [pc, #236]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8087 	beq.w	8003fa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e94:	4b36      	ldr	r3, [pc, #216]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d061      	beq.n	8003f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d146      	bne.n	8003f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea8:	4b33      	ldr	r3, [pc, #204]	@ (8003f78 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eae:	f7fd fd11 	bl	80018d4 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb6:	f7fd fd0d 	bl	80018d4 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e06d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec8:	4b29      	ldr	r3, [pc, #164]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f0      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003edc:	d108      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ede:	4b24      	ldr	r3, [pc, #144]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	4921      	ldr	r1, [pc, #132]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a19      	ldr	r1, [r3, #32]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	430b      	orrs	r3, r1
 8003f02:	491b      	ldr	r1, [pc, #108]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f08:	4b1b      	ldr	r3, [pc, #108]	@ (8003f78 <HAL_RCC_OscConfig+0x4cc>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fd fce1 	bl	80018d4 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f16:	f7fd fcdd 	bl	80018d4 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e03d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f28:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x46a>
 8003f34:	e035      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <HAL_RCC_OscConfig+0x4cc>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fd fcca 	bl	80018d4 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fd fcc6 	bl	80018d4 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e026      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x498>
 8003f62:	e01e      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e019      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40007000 	.word	0x40007000
 8003f78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_RCC_OscConfig+0x500>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021000 	.word	0x40021000

08003fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0d0      	b.n	8004166 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8004170 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d910      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b67      	ldr	r3, [pc, #412]	@ (8004170 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 0207 	bic.w	r2, r3, #7
 8003fda:	4965      	ldr	r1, [pc, #404]	@ (8004170 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b63      	ldr	r3, [pc, #396]	@ (8004170 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b8      	b.n	8004166 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800400c:	4b59      	ldr	r3, [pc, #356]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4a58      	ldr	r2, [pc, #352]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004016:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004024:	4b53      	ldr	r3, [pc, #332]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a52      	ldr	r2, [pc, #328]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800402e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b50      	ldr	r3, [pc, #320]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	494d      	ldr	r1, [pc, #308]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d040      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b47      	ldr	r3, [pc, #284]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d115      	bne.n	800408e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e07f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406e:	4b41      	ldr	r3, [pc, #260]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e073      	b.n	8004166 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407e:	4b3d      	ldr	r3, [pc, #244]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e06b      	b.n	8004166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800408e:	4b39      	ldr	r3, [pc, #228]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f023 0203 	bic.w	r2, r3, #3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4936      	ldr	r1, [pc, #216]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	4313      	orrs	r3, r2
 800409e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a0:	f7fd fc18 	bl	80018d4 <HAL_GetTick>
 80040a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a6:	e00a      	b.n	80040be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a8:	f7fd fc14 	bl	80018d4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e053      	b.n	8004166 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040be:	4b2d      	ldr	r3, [pc, #180]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 020c 	and.w	r2, r3, #12
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d1eb      	bne.n	80040a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d0:	4b27      	ldr	r3, [pc, #156]	@ (8004170 <HAL_RCC_ClockConfig+0x1c0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d210      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b24      	ldr	r3, [pc, #144]	@ (8004170 <HAL_RCC_ClockConfig+0x1c0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 0207 	bic.w	r2, r3, #7
 80040e6:	4922      	ldr	r1, [pc, #136]	@ (8004170 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e032      	b.n	8004166 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b19      	ldr	r3, [pc, #100]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4916      	ldr	r1, [pc, #88]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800412a:	4b12      	ldr	r3, [pc, #72]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	490e      	ldr	r1, [pc, #56]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	4313      	orrs	r3, r2
 800413c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800413e:	f000 f821 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8004142:	4602      	mov	r2, r0
 8004144:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	490a      	ldr	r1, [pc, #40]	@ (8004178 <HAL_RCC_ClockConfig+0x1c8>)
 8004150:	5ccb      	ldrb	r3, [r1, r3]
 8004152:	fa22 f303 	lsr.w	r3, r2, r3
 8004156:	4a09      	ldr	r2, [pc, #36]	@ (800417c <HAL_RCC_ClockConfig+0x1cc>)
 8004158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800415a:	4b09      	ldr	r3, [pc, #36]	@ (8004180 <HAL_RCC_ClockConfig+0x1d0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fd fb76 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40022000 	.word	0x40022000
 8004174:	40021000 	.word	0x40021000
 8004178:	080096d0 	.word	0x080096d0
 800417c:	20000000 	.word	0x20000000
 8004180:	20000008 	.word	0x20000008

08004184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800419e:	4b1e      	ldr	r3, [pc, #120]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x94>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d002      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x30>
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d003      	beq.n	80041ba <HAL_RCC_GetSysClockFreq+0x36>
 80041b2:	e027      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041b4:	4b19      	ldr	r3, [pc, #100]	@ (800421c <HAL_RCC_GetSysClockFreq+0x98>)
 80041b6:	613b      	str	r3, [r7, #16]
      break;
 80041b8:	e027      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	0c9b      	lsrs	r3, r3, #18
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	4a17      	ldr	r2, [pc, #92]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041c4:	5cd3      	ldrb	r3, [r2, r3]
 80041c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d010      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041d2:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x94>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	0c5b      	lsrs	r3, r3, #17
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	4a11      	ldr	r2, [pc, #68]	@ (8004224 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041de:	5cd3      	ldrb	r3, [r2, r3]
 80041e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a0d      	ldr	r2, [pc, #52]	@ (800421c <HAL_RCC_GetSysClockFreq+0x98>)
 80041e6:	fb03 f202 	mul.w	r2, r3, r2
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	e004      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004228 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	613b      	str	r3, [r7, #16]
      break;
 8004202:	e002      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004204:	4b05      	ldr	r3, [pc, #20]	@ (800421c <HAL_RCC_GetSysClockFreq+0x98>)
 8004206:	613b      	str	r3, [r7, #16]
      break;
 8004208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420a:	693b      	ldr	r3, [r7, #16]
}
 800420c:	4618      	mov	r0, r3
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	007a1200 	.word	0x007a1200
 8004220:	080096e8 	.word	0x080096e8
 8004224:	080096f8 	.word	0x080096f8
 8004228:	003d0900 	.word	0x003d0900

0800422c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004230:	4b02      	ldr	r3, [pc, #8]	@ (800423c <HAL_RCC_GetHCLKFreq+0x10>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	20000000 	.word	0x20000000

08004240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004244:	f7ff fff2 	bl	800422c <HAL_RCC_GetHCLKFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4903      	ldr	r1, [pc, #12]	@ (8004264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40021000 	.word	0x40021000
 8004264:	080096e0 	.word	0x080096e0

08004268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800426c:	f7ff ffde 	bl	800422c <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	0adb      	lsrs	r3, r3, #11
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4903      	ldr	r1, [pc, #12]	@ (800428c <HAL_RCC_GetPCLK2Freq+0x24>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000
 800428c:	080096e0 	.word	0x080096e0

08004290 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004298:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <RCC_Delay+0x34>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a0a      	ldr	r2, [pc, #40]	@ (80042c8 <RCC_Delay+0x38>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	0a5b      	lsrs	r3, r3, #9
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042ac:	bf00      	nop
  }
  while (Delay --);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1e5a      	subs	r2, r3, #1
 80042b2:	60fa      	str	r2, [r7, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1f9      	bne.n	80042ac <RCC_Delay+0x1c>
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr
 80042c4:	20000000 	.word	0x20000000
 80042c8:	10624dd3 	.word	0x10624dd3

080042cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d07d      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042e8:	2300      	movs	r3, #0
 80042ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ec:	4b4f      	ldr	r3, [pc, #316]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10d      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f8:	4b4c      	ldr	r3, [pc, #304]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	4a4b      	ldr	r2, [pc, #300]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004302:	61d3      	str	r3, [r2, #28]
 8004304:	4b49      	ldr	r3, [pc, #292]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004314:	4b46      	ldr	r3, [pc, #280]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d118      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004320:	4b43      	ldr	r3, [pc, #268]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a42      	ldr	r2, [pc, #264]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800432a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432c:	f7fd fad2 	bl	80018d4 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004332:	e008      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004334:	f7fd face 	bl	80018d4 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	@ 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e06d      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004346:	4b3a      	ldr	r3, [pc, #232]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004352:	4b36      	ldr	r3, [pc, #216]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800435a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d02e      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	429a      	cmp	r2, r3
 800436e:	d027      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004370:	4b2e      	ldr	r3, [pc, #184]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004378:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800437a:	4b2e      	ldr	r3, [pc, #184]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004380:	4b2c      	ldr	r3, [pc, #176]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004386:	4a29      	ldr	r2, [pc, #164]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d014      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004396:	f7fd fa9d 	bl	80018d4 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439c:	e00a      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439e:	f7fd fa99 	bl	80018d4 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e036      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	4b1d      	ldr	r3, [pc, #116]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0ee      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c0:	4b1a      	ldr	r3, [pc, #104]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4917      	ldr	r1, [pc, #92]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d8:	4b14      	ldr	r3, [pc, #80]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	4a13      	ldr	r2, [pc, #76]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043f0:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	490b      	ldr	r1, [pc, #44]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800440e:	4b07      	ldr	r3, [pc, #28]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	4904      	ldr	r1, [pc, #16]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	40007000 	.word	0x40007000
 8004434:	42420440 	.word	0x42420440

08004438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e042      	b.n	80044d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fbea 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	@ 0x24
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800447a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fdb7 	bl	8004ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	@ 0x28
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d175      	bne.n	80045e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_UART_Transmit+0x2c>
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e06e      	b.n	80045e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2221      	movs	r2, #33	@ 0x21
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004516:	f7fd f9dd 	bl	80018d4 <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	88fa      	ldrh	r2, [r7, #6]
 8004526:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004530:	d108      	bne.n	8004544 <HAL_UART_Transmit+0x6c>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	e003      	b.n	800454c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800454c:	e02e      	b.n	80045ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	2180      	movs	r1, #128	@ 0x80
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fb1c 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e03a      	b.n	80045e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004584:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	3302      	adds	r3, #2
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	e007      	b.n	800459e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	3301      	adds	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1cb      	bne.n	800454e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	2140      	movs	r1, #64	@ 0x40
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fae8 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e006      	b.n	80045e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	4613      	mov	r3, r2
 80045fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b20      	cmp	r3, #32
 8004606:	d112      	bne.n	800462e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Receive_IT+0x26>
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e00b      	b.n	8004630 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	461a      	mov	r2, r3
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fb0f 	bl	8004c48 <UART_Start_Receive_IT>
 800462a:	4603      	mov	r3, r0
 800462c:	e000      	b.n	8004630 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b0ba      	sub	sp, #232	@ 0xe8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10f      	bne.n	800469e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800467e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <HAL_UART_IRQHandler+0x66>
 800468a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fbec 	bl	8004e74 <UART_Receive_IT>
      return;
 800469c:	e25b      	b.n	8004b56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800469e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80de 	beq.w	8004864 <HAL_UART_IRQHandler+0x22c>
 80046a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80d1 	beq.w	8004864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_UART_IRQHandler+0xae>
 80046ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_UART_IRQHandler+0xd2>
 80046f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004702:	f043 0202 	orr.w	r2, r3, #2
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <HAL_UART_IRQHandler+0xf6>
 8004716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	f043 0204 	orr.w	r2, r3, #4
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d011      	beq.n	800475e <HAL_UART_IRQHandler+0x126>
 800473a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d105      	bne.n	8004752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004756:	f043 0208 	orr.w	r2, r3, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 81f2 	beq.w	8004b4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_UART_IRQHandler+0x14e>
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fb77 	bl	8004e74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <HAL_UART_IRQHandler+0x17a>
 80047aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d04f      	beq.n	8004852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa81 	bl	8004cba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d041      	beq.n	800484a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3314      	adds	r3, #20
 80047cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3314      	adds	r3, #20
 80047ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800480a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1d9      	bne.n	80047c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d013      	beq.n	8004842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a18 <HAL_UART_IRQHandler+0x3e0>)
 8004820:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd f9ca 	bl	8001bc0 <HAL_DMA_Abort_IT>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800483c:	4610      	mov	r0, r2
 800483e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e00e      	b.n	8004860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f993 	bl	8004b6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	e00a      	b.n	8004860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f98f 	bl	8004b6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	e006      	b.n	8004860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f98b 	bl	8004b6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800485e:	e175      	b.n	8004b4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004860:	bf00      	nop
    return;
 8004862:	e173      	b.n	8004b4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004868:	2b01      	cmp	r3, #1
 800486a:	f040 814f 	bne.w	8004b0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800486e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8148 	beq.w	8004b0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800487c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8141 	beq.w	8004b0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80b6 	beq.w	8004a1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8145 	beq.w	8004b50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048ce:	429a      	cmp	r2, r3
 80048d0:	f080 813e 	bcs.w	8004b50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	f000 8088 	beq.w	80049f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004902:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004906:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004914:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004918:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004920:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800492c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1d9      	bne.n	80048e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3314      	adds	r3, #20
 800493a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004944:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3314      	adds	r3, #20
 8004954:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004958:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800495c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004960:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800496a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e1      	bne.n	8004934 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3314      	adds	r3, #20
 8004976:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004980:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3314      	adds	r3, #20
 8004990:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004994:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004996:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800499a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e3      	bne.n	8004970 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c8:	f023 0310 	bic.w	r3, r3, #16
 80049cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	330c      	adds	r3, #12
 80049d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049dc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e3      	bne.n	80049b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd f8a9 	bl	8001b4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f8b6 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a14:	e09c      	b.n	8004b50 <HAL_UART_IRQHandler+0x518>
 8004a16:	bf00      	nop
 8004a18:	08004d7f 	.word	0x08004d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 808e 	beq.w	8004b54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8089 	beq.w	8004b54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	330c      	adds	r3, #12
 8004a48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a66:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e3      	bne.n	8004a42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3314      	adds	r3, #20
 8004a80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	623b      	str	r3, [r7, #32]
   return(result);
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3314      	adds	r3, #20
 8004a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e3      	bne.n	8004a7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0310 	bic.w	r3, r3, #16
 8004ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ae4:	61fa      	str	r2, [r7, #28]
 8004ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	69b9      	ldr	r1, [r7, #24]
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	617b      	str	r3, [r7, #20]
   return(result);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e3      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b02:	4619      	mov	r1, r3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f83b 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b0a:	e023      	b.n	8004b54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d009      	beq.n	8004b2c <HAL_UART_IRQHandler+0x4f4>
 8004b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f93e 	bl	8004da6 <UART_Transmit_IT>
    return;
 8004b2a:	e014      	b.n	8004b56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00e      	beq.n	8004b56 <HAL_UART_IRQHandler+0x51e>
 8004b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f97d 	bl	8004e44 <UART_EndTransmit_IT>
    return;
 8004b4a:	e004      	b.n	8004b56 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b4c:	bf00      	nop
 8004b4e:	e002      	b.n	8004b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b50:	bf00      	nop
 8004b52:	e000      	b.n	8004b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b54:	bf00      	nop
  }
}
 8004b56:	37e8      	adds	r7, #232	@ 0xe8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr

08004b6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b086      	sub	sp, #24
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba6:	e03b      	b.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bae:	d037      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb0:	f7fc fe90 	bl	80018d4 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	6a3a      	ldr	r2, [r7, #32]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d302      	bcc.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e03a      	b.n	8004c40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d023      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b80      	cmp	r3, #128	@ 0x80
 8004bdc:	d020      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b40      	cmp	r3, #64	@ 0x40
 8004be2:	d01d      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d116      	bne.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f856 	bl	8004cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2208      	movs	r2, #8
 8004c12:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e00f      	b.n	8004c40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d0b4      	beq.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	88fa      	ldrh	r2, [r7, #6]
 8004c66:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2222      	movs	r2, #34	@ 0x22
 8004c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0201 	orr.w	r2, r2, #1
 8004c9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0220 	orr.w	r2, r2, #32
 8004cac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr

08004cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b095      	sub	sp, #84	@ 0x54
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ce2:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3314      	adds	r3, #20
 8004cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3314      	adds	r3, #20
 8004d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e5      	bne.n	8004cf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d119      	bne.n	8004d66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d52:	61ba      	str	r2, [r7, #24]
 8004d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e5      	bne.n	8004d32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d74:	bf00      	nop
 8004d76:	3754      	adds	r7, #84	@ 0x54
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr

08004d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff fee8 	bl	8004b6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b21      	cmp	r3, #33	@ 0x21
 8004db8:	d13e      	bne.n	8004e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc2:	d114      	bne.n	8004dee <UART_Transmit_IT+0x48>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d110      	bne.n	8004dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	621a      	str	r2, [r3, #32]
 8004dec:	e008      	b.n	8004e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	1c59      	adds	r1, r3, #1
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6211      	str	r1, [r2, #32]
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10f      	bne.n	8004e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	e000      	b.n	8004e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e38:	2302      	movs	r3, #2
  }
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fe79 	bl	8004b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08c      	sub	sp, #48	@ 0x30
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b22      	cmp	r3, #34	@ 0x22
 8004e86:	f040 80ae 	bne.w	8004fe6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e92:	d117      	bne.n	8004ec4 <UART_Receive_IT+0x50>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d113      	bne.n	8004ec4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ec2:	e026      	b.n	8004f12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed6:	d007      	beq.n	8004ee8 <UART_Receive_IT+0x74>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <UART_Receive_IT+0x82>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e008      	b.n	8004f08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d15d      	bne.n	8004fe2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0220 	bic.w	r2, r2, #32
 8004f34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0201 	bic.w	r2, r2, #1
 8004f54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d135      	bne.n	8004fd8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	613b      	str	r3, [r7, #16]
   return(result);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f023 0310 	bic.w	r3, r3, #16
 8004f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f92:	623a      	str	r2, [r7, #32]
 8004f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	69f9      	ldr	r1, [r7, #28]
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e5      	bne.n	8004f72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d10a      	bne.n	8004fca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fdd5 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
 8004fd6:	e002      	b.n	8004fde <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7fb fd43 	bl	8000a64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e002      	b.n	8004fe8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3730      	adds	r7, #48	@ 0x30
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800502a:	f023 030c 	bic.w	r3, r3, #12
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	430b      	orrs	r3, r1
 8005036:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2c      	ldr	r2, [pc, #176]	@ (8005104 <UART_SetConfig+0x114>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d103      	bne.n	8005060 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005058:	f7ff f906 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	e002      	b.n	8005066 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005060:	f7ff f8ee 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005064:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009a      	lsls	r2, r3, #2
 8005070:	441a      	add	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	4a22      	ldr	r2, [pc, #136]	@ (8005108 <UART_SetConfig+0x118>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	0119      	lsls	r1, r3, #4
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009a      	lsls	r2, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	fbb2 f2f3 	udiv	r2, r2, r3
 800509c:	4b1a      	ldr	r3, [pc, #104]	@ (8005108 <UART_SetConfig+0x118>)
 800509e:	fba3 0302 	umull	r0, r3, r3, r2
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	2064      	movs	r0, #100	@ 0x64
 80050a6:	fb00 f303 	mul.w	r3, r0, r3
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	3332      	adds	r3, #50	@ 0x32
 80050b0:	4a15      	ldr	r2, [pc, #84]	@ (8005108 <UART_SetConfig+0x118>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050bc:	4419      	add	r1, r3
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009a      	lsls	r2, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005108 <UART_SetConfig+0x118>)
 80050d6:	fba3 0302 	umull	r0, r3, r3, r2
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	2064      	movs	r0, #100	@ 0x64
 80050de:	fb00 f303 	mul.w	r3, r0, r3
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	3332      	adds	r3, #50	@ 0x32
 80050e8:	4a07      	ldr	r2, [pc, #28]	@ (8005108 <UART_SetConfig+0x118>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	f003 020f 	and.w	r2, r3, #15
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	440a      	add	r2, r1
 80050fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40013800 	.word	0x40013800
 8005108:	51eb851f 	.word	0x51eb851f

0800510c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	4638      	mov	r0, r7
 8005116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005136:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800513a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800515a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800515e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	b29b      	uxth	r3, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	b29b      	uxth	r3, r3
 8005170:	4013      	ands	r3, r2
 8005172:	b29a      	uxth	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	4638      	mov	r0, r7
 80051a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051d8:	b480      	push	{r7}
 80051da:	b09d      	sub	sp, #116	@ 0x74
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80051fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	78db      	ldrb	r3, [r3, #3]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d81f      	bhi.n	800524a <USB_ActivateEndpoint+0x72>
 800520a:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <USB_ActivateEndpoint+0x38>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005221 	.word	0x08005221
 8005214:	0800523d 	.word	0x0800523d
 8005218:	08005253 	.word	0x08005253
 800521c:	0800522f 	.word	0x0800522f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005220:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005224:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005228:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800522c:	e012      	b.n	8005254 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800522e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005232:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005236:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800523a:	e00b      	b.n	8005254 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800523c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005240:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005244:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005248:	e004      	b.n	8005254 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005250:	e000      	b.n	8005254 <USB_ActivateEndpoint+0x7c>
      break;
 8005252:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	441a      	add	r2, r3
 800525e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800526a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800526e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005272:	b29b      	uxth	r3, r3
 8005274:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528c:	b29b      	uxth	r3, r3
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	7812      	ldrb	r2, [r2, #0]
 8005292:	4313      	orrs	r3, r2
 8005294:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	441a      	add	r2, r3
 80052a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80052a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	7b1b      	ldrb	r3, [r3, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f040 8178 	bne.w	80055b4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8084 	beq.w	80053d6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052d8:	b29b      	uxth	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	4413      	add	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	011a      	lsls	r2, r3, #4
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	88db      	ldrh	r3, [r3, #6]
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	827b      	strh	r3, [r7, #18]
 8005310:	8a7b      	ldrh	r3, [r7, #18]
 8005312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01b      	beq.n	8005352 <USB_ActivateEndpoint+0x17a>
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800532c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005330:	823b      	strh	r3, [r7, #16]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8a3b      	ldrh	r3, [r7, #16]
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800534a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	78db      	ldrb	r3, [r3, #3]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d020      	beq.n	800539c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800536c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005370:	81bb      	strh	r3, [r7, #12]
 8005372:	89bb      	ldrh	r3, [r7, #12]
 8005374:	f083 0320 	eor.w	r3, r3, #32
 8005378:	81bb      	strh	r3, [r7, #12]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	89bb      	ldrh	r3, [r7, #12]
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]
 800539a:	e2d5      	b.n	8005948 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053b2:	81fb      	strh	r3, [r7, #14]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	441a      	add	r2, r3
 80053be:	89fb      	ldrh	r3, [r7, #14]
 80053c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	8013      	strh	r3, [r2, #0]
 80053d4:	e2b8      	b.n	8005948 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e6:	4413      	add	r3, r2
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	011a      	lsls	r2, r3, #4
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80053f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	88db      	ldrh	r3, [r3, #6]
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	b29b      	uxth	r3, r3
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005408:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005414:	b29b      	uxth	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	4413      	add	r3, r2
 800541c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	011a      	lsls	r2, r3, #4
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	4413      	add	r3, r2
 8005428:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005438:	b29a      	uxth	r2, r3
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b3e      	cmp	r3, #62	@ 0x3e
 8005444:	d91d      	bls.n	8005482 <USB_ActivateEndpoint+0x2aa>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	2b00      	cmp	r3, #0
 8005458:	d102      	bne.n	8005460 <USB_ActivateEndpoint+0x288>
 800545a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800545c:	3b01      	subs	r3, #1
 800545e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29a      	uxth	r2, r3
 8005466:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005468:	b29b      	uxth	r3, r3
 800546a:	029b      	lsls	r3, r3, #10
 800546c:	b29b      	uxth	r3, r3
 800546e:	4313      	orrs	r3, r2
 8005470:	b29b      	uxth	r3, r3
 8005472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547a:	b29a      	uxth	r2, r3
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	e026      	b.n	80054d0 <USB_ActivateEndpoint+0x2f8>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <USB_ActivateEndpoint+0x2c8>
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005498:	b29a      	uxth	r2, r3
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	e017      	b.n	80054d0 <USB_ActivateEndpoint+0x2f8>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <USB_ActivateEndpoint+0x2e2>
 80054b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054b6:	3301      	adds	r3, #1
 80054b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	029b      	lsls	r3, r3, #10
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	4313      	orrs	r3, r2
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80054de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80054e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01b      	beq.n	8005520 <USB_ActivateEndpoint+0x348>
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fe:	843b      	strh	r3, [r7, #32]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	441a      	add	r2, r3
 800550a:	8c3b      	ldrh	r3, [r7, #32]
 800550c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005514:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800551c:	b29b      	uxth	r3, r3
 800551e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d124      	bne.n	8005572 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800553a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553e:	83bb      	strh	r3, [r7, #28]
 8005540:	8bbb      	ldrh	r3, [r7, #28]
 8005542:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005546:	83bb      	strh	r3, [r7, #28]
 8005548:	8bbb      	ldrh	r3, [r7, #28]
 800554a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800554e:	83bb      	strh	r3, [r7, #28]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	441a      	add	r2, r3
 800555a:	8bbb      	ldrh	r3, [r7, #28]
 800555c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005560:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005564:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800556c:	b29b      	uxth	r3, r3
 800556e:	8013      	strh	r3, [r2, #0]
 8005570:	e1ea      	b.n	8005948 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005588:	83fb      	strh	r3, [r7, #30]
 800558a:	8bfb      	ldrh	r3, [r7, #30]
 800558c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005590:	83fb      	strh	r3, [r7, #30]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	441a      	add	r2, r3
 800559c:	8bfb      	ldrh	r3, [r7, #30]
 800559e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	8013      	strh	r3, [r2, #0]
 80055b2:	e1c9      	b.n	8005948 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	78db      	ldrb	r3, [r3, #3]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d11e      	bne.n	80055fa <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	441a      	add	r2, r3
 80055e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80055e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055ec:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80055f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8013      	strh	r3, [r2, #0]
 80055f8:	e01d      	b.n	8005636 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800560c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005610:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800562a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800562e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005632:	b29b      	uxth	r3, r3
 8005634:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005640:	b29b      	uxth	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005646:	4413      	add	r3, r2
 8005648:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	011a      	lsls	r2, r3, #4
 8005650:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005652:	4413      	add	r3, r2
 8005654:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	891b      	ldrh	r3, [r3, #8]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	b29b      	uxth	r3, r3
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005668:	801a      	strh	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	657b      	str	r3, [r7, #84]	@ 0x54
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005674:	b29b      	uxth	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800567a:	4413      	add	r3, r2
 800567c:	657b      	str	r3, [r7, #84]	@ 0x54
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	011a      	lsls	r2, r3, #4
 8005684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005686:	4413      	add	r3, r2
 8005688:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800568c:	653b      	str	r3, [r7, #80]	@ 0x50
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	895b      	ldrh	r3, [r3, #10]
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	b29b      	uxth	r3, r3
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800569c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 8093 	bne.w	80057ce <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80056b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80056bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01b      	beq.n	80056fc <USB_ActivateEndpoint+0x524>
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056da:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80056e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800570a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01b      	beq.n	800574c <USB_ActivateEndpoint+0x574>
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005744:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800575e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005762:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005764:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005766:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800576a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800576c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800576e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005772:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	441a      	add	r2, r3
 800577e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005780:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005784:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005788:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800578c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005790:	b29b      	uxth	r3, r3
 8005792:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	441a      	add	r2, r3
 80057b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80057b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	8013      	strh	r3, [r2, #0]
 80057cc:	e0bc      	b.n	8005948 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80057de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d01d      	beq.n	8005826 <USB_ActivateEndpoint+0x64e>
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005800:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	441a      	add	r2, r3
 800580e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800581a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800581e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005822:	b29b      	uxth	r3, r3
 8005824:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005836:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800583a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d01d      	beq.n	800587e <USB_ActivateEndpoint+0x6a6>
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005858:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	441a      	add	r2, r3
 8005866:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800586a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800586e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005876:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800587a:	b29b      	uxth	r3, r3
 800587c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	78db      	ldrb	r3, [r3, #3]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d024      	beq.n	80058d0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800589c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80058a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80058a4:	f083 0320 	eor.w	r3, r3, #32
 80058a8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80058ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	8013      	strh	r3, [r2, #0]
 80058ce:	e01d      	b.n	800590c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	441a      	add	r2, r3
 80058f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005908:	b29b      	uxth	r3, r3
 800590a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800591e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005922:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005944:	b29b      	uxth	r3, r3
 8005946:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005948:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800594c:	4618      	mov	r0, r3
 800594e:	3774      	adds	r7, #116	@ 0x74
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop

08005958 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005958:	b480      	push	{r7}
 800595a:	b08d      	sub	sp, #52	@ 0x34
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	7b1b      	ldrb	r3, [r3, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 808e 	bne.w	8005a88 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d044      	beq.n	80059fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	81bb      	strh	r3, [r7, #12]
 8005982:	89bb      	ldrh	r3, [r7, #12]
 8005984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01b      	beq.n	80059c4 <USB_DeactivateEndpoint+0x6c>
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800599e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a2:	817b      	strh	r3, [r7, #10]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	897b      	ldrh	r3, [r7, #10]
 80059b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059da:	813b      	strh	r3, [r7, #8]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	893b      	ldrh	r3, [r7, #8]
 80059e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	8013      	strh	r3, [r2, #0]
 80059fc:	e192      	b.n	8005d24 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	827b      	strh	r3, [r7, #18]
 8005a0c:	8a7b      	ldrh	r3, [r7, #18]
 8005a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01b      	beq.n	8005a4e <USB_DeactivateEndpoint+0xf6>
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2c:	823b      	strh	r3, [r7, #16]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	8a3b      	ldrh	r3, [r7, #16]
 8005a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a64:	81fb      	strh	r3, [r7, #14]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	441a      	add	r2, r3
 8005a70:	89fb      	ldrh	r3, [r7, #14]
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
 8005a86:	e14d      	b.n	8005d24 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f040 80a5 	bne.w	8005bdc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	843b      	strh	r3, [r7, #32]
 8005aa0:	8c3b      	ldrh	r3, [r7, #32]
 8005aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01b      	beq.n	8005ae2 <USB_DeactivateEndpoint+0x18a>
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac0:	83fb      	strh	r3, [r7, #30]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	441a      	add	r2, r3
 8005acc:	8bfb      	ldrh	r3, [r7, #30]
 8005ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	83bb      	strh	r3, [r7, #28]
 8005af0:	8bbb      	ldrh	r3, [r7, #28]
 8005af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01b      	beq.n	8005b32 <USB_DeactivateEndpoint+0x1da>
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b10:	837b      	strh	r3, [r7, #26]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	441a      	add	r2, r3
 8005b1c:	8b7b      	ldrh	r3, [r7, #26]
 8005b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b48:	833b      	strh	r3, [r7, #24]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	441a      	add	r2, r3
 8005b54:	8b3b      	ldrh	r3, [r7, #24]
 8005b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b80:	82fb      	strh	r3, [r7, #22]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	8afb      	ldrh	r3, [r7, #22]
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb8:	82bb      	strh	r3, [r7, #20]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	8abb      	ldrh	r3, [r7, #20]
 8005bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	8013      	strh	r3, [r2, #0]
 8005bda:	e0a3      	b.n	8005d24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005bea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <USB_DeactivateEndpoint+0x2d4>
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005c3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01b      	beq.n	8005c7c <USB_DeactivateEndpoint+0x324>
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c92:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	441a      	add	r2, r3
 8005c9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d02:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3734      	adds	r7, #52	@ 0x34
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b0c2      	sub	sp, #264	@ 0x108
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d3e:	6018      	str	r0, [r3, #0]
 8005d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d48:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	f040 86b7 	bne.w	8006aca <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d908      	bls.n	8005d8a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d88:	e007      	b.n	8005d9a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	7b1b      	ldrb	r3, [r3, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d13a      	bne.n	8005e20 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6959      	ldr	r1, [r3, #20]
 8005db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	88da      	ldrh	r2, [r3, #6]
 8005dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005dcc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005dd0:	6800      	ldr	r0, [r0, #0]
 8005dd2:	f001 fc9c 	bl	800770e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	011a      	lsls	r2, r3, #4
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	f000 be1f 	b.w	8006a5e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	f040 8462 	bne.w	80066f6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6a1a      	ldr	r2, [r3, #32]
 8005e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	f240 83df 	bls.w	800660e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e76:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	441a      	add	r2, r3
 8005e94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a1a      	ldr	r2, [r3, #32]
 8005eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebc:	1ad2      	subs	r2, r2, r3
 8005ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 81c7 	beq.w	8006280 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d177      	bne.n	8005ffe <USB_EPStartXfer+0x2ce>
 8005f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	4413      	add	r3, r2
 8005f30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	011a      	lsls	r2, r3, #4
 8005f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f42:	4413      	add	r3, r2
 8005f44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f60:	d921      	bls.n	8005fa6 <USB_EPStartXfer+0x276>
 8005f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d104      	bne.n	8005f82 <USB_EPStartXfer+0x252>
 8005f78:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	029b      	lsls	r3, r3, #10
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	4313      	orrs	r3, r2
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	e050      	b.n	8006048 <USB_EPStartXfer+0x318>
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <USB_EPStartXfer+0x294>
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	e041      	b.n	8006048 <USB_EPStartXfer+0x318>
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc8:	085b      	lsrs	r3, r3, #1
 8005fca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <USB_EPStartXfer+0x2b4>
 8005fda:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005fde:	3301      	adds	r3, #1
 8005fe0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	029b      	lsls	r3, r3, #10
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e024      	b.n	8006048 <USB_EPStartXfer+0x318>
 8005ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d11c      	bne.n	8006048 <USB_EPStartXfer+0x318>
 800600e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800601c:	b29b      	uxth	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	4413      	add	r3, r2
 8006024:	633b      	str	r3, [r7, #48]	@ 0x30
 8006026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	011a      	lsls	r2, r3, #4
 8006034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006036:	4413      	add	r3, r2
 8006038:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800603c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800603e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006042:	b29a      	uxth	r2, r3
 8006044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006046:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	895b      	ldrh	r3, [r3, #10]
 8006054:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6959      	ldr	r1, [r3, #20]
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006068:	b29b      	uxth	r3, r3
 800606a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800606e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006072:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006076:	6800      	ldr	r0, [r0, #0]
 8006078:	f001 fb49 	bl	800770e <USB_WritePMA>
            ep->xfer_buff += len;
 800607c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695a      	ldr	r2, [r3, #20]
 8006088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608c:	441a      	add	r2, r3
 800608e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800609a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d90f      	bls.n	80060d6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80060b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a1a      	ldr	r2, [r3, #32]
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	1ad2      	subs	r2, r2, r3
 80060c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	621a      	str	r2, [r3, #32]
 80060d4:	e00e      	b.n	80060f4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80060d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80060e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2200      	movs	r2, #0
 80060f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	785b      	ldrb	r3, [r3, #1]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d177      	bne.n	80061f4 <USB_EPStartXfer+0x4c4>
 8006104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006108:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800611e:	b29b      	uxth	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	4413      	add	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	011a      	lsls	r2, r3, #4
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	4413      	add	r3, r2
 800613a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800614a:	b29a      	uxth	r2, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006154:	2b3e      	cmp	r3, #62	@ 0x3e
 8006156:	d921      	bls.n	800619c <USB_EPStartXfer+0x46c>
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <USB_EPStartXfer+0x448>
 800616e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006172:	3b01      	subs	r3, #1
 8006174:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29a      	uxth	r2, r3
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006182:	b29b      	uxth	r3, r3
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	b29b      	uxth	r3, r3
 8006188:	4313      	orrs	r3, r2
 800618a:	b29b      	uxth	r3, r3
 800618c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006194:	b29a      	uxth	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	e056      	b.n	800624a <USB_EPStartXfer+0x51a>
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <USB_EPStartXfer+0x48a>
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	e047      	b.n	800624a <USB_EPStartXfer+0x51a>
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	085b      	lsrs	r3, r3, #1
 80061c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d004      	beq.n	80061da <USB_EPStartXfer+0x4aa>
 80061d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d4:	3301      	adds	r3, #1
 80061d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29a      	uxth	r2, r3
 80061e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	029b      	lsls	r3, r3, #10
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e02a      	b.n	800624a <USB_EPStartXfer+0x51a>
 80061f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	785b      	ldrb	r3, [r3, #1]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d122      	bne.n	800624a <USB_EPStartXfer+0x51a>
 8006204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	623b      	str	r3, [r7, #32]
 8006210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800621e:	b29b      	uxth	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	4413      	add	r3, r2
 8006226:	623b      	str	r3, [r7, #32]
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	011a      	lsls	r2, r3, #4
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	4413      	add	r3, r2
 800623a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006244:	b29a      	uxth	r2, r3
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800624a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	891b      	ldrh	r3, [r3, #8]
 8006256:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800625a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6959      	ldr	r1, [r3, #20]
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626a:	b29b      	uxth	r3, r3
 800626c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006270:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006274:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006278:	6800      	ldr	r0, [r0, #0]
 800627a:	f001 fa48 	bl	800770e <USB_WritePMA>
 800627e:	e3ee      	b.n	8006a5e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d177      	bne.n	8006380 <USB_EPStartXfer+0x650>
 8006290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006294:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800629c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062b0:	4413      	add	r3, r2
 80062b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	011a      	lsls	r2, r3, #4
 80062c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80062cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80062e2:	d921      	bls.n	8006328 <USB_EPStartXfer+0x5f8>
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <USB_EPStartXfer+0x5d4>
 80062fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062fe:	3b01      	subs	r3, #1
 8006300:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800630e:	b29b      	uxth	r3, r3
 8006310:	029b      	lsls	r3, r3, #10
 8006312:	b29b      	uxth	r3, r3
 8006314:	4313      	orrs	r3, r2
 8006316:	b29b      	uxth	r3, r3
 8006318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006320:	b29a      	uxth	r2, r3
 8006322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	e056      	b.n	80063d6 <USB_EPStartXfer+0x6a6>
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <USB_EPStartXfer+0x616>
 8006330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633e:	b29a      	uxth	r2, r3
 8006340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e047      	b.n	80063d6 <USB_EPStartXfer+0x6a6>
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634a:	085b      	lsrs	r3, r3, #1
 800634c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <USB_EPStartXfer+0x636>
 800635c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006360:	3301      	adds	r3, #1
 8006362:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006370:	b29b      	uxth	r3, r3
 8006372:	029b      	lsls	r3, r3, #10
 8006374:	b29b      	uxth	r3, r3
 8006376:	4313      	orrs	r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e02a      	b.n	80063d6 <USB_EPStartXfer+0x6a6>
 8006380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d122      	bne.n	80063d6 <USB_EPStartXfer+0x6a6>
 8006390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	653b      	str	r3, [r7, #80]	@ 0x50
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063b0:	4413      	add	r3, r2
 80063b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	011a      	lsls	r2, r3, #4
 80063c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	891b      	ldrh	r3, [r3, #8]
 80063e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6959      	ldr	r1, [r3, #20]
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006400:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006404:	6800      	ldr	r0, [r0, #0]
 8006406:	f001 f982 	bl	800770e <USB_WritePMA>
            ep->xfer_buff += len;
 800640a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695a      	ldr	r2, [r3, #20]
 8006416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641a:	441a      	add	r2, r3
 800641c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	429a      	cmp	r2, r3
 8006442:	d90f      	bls.n	8006464 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6a1a      	ldr	r2, [r3, #32]
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006454:	1ad2      	subs	r2, r2, r3
 8006456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	621a      	str	r2, [r3, #32]
 8006462:	e00e      	b.n	8006482 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006486:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	643b      	str	r3, [r7, #64]	@ 0x40
 800648e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d177      	bne.n	800658e <USB_EPStartXfer+0x85e>
 800649e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	4413      	add	r3, r2
 80064c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	011a      	lsls	r2, r3, #4
 80064d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d2:	4413      	add	r3, r2
 80064d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80064f0:	d921      	bls.n	8006536 <USB_EPStartXfer+0x806>
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2b00      	cmp	r3, #0
 8006506:	d104      	bne.n	8006512 <USB_EPStartXfer+0x7e2>
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650c:	3b01      	subs	r3, #1
 800650e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29a      	uxth	r2, r3
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651c:	b29b      	uxth	r3, r3
 800651e:	029b      	lsls	r3, r3, #10
 8006520:	b29b      	uxth	r3, r3
 8006522:	4313      	orrs	r3, r2
 8006524:	b29b      	uxth	r3, r3
 8006526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652e:	b29a      	uxth	r2, r3
 8006530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	e050      	b.n	80065d8 <USB_EPStartXfer+0x8a8>
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <USB_EPStartXfer+0x824>
 800653e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654c:	b29a      	uxth	r2, r3
 800654e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	e041      	b.n	80065d8 <USB_EPStartXfer+0x8a8>
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <USB_EPStartXfer+0x844>
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656e:	3301      	adds	r3, #1
 8006570:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29a      	uxth	r2, r3
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657e:	b29b      	uxth	r3, r3
 8006580:	029b      	lsls	r3, r3, #10
 8006582:	b29b      	uxth	r3, r3
 8006584:	4313      	orrs	r3, r2
 8006586:	b29a      	uxth	r2, r3
 8006588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	e024      	b.n	80065d8 <USB_EPStartXfer+0x8a8>
 800658e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	785b      	ldrb	r3, [r3, #1]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d11c      	bne.n	80065d8 <USB_EPStartXfer+0x8a8>
 800659e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b2:	4413      	add	r3, r2
 80065b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80065b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	011a      	lsls	r2, r3, #4
 80065c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065c6:	4413      	add	r3, r2
 80065c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	895b      	ldrh	r3, [r3, #10]
 80065e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6959      	ldr	r1, [r3, #20]
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065fe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006602:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006606:	6800      	ldr	r0, [r0, #0]
 8006608:	f001 f881 	bl	800770e <USB_WritePMA>
 800660c:	e227      	b.n	8006a5e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800660e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800661e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006644:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800666a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800666e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006676:	b29b      	uxth	r3, r3
 8006678:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800667a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006694:	b29b      	uxth	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800669a:	4413      	add	r3, r2
 800669c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800669e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	011a      	lsls	r2, r3, #4
 80066ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066ae:	4413      	add	r3, r2
 80066b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	891b      	ldrh	r3, [r3, #8]
 80066cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6959      	ldr	r1, [r3, #20]
 80066dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066ee:	6800      	ldr	r0, [r0, #0]
 80066f0:	f001 f80d 	bl	800770e <USB_WritePMA>
 80066f4:	e1b3      	b.n	8006a5e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 80c6 	beq.w	80068c8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800673c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006740:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	673b      	str	r3, [r7, #112]	@ 0x70
 8006748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d177      	bne.n	8006848 <USB_EPStartXfer+0xb18>
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006772:	b29b      	uxth	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006778:	4413      	add	r3, r2
 800677a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800677c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	011a      	lsls	r2, r3, #4
 800678a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800678c:	4413      	add	r3, r2
 800678e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006792:	667b      	str	r3, [r7, #100]	@ 0x64
 8006794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679e:	b29a      	uxth	r2, r3
 80067a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80067aa:	d921      	bls.n	80067f0 <USB_EPStartXfer+0xac0>
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d104      	bne.n	80067cc <USB_EPStartXfer+0xa9c>
 80067c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067c6:	3b01      	subs	r3, #1
 80067c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	029b      	lsls	r3, r3, #10
 80067da:	b29b      	uxth	r3, r3
 80067dc:	4313      	orrs	r3, r2
 80067de:	b29b      	uxth	r3, r3
 80067e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e050      	b.n	8006892 <USB_EPStartXfer+0xb62>
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <USB_EPStartXfer+0xade>
 80067f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006806:	b29a      	uxth	r2, r3
 8006808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	e041      	b.n	8006892 <USB_EPStartXfer+0xb62>
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006812:	085b      	lsrs	r3, r3, #1
 8006814:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d004      	beq.n	800682e <USB_EPStartXfer+0xafe>
 8006824:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006828:	3301      	adds	r3, #1
 800682a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800682e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006838:	b29b      	uxth	r3, r3
 800683a:	029b      	lsls	r3, r3, #10
 800683c:	b29b      	uxth	r3, r3
 800683e:	4313      	orrs	r3, r2
 8006840:	b29a      	uxth	r2, r3
 8006842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	e024      	b.n	8006892 <USB_EPStartXfer+0xb62>
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d11c      	bne.n	8006892 <USB_EPStartXfer+0xb62>
 8006858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800686c:	4413      	add	r3, r2
 800686e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	011a      	lsls	r2, r3, #4
 800687e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006880:	4413      	add	r3, r2
 8006882:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006886:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688c:	b29a      	uxth	r2, r3
 800688e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006890:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	895b      	ldrh	r3, [r3, #10]
 800689e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6959      	ldr	r1, [r3, #20]
 80068ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068c0:	6800      	ldr	r0, [r0, #0]
 80068c2:	f000 ff24 	bl	800770e <USB_WritePMA>
 80068c6:	e0ca      	b.n	8006a5e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d177      	bne.n	80069c8 <USB_EPStartXfer+0xc98>
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068f8:	4413      	add	r3, r2
 80068fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	011a      	lsls	r2, r3, #4
 800690a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800690c:	4413      	add	r3, r2
 800690e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006912:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800691e:	b29a      	uxth	r2, r3
 8006920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006928:	2b3e      	cmp	r3, #62	@ 0x3e
 800692a:	d921      	bls.n	8006970 <USB_EPStartXfer+0xc40>
 800692c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006930:	095b      	lsrs	r3, r3, #5
 8006932:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693a:	f003 031f 	and.w	r3, r3, #31
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <USB_EPStartXfer+0xc1c>
 8006942:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006946:	3b01      	subs	r3, #1
 8006948:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800694c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	b29a      	uxth	r2, r3
 8006952:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006956:	b29b      	uxth	r3, r3
 8006958:	029b      	lsls	r3, r3, #10
 800695a:	b29b      	uxth	r3, r3
 800695c:	4313      	orrs	r3, r2
 800695e:	b29b      	uxth	r3, r3
 8006960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006968:	b29a      	uxth	r2, r3
 800696a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800696c:	801a      	strh	r2, [r3, #0]
 800696e:	e05c      	b.n	8006a2a <USB_EPStartXfer+0xcfa>
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <USB_EPStartXfer+0xc5e>
 8006978:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006986:	b29a      	uxth	r2, r3
 8006988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800698a:	801a      	strh	r2, [r3, #0]
 800698c:	e04d      	b.n	8006a2a <USB_EPStartXfer+0xcfa>
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <USB_EPStartXfer+0xc7e>
 80069a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80069a8:	3301      	adds	r3, #1
 80069aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80069ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	029b      	lsls	r3, r3, #10
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4313      	orrs	r3, r2
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	e030      	b.n	8006a2a <USB_EPStartXfer+0xcfa>
 80069c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d128      	bne.n	8006a2a <USB_EPStartXfer+0xcfa>
 80069d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069fc:	4413      	add	r3, r2
 80069fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	011a      	lsls	r2, r3, #4
 8006a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	891b      	ldrh	r3, [r3, #8]
 8006a36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6959      	ldr	r1, [r3, #20]
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a58:	6800      	ldr	r0, [r0, #0]
 8006a5a:	f000 fe58 	bl	800770e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a84:	817b      	strh	r3, [r7, #10]
 8006a86:	897b      	ldrh	r3, [r7, #10]
 8006a88:	f083 0310 	eor.w	r3, r3, #16
 8006a8c:	817b      	strh	r3, [r7, #10]
 8006a8e:	897b      	ldrh	r3, [r7, #10]
 8006a90:	f083 0320 	eor.w	r3, r3, #32
 8006a94:	817b      	strh	r3, [r7, #10]
 8006a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	441a      	add	r2, r3
 8006ab0:	897b      	ldrh	r3, [r7, #10]
 8006ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	8013      	strh	r3, [r2, #0]
 8006ac6:	f000 bcde 	b.w	8007486 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	7b1b      	ldrb	r3, [r3, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 80bb 	bne.w	8006c52 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d917      	bls.n	8006b28 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699a      	ldr	r2, [r3, #24]
 8006b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b18:	1ad2      	subs	r2, r2, r3
 8006b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	619a      	str	r2, [r3, #24]
 8006b26:	e00e      	b.n	8006b46 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2200      	movs	r2, #0
 8006b44:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	011a      	lsls	r2, r3, #4
 8006b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b82:	4413      	add	r3, r2
 8006b84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ba6:	d924      	bls.n	8006bf2 <USB_EPStartXfer+0xec2>
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <USB_EPStartXfer+0xe98>
 8006bbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	029b      	lsls	r3, r3, #10
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bec:	801a      	strh	r2, [r3, #0]
 8006bee:	f000 bc10 	b.w	8007412 <USB_EPStartXfer+0x16e2>
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10c      	bne.n	8006c14 <USB_EPStartXfer+0xee4>
 8006bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e3fe      	b.n	8007412 <USB_EPStartXfer+0x16e2>
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	085b      	lsrs	r3, r3, #1
 8006c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <USB_EPStartXfer+0xf04>
 8006c2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006c2e:	3301      	adds	r3, #1
 8006c30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	029b      	lsls	r3, r3, #10
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4313      	orrs	r3, r2
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	e3df      	b.n	8007412 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	78db      	ldrb	r3, [r3, #3]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	f040 8218 	bne.w	8007094 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f040 809d 	bne.w	8006db0 <USB_EPStartXfer+0x1080>
 8006c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	011a      	lsls	r2, r3, #4
 8006cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cde:	d92b      	bls.n	8006d38 <USB_EPStartXfer+0x1008>
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 031f 	and.w	r3, r3, #31
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <USB_EPStartXfer+0xfe0>
 8006d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	029b      	lsls	r3, r3, #10
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4313      	orrs	r3, r2
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d34:	801a      	strh	r2, [r3, #0]
 8006d36:	e070      	b.n	8006e1a <USB_EPStartXfer+0x10ea>
 8006d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10c      	bne.n	8006d62 <USB_EPStartXfer+0x1032>
 8006d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	e05b      	b.n	8006e1a <USB_EPStartXfer+0x10ea>
 8006d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <USB_EPStartXfer+0x1062>
 8006d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	029b      	lsls	r3, r3, #10
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	4313      	orrs	r3, r2
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	e034      	b.n	8006e1a <USB_EPStartXfer+0x10ea>
 8006db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d12c      	bne.n	8006e1a <USB_EPStartXfer+0x10ea>
 8006dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006de4:	4413      	add	r3, r2
 8006de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	011a      	lsls	r2, r3, #4
 8006df8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e18:	801a      	strh	r2, [r3, #0]
 8006e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 809d 	bne.w	8006f74 <USB_EPStartXfer+0x1244>
 8006e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e5e:	4413      	add	r3, r2
 8006e60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	011a      	lsls	r2, r3, #4
 8006e72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e76:	4413      	add	r3, r2
 8006e78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ea2:	d92b      	bls.n	8006efc <USB_EPStartXfer+0x11cc>
 8006ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <USB_EPStartXfer+0x11a4>
 8006eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	029b      	lsls	r3, r3, #10
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ef8:	801a      	strh	r2, [r3, #0]
 8006efa:	e069      	b.n	8006fd0 <USB_EPStartXfer+0x12a0>
 8006efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10c      	bne.n	8006f26 <USB_EPStartXfer+0x11f6>
 8006f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	e054      	b.n	8006fd0 <USB_EPStartXfer+0x12a0>
 8006f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	085b      	lsrs	r3, r3, #1
 8006f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <USB_EPStartXfer+0x1226>
 8006f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f50:	3301      	adds	r3, #1
 8006f52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	029b      	lsls	r3, r3, #10
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	e02d      	b.n	8006fd0 <USB_EPStartXfer+0x12a0>
 8006f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d125      	bne.n	8006fd0 <USB_EPStartXfer+0x12a0>
 8006f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	011a      	lsls	r2, r3, #4
 8006fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 8218 	beq.w	8007412 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007002:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <USB_EPStartXfer+0x12ea>
 800700e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10d      	bne.n	8007036 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800701a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800701e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 81f5 	bne.w	8007412 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007028:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800702c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	f040 81ee 	bne.w	8007412 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800705c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	441a      	add	r2, r3
 800707a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800707e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800708a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800708e:	b29b      	uxth	r3, r3
 8007090:	8013      	strh	r3, [r2, #0]
 8007092:	e1be      	b.n	8007412 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	78db      	ldrb	r3, [r3, #3]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	f040 81b4 	bne.w	800740e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80070a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699a      	ldr	r2, [r3, #24]
 80070b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d917      	bls.n	80070f2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80070c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80070d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699a      	ldr	r2, [r3, #24]
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	619a      	str	r2, [r3, #24]
 80070f0:	e00e      	b.n	8007110 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80070f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2200      	movs	r2, #0
 800710e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f040 8085 	bne.w	800722c <USB_EPStartXfer+0x14fc>
 8007122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800713e:	b29b      	uxth	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007146:	4413      	add	r3, r2
 8007148:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800714c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	011a      	lsls	r2, r3, #4
 800715a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800715e:	4413      	add	r3, r2
 8007160:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007164:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007168:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007174:	b29a      	uxth	r2, r3
 8007176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	2b3e      	cmp	r3, #62	@ 0x3e
 8007182:	d923      	bls.n	80071cc <USB_EPStartXfer+0x149c>
 8007184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007188:	095b      	lsrs	r3, r3, #5
 800718a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <USB_EPStartXfer+0x1474>
 800719a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800719e:	3b01      	subs	r3, #1
 80071a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80071a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	029b      	lsls	r3, r3, #10
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	e060      	b.n	800728e <USB_EPStartXfer+0x155e>
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10c      	bne.n	80071ee <USB_EPStartXfer+0x14be>
 80071d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e04f      	b.n	800728e <USB_EPStartXfer+0x155e>
 80071ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <USB_EPStartXfer+0x14de>
 8007204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007208:	3301      	adds	r3, #1
 800720a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800720e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	b29a      	uxth	r2, r3
 8007216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800721a:	b29b      	uxth	r3, r3
 800721c:	029b      	lsls	r3, r3, #10
 800721e:	b29b      	uxth	r3, r3
 8007220:	4313      	orrs	r3, r2
 8007222:	b29a      	uxth	r2, r3
 8007224:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	e030      	b.n	800728e <USB_EPStartXfer+0x155e>
 800722c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d128      	bne.n	800728e <USB_EPStartXfer+0x155e>
 800723c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800724a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007258:	b29b      	uxth	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007260:	4413      	add	r3, r2
 8007262:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	011a      	lsls	r2, r3, #4
 8007274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007278:	4413      	add	r3, r2
 800727a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800727e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	b29a      	uxth	r2, r3
 8007288:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800728c:	801a      	strh	r2, [r3, #0]
 800728e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800729c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f040 8085 	bne.w	80073b8 <USB_EPStartXfer+0x1688>
 80072ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072d2:	4413      	add	r3, r2
 80072d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	011a      	lsls	r2, r3, #4
 80072e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072ea:	4413      	add	r3, r2
 80072ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007300:	b29a      	uxth	r2, r3
 8007302:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730c:	2b3e      	cmp	r3, #62	@ 0x3e
 800730e:	d923      	bls.n	8007358 <USB_EPStartXfer+0x1628>
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007314:	095b      	lsrs	r3, r3, #5
 8007316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800731a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	2b00      	cmp	r3, #0
 8007324:	d104      	bne.n	8007330 <USB_EPStartXfer+0x1600>
 8007326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800732a:	3b01      	subs	r3, #1
 800732c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29a      	uxth	r2, r3
 8007338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800733c:	b29b      	uxth	r3, r3
 800733e:	029b      	lsls	r3, r3, #10
 8007340:	b29b      	uxth	r3, r3
 8007342:	4313      	orrs	r3, r2
 8007344:	b29b      	uxth	r3, r3
 8007346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734e:	b29a      	uxth	r2, r3
 8007350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	e05c      	b.n	8007412 <USB_EPStartXfer+0x16e2>
 8007358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10c      	bne.n	800737a <USB_EPStartXfer+0x164a>
 8007360:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007370:	b29a      	uxth	r2, r3
 8007372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	e04b      	b.n	8007412 <USB_EPStartXfer+0x16e2>
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <USB_EPStartXfer+0x166a>
 8007390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007394:	3301      	adds	r3, #1
 8007396:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800739a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	029b      	lsls	r3, r3, #10
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	4313      	orrs	r3, r2
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	e02c      	b.n	8007412 <USB_EPStartXfer+0x16e2>
 80073b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d124      	bne.n	8007412 <USB_EPStartXfer+0x16e2>
 80073c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073de:	4413      	add	r3, r2
 80073e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	011a      	lsls	r2, r3, #4
 80073f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073f6:	4413      	add	r3, r2
 80073f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	e001      	b.n	8007412 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e03a      	b.n	8007488 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007438:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800743c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007440:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007444:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007448:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800744c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007450:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007458:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	441a      	add	r2, r3
 800746e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800747a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800747e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007482:	b29b      	uxth	r3, r3
 8007484:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007492:	b480      	push	{r7}
 8007494:	b085      	sub	sp, #20
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d020      	beq.n	80074e6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ba:	81bb      	strh	r3, [r7, #12]
 80074bc:	89bb      	ldrh	r3, [r7, #12]
 80074be:	f083 0310 	eor.w	r3, r3, #16
 80074c2:	81bb      	strh	r3, [r7, #12]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	441a      	add	r2, r3
 80074ce:	89bb      	ldrh	r3, [r7, #12]
 80074d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	8013      	strh	r3, [r2, #0]
 80074e4:	e01f      	b.n	8007526 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074fc:	81fb      	strh	r3, [r7, #14]
 80074fe:	89fb      	ldrh	r3, [r7, #14]
 8007500:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007504:	81fb      	strh	r3, [r7, #14]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	441a      	add	r2, r3
 8007510:	89fb      	ldrh	r3, [r7, #14]
 8007512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800751a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800751e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007522:	b29b      	uxth	r3, r3
 8007524:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr

08007532 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007532:	b480      	push	{r7}
 8007534:	b087      	sub	sp, #28
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	7b1b      	ldrb	r3, [r3, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 809d 	bne.w	8007680 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	785b      	ldrb	r3, [r3, #1]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d04c      	beq.n	80075e8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	823b      	strh	r3, [r7, #16]
 800755c:	8a3b      	ldrh	r3, [r7, #16]
 800755e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01b      	beq.n	800759e <USB_EPClearStall+0x6c>
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800757c:	81fb      	strh	r3, [r7, #14]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	441a      	add	r2, r3
 8007588:	89fb      	ldrh	r3, [r7, #14]
 800758a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800758e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007596:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800759a:	b29b      	uxth	r3, r3
 800759c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	78db      	ldrb	r3, [r3, #3]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d06c      	beq.n	8007680 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075bc:	81bb      	strh	r3, [r7, #12]
 80075be:	89bb      	ldrh	r3, [r7, #12]
 80075c0:	f083 0320 	eor.w	r3, r3, #32
 80075c4:	81bb      	strh	r3, [r7, #12]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	441a      	add	r2, r3
 80075d0:	89bb      	ldrh	r3, [r7, #12]
 80075d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	8013      	strh	r3, [r2, #0]
 80075e6:	e04b      	b.n	8007680 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	82fb      	strh	r3, [r7, #22]
 80075f6:	8afb      	ldrh	r3, [r7, #22]
 80075f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01b      	beq.n	8007638 <USB_EPClearStall+0x106>
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007616:	82bb      	strh	r3, [r7, #20]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	441a      	add	r2, r3
 8007622:	8abb      	ldrh	r3, [r7, #20]
 8007624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800762c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007634:	b29b      	uxth	r3, r3
 8007636:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800764a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764e:	827b      	strh	r3, [r7, #18]
 8007650:	8a7b      	ldrh	r3, [r7, #18]
 8007652:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007656:	827b      	strh	r3, [r7, #18]
 8007658:	8a7b      	ldrh	r3, [r7, #18]
 800765a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800765e:	827b      	strh	r3, [r7, #18]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	441a      	add	r2, r3
 800766a:	8a7b      	ldrh	r3, [r7, #18]
 800766c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767c:	b29b      	uxth	r3, r3
 800767e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr

0800768c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2280      	movs	r2, #128	@ 0x80
 80076a2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr

080076b2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr

080076c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bc80      	pop	{r7}
 80076d8:	4770      	bx	lr

080076da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80076da:	b480      	push	{r7}
 80076dc:	b085      	sub	sp, #20
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076ec:	68fb      	ldr	r3, [r7, #12]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bc80      	pop	{r7}
 80076f6:	4770      	bx	lr

080076f8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	bc80      	pop	{r7}
 800770c:	4770      	bx	lr

0800770e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800770e:	b480      	push	{r7}
 8007710:	b08b      	sub	sp, #44	@ 0x2c
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	4611      	mov	r1, r2
 800771a:	461a      	mov	r2, r3
 800771c:	460b      	mov	r3, r1
 800771e:	80fb      	strh	r3, [r7, #6]
 8007720:	4613      	mov	r3, r2
 8007722:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007724:	88bb      	ldrh	r3, [r7, #4]
 8007726:	3301      	adds	r3, #1
 8007728:	085b      	lsrs	r3, r3, #1
 800772a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007734:	88fb      	ldrh	r3, [r7, #6]
 8007736:	005a      	lsls	r2, r3, #1
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007740:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
 8007746:	e01e      	b.n	8007786 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	3301      	adds	r3, #1
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	b21a      	sxth	r2, r3
 8007758:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800775c:	4313      	orrs	r3, r2
 800775e:	b21b      	sxth	r3, r3
 8007760:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	8a7a      	ldrh	r2, [r7, #18]
 8007766:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	3302      	adds	r3, #2
 800776c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	3302      	adds	r3, #2
 8007772:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	3301      	adds	r3, #1
 8007778:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	3301      	adds	r3, #1
 800777e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	3b01      	subs	r3, #1
 8007784:	627b      	str	r3, [r7, #36]	@ 0x24
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1dd      	bne.n	8007748 <USB_WritePMA+0x3a>
  }
}
 800778c:	bf00      	nop
 800778e:	bf00      	nop
 8007790:	372c      	adds	r7, #44	@ 0x2c
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr

08007798 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007798:	b480      	push	{r7}
 800779a:	b08b      	sub	sp, #44	@ 0x2c
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	4611      	mov	r1, r2
 80077a4:	461a      	mov	r2, r3
 80077a6:	460b      	mov	r3, r1
 80077a8:	80fb      	strh	r3, [r7, #6]
 80077aa:	4613      	mov	r3, r2
 80077ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80077ae:	88bb      	ldrh	r3, [r7, #4]
 80077b0:	085b      	lsrs	r3, r3, #1
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	005a      	lsls	r2, r3, #1
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077ca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80077d0:	e01b      	b.n	800780a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	3302      	adds	r3, #2
 80077de:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	3301      	adds	r3, #1
 80077ec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	0a1b      	lsrs	r3, r3, #8
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	3301      	adds	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	3302      	adds	r3, #2
 8007802:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	3b01      	subs	r3, #1
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e0      	bne.n	80077d2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007810:	88bb      	ldrh	r3, [r7, #4]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	b29b      	uxth	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d007      	beq.n	800782c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	b2da      	uxtb	r2, r3
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	701a      	strb	r2, [r3, #0]
  }
}
 800782c:	bf00      	nop
 800782e:	372c      	adds	r7, #44	@ 0x2c
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr

08007836 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	4613      	mov	r3, r2
 8007842:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800784a:	2302      	movs	r3, #2
 800784c:	e01a      	b.n	8007884 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	79fa      	ldrb	r2, [r7, #7]
 800787a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f001 fc03 	bl	8009088 <USBD_LL_Init>

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d006      	beq.n	80078ae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
 80078ac:	e001      	b.n	80078b2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80078ae:	2302      	movs	r3, #2
 80078b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr

080078be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fc26 	bl	8009118 <USBD_LL_Start>

  return USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr

080078ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	460b      	mov	r3, r1
 80078f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80078f6:	2302      	movs	r3, #2
 80078f8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00c      	beq.n	800791e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	4611      	mov	r1, r2
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	4798      	blx	r3
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	460b      	mov	r3, r1
 8007932:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	78fa      	ldrb	r2, [r7, #3]
 800793e:	4611      	mov	r1, r2
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3

  return USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fed8 	bl	8008716 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007974:	461a      	mov	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007982:	f003 031f 	and.w	r3, r3, #31
 8007986:	2b02      	cmp	r3, #2
 8007988:	d016      	beq.n	80079b8 <USBD_LL_SetupStage+0x6a>
 800798a:	2b02      	cmp	r3, #2
 800798c:	d81c      	bhi.n	80079c8 <USBD_LL_SetupStage+0x7a>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <USBD_LL_SetupStage+0x4a>
 8007992:	2b01      	cmp	r3, #1
 8007994:	d008      	beq.n	80079a8 <USBD_LL_SetupStage+0x5a>
 8007996:	e017      	b.n	80079c8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f9cb 	bl	8007d3c <USBD_StdDevReq>
      break;
 80079a6:	e01a      	b.n	80079de <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fa2d 	bl	8007e10 <USBD_StdItfReq>
      break;
 80079b6:	e012      	b.n	80079de <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fa6d 	bl	8007ea0 <USBD_StdEPReq>
      break;
 80079c6:	e00a      	b.n	80079de <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80079ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 fbfe 	bl	80091d8 <USBD_LL_StallEP>
      break;
 80079dc:	bf00      	nop
  }

  return USBD_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	460b      	mov	r3, r1
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d14b      	bne.n	8007a94 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a02:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d134      	bne.n	8007a78 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d919      	bls.n	8007a4e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	1ad2      	subs	r2, r2, r3
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d203      	bcs.n	8007a3c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	e002      	b.n	8007a42 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f001 f8f0 	bl	8008c2c <USBD_CtlContinueRx>
 8007a4c:	e038      	b.n	8007ac0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d105      	bne.n	8007a70 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f001 f8ed 	bl	8008c50 <USBD_CtlSendStatus>
 8007a76:	e023      	b.n	8007ac0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a7e:	2b05      	cmp	r3, #5
 8007a80:	d11e      	bne.n	8007ac0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f001 fba3 	bl	80091d8 <USBD_LL_StallEP>
 8007a92:	e015      	b.n	8007ac0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00d      	beq.n	8007abc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d108      	bne.n	8007abc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	7afa      	ldrb	r2, [r7, #11]
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	4798      	blx	r3
 8007aba:	e001      	b.n	8007ac0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007abc:	2302      	movs	r3, #2
 8007abe:	e000      	b.n	8007ac2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b086      	sub	sp, #24
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	607a      	str	r2, [r7, #4]
 8007ad6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d17f      	bne.n	8007bde <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3314      	adds	r3, #20
 8007ae2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d15c      	bne.n	8007ba8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d915      	bls.n	8007b26 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	461a      	mov	r2, r3
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f001 f878 	bl	8008c08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b18:	2300      	movs	r3, #0
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f001 fc05 	bl	800932e <USBD_LL_PrepareReceive>
 8007b24:	e04e      	b.n	8007bc4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	6912      	ldr	r2, [r2, #16]
 8007b2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b32:	fb01 f202 	mul.w	r2, r1, r2
 8007b36:	1a9b      	subs	r3, r3, r2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d11c      	bne.n	8007b76 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d316      	bcc.n	8007b76 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d20f      	bcs.n	8007b76 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b56:	2200      	movs	r2, #0
 8007b58:	2100      	movs	r1, #0
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f001 f854 	bl	8008c08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f001 fbdd 	bl	800932e <USBD_LL_PrepareReceive>
 8007b74:	e026      	b.n	8007bc4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d105      	bne.n	8007b98 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007b98:	2180      	movs	r1, #128	@ 0x80
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f001 fb1c 	bl	80091d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f001 f868 	bl	8008c76 <USBD_CtlReceiveStatus>
 8007ba6:	e00d      	b.n	8007bc4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d004      	beq.n	8007bbc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d103      	bne.n	8007bc4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007bbc:	2180      	movs	r1, #128	@ 0x80
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f001 fb0a 	bl	80091d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d11d      	bne.n	8007c0a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f7ff fe81 	bl	80078d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007bdc:	e015      	b.n	8007c0a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00d      	beq.n	8007c06 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d108      	bne.n	8007c06 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	7afa      	ldrb	r2, [r7, #11]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	4798      	blx	r3
 8007c04:	e001      	b.n	8007c0a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c06:	2302      	movs	r3, #2
 8007c08:	e000      	b.n	8007c0c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c1c:	2340      	movs	r3, #64	@ 0x40
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 fa93 	bl	800914e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2240      	movs	r2, #64	@ 0x40
 8007c34:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c38:	2340      	movs	r3, #64	@ 0x40
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2180      	movs	r1, #128	@ 0x80
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fa85 	bl	800914e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2240      	movs	r2, #64	@ 0x40
 8007c4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d009      	beq.n	8007c8c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6852      	ldr	r2, [r2, #4]
 8007c84:	b2d2      	uxtb	r2, r2
 8007c86:	4611      	mov	r1, r2
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
  }

  return USBD_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	78fa      	ldrb	r2, [r7, #3]
 8007ca6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2204      	movs	r2, #4
 8007ccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr

08007cdc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d105      	bne.n	8007cfa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr

08007d06 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d10b      	bne.n	8007d30 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d52:	2b40      	cmp	r3, #64	@ 0x40
 8007d54:	d005      	beq.n	8007d62 <USBD_StdDevReq+0x26>
 8007d56:	2b40      	cmp	r3, #64	@ 0x40
 8007d58:	d84f      	bhi.n	8007dfa <USBD_StdDevReq+0xbe>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d009      	beq.n	8007d72 <USBD_StdDevReq+0x36>
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	d14b      	bne.n	8007dfa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	4798      	blx	r3
      break;
 8007d70:	e048      	b.n	8007e04 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	2b09      	cmp	r3, #9
 8007d78:	d839      	bhi.n	8007dee <USBD_StdDevReq+0xb2>
 8007d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d80 <USBD_StdDevReq+0x44>)
 8007d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d80:	08007dd1 	.word	0x08007dd1
 8007d84:	08007de5 	.word	0x08007de5
 8007d88:	08007def 	.word	0x08007def
 8007d8c:	08007ddb 	.word	0x08007ddb
 8007d90:	08007def 	.word	0x08007def
 8007d94:	08007db3 	.word	0x08007db3
 8007d98:	08007da9 	.word	0x08007da9
 8007d9c:	08007def 	.word	0x08007def
 8007da0:	08007dc7 	.word	0x08007dc7
 8007da4:	08007dbd 	.word	0x08007dbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f9dc 	bl	8008168 <USBD_GetDescriptor>
          break;
 8007db0:	e022      	b.n	8007df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fb3f 	bl	8008438 <USBD_SetAddress>
          break;
 8007dba:	e01d      	b.n	8007df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fb7e 	bl	80084c0 <USBD_SetConfig>
          break;
 8007dc4:	e018      	b.n	8007df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fc07 	bl	80085dc <USBD_GetConfig>
          break;
 8007dce:	e013      	b.n	8007df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fc37 	bl	8008646 <USBD_GetStatus>
          break;
 8007dd8:	e00e      	b.n	8007df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fc65 	bl	80086ac <USBD_SetFeature>
          break;
 8007de2:	e009      	b.n	8007df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fc74 	bl	80086d4 <USBD_ClrFeature>
          break;
 8007dec:	e004      	b.n	8007df8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fcc9 	bl	8008788 <USBD_CtlError>
          break;
 8007df6:	bf00      	nop
      }
      break;
 8007df8:	e004      	b.n	8007e04 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fcc3 	bl	8008788 <USBD_CtlError>
      break;
 8007e02:	bf00      	nop
  }

  return ret;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop

08007e10 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e26:	2b40      	cmp	r3, #64	@ 0x40
 8007e28:	d005      	beq.n	8007e36 <USBD_StdItfReq+0x26>
 8007e2a:	2b40      	cmp	r3, #64	@ 0x40
 8007e2c:	d82e      	bhi.n	8007e8c <USBD_StdItfReq+0x7c>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <USBD_StdItfReq+0x26>
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	d12a      	bne.n	8007e8c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d81d      	bhi.n	8007e7e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	889b      	ldrh	r3, [r3, #4]
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d813      	bhi.n	8007e74 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	4798      	blx	r3
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	88db      	ldrh	r3, [r3, #6]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d110      	bne.n	8007e88 <USBD_StdItfReq+0x78>
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10d      	bne.n	8007e88 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 feef 	bl	8008c50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e72:	e009      	b.n	8007e88 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fc86 	bl	8008788 <USBD_CtlError>
          break;
 8007e7c:	e004      	b.n	8007e88 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fc81 	bl	8008788 <USBD_CtlError>
          break;
 8007e86:	e000      	b.n	8007e8a <USBD_StdItfReq+0x7a>
          break;
 8007e88:	bf00      	nop
      }
      break;
 8007e8a:	e004      	b.n	8007e96 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fc7a 	bl	8008788 <USBD_CtlError>
      break;
 8007e94:	bf00      	nop
  }

  return USBD_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	889b      	ldrh	r3, [r3, #4]
 8007eb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ebc:	2b40      	cmp	r3, #64	@ 0x40
 8007ebe:	d007      	beq.n	8007ed0 <USBD_StdEPReq+0x30>
 8007ec0:	2b40      	cmp	r3, #64	@ 0x40
 8007ec2:	f200 8146 	bhi.w	8008152 <USBD_StdEPReq+0x2b2>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <USBD_StdEPReq+0x40>
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	f040 8141 	bne.w	8008152 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	4798      	blx	r3
      break;
 8007ede:	e13d      	b.n	800815c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ee8:	2b20      	cmp	r3, #32
 8007eea:	d10a      	bne.n	8007f02 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
 8007efa:	4603      	mov	r3, r0
 8007efc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	e12d      	b.n	800815e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	785b      	ldrb	r3, [r3, #1]
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d007      	beq.n	8007f1a <USBD_StdEPReq+0x7a>
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	f300 811b 	bgt.w	8008146 <USBD_StdEPReq+0x2a6>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d072      	beq.n	8007ffa <USBD_StdEPReq+0x15a>
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d03a      	beq.n	8007f8e <USBD_StdEPReq+0xee>
 8007f18:	e115      	b.n	8008146 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d002      	beq.n	8007f2a <USBD_StdEPReq+0x8a>
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d015      	beq.n	8007f54 <USBD_StdEPReq+0xb4>
 8007f28:	e02b      	b.n	8007f82 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00c      	beq.n	8007f4a <USBD_StdEPReq+0xaa>
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b80      	cmp	r3, #128	@ 0x80
 8007f34:	d009      	beq.n	8007f4a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 f94c 	bl	80091d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f40:	2180      	movs	r1, #128	@ 0x80
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 f948 	bl	80091d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f48:	e020      	b.n	8007f8c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fc1b 	bl	8008788 <USBD_CtlError>
              break;
 8007f52:	e01b      	b.n	8007f8c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	885b      	ldrh	r3, [r3, #2]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10e      	bne.n	8007f7a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00b      	beq.n	8007f7a <USBD_StdEPReq+0xda>
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b80      	cmp	r3, #128	@ 0x80
 8007f66:	d008      	beq.n	8007f7a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	88db      	ldrh	r3, [r3, #6]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d104      	bne.n	8007f7a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 f92f 	bl	80091d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fe68 	bl	8008c50 <USBD_CtlSendStatus>

              break;
 8007f80:	e004      	b.n	8007f8c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fbff 	bl	8008788 <USBD_CtlError>
              break;
 8007f8a:	bf00      	nop
          }
          break;
 8007f8c:	e0e0      	b.n	8008150 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d002      	beq.n	8007f9e <USBD_StdEPReq+0xfe>
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d015      	beq.n	8007fc8 <USBD_StdEPReq+0x128>
 8007f9c:	e026      	b.n	8007fec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00c      	beq.n	8007fbe <USBD_StdEPReq+0x11e>
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	2b80      	cmp	r3, #128	@ 0x80
 8007fa8:	d009      	beq.n	8007fbe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 f912 	bl	80091d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007fb4:	2180      	movs	r1, #128	@ 0x80
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 f90e 	bl	80091d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fbc:	e01c      	b.n	8007ff8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fbe1 	bl	8008788 <USBD_CtlError>
              break;
 8007fc6:	e017      	b.n	8007ff8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	885b      	ldrh	r3, [r3, #2]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d112      	bne.n	8007ff6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d004      	beq.n	8007fe4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 f919 	bl	8009216 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fe33 	bl	8008c50 <USBD_CtlSendStatus>
              }
              break;
 8007fea:	e004      	b.n	8007ff6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fbca 	bl	8008788 <USBD_CtlError>
              break;
 8007ff4:	e000      	b.n	8007ff8 <USBD_StdEPReq+0x158>
              break;
 8007ff6:	bf00      	nop
          }
          break;
 8007ff8:	e0aa      	b.n	8008150 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008000:	2b02      	cmp	r3, #2
 8008002:	d002      	beq.n	800800a <USBD_StdEPReq+0x16a>
 8008004:	2b03      	cmp	r3, #3
 8008006:	d032      	beq.n	800806e <USBD_StdEPReq+0x1ce>
 8008008:	e097      	b.n	800813a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d007      	beq.n	8008020 <USBD_StdEPReq+0x180>
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	2b80      	cmp	r3, #128	@ 0x80
 8008014:	d004      	beq.n	8008020 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fbb5 	bl	8008788 <USBD_CtlError>
                break;
 800801e:	e091      	b.n	8008144 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008024:	2b00      	cmp	r3, #0
 8008026:	da0b      	bge.n	8008040 <USBD_StdEPReq+0x1a0>
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800802e:	4613      	mov	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	3310      	adds	r3, #16
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	4413      	add	r3, r2
 800803c:	3304      	adds	r3, #4
 800803e:	e00b      	b.n	8008058 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	4413      	add	r3, r2
 8008056:	3304      	adds	r3, #4
 8008058:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2202      	movs	r2, #2
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fdb2 	bl	8008bd0 <USBD_CtlSendData>
              break;
 800806c:	e06a      	b.n	8008144 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800806e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008072:	2b00      	cmp	r3, #0
 8008074:	da11      	bge.n	800809a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	f003 020f 	and.w	r2, r3, #15
 800807c:	6879      	ldr	r1, [r7, #4]
 800807e:	4613      	mov	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	440b      	add	r3, r1
 8008088:	3318      	adds	r3, #24
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d117      	bne.n	80080c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fb78 	bl	8008788 <USBD_CtlError>
                  break;
 8008098:	e054      	b.n	8008144 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	f003 020f 	and.w	r2, r3, #15
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	440b      	add	r3, r1
 80080ac:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d104      	bne.n	80080c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fb65 	bl	8008788 <USBD_CtlError>
                  break;
 80080be:	e041      	b.n	8008144 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	da0b      	bge.n	80080e0 <USBD_StdEPReq+0x240>
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080ce:	4613      	mov	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	3310      	adds	r3, #16
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	4413      	add	r3, r2
 80080dc:	3304      	adds	r3, #4
 80080de:	e00b      	b.n	80080f8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	4413      	add	r3, r2
 80080f6:	3304      	adds	r3, #4
 80080f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <USBD_StdEPReq+0x266>
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	2b80      	cmp	r3, #128	@ 0x80
 8008104:	d103      	bne.n	800810e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	e00e      	b.n	800812c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 f89e 	bl	8009254 <USBD_LL_IsStallEP>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2201      	movs	r2, #1
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	e002      	b.n	800812c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2202      	movs	r2, #2
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fd4c 	bl	8008bd0 <USBD_CtlSendData>
              break;
 8008138:	e004      	b.n	8008144 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fb23 	bl	8008788 <USBD_CtlError>
              break;
 8008142:	bf00      	nop
          }
          break;
 8008144:	e004      	b.n	8008150 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fb1d 	bl	8008788 <USBD_CtlError>
          break;
 800814e:	bf00      	nop
      }
      break;
 8008150:	e004      	b.n	800815c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fb17 	bl	8008788 <USBD_CtlError>
      break;
 800815a:	bf00      	nop
  }

  return ret;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	885b      	ldrh	r3, [r3, #2]
 8008182:	0a1b      	lsrs	r3, r3, #8
 8008184:	b29b      	uxth	r3, r3
 8008186:	3b01      	subs	r3, #1
 8008188:	2b06      	cmp	r3, #6
 800818a:	f200 8128 	bhi.w	80083de <USBD_GetDescriptor+0x276>
 800818e:	a201      	add	r2, pc, #4	@ (adr r2, 8008194 <USBD_GetDescriptor+0x2c>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081b1 	.word	0x080081b1
 8008198:	080081c9 	.word	0x080081c9
 800819c:	08008209 	.word	0x08008209
 80081a0:	080083df 	.word	0x080083df
 80081a4:	080083df 	.word	0x080083df
 80081a8:	0800837f 	.word	0x0800837f
 80081ac:	080083ab 	.word	0x080083ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7c12      	ldrb	r2, [r2, #16]
 80081bc:	f107 0108 	add.w	r1, r7, #8
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	60f8      	str	r0, [r7, #12]
      break;
 80081c6:	e112      	b.n	80083ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	7c1b      	ldrb	r3, [r3, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10d      	bne.n	80081ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d8:	f107 0208 	add.w	r2, r7, #8
 80081dc:	4610      	mov	r0, r2
 80081de:	4798      	blx	r3
 80081e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3301      	adds	r3, #1
 80081e6:	2202      	movs	r2, #2
 80081e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081ea:	e100      	b.n	80083ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f4:	f107 0208 	add.w	r2, r7, #8
 80081f8:	4610      	mov	r0, r2
 80081fa:	4798      	blx	r3
 80081fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	2202      	movs	r2, #2
 8008204:	701a      	strb	r2, [r3, #0]
      break;
 8008206:	e0f2      	b.n	80083ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	885b      	ldrh	r3, [r3, #2]
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b05      	cmp	r3, #5
 8008210:	f200 80ac 	bhi.w	800836c <USBD_GetDescriptor+0x204>
 8008214:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <USBD_GetDescriptor+0xb4>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008235 	.word	0x08008235
 8008220:	08008269 	.word	0x08008269
 8008224:	0800829d 	.word	0x0800829d
 8008228:	080082d1 	.word	0x080082d1
 800822c:	08008305 	.word	0x08008305
 8008230:	08008339 	.word	0x08008339
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	7c12      	ldrb	r2, [r2, #16]
 800824c:	f107 0108 	add.w	r1, r7, #8
 8008250:	4610      	mov	r0, r2
 8008252:	4798      	blx	r3
 8008254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008256:	e091      	b.n	800837c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fa94 	bl	8008788 <USBD_CtlError>
            err++;
 8008260:	7afb      	ldrb	r3, [r7, #11]
 8008262:	3301      	adds	r3, #1
 8008264:	72fb      	strb	r3, [r7, #11]
          break;
 8008266:	e089      	b.n	800837c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	7c12      	ldrb	r2, [r2, #16]
 8008280:	f107 0108 	add.w	r1, r7, #8
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
 8008288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800828a:	e077      	b.n	800837c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa7a 	bl	8008788 <USBD_CtlError>
            err++;
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	3301      	adds	r3, #1
 8008298:	72fb      	strb	r3, [r7, #11]
          break;
 800829a:	e06f      	b.n	800837c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00b      	beq.n	80082c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	7c12      	ldrb	r2, [r2, #16]
 80082b4:	f107 0108 	add.w	r1, r7, #8
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
 80082bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082be:	e05d      	b.n	800837c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa60 	bl	8008788 <USBD_CtlError>
            err++;
 80082c8:	7afb      	ldrb	r3, [r7, #11]
 80082ca:	3301      	adds	r3, #1
 80082cc:	72fb      	strb	r3, [r7, #11]
          break;
 80082ce:	e055      	b.n	800837c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	7c12      	ldrb	r2, [r2, #16]
 80082e8:	f107 0108 	add.w	r1, r7, #8
 80082ec:	4610      	mov	r0, r2
 80082ee:	4798      	blx	r3
 80082f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082f2:	e043      	b.n	800837c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fa46 	bl	8008788 <USBD_CtlError>
            err++;
 80082fc:	7afb      	ldrb	r3, [r7, #11]
 80082fe:	3301      	adds	r3, #1
 8008300:	72fb      	strb	r3, [r7, #11]
          break;
 8008302:	e03b      	b.n	800837c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	7c12      	ldrb	r2, [r2, #16]
 800831c:	f107 0108 	add.w	r1, r7, #8
 8008320:	4610      	mov	r0, r2
 8008322:	4798      	blx	r3
 8008324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008326:	e029      	b.n	800837c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa2c 	bl	8008788 <USBD_CtlError>
            err++;
 8008330:	7afb      	ldrb	r3, [r7, #11]
 8008332:	3301      	adds	r3, #1
 8008334:	72fb      	strb	r3, [r7, #11]
          break;
 8008336:	e021      	b.n	800837c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	7c12      	ldrb	r2, [r2, #16]
 8008350:	f107 0108 	add.w	r1, r7, #8
 8008354:	4610      	mov	r0, r2
 8008356:	4798      	blx	r3
 8008358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800835a:	e00f      	b.n	800837c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa12 	bl	8008788 <USBD_CtlError>
            err++;
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	3301      	adds	r3, #1
 8008368:	72fb      	strb	r3, [r7, #11]
          break;
 800836a:	e007      	b.n	800837c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa0a 	bl	8008788 <USBD_CtlError>
          err++;
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	3301      	adds	r3, #1
 8008378:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800837a:	e038      	b.n	80083ee <USBD_GetDescriptor+0x286>
 800837c:	e037      	b.n	80083ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	7c1b      	ldrb	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d109      	bne.n	800839a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800838c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800838e:	f107 0208 	add.w	r2, r7, #8
 8008392:	4610      	mov	r0, r2
 8008394:	4798      	blx	r3
 8008396:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008398:	e029      	b.n	80083ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f9f3 	bl	8008788 <USBD_CtlError>
        err++;
 80083a2:	7afb      	ldrb	r3, [r7, #11]
 80083a4:	3301      	adds	r3, #1
 80083a6:	72fb      	strb	r3, [r7, #11]
      break;
 80083a8:	e021      	b.n	80083ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	7c1b      	ldrb	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10d      	bne.n	80083ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ba:	f107 0208 	add.w	r2, r7, #8
 80083be:	4610      	mov	r0, r2
 80083c0:	4798      	blx	r3
 80083c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3301      	adds	r3, #1
 80083c8:	2207      	movs	r2, #7
 80083ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083cc:	e00f      	b.n	80083ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f9d9 	bl	8008788 <USBD_CtlError>
        err++;
 80083d6:	7afb      	ldrb	r3, [r7, #11]
 80083d8:	3301      	adds	r3, #1
 80083da:	72fb      	strb	r3, [r7, #11]
      break;
 80083dc:	e007      	b.n	80083ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f9d1 	bl	8008788 <USBD_CtlError>
      err++;
 80083e6:	7afb      	ldrb	r3, [r7, #11]
 80083e8:	3301      	adds	r3, #1
 80083ea:	72fb      	strb	r3, [r7, #11]
      break;
 80083ec:	bf00      	nop
  }

  if (err != 0U)
 80083ee:	7afb      	ldrb	r3, [r7, #11]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d11c      	bne.n	800842e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80083f4:	893b      	ldrh	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d011      	beq.n	800841e <USBD_GetDescriptor+0x2b6>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	88db      	ldrh	r3, [r3, #6]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00d      	beq.n	800841e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	88da      	ldrh	r2, [r3, #6]
 8008406:	893b      	ldrh	r3, [r7, #8]
 8008408:	4293      	cmp	r3, r2
 800840a:	bf28      	it	cs
 800840c:	4613      	movcs	r3, r2
 800840e:	b29b      	uxth	r3, r3
 8008410:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008412:	893b      	ldrh	r3, [r7, #8]
 8008414:	461a      	mov	r2, r3
 8008416:	68f9      	ldr	r1, [r7, #12]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fbd9 	bl	8008bd0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	88db      	ldrh	r3, [r3, #6]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d104      	bne.n	8008430 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fc12 	bl	8008c50 <USBD_CtlSendStatus>
 800842c:	e000      	b.n	8008430 <USBD_GetDescriptor+0x2c8>
    return;
 800842e:	bf00      	nop
    }
  }
}
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop

08008438 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	889b      	ldrh	r3, [r3, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d130      	bne.n	80084ac <USBD_SetAddress+0x74>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	88db      	ldrh	r3, [r3, #6]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d12c      	bne.n	80084ac <USBD_SetAddress+0x74>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	885b      	ldrh	r3, [r3, #2]
 8008456:	2b7f      	cmp	r3, #127	@ 0x7f
 8008458:	d828      	bhi.n	80084ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	885b      	ldrh	r3, [r3, #2]
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008464:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800846c:	2b03      	cmp	r3, #3
 800846e:	d104      	bne.n	800847a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f988 	bl	8008788 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008478:	e01d      	b.n	80084b6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	7bfa      	ldrb	r2, [r7, #15]
 800847e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 ff0f 	bl	80092aa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fbdf 	bl	8008c50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d004      	beq.n	80084a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a0:	e009      	b.n	80084b6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084aa:	e004      	b.n	80084b6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f96a 	bl	8008788 <USBD_CtlError>
  }
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	885b      	ldrh	r3, [r3, #2]
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	4b41      	ldr	r3, [pc, #260]	@ (80085d8 <USBD_SetConfig+0x118>)
 80084d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084d4:	4b40      	ldr	r3, [pc, #256]	@ (80085d8 <USBD_SetConfig+0x118>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d904      	bls.n	80084e6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f952 	bl	8008788 <USBD_CtlError>
 80084e4:	e075      	b.n	80085d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d002      	beq.n	80084f6 <USBD_SetConfig+0x36>
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d023      	beq.n	800853c <USBD_SetConfig+0x7c>
 80084f4:	e062      	b.n	80085bc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80084f6:	4b38      	ldr	r3, [pc, #224]	@ (80085d8 <USBD_SetConfig+0x118>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d01a      	beq.n	8008534 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80084fe:	4b36      	ldr	r3, [pc, #216]	@ (80085d8 <USBD_SetConfig+0x118>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2203      	movs	r2, #3
 800850c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008510:	4b31      	ldr	r3, [pc, #196]	@ (80085d8 <USBD_SetConfig+0x118>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff f9e7 	bl	80078ea <USBD_SetClassConfig>
 800851c:	4603      	mov	r3, r0
 800851e:	2b02      	cmp	r3, #2
 8008520:	d104      	bne.n	800852c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f92f 	bl	8008788 <USBD_CtlError>
            return;
 800852a:	e052      	b.n	80085d2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fb8f 	bl	8008c50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008532:	e04e      	b.n	80085d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fb8b 	bl	8008c50 <USBD_CtlSendStatus>
        break;
 800853a:	e04a      	b.n	80085d2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800853c:	4b26      	ldr	r3, [pc, #152]	@ (80085d8 <USBD_SetConfig+0x118>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d112      	bne.n	800856a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800854c:	4b22      	ldr	r3, [pc, #136]	@ (80085d8 <USBD_SetConfig+0x118>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008556:	4b20      	ldr	r3, [pc, #128]	@ (80085d8 <USBD_SetConfig+0x118>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff f9e3 	bl	8007928 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fb74 	bl	8008c50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008568:	e033      	b.n	80085d2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800856a:	4b1b      	ldr	r3, [pc, #108]	@ (80085d8 <USBD_SetConfig+0x118>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d01d      	beq.n	80085b4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7ff f9d1 	bl	8007928 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008586:	4b14      	ldr	r3, [pc, #80]	@ (80085d8 <USBD_SetConfig+0x118>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008590:	4b11      	ldr	r3, [pc, #68]	@ (80085d8 <USBD_SetConfig+0x118>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff f9a7 	bl	80078ea <USBD_SetClassConfig>
 800859c:	4603      	mov	r3, r0
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d104      	bne.n	80085ac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f8ef 	bl	8008788 <USBD_CtlError>
            return;
 80085aa:	e012      	b.n	80085d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fb4f 	bl	8008c50 <USBD_CtlSendStatus>
        break;
 80085b2:	e00e      	b.n	80085d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fb4b 	bl	8008c50 <USBD_CtlSendStatus>
        break;
 80085ba:	e00a      	b.n	80085d2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f8e2 	bl	8008788 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80085c4:	4b04      	ldr	r3, [pc, #16]	@ (80085d8 <USBD_SetConfig+0x118>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7ff f9ac 	bl	8007928 <USBD_ClrClassConfig>
        break;
 80085d0:	bf00      	nop
    }
  }
}
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	20000e7c 	.word	0x20000e7c

080085dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	88db      	ldrh	r3, [r3, #6]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d004      	beq.n	80085f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f8c9 	bl	8008788 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085f6:	e022      	b.n	800863e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085fe:	2b02      	cmp	r3, #2
 8008600:	dc02      	bgt.n	8008608 <USBD_GetConfig+0x2c>
 8008602:	2b00      	cmp	r3, #0
 8008604:	dc03      	bgt.n	800860e <USBD_GetConfig+0x32>
 8008606:	e015      	b.n	8008634 <USBD_GetConfig+0x58>
 8008608:	2b03      	cmp	r3, #3
 800860a:	d00b      	beq.n	8008624 <USBD_GetConfig+0x48>
 800860c:	e012      	b.n	8008634 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3308      	adds	r3, #8
 8008618:	2201      	movs	r2, #1
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fad7 	bl	8008bd0 <USBD_CtlSendData>
        break;
 8008622:	e00c      	b.n	800863e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3304      	adds	r3, #4
 8008628:	2201      	movs	r2, #1
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 facf 	bl	8008bd0 <USBD_CtlSendData>
        break;
 8008632:	e004      	b.n	800863e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f8a6 	bl	8008788 <USBD_CtlError>
        break;
 800863c:	bf00      	nop
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008656:	3b01      	subs	r3, #1
 8008658:	2b02      	cmp	r3, #2
 800865a:	d81e      	bhi.n	800869a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	88db      	ldrh	r3, [r3, #6]
 8008660:	2b02      	cmp	r3, #2
 8008662:	d004      	beq.n	800866e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f88e 	bl	8008788 <USBD_CtlError>
        break;
 800866c:	e01a      	b.n	80086a4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f043 0202 	orr.w	r2, r3, #2
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	330c      	adds	r3, #12
 800868e:	2202      	movs	r2, #2
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa9c 	bl	8008bd0 <USBD_CtlSendData>
      break;
 8008698:	e004      	b.n	80086a4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f873 	bl	8008788 <USBD_CtlError>
      break;
 80086a2:	bf00      	nop
  }
}
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	885b      	ldrh	r3, [r3, #2]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d106      	bne.n	80086cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fac2 	bl	8008c50 <USBD_CtlSendStatus>
  }
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e4:	3b01      	subs	r3, #1
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d80b      	bhi.n	8008702 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	885b      	ldrh	r3, [r3, #2]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d10c      	bne.n	800870c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 faa8 	bl	8008c50 <USBD_CtlSendStatus>
      }
      break;
 8008700:	e004      	b.n	800870c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f83f 	bl	8008788 <USBD_CtlError>
      break;
 800870a:	e000      	b.n	800870e <USBD_ClrFeature+0x3a>
      break;
 800870c:	bf00      	nop
  }
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781a      	ldrb	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	785a      	ldrb	r2, [r3, #1]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	3302      	adds	r3, #2
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	3303      	adds	r3, #3
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	021b      	lsls	r3, r3, #8
 8008740:	b29b      	uxth	r3, r3
 8008742:	4413      	add	r3, r2
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	3304      	adds	r3, #4
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	3305      	adds	r3, #5
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	b29b      	uxth	r3, r3
 800875c:	4413      	add	r3, r2
 800875e:	b29a      	uxth	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	3306      	adds	r3, #6
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	3307      	adds	r3, #7
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	021b      	lsls	r3, r3, #8
 8008774:	b29b      	uxth	r3, r3
 8008776:	4413      	add	r3, r2
 8008778:	b29a      	uxth	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	80da      	strh	r2, [r3, #6]

}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr

08008788 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008792:	2180      	movs	r1, #128	@ 0x80
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fd1f 	bl	80091d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800879a:	2100      	movs	r1, #0
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fd1b 	bl	80091d8 <USBD_LL_StallEP>
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b086      	sub	sp, #24
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d032      	beq.n	8008826 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f834 	bl	800882e <USBD_GetLen>
 80087c6:	4603      	mov	r3, r0
 80087c8:	3301      	adds	r3, #1
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	75fa      	strb	r2, [r7, #23]
 80087da:	461a      	mov	r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	4413      	add	r3, r2
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	75fa      	strb	r2, [r7, #23]
 80087ec:	461a      	mov	r2, r3
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	4413      	add	r3, r2
 80087f2:	2203      	movs	r2, #3
 80087f4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80087f6:	e012      	b.n	800881e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	60fa      	str	r2, [r7, #12]
 80087fe:	7dfa      	ldrb	r2, [r7, #23]
 8008800:	1c51      	adds	r1, r2, #1
 8008802:	75f9      	strb	r1, [r7, #23]
 8008804:	4611      	mov	r1, r2
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	440a      	add	r2, r1
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	75fa      	strb	r2, [r7, #23]
 8008814:	461a      	mov	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	4413      	add	r3, r2
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e8      	bne.n	80087f8 <USBD_GetString+0x4e>
    }
  }
}
 8008826:	bf00      	nop
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800882e:	b480      	push	{r7}
 8008830:	b085      	sub	sp, #20
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800883a:	e005      	b.n	8008848 <USBD_GetLen+0x1a>
  {
    len++;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	3301      	adds	r3, #1
 8008840:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3301      	adds	r3, #1
 8008846:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1f5      	bne.n	800883c <USBD_GetLen+0xe>
  }

  return len;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	bc80      	pop	{r7}
 800885a:	4770      	bx	lr

0800885c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008868:	2304      	movs	r3, #4
 800886a:	2203      	movs	r2, #3
 800886c:	2181      	movs	r1, #129	@ 0x81
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fc6d 	bl	800914e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800887a:	2010      	movs	r0, #16
 800887c:	f000 fd7a 	bl	8009374 <USBD_static_malloc>
 8008880:	4602      	mov	r2, r0
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8008892:	2302      	movs	r3, #2
 8008894:	e005      	b.n	80088a2 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800889c:	2200      	movs	r2, #0
 800889e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b082      	sub	sp, #8
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	460b      	mov	r3, r1
 80088b4:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80088b6:	2181      	movs	r1, #129	@ 0x81
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fc6e 	bl	800919a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d009      	beq.n	80088e2 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fd59 	bl	800938c <USBD_static_free>
    pdev->pClassData = NULL;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_HID_Setup>:
  * @retval status
  */

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088fc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8008902:	2300      	movs	r3, #0
 8008904:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008916:	2b00      	cmp	r3, #0
 8008918:	d045      	beq.n	80089a6 <USBD_HID_Setup+0xba>
 800891a:	2b20      	cmp	r3, #32
 800891c:	f040 80d3 	bne.w	8008ac6 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	785b      	ldrb	r3, [r3, #1]
 8008924:	3b02      	subs	r3, #2
 8008926:	2b09      	cmp	r3, #9
 8008928:	d835      	bhi.n	8008996 <USBD_HID_Setup+0xaa>
 800892a:	a201      	add	r2, pc, #4	@ (adr r2, 8008930 <USBD_HID_Setup+0x44>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	08008987 	.word	0x08008987
 8008934:	08008967 	.word	0x08008967
 8008938:	08008997 	.word	0x08008997
 800893c:	08008997 	.word	0x08008997
 8008940:	08008997 	.word	0x08008997
 8008944:	08008997 	.word	0x08008997
 8008948:	08008997 	.word	0x08008997
 800894c:	08008997 	.word	0x08008997
 8008950:	08008975 	.word	0x08008975
 8008954:	08008959 	.word	0x08008959
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	885b      	ldrh	r3, [r3, #2]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	461a      	mov	r2, r3
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	601a      	str	r2, [r3, #0]
          break;
 8008964:	e01e      	b.n	80089a4 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2201      	movs	r2, #1
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f92f 	bl	8008bd0 <USBD_CtlSendData>
          break;
 8008972:	e017      	b.n	80089a4 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	885b      	ldrh	r3, [r3, #2]
 8008978:	0a1b      	lsrs	r3, r3, #8
 800897a:	b29b      	uxth	r3, r3
 800897c:	b2db      	uxtb	r3, r3
 800897e:	461a      	mov	r2, r3
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	605a      	str	r2, [r3, #4]
          break;
 8008984:	e00e      	b.n	80089a4 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	3304      	adds	r3, #4
 800898a:	2201      	movs	r2, #1
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f91e 	bl	8008bd0 <USBD_CtlSendData>
          break;
 8008994:	e006      	b.n	80089a4 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff fef5 	bl	8008788 <USBD_CtlError>
          ret = USBD_FAIL;
 800899e:	2302      	movs	r3, #2
 80089a0:	75fb      	strb	r3, [r7, #23]
          break;
 80089a2:	bf00      	nop
      }
      break;
 80089a4:	e096      	b.n	8008ad4 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	2b0b      	cmp	r3, #11
 80089ac:	f200 8083 	bhi.w	8008ab6 <USBD_HID_Setup+0x1ca>
 80089b0:	a201      	add	r2, pc, #4	@ (adr r2, 80089b8 <USBD_HID_Setup+0xcc>)
 80089b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b6:	bf00      	nop
 80089b8:	080089e9 	.word	0x080089e9
 80089bc:	08008ab7 	.word	0x08008ab7
 80089c0:	08008ab7 	.word	0x08008ab7
 80089c4:	08008ab7 	.word	0x08008ab7
 80089c8:	08008ab7 	.word	0x08008ab7
 80089cc:	08008ab7 	.word	0x08008ab7
 80089d0:	08008a11 	.word	0x08008a11
 80089d4:	08008ab7 	.word	0x08008ab7
 80089d8:	08008ab7 	.word	0x08008ab7
 80089dc:	08008ab7 	.word	0x08008ab7
 80089e0:	08008a69 	.word	0x08008a69
 80089e4:	08008a91 	.word	0x08008a91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d107      	bne.n	8008a02 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80089f2:	f107 030e 	add.w	r3, r7, #14
 80089f6:	2202      	movs	r2, #2
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f8e8 	bl	8008bd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a00:	e060      	b.n	8008ac4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff febf 	bl	8008788 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a0e:	e059      	b.n	8008ac4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	885b      	ldrh	r3, [r3, #2]
 8008a14:	0a1b      	lsrs	r3, r3, #8
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2b22      	cmp	r3, #34	@ 0x22
 8008a1a:	d108      	bne.n	8008a2e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	88db      	ldrh	r3, [r3, #6]
 8008a20:	2b73      	cmp	r3, #115	@ 0x73
 8008a22:	bf28      	it	cs
 8008a24:	2373      	movcs	r3, #115	@ 0x73
 8008a26:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8008a28:	4b2d      	ldr	r3, [pc, #180]	@ (8008ae0 <USBD_HID_Setup+0x1f4>)
 8008a2a:	61bb      	str	r3, [r7, #24]
 8008a2c:	e015      	b.n	8008a5a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	0a1b      	lsrs	r3, r3, #8
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	2b21      	cmp	r3, #33	@ 0x21
 8008a38:	d108      	bne.n	8008a4c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ae4 <USBD_HID_Setup+0x1f8>)
 8008a3c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	88db      	ldrh	r3, [r3, #6]
 8008a42:	2b09      	cmp	r3, #9
 8008a44:	bf28      	it	cs
 8008a46:	2309      	movcs	r3, #9
 8008a48:	83fb      	strh	r3, [r7, #30]
 8008a4a:	e006      	b.n	8008a5a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff fe9a 	bl	8008788 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a54:	2302      	movs	r3, #2
 8008a56:	75fb      	strb	r3, [r7, #23]
            break;
 8008a58:	e034      	b.n	8008ac4 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008a5a:	8bfb      	ldrh	r3, [r7, #30]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	69b9      	ldr	r1, [r7, #24]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f8b5 	bl	8008bd0 <USBD_CtlSendData>
          break;
 8008a66:	e02d      	b.n	8008ac4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d107      	bne.n	8008a82 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	3308      	adds	r3, #8
 8008a76:	2201      	movs	r2, #1
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f8a8 	bl	8008bd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a80:	e020      	b.n	8008ac4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7ff fe7f 	bl	8008788 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a8e:	e019      	b.n	8008ac4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d106      	bne.n	8008aa8 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008aa6:	e00d      	b.n	8008ac4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fe6c 	bl	8008788 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ab4:	e006      	b.n	8008ac4 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff fe65 	bl	8008788 <USBD_CtlError>
          ret = USBD_FAIL;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac2:	bf00      	nop
      }
      break;
 8008ac4:	e006      	b.n	8008ad4 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff fe5d 	bl	8008788 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ace:	2302      	movs	r3, #2
 8008ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad2:	bf00      	nop
  }

  return ret;
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3720      	adds	r7, #32
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	200000cc 	.word	0x200000cc
 8008ae4:	200000b4 	.word	0x200000b4

08008ae8 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008afc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d10c      	bne.n	8008b22 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	7b1b      	ldrb	r3, [r3, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d108      	bne.n	8008b22 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2201      	movs	r2, #1
 8008b14:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	2181      	movs	r1, #129	@ 0x81
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 fbe3 	bl	80092e8 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2222      	movs	r2, #34	@ 0x22
 8008b38:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008b3a:	4b03      	ldr	r3, [pc, #12]	@ (8008b48 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bc80      	pop	{r7}
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	20000048 	.word	0x20000048

08008b4c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2222      	movs	r2, #34	@ 0x22
 8008b58:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8008b5a:	4b03      	ldr	r3, [pc, #12]	@ (8008b68 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	2000006c 	.word	0x2000006c

08008b6c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2222      	movs	r2, #34	@ 0x22
 8008b78:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008b7a:	4b03      	ldr	r3, [pc, #12]	@ (8008b88 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bc80      	pop	{r7}
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20000090 	.word	0x20000090

08008b8c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr
	...

08008bb0 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	220a      	movs	r2, #10
 8008bbc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008bbe:	4b03      	ldr	r3, [pc, #12]	@ (8008bcc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bc80      	pop	{r7}
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	200000c0 	.word	0x200000c0

08008bd0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2202      	movs	r2, #2
 8008be2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008be6:	88fa      	ldrh	r2, [r7, #6]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008bec:	88fa      	ldrh	r2, [r7, #6]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bf2:	88fb      	ldrh	r3, [r7, #6]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 fb75 	bl	80092e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 fb63 	bl	80092e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	4613      	mov	r3, r2
 8008c38:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	2100      	movs	r1, #0
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 fb74 	bl	800932e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2204      	movs	r2, #4
 8008c5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c60:	2300      	movs	r3, #0
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fb3e 	bl	80092e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2205      	movs	r2, #5
 8008c82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c86:	2300      	movs	r3, #0
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fb4e 	bl	800932e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	490e      	ldr	r1, [pc, #56]	@ (8008cdc <MX_USB_DEVICE_Init+0x40>)
 8008ca4:	480e      	ldr	r0, [pc, #56]	@ (8008ce0 <MX_USB_DEVICE_Init+0x44>)
 8008ca6:	f7fe fdc6 	bl	8007836 <USBD_Init>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cb0:	f7f8 f871 	bl	8000d96 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008cb4:	490b      	ldr	r1, [pc, #44]	@ (8008ce4 <MX_USB_DEVICE_Init+0x48>)
 8008cb6:	480a      	ldr	r0, [pc, #40]	@ (8008ce0 <MX_USB_DEVICE_Init+0x44>)
 8008cb8:	f7fe fde8 	bl	800788c <USBD_RegisterClass>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cc2:	f7f8 f868 	bl	8000d96 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cc6:	4806      	ldr	r0, [pc, #24]	@ (8008ce0 <MX_USB_DEVICE_Init+0x44>)
 8008cc8:	f7fe fdf9 	bl	80078be <USBD_Start>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008cd2:	f7f8 f860 	bl	8000d96 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cd6:	bf00      	nop
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000140 	.word	0x20000140
 8008ce0:	20000e80 	.word	0x20000e80
 8008ce4:	20000010 	.word	0x20000010

08008ce8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	6039      	str	r1, [r7, #0]
 8008cf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2212      	movs	r2, #18
 8008cf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008cfa:	4b03      	ldr	r3, [pc, #12]	@ (8008d08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc80      	pop	{r7}
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	2000015c 	.word	0x2000015c

08008d0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2204      	movs	r2, #4
 8008d1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d1e:	4b03      	ldr	r3, [pc, #12]	@ (8008d2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bc80      	pop	{r7}
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000170 	.word	0x20000170

08008d30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	6039      	str	r1, [r7, #0]
 8008d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d3c:	79fb      	ldrb	r3, [r7, #7]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d105      	bne.n	8008d4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	4907      	ldr	r1, [pc, #28]	@ (8008d64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d46:	4808      	ldr	r0, [pc, #32]	@ (8008d68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d48:	f7ff fd2f 	bl	80087aa <USBD_GetString>
 8008d4c:	e004      	b.n	8008d58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	4904      	ldr	r1, [pc, #16]	@ (8008d64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d52:	4805      	ldr	r0, [pc, #20]	@ (8008d68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d54:	f7ff fd29 	bl	80087aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d58:	4b02      	ldr	r3, [pc, #8]	@ (8008d64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20001144 	.word	0x20001144
 8008d68:	0800969c 	.word	0x0800969c

08008d6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	6039      	str	r1, [r7, #0]
 8008d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	4904      	ldr	r1, [pc, #16]	@ (8008d8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d7c:	4804      	ldr	r0, [pc, #16]	@ (8008d90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d7e:	f7ff fd14 	bl	80087aa <USBD_GetString>
  return USBD_StrDesc;
 8008d82:	4b02      	ldr	r3, [pc, #8]	@ (8008d8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20001144 	.word	0x20001144
 8008d90:	080096ac 	.word	0x080096ac

08008d94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	221a      	movs	r2, #26
 8008da4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008da6:	f000 f843 	bl	8008e30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008daa:	4b02      	ldr	r3, [pc, #8]	@ (8008db4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20000174 	.word	0x20000174

08008db8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d105      	bne.n	8008dd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	4907      	ldr	r1, [pc, #28]	@ (8008dec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dce:	4808      	ldr	r0, [pc, #32]	@ (8008df0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dd0:	f7ff fceb 	bl	80087aa <USBD_GetString>
 8008dd4:	e004      	b.n	8008de0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	4904      	ldr	r1, [pc, #16]	@ (8008dec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dda:	4805      	ldr	r0, [pc, #20]	@ (8008df0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ddc:	f7ff fce5 	bl	80087aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de0:	4b02      	ldr	r3, [pc, #8]	@ (8008dec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20001144 	.word	0x20001144
 8008df0:	080096b4 	.word	0x080096b4

08008df4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	6039      	str	r1, [r7, #0]
 8008dfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d105      	bne.n	8008e12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	4907      	ldr	r1, [pc, #28]	@ (8008e28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e0a:	4808      	ldr	r0, [pc, #32]	@ (8008e2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e0c:	f7ff fccd 	bl	80087aa <USBD_GetString>
 8008e10:	e004      	b.n	8008e1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	4904      	ldr	r1, [pc, #16]	@ (8008e28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e16:	4805      	ldr	r0, [pc, #20]	@ (8008e2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e18:	f7ff fcc7 	bl	80087aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e1c:	4b02      	ldr	r3, [pc, #8]	@ (8008e28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20001144 	.word	0x20001144
 8008e2c:	080096c0 	.word	0x080096c0

08008e30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e36:	4b0f      	ldr	r3, [pc, #60]	@ (8008e74 <Get_SerialNum+0x44>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8008e78 <Get_SerialNum+0x48>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e42:	4b0e      	ldr	r3, [pc, #56]	@ (8008e7c <Get_SerialNum+0x4c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d009      	beq.n	8008e6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e56:	2208      	movs	r2, #8
 8008e58:	4909      	ldr	r1, [pc, #36]	@ (8008e80 <Get_SerialNum+0x50>)
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 f814 	bl	8008e88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e60:	2204      	movs	r2, #4
 8008e62:	4908      	ldr	r1, [pc, #32]	@ (8008e84 <Get_SerialNum+0x54>)
 8008e64:	68b8      	ldr	r0, [r7, #8]
 8008e66:	f000 f80f 	bl	8008e88 <IntToUnicode>
  }
}
 8008e6a:	bf00      	nop
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	1ffff7e8 	.word	0x1ffff7e8
 8008e78:	1ffff7ec 	.word	0x1ffff7ec
 8008e7c:	1ffff7f0 	.word	0x1ffff7f0
 8008e80:	20000176 	.word	0x20000176
 8008e84:	20000186 	.word	0x20000186

08008e88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	4613      	mov	r3, r2
 8008e94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75fb      	strb	r3, [r7, #23]
 8008e9e:	e027      	b.n	8008ef0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	0f1b      	lsrs	r3, r3, #28
 8008ea4:	2b09      	cmp	r3, #9
 8008ea6:	d80b      	bhi.n	8008ec0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	0f1b      	lsrs	r3, r3, #28
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	440b      	add	r3, r1
 8008eb8:	3230      	adds	r2, #48	@ 0x30
 8008eba:	b2d2      	uxtb	r2, r2
 8008ebc:	701a      	strb	r2, [r3, #0]
 8008ebe:	e00a      	b.n	8008ed6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	0f1b      	lsrs	r3, r3, #28
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	4619      	mov	r1, r3
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	440b      	add	r3, r1
 8008ed0:	3237      	adds	r2, #55	@ 0x37
 8008ed2:	b2d2      	uxtb	r2, r2
 8008ed4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	011b      	lsls	r3, r3, #4
 8008eda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
 8008ede:	005b      	lsls	r3, r3, #1
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	3301      	adds	r3, #1
 8008eee:	75fb      	strb	r3, [r7, #23]
 8008ef0:	7dfa      	ldrb	r2, [r7, #23]
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d3d3      	bcc.n	8008ea0 <IntToUnicode+0x18>
  }
}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bc80      	pop	{r7}
 8008f02:	4770      	bx	lr

08008f04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a0d      	ldr	r2, [pc, #52]	@ (8008f48 <HAL_PCD_MspInit+0x44>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d113      	bne.n	8008f3e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f16:	4b0d      	ldr	r3, [pc, #52]	@ (8008f4c <HAL_PCD_MspInit+0x48>)
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8008f4c <HAL_PCD_MspInit+0x48>)
 8008f1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008f20:	61d3      	str	r3, [r2, #28]
 8008f22:	4b0a      	ldr	r3, [pc, #40]	@ (8008f4c <HAL_PCD_MspInit+0x48>)
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2100      	movs	r1, #0
 8008f32:	2014      	movs	r0, #20
 8008f34:	f7f8 fdd3 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008f38:	2014      	movs	r0, #20
 8008f3a:	f7f8 fdec 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008f3e:	bf00      	nop
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40005c00 	.word	0x40005c00
 8008f4c:	40021000 	.word	0x40021000

08008f50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7fe fcf1 	bl	800794e <USBD_LL_SetupStage>
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	440b      	add	r3, r1
 8008f94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f7fe fd23 	bl	80079e8 <USBD_LL_DataOutStage>
}
 8008fa2:	bf00      	nop
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008fbc:	78fa      	ldrb	r2, [r7, #3]
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	440b      	add	r3, r1
 8008fca:	3324      	adds	r3, #36	@ 0x24
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	78fb      	ldrb	r3, [r7, #3]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	f7fe fd7a 	bl	8007aca <USBD_LL_DataInStage>
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe fe8a 	bl	8007d06 <USBD_LL_SOF>
}
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009002:	2301      	movs	r3, #1
 8009004:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	799b      	ldrb	r3, [r3, #6]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d001      	beq.n	8009012 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800900e:	f7f7 fec2 	bl	8000d96 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009018:	7bfa      	ldrb	r2, [r7, #15]
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f7fe fe3a 	bl	8007c96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fdf3 	bl	8007c14 <USBD_LL_Reset>
}
 800902e:	bf00      	nop
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fe34 	bl	8007cb4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	7a9b      	ldrb	r3, [r3, #10]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009054:	4b04      	ldr	r3, [pc, #16]	@ (8009068 <HAL_PCD_SuspendCallback+0x30>)
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	4a03      	ldr	r2, [pc, #12]	@ (8009068 <HAL_PCD_SuspendCallback+0x30>)
 800905a:	f043 0306 	orr.w	r3, r3, #6
 800905e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	e000ed00 	.word	0xe000ed00

0800906c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe fe2e 	bl	8007cdc <USBD_LL_Resume>
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009090:	4a1f      	ldr	r2, [pc, #124]	@ (8009110 <USBD_LL_Init+0x88>)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a1d      	ldr	r2, [pc, #116]	@ (8009110 <USBD_LL_Init+0x88>)
 800909c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80090a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009110 <USBD_LL_Init+0x88>)
 80090a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009114 <USBD_LL_Init+0x8c>)
 80090a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80090a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009110 <USBD_LL_Init+0x88>)
 80090a8:	2208      	movs	r2, #8
 80090aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80090ac:	4b18      	ldr	r3, [pc, #96]	@ (8009110 <USBD_LL_Init+0x88>)
 80090ae:	2202      	movs	r2, #2
 80090b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80090b2:	4b17      	ldr	r3, [pc, #92]	@ (8009110 <USBD_LL_Init+0x88>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80090b8:	4b15      	ldr	r3, [pc, #84]	@ (8009110 <USBD_LL_Init+0x88>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80090be:	4b14      	ldr	r3, [pc, #80]	@ (8009110 <USBD_LL_Init+0x88>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80090c4:	4812      	ldr	r0, [pc, #72]	@ (8009110 <USBD_LL_Init+0x88>)
 80090c6:	f7f8 ffa8 	bl	800201a <HAL_PCD_Init>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80090d0:	f7f7 fe61 	bl	8000d96 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090da:	2318      	movs	r3, #24
 80090dc:	2200      	movs	r2, #0
 80090de:	2100      	movs	r1, #0
 80090e0:	f7fa fca2 	bl	8003a28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090ea:	2358      	movs	r3, #88	@ 0x58
 80090ec:	2200      	movs	r2, #0
 80090ee:	2180      	movs	r1, #128	@ 0x80
 80090f0:	f7fa fc9a 	bl	8003a28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090fe:	2200      	movs	r2, #0
 8009100:	2181      	movs	r1, #129	@ 0x81
 8009102:	f7fa fc91 	bl	8003a28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20001344 	.word	0x20001344
 8009114:	40005c00 	.word	0x40005c00

08009118 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800912e:	4618      	mov	r0, r3
 8009130:	f7f9 f869 	bl	8002206 <HAL_PCD_Start>
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 f93a 	bl	80093b4 <USBD_Get_USB_Status>
 8009140:	4603      	mov	r3, r0
 8009142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009144:	7bbb      	ldrb	r3, [r7, #14]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	4608      	mov	r0, r1
 8009158:	4611      	mov	r1, r2
 800915a:	461a      	mov	r2, r3
 800915c:	4603      	mov	r3, r0
 800915e:	70fb      	strb	r3, [r7, #3]
 8009160:	460b      	mov	r3, r1
 8009162:	70bb      	strb	r3, [r7, #2]
 8009164:	4613      	mov	r3, r2
 8009166:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009176:	78bb      	ldrb	r3, [r7, #2]
 8009178:	883a      	ldrh	r2, [r7, #0]
 800917a:	78f9      	ldrb	r1, [r7, #3]
 800917c:	f7f9 f9bd 	bl	80024fa <HAL_PCD_EP_Open>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 f914 	bl	80093b4 <USBD_Get_USB_Status>
 800918c:	4603      	mov	r3, r0
 800918e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009190:	7bbb      	ldrb	r3, [r7, #14]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	460b      	mov	r3, r1
 80091a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091b4:	78fa      	ldrb	r2, [r7, #3]
 80091b6:	4611      	mov	r1, r2
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7f9 f9fb 	bl	80025b4 <HAL_PCD_EP_Close>
 80091be:	4603      	mov	r3, r0
 80091c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 f8f5 	bl	80093b4 <USBD_Get_USB_Status>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091f2:	78fa      	ldrb	r2, [r7, #3]
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f9 fa8c 	bl	8002714 <HAL_PCD_EP_SetStall>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f8d6 	bl	80093b4 <USBD_Get_USB_Status>
 8009208:	4603      	mov	r3, r0
 800920a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800920c:	7bbb      	ldrb	r3, [r7, #14]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	460b      	mov	r3, r1
 8009220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f7f9 facd 	bl	80027d4 <HAL_PCD_EP_ClrStall>
 800923a:	4603      	mov	r3, r0
 800923c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 f8b7 	bl	80093b4 <USBD_Get_USB_Status>
 8009246:	4603      	mov	r3, r0
 8009248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924a:	7bbb      	ldrb	r3, [r7, #14]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009266:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800926c:	2b00      	cmp	r3, #0
 800926e:	da0b      	bge.n	8009288 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	4613      	mov	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	440b      	add	r3, r1
 8009282:	3312      	adds	r3, #18
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	e00b      	b.n	80092a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	4613      	mov	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	440b      	add	r3, r1
 800929a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800929e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bc80      	pop	{r7}
 80092a8:	4770      	bx	lr

080092aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	460b      	mov	r3, r1
 80092b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092c4:	78fa      	ldrb	r2, [r7, #3]
 80092c6:	4611      	mov	r1, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7f9 f8f2 	bl	80024b2 <HAL_PCD_SetAddress>
 80092ce:	4603      	mov	r3, r0
 80092d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 f86d 	bl	80093b4 <USBD_Get_USB_Status>
 80092da:	4603      	mov	r3, r0
 80092dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092de:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	607a      	str	r2, [r7, #4]
 80092f2:	461a      	mov	r2, r3
 80092f4:	460b      	mov	r3, r1
 80092f6:	72fb      	strb	r3, [r7, #11]
 80092f8:	4613      	mov	r3, r2
 80092fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800930a:	893b      	ldrh	r3, [r7, #8]
 800930c:	7af9      	ldrb	r1, [r7, #11]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	f7f9 f9c9 	bl	80026a6 <HAL_PCD_EP_Transmit>
 8009314:	4603      	mov	r3, r0
 8009316:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f84a 	bl	80093b4 <USBD_Get_USB_Status>
 8009320:	4603      	mov	r3, r0
 8009322:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009324:	7dbb      	ldrb	r3, [r7, #22]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b086      	sub	sp, #24
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	461a      	mov	r2, r3
 800933a:	460b      	mov	r3, r1
 800933c:	72fb      	strb	r3, [r7, #11]
 800933e:	4613      	mov	r3, r2
 8009340:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009350:	893b      	ldrh	r3, [r7, #8]
 8009352:	7af9      	ldrb	r1, [r7, #11]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	f7f9 f975 	bl	8002644 <HAL_PCD_EP_Receive>
 800935a:	4603      	mov	r3, r0
 800935c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	4618      	mov	r0, r3
 8009362:	f000 f827 	bl	80093b4 <USBD_Get_USB_Status>
 8009366:	4603      	mov	r3, r0
 8009368:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800936a:	7dbb      	ldrb	r3, [r7, #22]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800937c:	4b02      	ldr	r3, [pc, #8]	@ (8009388 <USBD_static_malloc+0x14>)
}
 800937e:	4618      	mov	r0, r3
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	bc80      	pop	{r7}
 8009386:	4770      	bx	lr
 8009388:	2000161c 	.word	0x2000161c

0800938c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]

}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	bc80      	pop	{r7}
 800939c:	4770      	bx	lr

0800939e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	460b      	mov	r3, r1
 80093a8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80093aa:	bf00      	nop
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bc80      	pop	{r7}
 80093b2:	4770      	bx	lr

080093b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093c2:	79fb      	ldrb	r3, [r7, #7]
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d817      	bhi.n	80093f8 <USBD_Get_USB_Status+0x44>
 80093c8:	a201      	add	r2, pc, #4	@ (adr r2, 80093d0 <USBD_Get_USB_Status+0x1c>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	080093e1 	.word	0x080093e1
 80093d4:	080093e7 	.word	0x080093e7
 80093d8:	080093ed 	.word	0x080093ed
 80093dc:	080093f3 	.word	0x080093f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
    break;
 80093e4:	e00b      	b.n	80093fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093e6:	2302      	movs	r3, #2
 80093e8:	73fb      	strb	r3, [r7, #15]
    break;
 80093ea:	e008      	b.n	80093fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093ec:	2301      	movs	r3, #1
 80093ee:	73fb      	strb	r3, [r7, #15]
    break;
 80093f0:	e005      	b.n	80093fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093f2:	2302      	movs	r3, #2
 80093f4:	73fb      	strb	r3, [r7, #15]
    break;
 80093f6:	e002      	b.n	80093fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093f8:	2302      	movs	r3, #2
 80093fa:	73fb      	strb	r3, [r7, #15]
    break;
 80093fc:	bf00      	nop
  }
  return usb_status;
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	bc80      	pop	{r7}
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop

0800940c <memset>:
 800940c:	4603      	mov	r3, r0
 800940e:	4402      	add	r2, r0
 8009410:	4293      	cmp	r3, r2
 8009412:	d100      	bne.n	8009416 <memset+0xa>
 8009414:	4770      	bx	lr
 8009416:	f803 1b01 	strb.w	r1, [r3], #1
 800941a:	e7f9      	b.n	8009410 <memset+0x4>

0800941c <__errno>:
 800941c:	4b01      	ldr	r3, [pc, #4]	@ (8009424 <__errno+0x8>)
 800941e:	6818      	ldr	r0, [r3, #0]
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	20000190 	.word	0x20000190

08009428 <__libc_init_array>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	2600      	movs	r6, #0
 800942c:	4d0c      	ldr	r5, [pc, #48]	@ (8009460 <__libc_init_array+0x38>)
 800942e:	4c0d      	ldr	r4, [pc, #52]	@ (8009464 <__libc_init_array+0x3c>)
 8009430:	1b64      	subs	r4, r4, r5
 8009432:	10a4      	asrs	r4, r4, #2
 8009434:	42a6      	cmp	r6, r4
 8009436:	d109      	bne.n	800944c <__libc_init_array+0x24>
 8009438:	f000 f914 	bl	8009664 <_init>
 800943c:	2600      	movs	r6, #0
 800943e:	4d0a      	ldr	r5, [pc, #40]	@ (8009468 <__libc_init_array+0x40>)
 8009440:	4c0a      	ldr	r4, [pc, #40]	@ (800946c <__libc_init_array+0x44>)
 8009442:	1b64      	subs	r4, r4, r5
 8009444:	10a4      	asrs	r4, r4, #2
 8009446:	42a6      	cmp	r6, r4
 8009448:	d105      	bne.n	8009456 <__libc_init_array+0x2e>
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009450:	4798      	blx	r3
 8009452:	3601      	adds	r6, #1
 8009454:	e7ee      	b.n	8009434 <__libc_init_array+0xc>
 8009456:	f855 3b04 	ldr.w	r3, [r5], #4
 800945a:	4798      	blx	r3
 800945c:	3601      	adds	r6, #1
 800945e:	e7f2      	b.n	8009446 <__libc_init_array+0x1e>
 8009460:	080096fc 	.word	0x080096fc
 8009464:	080096fc 	.word	0x080096fc
 8009468:	080096fc 	.word	0x080096fc
 800946c:	08009700 	.word	0x08009700

08009470 <sqrt>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	4606      	mov	r6, r0
 8009474:	460f      	mov	r7, r1
 8009476:	f000 f81f 	bl	80094b8 <__ieee754_sqrt>
 800947a:	4632      	mov	r2, r6
 800947c:	4604      	mov	r4, r0
 800947e:	460d      	mov	r5, r1
 8009480:	463b      	mov	r3, r7
 8009482:	4630      	mov	r0, r6
 8009484:	4639      	mov	r1, r7
 8009486:	f7f7 fab7 	bl	80009f8 <__aeabi_dcmpun>
 800948a:	b990      	cbnz	r0, 80094b2 <sqrt+0x42>
 800948c:	2200      	movs	r2, #0
 800948e:	2300      	movs	r3, #0
 8009490:	4630      	mov	r0, r6
 8009492:	4639      	mov	r1, r7
 8009494:	f7f7 fa88 	bl	80009a8 <__aeabi_dcmplt>
 8009498:	b158      	cbz	r0, 80094b2 <sqrt+0x42>
 800949a:	f7ff ffbf 	bl	800941c <__errno>
 800949e:	2321      	movs	r3, #33	@ 0x21
 80094a0:	2200      	movs	r2, #0
 80094a2:	6003      	str	r3, [r0, #0]
 80094a4:	2300      	movs	r3, #0
 80094a6:	4610      	mov	r0, r2
 80094a8:	4619      	mov	r1, r3
 80094aa:	f7f7 f935 	bl	8000718 <__aeabi_ddiv>
 80094ae:	4604      	mov	r4, r0
 80094b0:	460d      	mov	r5, r1
 80094b2:	4620      	mov	r0, r4
 80094b4:	4629      	mov	r1, r5
 80094b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094b8 <__ieee754_sqrt>:
 80094b8:	4a67      	ldr	r2, [pc, #412]	@ (8009658 <__ieee754_sqrt+0x1a0>)
 80094ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094be:	438a      	bics	r2, r1
 80094c0:	4606      	mov	r6, r0
 80094c2:	460f      	mov	r7, r1
 80094c4:	460b      	mov	r3, r1
 80094c6:	4604      	mov	r4, r0
 80094c8:	d10e      	bne.n	80094e8 <__ieee754_sqrt+0x30>
 80094ca:	4602      	mov	r2, r0
 80094cc:	f7f6 fffa 	bl	80004c4 <__aeabi_dmul>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4630      	mov	r0, r6
 80094d6:	4639      	mov	r1, r7
 80094d8:	f7f6 fe3e 	bl	8000158 <__adddf3>
 80094dc:	4606      	mov	r6, r0
 80094de:	460f      	mov	r7, r1
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e8:	2900      	cmp	r1, #0
 80094ea:	dc0c      	bgt.n	8009506 <__ieee754_sqrt+0x4e>
 80094ec:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80094f0:	4302      	orrs	r2, r0
 80094f2:	d0f5      	beq.n	80094e0 <__ieee754_sqrt+0x28>
 80094f4:	b189      	cbz	r1, 800951a <__ieee754_sqrt+0x62>
 80094f6:	4602      	mov	r2, r0
 80094f8:	f7f6 fe2c 	bl	8000154 <__aeabi_dsub>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	f7f7 f90a 	bl	8000718 <__aeabi_ddiv>
 8009504:	e7ea      	b.n	80094dc <__ieee754_sqrt+0x24>
 8009506:	150a      	asrs	r2, r1, #20
 8009508:	d115      	bne.n	8009536 <__ieee754_sqrt+0x7e>
 800950a:	2100      	movs	r1, #0
 800950c:	e009      	b.n	8009522 <__ieee754_sqrt+0x6a>
 800950e:	0ae3      	lsrs	r3, r4, #11
 8009510:	3a15      	subs	r2, #21
 8009512:	0564      	lsls	r4, r4, #21
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0fa      	beq.n	800950e <__ieee754_sqrt+0x56>
 8009518:	e7f7      	b.n	800950a <__ieee754_sqrt+0x52>
 800951a:	460a      	mov	r2, r1
 800951c:	e7fa      	b.n	8009514 <__ieee754_sqrt+0x5c>
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	3101      	adds	r1, #1
 8009522:	02d8      	lsls	r0, r3, #11
 8009524:	d5fb      	bpl.n	800951e <__ieee754_sqrt+0x66>
 8009526:	1e48      	subs	r0, r1, #1
 8009528:	1a12      	subs	r2, r2, r0
 800952a:	f1c1 0020 	rsb	r0, r1, #32
 800952e:	fa24 f000 	lsr.w	r0, r4, r0
 8009532:	4303      	orrs	r3, r0
 8009534:	408c      	lsls	r4, r1
 8009536:	2600      	movs	r6, #0
 8009538:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800953c:	2116      	movs	r1, #22
 800953e:	07d2      	lsls	r2, r2, #31
 8009540:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009544:	4632      	mov	r2, r6
 8009546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800954a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800954e:	bf5c      	itt	pl
 8009550:	005b      	lslpl	r3, r3, #1
 8009552:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009556:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800955a:	bf58      	it	pl
 800955c:	0064      	lslpl	r4, r4, #1
 800955e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009562:	107f      	asrs	r7, r7, #1
 8009564:	0064      	lsls	r4, r4, #1
 8009566:	1815      	adds	r5, r2, r0
 8009568:	429d      	cmp	r5, r3
 800956a:	bfde      	ittt	le
 800956c:	182a      	addle	r2, r5, r0
 800956e:	1b5b      	suble	r3, r3, r5
 8009570:	1836      	addle	r6, r6, r0
 8009572:	0fe5      	lsrs	r5, r4, #31
 8009574:	3901      	subs	r1, #1
 8009576:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800957a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800957e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009582:	d1f0      	bne.n	8009566 <__ieee754_sqrt+0xae>
 8009584:	460d      	mov	r5, r1
 8009586:	f04f 0a20 	mov.w	sl, #32
 800958a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800958e:	429a      	cmp	r2, r3
 8009590:	eb01 0c00 	add.w	ip, r1, r0
 8009594:	db02      	blt.n	800959c <__ieee754_sqrt+0xe4>
 8009596:	d113      	bne.n	80095c0 <__ieee754_sqrt+0x108>
 8009598:	45a4      	cmp	ip, r4
 800959a:	d811      	bhi.n	80095c0 <__ieee754_sqrt+0x108>
 800959c:	f1bc 0f00 	cmp.w	ip, #0
 80095a0:	eb0c 0100 	add.w	r1, ip, r0
 80095a4:	da42      	bge.n	800962c <__ieee754_sqrt+0x174>
 80095a6:	2900      	cmp	r1, #0
 80095a8:	db40      	blt.n	800962c <__ieee754_sqrt+0x174>
 80095aa:	f102 0e01 	add.w	lr, r2, #1
 80095ae:	1a9b      	subs	r3, r3, r2
 80095b0:	4672      	mov	r2, lr
 80095b2:	45a4      	cmp	ip, r4
 80095b4:	bf88      	it	hi
 80095b6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80095ba:	eba4 040c 	sub.w	r4, r4, ip
 80095be:	4405      	add	r5, r0
 80095c0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80095c4:	f1ba 0a01 	subs.w	sl, sl, #1
 80095c8:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80095cc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80095d0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80095d4:	d1db      	bne.n	800958e <__ieee754_sqrt+0xd6>
 80095d6:	431c      	orrs	r4, r3
 80095d8:	d01a      	beq.n	8009610 <__ieee754_sqrt+0x158>
 80095da:	4c20      	ldr	r4, [pc, #128]	@ (800965c <__ieee754_sqrt+0x1a4>)
 80095dc:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009660 <__ieee754_sqrt+0x1a8>
 80095e0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80095e4:	e9db 2300 	ldrd	r2, r3, [fp]
 80095e8:	f7f6 fdb4 	bl	8000154 <__aeabi_dsub>
 80095ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4640      	mov	r0, r8
 80095f6:	4649      	mov	r1, r9
 80095f8:	f7f7 f9e0 	bl	80009bc <__aeabi_dcmple>
 80095fc:	b140      	cbz	r0, 8009610 <__ieee754_sqrt+0x158>
 80095fe:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009602:	e9db 2300 	ldrd	r2, r3, [fp]
 8009606:	f1b5 3fff 	cmp.w	r5, #4294967295
 800960a:	d111      	bne.n	8009630 <__ieee754_sqrt+0x178>
 800960c:	4655      	mov	r5, sl
 800960e:	3601      	adds	r6, #1
 8009610:	1072      	asrs	r2, r6, #1
 8009612:	086b      	lsrs	r3, r5, #1
 8009614:	07f1      	lsls	r1, r6, #31
 8009616:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800961a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800961e:	bf48      	it	mi
 8009620:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009624:	4618      	mov	r0, r3
 8009626:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800962a:	e757      	b.n	80094dc <__ieee754_sqrt+0x24>
 800962c:	4696      	mov	lr, r2
 800962e:	e7be      	b.n	80095ae <__ieee754_sqrt+0xf6>
 8009630:	f7f6 fd92 	bl	8000158 <__adddf3>
 8009634:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4640      	mov	r0, r8
 800963e:	4649      	mov	r1, r9
 8009640:	f7f7 f9b2 	bl	80009a8 <__aeabi_dcmplt>
 8009644:	b120      	cbz	r0, 8009650 <__ieee754_sqrt+0x198>
 8009646:	1ca8      	adds	r0, r5, #2
 8009648:	bf08      	it	eq
 800964a:	3601      	addeq	r6, #1
 800964c:	3502      	adds	r5, #2
 800964e:	e7df      	b.n	8009610 <__ieee754_sqrt+0x158>
 8009650:	1c6b      	adds	r3, r5, #1
 8009652:	f023 0501 	bic.w	r5, r3, #1
 8009656:	e7db      	b.n	8009610 <__ieee754_sqrt+0x158>
 8009658:	7ff00000 	.word	0x7ff00000
 800965c:	200001e8 	.word	0x200001e8
 8009660:	200001e0 	.word	0x200001e0

08009664 <_init>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	bf00      	nop
 8009668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966a:	bc08      	pop	{r3}
 800966c:	469e      	mov	lr, r3
 800966e:	4770      	bx	lr

08009670 <_fini>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	bf00      	nop
 8009674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009676:	bc08      	pop	{r3}
 8009678:	469e      	mov	lr, r3
 800967a:	4770      	bx	lr
