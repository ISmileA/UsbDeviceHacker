
STM32F103HidDeviceEmulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000956c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009678  08009678  0000a678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f8  080096f8  0000b1f0  2**0
                  CONTENTS
  4 .ARM          00000000  080096f8  080096f8  0000b1f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096f8  080096f8  0000b1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096f8  080096f8  0000a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096fc  080096fc  0000a6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08009700  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001578  200001f0  080098f0  0000b1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001768  080098f0  0000b768  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001185b  00000000  00000000  0000b219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003921  00000000  00000000  0001ca74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00020398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a67  00000000  00000000  00021188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a78f  00000000  00000000  00021bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017316  00000000  00000000  0003c37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b0c  00000000  00000000  00053694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db1a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003918  00000000  00000000  000db1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000deafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009660 	.word	0x08009660

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	08009660 	.word	0x08009660

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <HAL_UART_RxCpltCallback>:
uint8_t length = 0;
uint8_t parsedData = 0;
uint8_t buffer[1024] = {};
uint32_t timer = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint8_t byte = rxcall;
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <HAL_UART_RxCpltCallback+0xb8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	73fb      	strb	r3, [r7, #15]
	if((HAL_GetTick()-timer) > 2){
 8000a72:	f000 ff2d 	bl	80018d0 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <HAL_UART_RxCpltCallback+0xbc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d905      	bls.n	8000a8e <HAL_UART_RxCpltCallback+0x2a>
		length = 0;
 8000a82:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
		parsedData = 0;
 8000a88:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
	}
	if(byte == HEADER || parsedData > 0){
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2bc5      	cmp	r3, #197	@ 0xc5
 8000a92:	d003      	beq.n	8000a9c <HAL_UART_RxCpltCallback+0x38>
 8000a94:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d031      	beq.n	8000b00 <HAL_UART_RxCpltCallback+0x9c>
		buffer[parsedData] = byte;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	5453      	strb	r3, [r2, r1]
		if(parsedData == 4)
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d106      	bne.n	8000abe <HAL_UART_RxCpltCallback+0x5a>
			length = (uint16_t)(buffer[parsedData-1]) | (uint16_t)(buffer[parsedData] << 8);
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000ab8:	5cd2      	ldrb	r2, [r2, r3]
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000abc:	701a      	strb	r2, [r3, #0]
		if(parsedData >= length+5){
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000ac6:	7812      	ldrb	r2, [r2, #0]
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	da13      	bge.n	8000af4 <HAL_UART_RxCpltCallback+0x90>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000acc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad0:	4817      	ldr	r0, [pc, #92]	@ (8000b30 <HAL_UART_RxCpltCallback+0xcc>)
 8000ad2:	f001 fa87 	bl	8001fe4 <HAL_GPIO_TogglePin>
			ParsingData(buffer, parsedData+1);
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000ae2:	f000 fe13 	bl	800170c <ParsingData>
			length = 0;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
			parsedData = 0;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e005      	b.n	8000b00 <HAL_UART_RxCpltCallback+0x9c>
		}else
			parsedData++;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000afe:	701a      	strb	r2, [r3, #0]
	}
	timer = HAL_GetTick();
 8000b00:	f000 fee6 	bl	80018d0 <HAL_GetTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <HAL_UART_RxCpltCallback+0xbc>)
 8000b08:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart,&rxcall,1);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4903      	ldr	r1, [pc, #12]	@ (8000b1c <HAL_UART_RxCpltCallback+0xb8>)
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f003 fd6b 	bl	80045ea <HAL_UART_Receive_IT>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000065c 	.word	0x2000065c
 8000b20:	20000610 	.word	0x20000610
 8000b24:	2000020c 	.word	0x2000020c
 8000b28:	2000020d 	.word	0x2000020d
 8000b2c:	20000210 	.word	0x20000210
 8000b30:	40011000 	.word	0x40011000

08000b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a23      	ldr	r2, [pc, #140]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b60:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a11      	ldr	r2, [pc, #68]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bae:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_GPIO_Init+0xac>)
 8000bb0:	f001 fa00 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_GPIO_Init+0xac>)
 8000bce:	f001 f86d 	bl	8001cac <HAL_GPIO_Init>

}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40011000 	.word	0x40011000

08000be4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART3_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c1c:	f003 fc0a 	bl	8004434 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f000 f8b6 	bl	8000d96 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000614 	.word	0x20000614
 8000c34:	40004800 	.word	0x40004800

08000c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <HAL_UART_MspInit+0x9c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d139      	bne.n	8000ccc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c62:	61d3      	str	r3, [r2, #28]
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a18      	ldr	r2, [pc, #96]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480f      	ldr	r0, [pc, #60]	@ (8000cdc <HAL_UART_MspInit+0xa4>)
 8000c9e:	f001 f805 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ca2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <HAL_UART_MspInit+0xa4>)
 8000cb8:	f000 fff8 	bl	8001cac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2027      	movs	r0, #39	@ 0x27
 8000cc2:	f000 ff0a 	bl	8001ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cc6:	2027      	movs	r0, #39	@ 0x27
 8000cc8:	f000 ff23 	bl	8001b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010c00 	.word	0x40010c00

08000ce0 <SystemClock_Config>:
#define INC_INITS_RCC_H_

#include <main.h>

void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	@ 0x50
 8000ce4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cea:	2228      	movs	r2, #40	@ 0x28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f008 fb8a 	bl	8009408 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d10:	2301      	movs	r3, #1
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d22:	2302      	movs	r3, #2
 8000d24:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 feb6 	bl	8003aa8 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000d42:	f000 f828 	bl	8000d96 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d56:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2101      	movs	r1, #1
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 f922 	bl	8003fac <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000d6e:	f000 f812 	bl	8000d96 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d72:	2310      	movs	r3, #16
 8000d74:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d7a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 faa2 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000d8a:	f000 f804 	bl	8000d96 <Error_Handler>
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3750      	adds	r7, #80	@ 0x50
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <Error_Handler>:

void Error_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9a:	b672      	cpsid	i
}
 8000d9c:	bf00      	nop
  __disable_irq();
  while (1){}
 8000d9e:	bf00      	nop
 8000da0:	e7fd      	b.n	8000d9e <Error_Handler+0x8>
	...

08000da4 <main>:
Animation animation = {0, 0, {}};

void SystemClock_Config(void);

int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	HAL_Init();
 8000da8:	f000 fd3a 	bl	8001820 <HAL_Init>
	SystemClock_Config();
 8000dac:	f7ff ff98 	bl	8000ce0 <SystemClock_Config>
	MX_GPIO_Init();
 8000db0:	f7ff fec0 	bl	8000b34 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000db4:	f007 ff70 	bl	8008c98 <MX_USB_DEVICE_Init>
	MX_USART3_UART_Init();
 8000db8:	f7ff ff14 	bl	8000be4 <MX_USART3_UART_Init>
	HAL_UART_Receive_IT(&huart3,&rxcall,1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4913      	ldr	r1, [pc, #76]	@ (8000e0c <main+0x68>)
 8000dc0:	4813      	ldr	r0, [pc, #76]	@ (8000e10 <main+0x6c>)
 8000dc2:	f003 fc12 	bl	80045ea <HAL_UART_Receive_IT>

	while (1)
	{
		switch(action.device){
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <main+0x70>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d014      	beq.n	8000df8 <main+0x54>
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	dc19      	bgt.n	8000e06 <main+0x62>
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d002      	beq.n	8000ddc <main+0x38>
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d007      	beq.n	8000dea <main+0x46>
 8000dda:	e014      	b.n	8000e06 <main+0x62>
			case(MOUSE):
				MouseCommandSetup(&action);
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <main+0x70>)
 8000dde:	f000 fbad 	bl	800153c <MouseCommandSetup>
				action.device = 0;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <main+0x70>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
				break;
 8000de8:	e00d      	b.n	8000e06 <main+0x62>
			case(KEYBOARD):
				KeyboardSetup(&action);
 8000dea:	480a      	ldr	r0, [pc, #40]	@ (8000e14 <main+0x70>)
 8000dec:	f000 fb0e 	bl	800140c <KeyboardSetup>
				action.device = 0;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <main+0x70>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
				break;
 8000df6:	e006      	b.n	8000e06 <main+0x62>
			case(ANIMATION):
				AnimationSetup(&action);
 8000df8:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <main+0x70>)
 8000dfa:	f000 f885 	bl	8000f08 <AnimationSetup>
				action.device = 0;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <main+0x70>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
				break;
 8000e04:	bf00      	nop
		}
		Animate();
 8000e06:	f000 f8d9 	bl	8000fbc <Animate>
		switch(action.device){
 8000e0a:	e7dc      	b.n	8000dc6 <main+0x22>
 8000e0c:	2000065c 	.word	0x2000065c
 8000e10:	20000614 	.word	0x20000614
 8000e14:	20000660 	.word	0x20000660

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a14      	ldr	r2, [pc, #80]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_MspInit+0x60>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_MspInit+0x60>)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010000 	.word	0x40010000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f000 fcee 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000eda:	f001 f9b8 	bl	800224e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20001344 	.word	0x20001344

08000ee8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <USART3_IRQHandler+0x10>)
 8000eee:	f003 fba1 	bl	8004634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000614 	.word	0x20000614

08000efc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <AnimationSetup>:
uint8_t flag = 1;
uint16_t data_set = 0;

uint16_t x = 0, y_pos = 0, y = 0;

void AnimationSetup(Action *act){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d002      	beq.n	8000f1e <AnimationSetup+0x16>
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d009      	beq.n	8000f30 <AnimationSetup+0x28>
				break;
		case(REMOVE_COMMAND):
				AnimationRemove();
				break;
	}
}
 8000f1c:	e00b      	b.n	8000f36 <AnimationSetup+0x2e>
				AnimationSet(act->data, act->length);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	1d1a      	adds	r2, r3, #4
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	885b      	ldrh	r3, [r3, #2]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4610      	mov	r0, r2
 8000f2a:	f000 f809 	bl	8000f40 <AnimationSet>
				break;
 8000f2e:	e002      	b.n	8000f36 <AnimationSetup+0x2e>
				AnimationRemove();
 8000f30:	f000 f838 	bl	8000fa4 <AnimationRemove>
				break;
 8000f34:	bf00      	nop
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <AnimationSet>:

void AnimationSet(uint8_t *data, uint16_t len){
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
	flag = 1;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <AnimationSet+0x5c>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
	animation.id = data[0];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <AnimationSet+0x60>)
 8000f58:	701a      	strb	r2, [r3, #0]
	animation.length = len-1;
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <AnimationSet+0x60>)
 8000f62:	805a      	strh	r2, [r3, #2]
	for(uint8_t i=0; i<animation.length; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e00c      	b.n	8000f84 <AnimationSet+0x44>
		animation.data[i] = data[i+1];
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	441a      	add	r2, r3
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	7811      	ldrb	r1, [r2, #0]
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <AnimationSet+0x60>)
 8000f78:	4413      	add	r3, r2
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	711a      	strb	r2, [r3, #4]
	for(uint8_t i=0; i<animation.length; i++)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	3301      	adds	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <AnimationSet+0x60>)
 8000f8a:	885b      	ldrh	r3, [r3, #2]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3ec      	bcc.n	8000f6a <AnimationSet+0x2a>
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	20000a64 	.word	0x20000a64

08000fa4 <AnimationRemove>:

void AnimationRemove(){
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	animation.id = 0;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <AnimationRemove+0x14>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000a64 	.word	0x20000a64

08000fbc <Animate>:

void Animate(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	switch(animation.id){
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <Animate+0x30>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d00c      	beq.n	8000fe2 <Animate+0x26>
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	dc0d      	bgt.n	8000fe8 <Animate+0x2c>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d002      	beq.n	8000fd6 <Animate+0x1a>
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d003      	beq.n	8000fdc <Animate+0x20>
			break;
		case(MOUSE_ROUND_ANIMATION):
			MouseRoundAnimation();
			break;
	}
}
 8000fd4:	e008      	b.n	8000fe8 <Animate+0x2c>
			MouseMoveAnimation();
 8000fd6:	f000 f80b 	bl	8000ff0 <MouseMoveAnimation>
			break;
 8000fda:	e005      	b.n	8000fe8 <Animate+0x2c>
			KeyboardTextAnimation();
 8000fdc:	f000 f882 	bl	80010e4 <KeyboardTextAnimation>
			break;
 8000fe0:	e002      	b.n	8000fe8 <Animate+0x2c>
			MouseRoundAnimation();
 8000fe2:	f000 f989 	bl	80012f8 <MouseRoundAnimation>
			break;
 8000fe6:	bf00      	nop
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000a64 	.word	0x20000a64

08000ff0 <MouseMoveAnimation>:

void MouseMoveAnimation(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	if((HAL_GetTick()-time) >= 5){
 8000ff6:	f000 fc6b 	bl	80018d0 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	4b36      	ldr	r3, [pc, #216]	@ (80010d8 <MouseMoveAnimation+0xe8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b04      	cmp	r3, #4
 8001004:	d963      	bls.n	80010ce <MouseMoveAnimation+0xde>
		uint8_t data_out[5] = {0x01, animation.data[1], 0, 0, 0};
 8001006:	2301      	movs	r3, #1
 8001008:	703b      	strb	r3, [r7, #0]
 800100a:	4b34      	ldr	r3, [pc, #208]	@ (80010dc <MouseMoveAnimation+0xec>)
 800100c:	795b      	ldrb	r3, [r3, #5]
 800100e:	707b      	strb	r3, [r7, #1]
 8001010:	2300      	movs	r3, #0
 8001012:	70bb      	strb	r3, [r7, #2]
 8001014:	2300      	movs	r3, #0
 8001016:	70fb      	strb	r3, [r7, #3]
 8001018:	2300      	movs	r3, #0
 800101a:	713b      	strb	r3, [r7, #4]
		switch((char)animation.data[0]){
 800101c:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <MouseMoveAnimation+0xec>)
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	3b62      	subs	r3, #98	@ 0x62
 8001022:	2b12      	cmp	r3, #18
 8001024:	d848      	bhi.n	80010b8 <MouseMoveAnimation+0xc8>
 8001026:	a201      	add	r2, pc, #4	@ (adr r2, 800102c <MouseMoveAnimation+0x3c>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	08001099 	.word	0x08001099
 8001030:	080010b9 	.word	0x080010b9
 8001034:	080010b9 	.word	0x080010b9
 8001038:	080010b9 	.word	0x080010b9
 800103c:	080010b9 	.word	0x080010b9
 8001040:	080010b9 	.word	0x080010b9
 8001044:	080010b9 	.word	0x080010b9
 8001048:	080010b9 	.word	0x080010b9
 800104c:	080010b9 	.word	0x080010b9
 8001050:	080010b9 	.word	0x080010b9
 8001054:	08001089 	.word	0x08001089
 8001058:	080010b9 	.word	0x080010b9
 800105c:	080010b9 	.word	0x080010b9
 8001060:	080010b9 	.word	0x080010b9
 8001064:	080010b9 	.word	0x080010b9
 8001068:	080010b9 	.word	0x080010b9
 800106c:	08001079 	.word	0x08001079
 8001070:	080010b9 	.word	0x080010b9
 8001074:	080010a9 	.word	0x080010a9
			case('r'):
				data_out[2] = 1+2*animation.data[2];
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MouseMoveAnimation+0xec>)
 800107a:	799b      	ldrb	r3, [r3, #6]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	3301      	adds	r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	70bb      	strb	r3, [r7, #2]
				break;
 8001086:	e017      	b.n	80010b8 <MouseMoveAnimation+0xc8>
			case('l'):
				data_out[2] = 255-2*animation.data[2];
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MouseMoveAnimation+0xec>)
 800108a:	799b      	ldrb	r3, [r3, #6]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	70bb      	strb	r3, [r7, #2]
				break;
 8001096:	e00f      	b.n	80010b8 <MouseMoveAnimation+0xc8>
			case('b'):
				data_out[3] = 1+2*animation.data[2];
 8001098:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <MouseMoveAnimation+0xec>)
 800109a:	799b      	ldrb	r3, [r3, #6]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	70fb      	strb	r3, [r7, #3]
				break;
 80010a6:	e007      	b.n	80010b8 <MouseMoveAnimation+0xc8>
			case('t'):
				data_out[3] = 255-2*animation.data[2];
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <MouseMoveAnimation+0xec>)
 80010aa:	799b      	ldrb	r3, [r3, #6]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	70fb      	strb	r3, [r7, #3]
				break;
 80010b6:	bf00      	nop
		}
		USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80010b8:	463b      	mov	r3, r7
 80010ba:	2205      	movs	r2, #5
 80010bc:	4619      	mov	r1, r3
 80010be:	4808      	ldr	r0, [pc, #32]	@ (80010e0 <MouseMoveAnimation+0xf0>)
 80010c0:	f007 fd10 	bl	8008ae4 <USBD_HID_SendReport>
		time = HAL_GetTick();
 80010c4:	f000 fc04 	bl	80018d0 <HAL_GetTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a03      	ldr	r2, [pc, #12]	@ (80010d8 <MouseMoveAnimation+0xe8>)
 80010cc:	6013      	str	r3, [r2, #0]
	}
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000e68 	.word	0x20000e68
 80010dc:	20000a64 	.word	0x20000a64
 80010e0:	20000e80 	.word	0x20000e80

080010e4 <KeyboardTextAnimation>:
void KeyboardTextAnimation(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
	static uint32_t repeat_timer = 0;
	if((HAL_GetTick()-time) > 5){
 80010ea:	f000 fbf1 	bl	80018d0 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	4b7a      	ldr	r3, [pc, #488]	@ (80012dc <KeyboardTextAnimation+0x1f8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	f240 80eb 	bls.w	80012d2 <KeyboardTextAnimation+0x1ee>
		if(flag){
 80010fc:	4b78      	ldr	r3, [pc, #480]	@ (80012e0 <KeyboardTextAnimation+0x1fc>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80bf 	beq.w	8001284 <KeyboardTextAnimation+0x1a0>
			uint8_t sp = 0, symb = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]
 800110a:	2300      	movs	r3, #0
 800110c:	75bb      	strb	r3, [r7, #22]
			if (animation.data[data_set] >= (uint8_t)'0' && animation.data[data_set] <= (uint8_t)'9'){
 800110e:	4b75      	ldr	r3, [pc, #468]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b74      	ldr	r3, [pc, #464]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001116:	4413      	add	r3, r2
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	2b2f      	cmp	r3, #47	@ 0x2f
 800111c:	d923      	bls.n	8001166 <KeyboardTextAnimation+0x82>
 800111e:	4b71      	ldr	r3, [pc, #452]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b70      	ldr	r3, [pc, #448]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001126:	4413      	add	r3, r2
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	2b39      	cmp	r3, #57	@ 0x39
 800112c:	d81b      	bhi.n	8001166 <KeyboardTextAnimation+0x82>
				if (animation.data[data_set] == 48)
 800112e:	4b6d      	ldr	r3, [pc, #436]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4b6c      	ldr	r3, [pc, #432]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001136:	4413      	add	r3, r2
 8001138:	791b      	ldrb	r3, [r3, #4]
 800113a:	2b30      	cmp	r3, #48	@ 0x30
 800113c:	d108      	bne.n	8001150 <KeyboardTextAnimation+0x6c>
					symb = animation.data[data_set]-9;
 800113e:	4b69      	ldr	r3, [pc, #420]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001146:	4413      	add	r3, r2
 8001148:	791b      	ldrb	r3, [r3, #4]
 800114a:	3b09      	subs	r3, #9
 800114c:	75bb      	strb	r3, [r7, #22]
 800114e:	e007      	b.n	8001160 <KeyboardTextAnimation+0x7c>
				else
					symb = animation.data[data_set]-19;
 8001150:	4b64      	ldr	r3, [pc, #400]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b64      	ldr	r3, [pc, #400]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001158:	4413      	add	r3, r2
 800115a:	791b      	ldrb	r3, [r3, #4]
 800115c:	3b13      	subs	r3, #19
 800115e:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	75fb      	strb	r3, [r7, #23]
 8001164:	e04a      	b.n	80011fc <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] >= (uint8_t)'A' && animation.data[data_set] <= (uint8_t)'Z'){
 8001166:	4b5f      	ldr	r3, [pc, #380]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4b5e      	ldr	r3, [pc, #376]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 800116e:	4413      	add	r3, r2
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	2b40      	cmp	r3, #64	@ 0x40
 8001174:	d912      	bls.n	800119c <KeyboardTextAnimation+0xb8>
 8001176:	4b5b      	ldr	r3, [pc, #364]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b5a      	ldr	r3, [pc, #360]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 800117e:	4413      	add	r3, r2
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	2b5a      	cmp	r3, #90	@ 0x5a
 8001184:	d80a      	bhi.n	800119c <KeyboardTextAnimation+0xb8>
				symb = animation.data[data_set]-61;
 8001186:	4b57      	ldr	r3, [pc, #348]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	4b56      	ldr	r3, [pc, #344]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 800118e:	4413      	add	r3, r2
 8001190:	791b      	ldrb	r3, [r3, #4]
 8001192:	3b3d      	subs	r3, #61	@ 0x3d
 8001194:	75bb      	strb	r3, [r7, #22]
				sp = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	75fb      	strb	r3, [r7, #23]
 800119a:	e02f      	b.n	80011fc <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] >= (uint8_t)'a' && animation.data[data_set] <= (uint8_t)'z'){
 800119c:	4b51      	ldr	r3, [pc, #324]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80011a4:	4413      	add	r3, r2
 80011a6:	791b      	ldrb	r3, [r3, #4]
 80011a8:	2b60      	cmp	r3, #96	@ 0x60
 80011aa:	d912      	bls.n	80011d2 <KeyboardTextAnimation+0xee>
 80011ac:	4b4d      	ldr	r3, [pc, #308]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80011b4:	4413      	add	r3, r2
 80011b6:	791b      	ldrb	r3, [r3, #4]
 80011b8:	2b7a      	cmp	r3, #122	@ 0x7a
 80011ba:	d80a      	bhi.n	80011d2 <KeyboardTextAnimation+0xee>
				symb = animation.data[data_set]-93;
 80011bc:	4b49      	ldr	r3, [pc, #292]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b49      	ldr	r3, [pc, #292]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80011c4:	4413      	add	r3, r2
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	3b5d      	subs	r3, #93	@ 0x5d
 80011ca:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]
 80011d0:	e014      	b.n	80011fc <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] == (uint8_t)' '){
 80011d2:	4b44      	ldr	r3, [pc, #272]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b43      	ldr	r3, [pc, #268]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80011da:	4413      	add	r3, r2
 80011dc:	791b      	ldrb	r3, [r3, #4]
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d10a      	bne.n	80011f8 <KeyboardTextAnimation+0x114>
				symb = animation.data[data_set]+12;
 80011e2:	4b40      	ldr	r3, [pc, #256]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b3f      	ldr	r3, [pc, #252]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80011ea:	4413      	add	r3, r2
 80011ec:	791b      	ldrb	r3, [r3, #4]
 80011ee:	330c      	adds	r3, #12
 80011f0:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	75fb      	strb	r3, [r7, #23]
 80011f6:	e001      	b.n	80011fc <KeyboardTextAnimation+0x118>
			}else
				symb = 85;
 80011f8:	2355      	movs	r3, #85	@ 0x55
 80011fa:	75bb      	strb	r3, [r7, #22]
			uint8_t data_out[9] = {0x02, sp, 0, symb, 0, 0, 0, 0, 0};
 80011fc:	2302      	movs	r3, #2
 80011fe:	733b      	strb	r3, [r7, #12]
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	737b      	strb	r3, [r7, #13]
 8001204:	2300      	movs	r3, #0
 8001206:	73bb      	strb	r3, [r7, #14]
 8001208:	7dbb      	ldrb	r3, [r7, #22]
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	2300      	movs	r3, #0
 800120e:	743b      	strb	r3, [r7, #16]
 8001210:	2300      	movs	r3, #0
 8001212:	747b      	strb	r3, [r7, #17]
 8001214:	2300      	movs	r3, #0
 8001216:	74bb      	strb	r3, [r7, #18]
 8001218:	2300      	movs	r3, #0
 800121a:	74fb      	strb	r3, [r7, #19]
 800121c:	2300      	movs	r3, #0
 800121e:	753b      	strb	r3, [r7, #20]
			data_set++;
 8001220:	4b30      	ldr	r3, [pc, #192]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 800122a:	801a      	strh	r2, [r3, #0]

			USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2209      	movs	r2, #9
 8001232:	4619      	mov	r1, r3
 8001234:	482d      	ldr	r0, [pc, #180]	@ (80012ec <KeyboardTextAnimation+0x208>)
 8001236:	f007 fc55 	bl	8008ae4 <USBD_HID_SendReport>
			HAL_Delay(30);
 800123a:	201e      	movs	r0, #30
 800123c:	f000 fb52 	bl	80018e4 <HAL_Delay>
			uint8_t data_res[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 8001240:	4a2b      	ldr	r2, [pc, #172]	@ (80012f0 <KeyboardTextAnimation+0x20c>)
 8001242:	463b      	mov	r3, r7
 8001244:	ca07      	ldmia	r2, {r0, r1, r2}
 8001246:	c303      	stmia	r3!, {r0, r1}
 8001248:	701a      	strb	r2, [r3, #0]
			USBD_HID_SendReport(&hUsbDeviceFS, data_res, 9);
 800124a:	463b      	mov	r3, r7
 800124c:	2209      	movs	r2, #9
 800124e:	4619      	mov	r1, r3
 8001250:	4826      	ldr	r0, [pc, #152]	@ (80012ec <KeyboardTextAnimation+0x208>)
 8001252:	f007 fc47 	bl	8008ae4 <USBD_HID_SendReport>
			HAL_Delay(30);
 8001256:	201e      	movs	r0, #30
 8001258:	f000 fb44 	bl	80018e4 <HAL_Delay>

			if(data_set >= animation.length-1){
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001264:	885b      	ldrh	r3, [r3, #2]
 8001266:	3b01      	subs	r3, #1
 8001268:	429a      	cmp	r2, r3
 800126a:	db2d      	blt.n	80012c8 <KeyboardTextAnimation+0x1e4>
				data_set = 0;
 800126c:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]
				flag = 0;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <KeyboardTextAnimation+0x1fc>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
				repeat_timer = HAL_GetTick();
 8001278:	f000 fb2a 	bl	80018d0 <HAL_GetTick>
 800127c:	4603      	mov	r3, r0
 800127e:	4a1d      	ldr	r2, [pc, #116]	@ (80012f4 <KeyboardTextAnimation+0x210>)
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e021      	b.n	80012c8 <KeyboardTextAnimation+0x1e4>
			}
		}else if (animation.data[animation.length-1] != 0){
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001286:	885b      	ldrh	r3, [r3, #2]
 8001288:	3b01      	subs	r3, #1
 800128a:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 800128c:	4413      	add	r3, r2
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d019      	beq.n	80012c8 <KeyboardTextAnimation+0x1e4>
			if((HAL_GetTick()-repeat_timer) >= animation.data[animation.length-1]*100){
 8001294:	f000 fb1c 	bl	80018d0 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <KeyboardTextAnimation+0x210>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80012a2:	8852      	ldrh	r2, [r2, #2]
 80012a4:	3a01      	subs	r2, #1
 80012a6:	4910      	ldr	r1, [pc, #64]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80012a8:	440a      	add	r2, r1
 80012aa:	7912      	ldrb	r2, [r2, #4]
 80012ac:	4611      	mov	r1, r2
 80012ae:	2264      	movs	r2, #100	@ 0x64
 80012b0:	fb01 f202 	mul.w	r2, r1, r2
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d307      	bcc.n	80012c8 <KeyboardTextAnimation+0x1e4>
				flag = 1;
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <KeyboardTextAnimation+0x1fc>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
				repeat_timer = HAL_GetTick();
 80012be:	f000 fb07 	bl	80018d0 <HAL_GetTick>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <KeyboardTextAnimation+0x210>)
 80012c6:	6013      	str	r3, [r2, #0]
			}
		}
		time = HAL_GetTick();
 80012c8:	f000 fb02 	bl	80018d0 <HAL_GetTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a03      	ldr	r2, [pc, #12]	@ (80012dc <KeyboardTextAnimation+0x1f8>)
 80012d0:	6013      	str	r3, [r2, #0]
	}
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000e68 	.word	0x20000e68
 80012e0:	20000004 	.word	0x20000004
 80012e4:	20000e6c 	.word	0x20000e6c
 80012e8:	20000a64 	.word	0x20000a64
 80012ec:	20000e80 	.word	0x20000e80
 80012f0:	08009678 	.word	0x08009678
 80012f4:	20000e74 	.word	0x20000e74

080012f8 <MouseRoundAnimation>:
void MouseRoundAnimation(){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
	uint16_t radius = animation.data[0], speed = animation.data[1], buttons = animation.data[2];
 80012fe:	4b3d      	ldr	r3, [pc, #244]	@ (80013f4 <MouseRoundAnimation+0xfc>)
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	81fb      	strh	r3, [r7, #14]
 8001304:	4b3b      	ldr	r3, [pc, #236]	@ (80013f4 <MouseRoundAnimation+0xfc>)
 8001306:	795b      	ldrb	r3, [r3, #5]
 8001308:	81bb      	strh	r3, [r7, #12]
 800130a:	4b3a      	ldr	r3, [pc, #232]	@ (80013f4 <MouseRoundAnimation+0xfc>)
 800130c:	799b      	ldrb	r3, [r3, #6]
 800130e:	817b      	strh	r3, [r7, #10]
	if(x == 0)
 8001310:	4b39      	ldr	r3, [pc, #228]	@ (80013f8 <MouseRoundAnimation+0x100>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <MouseRoundAnimation+0x26>
		y_pos = radius;
 8001318:	4a38      	ldr	r2, [pc, #224]	@ (80013fc <MouseRoundAnimation+0x104>)
 800131a:	89fb      	ldrh	r3, [r7, #14]
 800131c:	8013      	strh	r3, [r2, #0]
	if((HAL_GetTick()-time) >= 5){
 800131e:	f000 fad7 	bl	80018d0 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <MouseRoundAnimation+0x108>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b04      	cmp	r3, #4
 800132c:	d95e      	bls.n	80013ec <MouseRoundAnimation+0xf4>
		x+=1+2*speed;
 800132e:	89bb      	ldrh	r3, [r7, #12]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b30      	ldr	r3, [pc, #192]	@ (80013f8 <MouseRoundAnimation+0x100>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	4413      	add	r3, r2
 800133a:	b29b      	uxth	r3, r3
 800133c:	3301      	adds	r3, #1
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b2d      	ldr	r3, [pc, #180]	@ (80013f8 <MouseRoundAnimation+0x100>)
 8001342:	801a      	strh	r2, [r3, #0]
		y = abs(y_pos-(uint16_t)sqrt(radius*radius-x*x));
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <MouseRoundAnimation+0x104>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	461c      	mov	r4, r3
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	89fa      	ldrh	r2, [r7, #14]
 800134e:	fb03 f202 	mul.w	r2, r3, r2
 8001352:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <MouseRoundAnimation+0x100>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <MouseRoundAnimation+0x100>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	fb01 f303 	mul.w	r3, r1, r3
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f844 	bl	80003f0 <__aeabi_i2d>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f008 f87c 	bl	800946c <sqrt>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fb52 	bl	8000a24 <__aeabi_d2uiz>
 8001380:	4603      	mov	r3, r0
 8001382:	b29b      	uxth	r3, r3
 8001384:	1ae3      	subs	r3, r4, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	bfb8      	it	lt
 800138a:	425b      	neglt	r3, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <MouseRoundAnimation+0x10c>)
 8001390:	801a      	strh	r2, [r3, #0]
		y_pos-=y;
 8001392:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MouseRoundAnimation+0x104>)
 8001394:	881a      	ldrh	r2, [r3, #0]
 8001396:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <MouseRoundAnimation+0x10c>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MouseRoundAnimation+0x104>)
 80013a0:	801a      	strh	r2, [r3, #0]
		if(x >= radius)
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <MouseRoundAnimation+0x100>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	89fa      	ldrh	r2, [r7, #14]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d802      	bhi.n	80013b2 <MouseRoundAnimation+0xba>
			x = 0;
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <MouseRoundAnimation+0x100>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	801a      	strh	r2, [r3, #0]
		uint8_t data_out[5] = {0x01, buttons, 1+2*speed, y, 0};
 80013b2:	2301      	movs	r3, #1
 80013b4:	713b      	strb	r3, [r7, #4]
 80013b6:	897b      	ldrh	r3, [r7, #10]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	717b      	strb	r3, [r7, #5]
 80013bc:	89bb      	ldrh	r3, [r7, #12]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	71bb      	strb	r3, [r7, #6]
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MouseRoundAnimation+0x10c>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	2300      	movs	r3, #0
 80013d4:	723b      	strb	r3, [r7, #8]
		USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2205      	movs	r2, #5
 80013da:	4619      	mov	r1, r3
 80013dc:	480a      	ldr	r0, [pc, #40]	@ (8001408 <MouseRoundAnimation+0x110>)
 80013de:	f007 fb81 	bl	8008ae4 <USBD_HID_SendReport>
		time = HAL_GetTick();
 80013e2:	f000 fa75 	bl	80018d0 <HAL_GetTick>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <MouseRoundAnimation+0x108>)
 80013ea:	6013      	str	r3, [r2, #0]
	}

}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	20000a64 	.word	0x20000a64
 80013f8:	20000e6e 	.word	0x20000e6e
 80013fc:	20000e70 	.word	0x20000e70
 8001400:	20000e68 	.word	0x20000e68
 8001404:	20000e72 	.word	0x20000e72
 8001408:	20000e80 	.word	0x20000e80

0800140c <KeyboardSetup>:
 */

#include "modules/KeyboardModule.h"
extern USBD_HandleTypeDef hUsbDeviceFS;

void KeyboardSetup(Action *act){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	785b      	ldrb	r3, [r3, #1]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d00c      	beq.n	8001436 <KeyboardSetup+0x2a>
 800141c:	2b03      	cmp	r3, #3
 800141e:	dc13      	bgt.n	8001448 <KeyboardSetup+0x3c>
 8001420:	2b01      	cmp	r3, #1
 8001422:	d002      	beq.n	800142a <KeyboardSetup+0x1e>
 8001424:	2b02      	cmp	r3, #2
 8001426:	d00c      	beq.n	8001442 <KeyboardSetup+0x36>
				break;
		case(REMOVE_COMMAND):
				KeyboardRemove();
				break;
	}
}
 8001428:	e00e      	b.n	8001448 <KeyboardSetup+0x3c>
				KeyboardSet(act->data);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3304      	adds	r3, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f80e 	bl	8001450 <KeyboardSet>
				break;
 8001434:	e008      	b.n	8001448 <KeyboardSetup+0x3c>
				KeyboardClick(act->data);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3304      	adds	r3, #4
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f836 	bl	80014ac <KeyboardClick>
				break;
 8001440:	e002      	b.n	8001448 <KeyboardSetup+0x3c>
				KeyboardRemove();
 8001442:	f000 f865 	bl	8001510 <KeyboardRemove>
				break;
 8001446:	bf00      	nop
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <KeyboardSet>:

void KeyboardSet(uint8_t *data){
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 8001466:	2302      	movs	r3, #2
 8001468:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
 800146e:	e00c      	b.n	800148a <KeyboardSet+0x3a>
		data_out[i+1] = data[i];
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	441a      	add	r2, r3
 8001476:	7dfb      	ldrb	r3, [r7, #23]
 8001478:	3301      	adds	r3, #1
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	3318      	adds	r3, #24
 800147e:	443b      	add	r3, r7
 8001480:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	3301      	adds	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
 800148a:	7dfb      	ldrb	r3, [r7, #23]
 800148c:	2b07      	cmp	r3, #7
 800148e:	d9ef      	bls.n	8001470 <KeyboardSet+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2209      	movs	r2, #9
 8001496:	4619      	mov	r1, r3
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <KeyboardSet+0x58>)
 800149a:	f007 fb23 	bl	8008ae4 <USBD_HID_SendReport>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000e80 	.word	0x20000e80

080014ac <KeyboardClick>:

void KeyboardClick(uint8_t *data){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 80014c2:	2302      	movs	r3, #2
 80014c4:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
 80014ca:	e00c      	b.n	80014e6 <KeyboardClick+0x3a>
		data_out[i+1] = data[i];
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	441a      	add	r2, r3
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	3301      	adds	r3, #1
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	3318      	adds	r3, #24
 80014da:	443b      	add	r3, r7
 80014dc:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	3301      	adds	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	d9ef      	bls.n	80014cc <KeyboardClick+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2209      	movs	r2, #9
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	@ (800150c <KeyboardClick+0x60>)
 80014f6:	f007 faf5 	bl	8008ae4 <USBD_HID_SendReport>
	HAL_Delay(30);
 80014fa:	201e      	movs	r0, #30
 80014fc:	f000 f9f2 	bl	80018e4 <HAL_Delay>
	KeyboardRemove();
 8001500:	f000 f806 	bl	8001510 <KeyboardRemove>
}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000e80 	.word	0x20000e80

08001510 <KeyboardRemove>:

void KeyboardRemove(){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
	uint8_t data_out[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 8001516:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <KeyboardRemove+0x24>)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	ca07      	ldmia	r2, {r0, r1, r2}
 800151c:	c303      	stmia	r3!, {r0, r1}
 800151e:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2209      	movs	r2, #9
 8001524:	4619      	mov	r1, r3
 8001526:	4804      	ldr	r0, [pc, #16]	@ (8001538 <KeyboardRemove+0x28>)
 8001528:	f007 fadc 	bl	8008ae4 <USBD_HID_SendReport>
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	08009684 	.word	0x08009684
 8001538:	20000e80 	.word	0x20000e80

0800153c <MouseCommandSetup>:
 */

#include <modules/MouseModule.h>
extern USBD_HandleTypeDef hUsbDeviceFS;

void MouseCommandSetup(Action *act){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d00c      	beq.n	8001566 <MouseCommandSetup+0x2a>
 800154c:	2b03      	cmp	r3, #3
 800154e:	dc13      	bgt.n	8001578 <MouseCommandSetup+0x3c>
 8001550:	2b01      	cmp	r3, #1
 8001552:	d002      	beq.n	800155a <MouseCommandSetup+0x1e>
 8001554:	2b02      	cmp	r3, #2
 8001556:	d00c      	beq.n	8001572 <MouseCommandSetup+0x36>
			break;
		case(REMOVE_COMMAND):
			MouseRemove();
			break;
	}
}
 8001558:	e00e      	b.n	8001578 <MouseCommandSetup+0x3c>
			MouseSet(act->data);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3304      	adds	r3, #4
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f80e 	bl	8001580 <MouseSet>
			break;
 8001564:	e008      	b.n	8001578 <MouseCommandSetup+0x3c>
			MouseClick(act->data[0]);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	791b      	ldrb	r3, [r3, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f836 	bl	80015dc <MouseClick>
			break;
 8001570:	e002      	b.n	8001578 <MouseCommandSetup+0x3c>
			MouseRemove();
 8001572:	f000 f855 	bl	8001620 <MouseRemove>
			break;
 8001576:	bf00      	nop
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <MouseSet>:

void MouseSet(uint8_t *data){
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8001588:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <MouseSet+0x54>)
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001592:	6018      	str	r0, [r3, #0]
 8001594:	3304      	adds	r3, #4
 8001596:	7019      	strb	r1, [r3, #0]
	for(uint8_t i=0; i<4; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e00c      	b.n	80015b8 <MouseSet+0x38>
		data_out[i+1] = data[i];
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	441a      	add	r2, r3
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	3301      	adds	r3, #1
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	3310      	adds	r3, #16
 80015ac:	443b      	add	r3, r7
 80015ae:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i=0; i<4; i++)
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	3301      	adds	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d9ef      	bls.n	800159e <MouseSet+0x1e>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2205      	movs	r2, #5
 80015c4:	4619      	mov	r1, r3
 80015c6:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <MouseSet+0x58>)
 80015c8:	f007 fa8c 	bl	8008ae4 <USBD_HID_SendReport>
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	08009690 	.word	0x08009690
 80015d8:	20000e80 	.word	0x20000e80

080015dc <MouseClick>:

void MouseClick(uint8_t buttons){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[5] = {0x01, buttons, 0, 0, 0};
 80015e6:	2301      	movs	r3, #1
 80015e8:	723b      	strb	r3, [r7, #8]
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	727b      	strb	r3, [r7, #9]
 80015ee:	2300      	movs	r3, #0
 80015f0:	72bb      	strb	r3, [r7, #10]
 80015f2:	2300      	movs	r3, #0
 80015f4:	72fb      	strb	r3, [r7, #11]
 80015f6:	2300      	movs	r3, #0
 80015f8:	733b      	strb	r3, [r7, #12]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2205      	movs	r2, #5
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	@ (800161c <MouseClick+0x40>)
 8001604:	f007 fa6e 	bl	8008ae4 <USBD_HID_SendReport>
	HAL_Delay(30);
 8001608:	201e      	movs	r0, #30
 800160a:	f000 f96b 	bl	80018e4 <HAL_Delay>
	MouseRemove();
 800160e:	f000 f807 	bl	8001620 <MouseRemove>
}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000e80 	.word	0x20000e80

08001620 <MouseRemove>:

void MouseRemove(){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8001626:	4a08      	ldr	r2, [pc, #32]	@ (8001648 <MouseRemove+0x28>)
 8001628:	463b      	mov	r3, r7
 800162a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800162e:	6018      	str	r0, [r3, #0]
 8001630:	3304      	adds	r3, #4
 8001632:	7019      	strb	r1, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8001634:	463b      	mov	r3, r7
 8001636:	2205      	movs	r2, #5
 8001638:	4619      	mov	r1, r3
 800163a:	4804      	ldr	r0, [pc, #16]	@ (800164c <MouseRemove+0x2c>)
 800163c:	f007 fa52 	bl	8008ae4 <USBD_HID_SendReport>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	08009690 	.word	0x08009690
 800164c:	20000e80 	.word	0x20000e80

08001650 <crc8>:
#ifndef INC_CRC8_H_
#define INC_CRC8_H_

#include "main.h"

uint8_t crc8(uint8_t *buffer, uint8_t size) {
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < size; i++) {
 8001660:	2300      	movs	r3, #0
 8001662:	73bb      	strb	r3, [r7, #14]
 8001664:	e027      	b.n	80016b6 <crc8+0x66>
		uint8_t data = buffer[i];
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8001670:	2308      	movs	r3, #8
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	e019      	b.n	80016aa <crc8+0x5a>
		crc = ((crc ^ data) & 1) ? (crc >> 1) ^ 0x8C : (crc >> 1);
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	7b7b      	ldrb	r3, [r7, #13]
 800167a:	4053      	eors	r3, r2
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <crc8+0x46>
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	085b      	lsrs	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001690:	43db      	mvns	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	e002      	b.n	800169c <crc8+0x4c>
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	73fb      	strb	r3, [r7, #15]
		data >>= 1;
 800169e:	7b7b      	ldrb	r3, [r7, #13]
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	dce2      	bgt.n	8001676 <crc8+0x26>
	for (uint8_t i = 0; i < size; i++) {
 80016b0:	7bbb      	ldrb	r3, [r7, #14]
 80016b2:	3301      	adds	r3, #1
 80016b4:	73bb      	strb	r3, [r7, #14]
 80016b6:	7bba      	ldrb	r2, [r7, #14]
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3d3      	bcc.n	8001666 <crc8+0x16>
		}
	}
	return crc;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
	...

080016cc <answer>:
#include "controllers/UsartController.h"
#include "crc8.h"

extern UART_HandleTypeDef huart3;

void answer(uint8_t data){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[3] = {HEADER, data, 0};
 80016d6:	23c5      	movs	r3, #197	@ 0xc5
 80016d8:	733b      	strb	r3, [r7, #12]
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	737b      	strb	r3, [r7, #13]
 80016de:	2300      	movs	r3, #0
 80016e0:	73bb      	strb	r3, [r7, #14]
	data_out[2] = crc8(data_out, 2);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2102      	movs	r1, #2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ffb1 	bl	8001650 <crc8>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, data_out, 3, 100);
 80016f2:	f107 010c 	add.w	r1, r7, #12
 80016f6:	2364      	movs	r3, #100	@ 0x64
 80016f8:	2203      	movs	r2, #3
 80016fa:	4803      	ldr	r0, [pc, #12]	@ (8001708 <answer+0x3c>)
 80016fc:	f002 feea 	bl	80044d4 <HAL_UART_Transmit>
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000614 	.word	0x20000614

0800170c <ParsingData>:

#include <modules/UsartAnswerModule.h>
#include <modules/UsartParserModule.h>
#include "crc8.h"

void ParsingData(uint8_t *buffer, uint16_t len){
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
	if(buffer[0] == HEADER){
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2bc5      	cmp	r3, #197	@ 0xc5
 800171e:	d152      	bne.n	80017c6 <ParsingData+0xba>
		uint16_t length_now = (uint16_t)buffer[3] | (uint16_t)(buffer[4] << 8);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3303      	adds	r3, #3
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3304      	adds	r3, #4
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b29b      	uxth	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	81bb      	strh	r3, [r7, #12]
		if(length_now+6 == len){
 8001736:	89bb      	ldrh	r3, [r7, #12]
 8001738:	1d9a      	adds	r2, r3, #6
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	429a      	cmp	r2, r3
 800173e:	d142      	bne.n	80017c6 <ParsingData+0xba>
			if(crc8(buffer, length_now+5) == buffer[length_now+5]){
 8001740:	89bb      	ldrh	r3, [r7, #12]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	3305      	adds	r3, #5
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff80 	bl	8001650 <crc8>
 8001750:	4603      	mov	r3, r0
 8001752:	4619      	mov	r1, r3
 8001754:	89bb      	ldrh	r3, [r7, #12]
 8001756:	3305      	adds	r3, #5
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4299      	cmp	r1, r3
 8001760:	d12e      	bne.n	80017c0 <ParsingData+0xb4>
				answer(USART_OK);
 8001762:	2001      	movs	r0, #1
 8001764:	f7ff ffb2 	bl	80016cc <answer>
				action.command = buffer[2];
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	789a      	ldrb	r2, [r3, #2]
 800176c:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <ParsingData+0xc4>)
 800176e:	705a      	strb	r2, [r3, #1]
				action.length = (uint16_t)buffer[3] | (uint16_t)(buffer[4] << 8);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3303      	adds	r3, #3
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3304      	adds	r3, #4
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b29b      	uxth	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <ParsingData+0xc4>)
 8001788:	805a      	strh	r2, [r3, #2]
				for(uint8_t i=0; i<action.length; i++){
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e00c      	b.n	80017aa <ParsingData+0x9e>
					action.data[i] = buffer[i+5];
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	3305      	adds	r3, #5
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	441a      	add	r2, r3
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	7811      	ldrb	r1, [r2, #0]
 800179c:	4a0c      	ldr	r2, [pc, #48]	@ (80017d0 <ParsingData+0xc4>)
 800179e:	4413      	add	r3, r2
 80017a0:	460a      	mov	r2, r1
 80017a2:	711a      	strb	r2, [r3, #4]
				for(uint8_t i=0; i<action.length; i++){
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	3301      	adds	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <ParsingData+0xc4>)
 80017b0:	885b      	ldrh	r3, [r3, #2]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3ec      	bcc.n	8001790 <ParsingData+0x84>
				}
				action.device = buffer[1];
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	785a      	ldrb	r2, [r3, #1]
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <ParsingData+0xc4>)
 80017bc:	701a      	strb	r2, [r3, #0]
			}else
				answer(USART_ERROR);
		}
	}
}
 80017be:	e002      	b.n	80017c6 <ParsingData+0xba>
				answer(USART_ERROR);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff ff83 	bl	80016cc <answer>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000660 	.word	0x20000660

080017d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d4:	f7ff fb92 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480b      	ldr	r0, [pc, #44]	@ (8001808 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017da:	490c      	ldr	r1, [pc, #48]	@ (800180c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a09      	ldr	r2, [pc, #36]	@ (8001814 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017f0:	4c09      	ldr	r4, [pc, #36]	@ (8001818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f007 fe11 	bl	8009424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001802:	f7ff facf 	bl	8000da4 <main>
  bx lr
 8001806:	4770      	bx	lr
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001810:	08009700 	.word	0x08009700
  ldr r2, =_sbss
 8001814:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001818:	20001768 	.word	0x20001768

0800181c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_2_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <HAL_Init+0x28>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	@ (8001848 <HAL_Init+0x28>)
 800182a:	f043 0310 	orr.w	r3, r3, #16
 800182e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f947 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	200f      	movs	r0, #15
 8001838:	f000 f808 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff faec 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40022000 	.word	0x40022000

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_InitTick+0x54>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_InitTick+0x58>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f95f 	bl	8001b2e <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f927 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	@ (80018a8 <HAL_InitTick+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000000 	.word	0x20000000
 80018a4:	2000000c 	.word	0x2000000c
 80018a8:	20000008 	.word	0x20000008

080018ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_IncTick+0x1c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_IncTick+0x20>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a03      	ldr	r2, [pc, #12]	@ (80018cc <HAL_IncTick+0x20>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	2000000c 	.word	0x2000000c
 80018cc:	20000e78 	.word	0x20000e78

080018d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b02      	ldr	r3, [pc, #8]	@ (80018e0 <HAL_GetTick+0x10>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	20000e78 	.word	0x20000e78

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffe0 	bl	80018d0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000000c 	.word	0x2000000c

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	@ (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4906      	ldr	r1, [pc, #24]	@ (80019c4 <__NVIC_EnableIRQ+0x34>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff90 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff2d 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff42 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff90 	bl	8001a1c <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5f 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff35 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffa2 	bl	8001a80 <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d008      	beq.n	8001b70 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2204      	movs	r2, #4
 8001b62:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e020      	b.n	8001bb2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 020e 	bic.w	r2, r2, #14
 8001b7e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d005      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e051      	b.n	8001c84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020e 	bic.w	r2, r2, #14
 8001bee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a22      	ldr	r2, [pc, #136]	@ (8001c90 <HAL_DMA_Abort_IT+0xd4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d029      	beq.n	8001c5e <HAL_DMA_Abort_IT+0xa2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a21      	ldr	r2, [pc, #132]	@ (8001c94 <HAL_DMA_Abort_IT+0xd8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d022      	beq.n	8001c5a <HAL_DMA_Abort_IT+0x9e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	@ (8001c98 <HAL_DMA_Abort_IT+0xdc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01a      	beq.n	8001c54 <HAL_DMA_Abort_IT+0x98>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1e      	ldr	r2, [pc, #120]	@ (8001c9c <HAL_DMA_Abort_IT+0xe0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d012      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x92>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <HAL_DMA_Abort_IT+0xe4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00a      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x8c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca4 <HAL_DMA_Abort_IT+0xe8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d102      	bne.n	8001c42 <HAL_DMA_Abort_IT+0x86>
 8001c3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c40:	e00e      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c46:	e00b      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c4c:	e008      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c52:	e005      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c58:	e002      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	e000      	b.n	8001c60 <HAL_DMA_Abort_IT+0xa4>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4a11      	ldr	r2, [pc, #68]	@ (8001ca8 <HAL_DMA_Abort_IT+0xec>)
 8001c62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
    } 
  }
  return status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40020008 	.word	0x40020008
 8001c94:	4002001c 	.word	0x4002001c
 8001c98:	40020030 	.word	0x40020030
 8001c9c:	40020044 	.word	0x40020044
 8001ca0:	40020058 	.word	0x40020058
 8001ca4:	4002006c 	.word	0x4002006c
 8001ca8:	40020000 	.word	0x40020000

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b08b      	sub	sp, #44	@ 0x2c
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e169      	b.n	8001f94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8158 	bne.w	8001f8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a9a      	ldr	r2, [pc, #616]	@ (8001f4c <HAL_GPIO_Init+0x2a0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d05e      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a98      	ldr	r2, [pc, #608]	@ (8001f4c <HAL_GPIO_Init+0x2a0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d875      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cee:	4a98      	ldr	r2, [pc, #608]	@ (8001f50 <HAL_GPIO_Init+0x2a4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d058      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a96      	ldr	r2, [pc, #600]	@ (8001f50 <HAL_GPIO_Init+0x2a4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d86f      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cfa:	4a96      	ldr	r2, [pc, #600]	@ (8001f54 <HAL_GPIO_Init+0x2a8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d052      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d00:	4a94      	ldr	r2, [pc, #592]	@ (8001f54 <HAL_GPIO_Init+0x2a8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d869      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d06:	4a94      	ldr	r2, [pc, #592]	@ (8001f58 <HAL_GPIO_Init+0x2ac>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d04c      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d0c:	4a92      	ldr	r2, [pc, #584]	@ (8001f58 <HAL_GPIO_Init+0x2ac>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d863      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d12:	4a92      	ldr	r2, [pc, #584]	@ (8001f5c <HAL_GPIO_Init+0x2b0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d046      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a90      	ldr	r2, [pc, #576]	@ (8001f5c <HAL_GPIO_Init+0x2b0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d85d      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d1e:	2b12      	cmp	r3, #18
 8001d20:	d82a      	bhi.n	8001d78 <HAL_GPIO_Init+0xcc>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d859      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d26:	a201      	add	r2, pc, #4	@ (adr r2, 8001d2c <HAL_GPIO_Init+0x80>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001da7 	.word	0x08001da7
 8001d30:	08001d81 	.word	0x08001d81
 8001d34:	08001d93 	.word	0x08001d93
 8001d38:	08001dd5 	.word	0x08001dd5
 8001d3c:	08001ddb 	.word	0x08001ddb
 8001d40:	08001ddb 	.word	0x08001ddb
 8001d44:	08001ddb 	.word	0x08001ddb
 8001d48:	08001ddb 	.word	0x08001ddb
 8001d4c:	08001ddb 	.word	0x08001ddb
 8001d50:	08001ddb 	.word	0x08001ddb
 8001d54:	08001ddb 	.word	0x08001ddb
 8001d58:	08001ddb 	.word	0x08001ddb
 8001d5c:	08001ddb 	.word	0x08001ddb
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001ddb 	.word	0x08001ddb
 8001d68:	08001ddb 	.word	0x08001ddb
 8001d6c:	08001ddb 	.word	0x08001ddb
 8001d70:	08001d89 	.word	0x08001d89
 8001d74:	08001d9d 	.word	0x08001d9d
 8001d78:	4a79      	ldr	r2, [pc, #484]	@ (8001f60 <HAL_GPIO_Init+0x2b4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d7e:	e02c      	b.n	8001dda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e029      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	623b      	str	r3, [r7, #32]
          break;
 8001d90:	e024      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	3308      	adds	r3, #8
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e01f      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	330c      	adds	r3, #12
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e01a      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dae:	2304      	movs	r3, #4
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e013      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	611a      	str	r2, [r3, #16]
          break;
 8001dc6:	e009      	b.n	8001ddc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	615a      	str	r2, [r3, #20]
          break;
 8001dd2:	e003      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          break;
 8001dda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2bff      	cmp	r3, #255	@ 0xff
 8001de0:	d801      	bhi.n	8001de6 <HAL_GPIO_Init+0x13a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_Init+0x13e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2bff      	cmp	r3, #255	@ 0xff
 8001df0:	d802      	bhi.n	8001df8 <HAL_GPIO_Init+0x14c>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x152>
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	3b08      	subs	r3, #8
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	210f      	movs	r1, #15
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	6a39      	ldr	r1, [r7, #32]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80b1 	beq.w	8001f8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a4c      	ldr	r2, [pc, #304]	@ (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b4a      	ldr	r3, [pc, #296]	@ (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e44:	4a48      	ldr	r2, [pc, #288]	@ (8001f68 <HAL_GPIO_Init+0x2bc>)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a40      	ldr	r2, [pc, #256]	@ (8001f6c <HAL_GPIO_Init+0x2c0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3f      	ldr	r2, [pc, #252]	@ (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00d      	beq.n	8001e94 <HAL_GPIO_Init+0x1e8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f74 <HAL_GPIO_Init+0x2c8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d007      	beq.n	8001e90 <HAL_GPIO_Init+0x1e4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3d      	ldr	r2, [pc, #244]	@ (8001f78 <HAL_GPIO_Init+0x2cc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <HAL_GPIO_Init+0x1e0>
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e006      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	e004      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e9c:	f002 0203 	and.w	r2, r2, #3
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eaa:	492f      	ldr	r1, [pc, #188]	@ (8001f68 <HAL_GPIO_Init+0x2bc>)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	492c      	ldr	r1, [pc, #176]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	4928      	ldr	r1, [pc, #160]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eec:	4b23      	ldr	r3, [pc, #140]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4922      	ldr	r1, [pc, #136]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60cb      	str	r3, [r1, #12]
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001efa:	4b20      	ldr	r3, [pc, #128]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	491e      	ldr	r1, [pc, #120]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	4918      	ldr	r1, [pc, #96]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4914      	ldr	r1, [pc, #80]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d021      	beq.n	8001f80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	490e      	ldr	r1, [pc, #56]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
 8001f48:	e021      	b.n	8001f8e <HAL_GPIO_Init+0x2e2>
 8001f4a:	bf00      	nop
 8001f4c:	10320000 	.word	0x10320000
 8001f50:	10310000 	.word	0x10310000
 8001f54:	10220000 	.word	0x10220000
 8001f58:	10210000 	.word	0x10210000
 8001f5c:	10120000 	.word	0x10120000
 8001f60:	10110000 	.word	0x10110000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40010800 	.word	0x40010800
 8001f70:	40010c00 	.word	0x40010c00
 8001f74:	40011000 	.word	0x40011000
 8001f78:	40011400 	.word	0x40011400
 8001f7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	4909      	ldr	r1, [pc, #36]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f47f ae8e 	bne.w	8001cc0 <HAL_GPIO_Init+0x14>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	372c      	adds	r7, #44	@ 0x2c
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43d9      	mvns	r1, r3
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	400b      	ands	r3, r1
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	611a      	str	r2, [r3, #16]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0e8      	b.n	80021fa <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d106      	bne.n	8002042 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f006 ff5f 	bl	8008f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2203      	movs	r2, #3
 8002046:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f003 f87a 	bl	800514e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002064:	f003 f850 	bl	8005108 <USB_CoreInit>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0bf      	b.n	80021fa <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f003 f87e 	bl	8005182 <USB_SetCurrentMode>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0b0      	b.n	80021fa <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e03e      	b.n	800211c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	3311      	adds	r3, #17
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	440b      	add	r3, r1
 80020c0:	3310      	adds	r3, #16
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	3313      	adds	r3, #19
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	3320      	adds	r3, #32
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	3324      	adds	r3, #36	@ 0x24
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	3301      	adds	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3bb      	bcc.n	800209e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	e044      	b.n	80021b6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	3301      	adds	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	791b      	ldrb	r3, [r3, #4]
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d3b5      	bcc.n	800212c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ca:	f002 ffe6 	bl	800519a <USB_DevInit>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e00c      	b.n	80021fa <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f005 fa65 	bl	80076c2 <USB_DevDisconnect>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_PCD_Start+0x16>
 8002214:	2302      	movs	r3, #2
 8002216:	e016      	b.n	8002246 <HAL_PCD_Start+0x44>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f002 ff7c 	bl	8005122 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800222a:	2101      	movs	r1, #1
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f007 f8b4 	bl	800939a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f005 fa39 	bl	80076ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b088      	sub	sp, #32
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f005 fa3b 	bl	80076d6 <USB_ReadInterrupts>
 8002260:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fb03 	bl	8002878 <PCD_EP_ISR_Handler>

    return;
 8002272:	e119      	b.n	80024a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227a:	2b00      	cmp	r3, #0
 800227c:	d013      	beq.n	80022a6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002286:	b29a      	uxth	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002290:	b292      	uxth	r2, r2
 8002292:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f006 fead 	bl	8008ff6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800229c:	2100      	movs	r1, #0
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f905 	bl	80024ae <HAL_PCD_SetAddress>

    return;
 80022a4:	e100      	b.n	80024a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00c      	beq.n	80022ca <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022c2:	b292      	uxth	r2, r2
 80022c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80022c8:	e0ee      	b.n	80024a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00c      	beq.n	80022ee <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022dc:	b29a      	uxth	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022e6:	b292      	uxth	r2, r2
 80022e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80022ec:	e0dc      	b.n	80024a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d027      	beq.n	8002348 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002300:	b29a      	uxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0204 	bic.w	r2, r2, #4
 800230a:	b292      	uxth	r2, r2
 800230c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0208 	bic.w	r2, r2, #8
 8002322:	b292      	uxth	r2, r2
 8002324:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f006 fe9d 	bl	8009068 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002336:	b29a      	uxth	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002340:	b292      	uxth	r2, r2
 8002342:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002346:	e0af      	b.n	80024a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8083 	beq.w	800245a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002354:	2300      	movs	r3, #0
 8002356:	77fb      	strb	r3, [r7, #31]
 8002358:	e010      	b.n	800237c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	7ffb      	ldrb	r3, [r7, #31]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	441a      	add	r2, r3
 8002366:	7ffb      	ldrb	r3, [r7, #31]
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	b292      	uxth	r2, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	3320      	adds	r3, #32
 8002370:	443b      	add	r3, r7
 8002372:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002376:	7ffb      	ldrb	r3, [r7, #31]
 8002378:	3301      	adds	r3, #1
 800237a:	77fb      	strb	r3, [r7, #31]
 800237c:	7ffb      	ldrb	r3, [r7, #31]
 800237e:	2b07      	cmp	r3, #7
 8002380:	d9eb      	bls.n	800235a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	b292      	uxth	r2, r2
 8002396:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	b292      	uxth	r2, r2
 80023ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80023b2:	bf00      	nop
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f6      	beq.n	80023b4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d8:	b292      	uxth	r2, r2
 80023da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	77fb      	strb	r3, [r7, #31]
 80023e2:	e00f      	b.n	8002404 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80023e4:	7ffb      	ldrb	r3, [r7, #31]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	4611      	mov	r1, r2
 80023ec:	7ffa      	ldrb	r2, [r7, #31]
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	440a      	add	r2, r1
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	3320      	adds	r3, #32
 80023f6:	443b      	add	r3, r7
 80023f8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80023fc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80023fe:	7ffb      	ldrb	r3, [r7, #31]
 8002400:	3301      	adds	r3, #1
 8002402:	77fb      	strb	r3, [r7, #31]
 8002404:	7ffb      	ldrb	r3, [r7, #31]
 8002406:	2b07      	cmp	r3, #7
 8002408:	d9ec      	bls.n	80023e4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0208 	orr.w	r2, r2, #8
 800241c:	b292      	uxth	r2, r2
 800241e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800242a:	b29a      	uxth	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002434:	b292      	uxth	r2, r2
 8002436:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0204 	orr.w	r2, r2, #4
 800244c:	b292      	uxth	r2, r2
 800244e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f006 fdee 	bl	8009034 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002458:	e026      	b.n	80024a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00f      	beq.n	8002484 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002476:	b292      	uxth	r2, r2
 8002478:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f006 fdac 	bl	8008fda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002482:	e011      	b.n	80024a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024a0:	b292      	uxth	r2, r2
 80024a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024a6:	bf00      	nop
  }
}
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_PCD_SetAddress+0x1a>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e012      	b.n	80024ee <HAL_PCD_SetAddress+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f005 f8d2 	bl	8007688 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	4608      	mov	r0, r1
 8002500:	4611      	mov	r1, r2
 8002502:	461a      	mov	r2, r3
 8002504:	4603      	mov	r3, r0
 8002506:	70fb      	strb	r3, [r7, #3]
 8002508:	460b      	mov	r3, r1
 800250a:	803b      	strh	r3, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002518:	2b00      	cmp	r3, #0
 800251a:	da0e      	bge.n	800253a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	f003 0207 	and.w	r2, r3, #7
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	3310      	adds	r3, #16
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	705a      	strb	r2, [r3, #1]
 8002538:	e00e      	b.n	8002558 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	f003 0207 	and.w	r2, r3, #7
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002564:	883a      	ldrh	r2, [r7, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	78ba      	ldrb	r2, [r7, #2]
 800256e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002570:	78bb      	ldrb	r3, [r7, #2]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d102      	bne.n	800257c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_PCD_EP_Open+0x94>
 8002586:	2302      	movs	r3, #2
 8002588:	e00e      	b.n	80025a8 <HAL_PCD_EP_Open+0xb2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68f9      	ldr	r1, [r7, #12]
 8002598:	4618      	mov	r0, r3
 800259a:	f002 fe1b 	bl	80051d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80025a6:	7afb      	ldrb	r3, [r7, #11]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	da0e      	bge.n	80025e2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 0207 	and.w	r2, r3, #7
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	3310      	adds	r3, #16
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	705a      	strb	r2, [r3, #1]
 80025e0:	e00e      	b.n	8002600 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	f003 0207 	and.w	r2, r3, #7
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	b2da      	uxtb	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_PCD_EP_Close+0x6a>
 8002616:	2302      	movs	r3, #2
 8002618:	e00e      	b.n	8002638 <HAL_PCD_EP_Close+0x88>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68f9      	ldr	r1, [r7, #12]
 8002628:	4618      	mov	r0, r3
 800262a:	f003 f993 	bl	8005954 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	460b      	mov	r3, r1
 800264e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002650:	7afb      	ldrb	r3, [r7, #11]
 8002652:	f003 0207 	and.w	r2, r3, #7
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4413      	add	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002680:	7afb      	ldrb	r3, [r7, #11]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	b2da      	uxtb	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6979      	ldr	r1, [r7, #20]
 8002692:	4618      	mov	r0, r3
 8002694:	f003 fb4a 	bl	8005d2c <USB_EPStartXfer>

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	460b      	mov	r3, r1
 80026b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	f003 0207 	and.w	r2, r3, #7
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	3310      	adds	r3, #16
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4413      	add	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2200      	movs	r2, #0
 80026e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2201      	movs	r2, #1
 80026ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ee:	7afb      	ldrb	r3, [r7, #11]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6979      	ldr	r1, [r7, #20]
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fb13 	bl	8005d2c <USB_EPStartXfer>

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	7912      	ldrb	r2, [r2, #4]
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e04c      	b.n	80027c8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800272e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002732:	2b00      	cmp	r3, #0
 8002734:	da0e      	bge.n	8002754 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 0207 	and.w	r2, r3, #7
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	3310      	adds	r3, #16
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	705a      	strb	r2, [r3, #1]
 8002752:	e00c      	b.n	800276e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	b2da      	uxtb	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_PCD_EP_SetStall+0x7e>
 800278a:	2302      	movs	r3, #2
 800278c:	e01c      	b.n	80027c8 <HAL_PCD_EP_SetStall+0xb8>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68f9      	ldr	r1, [r7, #12]
 800279c:	4618      	mov	r0, r3
 800279e:	f004 fe76 	bl	800748e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d108      	bne.n	80027be <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80027b6:	4619      	mov	r1, r3
 80027b8:	4610      	mov	r0, r2
 80027ba:	f004 ff9b 	bl	80076f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	7912      	ldrb	r2, [r2, #4]
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e040      	b.n	8002870 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	da0e      	bge.n	8002814 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 0207 	and.w	r2, r3, #7
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	3310      	adds	r3, #16
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	705a      	strb	r2, [r3, #1]
 8002812:	e00e      	b.n	8002832 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 0207 	and.w	r2, r3, #7
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	b2da      	uxtb	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_PCD_EP_ClrStall+0x82>
 800284e:	2302      	movs	r3, #2
 8002850:	e00e      	b.n	8002870 <HAL_PCD_EP_ClrStall+0xa0>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	4618      	mov	r0, r3
 8002862:	f004 fe64 	bl	800752e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b096      	sub	sp, #88	@ 0x58
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002880:	e3bb      	b.n	8002ffa <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800288a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800288e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800289c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 8175 	bne.w	8002b90 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80028a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d14e      	bne.n	8002950 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80028be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c2:	81fb      	strh	r3, [r7, #14]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	89fb      	ldrh	r3, [r7, #14]
 80028ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3310      	adds	r3, #16
 80028da:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	3302      	adds	r3, #2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002906:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	441a      	add	r2, r3
 8002912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002914:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002916:	2100      	movs	r1, #0
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f006 fb44 	bl	8008fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7b5b      	ldrb	r3, [r3, #13]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8368 	beq.w	8002ffa <PCD_EP_ISR_Handler+0x782>
 800292a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 8363 	bne.w	8002ffa <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7b5b      	ldrb	r3, [r3, #13]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800293e:	b2da      	uxtb	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	735a      	strb	r2, [r3, #13]
 800294e:	e354      	b.n	8002ffa <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002956:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002962:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800296a:	2b00      	cmp	r3, #0
 800296c:	d034      	beq.n	80029d8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002976:	b29b      	uxth	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	3306      	adds	r3, #6
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002998:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80029a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80029a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f004 fef1 	bl	8007794 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80029be:	4013      	ands	r3, r2
 80029c0:	823b      	strh	r3, [r7, #16]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	8a3a      	ldrh	r2, [r7, #16]
 80029c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029cc:	b292      	uxth	r2, r2
 80029ce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f006 fabb 	bl	8008f4c <HAL_PCD_SetupStageCallback>
 80029d6:	e310      	b.n	8002ffa <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029d8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f280 830c 	bge.w	8002ffa <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80029ee:	4013      	ands	r3, r2
 80029f0:	83fb      	strh	r3, [r7, #30]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	8bfa      	ldrh	r2, [r7, #30]
 80029f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029fc:	b292      	uxth	r2, r2
 80029fe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	3306      	adds	r3, #6
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d019      	beq.n	8002a68 <PCD_EP_ISR_Handler+0x1f0>
 8002a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a42:	6959      	ldr	r1, [r3, #20]
 8002a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a46:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a4a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f004 fea1 	bl	8007794 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	441a      	add	r2, r3
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a5e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a60:	2100      	movs	r1, #0
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f006 fa84 	bl	8008f70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002a72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 82bd 	bne.w	8002ffa <PCD_EP_ISR_Handler+0x782>
 8002a80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a84:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002a88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a8c:	f000 82b5 	beq.w	8002ffa <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	801a      	strh	r2, [r3, #0]
 8002ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ac6:	d91d      	bls.n	8002b04 <PCD_EP_ISR_Handler+0x28c>
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d102      	bne.n	8002ae2 <PCD_EP_ISR_Handler+0x26a>
 8002adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	029b      	lsls	r3, r3, #10
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4313      	orrs	r3, r2
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	801a      	strh	r2, [r3, #0]
 8002b02:	e026      	b.n	8002b52 <PCD_EP_ISR_Handler+0x2da>
 8002b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <PCD_EP_ISR_Handler+0x2aa>
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	e017      	b.n	8002b52 <PCD_EP_ISR_Handler+0x2da>
 8002b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <PCD_EP_ISR_Handler+0x2c4>
 8002b36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b38:	3301      	adds	r3, #1
 8002b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	029b      	lsls	r3, r3, #10
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b62:	827b      	strh	r3, [r7, #18]
 8002b64:	8a7b      	ldrh	r3, [r7, #18]
 8002b66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002b6a:	827b      	strh	r3, [r7, #18]
 8002b6c:	8a7b      	ldrh	r3, [r7, #18]
 8002b6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002b72:	827b      	strh	r3, [r7, #18]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	8a7b      	ldrh	r3, [r7, #18]
 8002b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	8013      	strh	r3, [r2, #0]
 8002b8e:	e234      	b.n	8002ffa <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ba4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f280 80fc 	bge.w	8002da6 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002bdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002be0:	b292      	uxth	r2, r2
 8002be2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002be4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bfc:	7b1b      	ldrb	r3, [r3, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d125      	bne.n	8002c4e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	3306      	adds	r3, #6
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002c2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8092 	beq.w	8002d5c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3e:	6959      	ldr	r1, [r3, #20]
 8002c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c42:	88da      	ldrh	r2, [r3, #6]
 8002c44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c48:	f004 fda4 	bl	8007794 <USB_ReadPMA>
 8002c4c:	e086      	b.n	8002d5c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c50:	78db      	ldrb	r3, [r3, #3]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d10a      	bne.n	8002c6c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f9d9 	bl	8003016 <HAL_PCD_EP_DB_Receive>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002c6a:	e077      	b.n	8002d5c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c86:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	441a      	add	r2, r3
 8002c98:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ca8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d024      	beq.n	8002d14 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002cf6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d02e      	beq.n	8002d5c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d04:	6959      	ldr	r1, [r3, #20]
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	891a      	ldrh	r2, [r3, #8]
 8002d0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d0e:	f004 fd41 	bl	8007794 <USB_ReadPMA>
 8002d12:	e023      	b.n	8002d5c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	3306      	adds	r3, #6
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002d40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4e:	6959      	ldr	r1, [r3, #20]
 8002d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d52:	895a      	ldrh	r2, [r3, #10]
 8002d54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d58:	f004 fd1c 	bl	8007794 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d64:	441a      	add	r2, r3
 8002d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d72:	441a      	add	r2, r3
 8002d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d76:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <PCD_EP_ISR_Handler+0x514>
 8002d80:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d206      	bcs.n	8002d9a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f006 f8ec 	bl	8008f70 <HAL_PCD_DataOutStageCallback>
 8002d98:	e005      	b.n	8002da6 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 ffc3 	bl	8005d2c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002da6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8123 	beq.w	8002ffa <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002db4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	3310      	adds	r3, #16
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	441a      	add	r2, r3
 8002df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e06:	78db      	ldrb	r3, [r3, #3]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	f040 80a2 	bne.w	8002f52 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e16:	7b1b      	ldrb	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8093 	beq.w	8002f44 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d046      	beq.n	8002eb8 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e2c:	785b      	ldrb	r3, [r3, #1]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d126      	bne.n	8002e80 <PCD_EP_ISR_Handler+0x608>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	4413      	add	r3, r2
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	011a      	lsls	r2, r3, #4
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	4413      	add	r3, r2
 8002e54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e58:	623b      	str	r3, [r7, #32]
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	801a      	strh	r2, [r3, #0]
 8002e7e:	e061      	b.n	8002f44 <PCD_EP_ISR_Handler+0x6cc>
 8002e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e82:	785b      	ldrb	r3, [r3, #1]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d15d      	bne.n	8002f44 <PCD_EP_ISR_Handler+0x6cc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	4413      	add	r3, r2
 8002e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	011a      	lsls	r2, r3, #4
 8002ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	801a      	strh	r2, [r3, #0]
 8002eb6:	e045      	b.n	8002f44 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec0:	785b      	ldrb	r3, [r3, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d126      	bne.n	8002f14 <PCD_EP_ISR_Handler+0x69c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eda:	4413      	add	r3, r2
 8002edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	011a      	lsls	r2, r3, #4
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efc:	801a      	strh	r2, [r3, #0]
 8002efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f10:	801a      	strh	r2, [r3, #0]
 8002f12:	e017      	b.n	8002f44 <PCD_EP_ISR_Handler+0x6cc>
 8002f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f16:	785b      	ldrb	r3, [r3, #1]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d113      	bne.n	8002f44 <PCD_EP_ISR_Handler+0x6cc>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f2a:	4413      	add	r3, r2
 8002f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	011a      	lsls	r2, r3, #4
 8002f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f36:	4413      	add	r3, r2
 8002f38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f40:	2200      	movs	r2, #0
 8002f42:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f006 f82b 	bl	8008fa6 <HAL_PCD_DataInStageCallback>
 8002f50:	e053      	b.n	8002ffa <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002f52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d146      	bne.n	8002fec <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	3302      	adds	r3, #2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d907      	bls.n	8002fa6 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f9e:	1ad2      	subs	r2, r2, r3
 8002fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa2:	619a      	str	r2, [r3, #24]
 8002fa4:	e002      	b.n	8002fac <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f005 fff3 	bl	8008fa6 <HAL_PCD_DataInStageCallback>
 8002fc0:	e01b      	b.n	8002ffa <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002fca:	441a      	add	r2, r3
 8002fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fce:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002fd8:	441a      	add	r2, r3
 8002fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fdc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 fea1 	bl	8005d2c <USB_EPStartXfer>
 8002fea:	e006      	b.n	8002ffa <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002fec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f91b 	bl	8003230 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003002:	b29b      	uxth	r3, r3
 8003004:	b21b      	sxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	f6ff ac3b 	blt.w	8002882 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3758      	adds	r7, #88	@ 0x58
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b088      	sub	sp, #32
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	4613      	mov	r3, r2
 8003022:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d07e      	beq.n	800312c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	3302      	adds	r3, #2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003056:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	8b7b      	ldrh	r3, [r7, #26]
 800305e:	429a      	cmp	r2, r3
 8003060:	d306      	bcc.n	8003070 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	8b7b      	ldrh	r3, [r7, #26]
 8003068:	1ad2      	subs	r2, r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	619a      	str	r2, [r3, #24]
 800306e:	e002      	b.n	8003076 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d123      	bne.n	80030c6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003098:	833b      	strh	r3, [r7, #24]
 800309a:	8b3b      	ldrh	r3, [r7, #24]
 800309c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030a0:	833b      	strh	r3, [r7, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	8b3b      	ldrh	r3, [r7, #24]
 80030b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01f      	beq.n	8003110 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ea:	82fb      	strh	r3, [r7, #22]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	441a      	add	r2, r3
 80030fa:	8afb      	ldrh	r3, [r7, #22]
 80030fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003108:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800310c:	b29b      	uxth	r3, r3
 800310e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003110:	8b7b      	ldrh	r3, [r7, #26]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8087 	beq.w	8003226 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6959      	ldr	r1, [r3, #20]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	891a      	ldrh	r2, [r3, #8]
 8003124:	8b7b      	ldrh	r3, [r7, #26]
 8003126:	f004 fb35 	bl	8007794 <USB_ReadPMA>
 800312a:	e07c      	b.n	8003226 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003134:	b29b      	uxth	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	3306      	adds	r3, #6
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003154:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	8b7b      	ldrh	r3, [r7, #26]
 800315c:	429a      	cmp	r2, r3
 800315e:	d306      	bcc.n	800316e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	8b7b      	ldrh	r3, [r7, #26]
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	619a      	str	r2, [r3, #24]
 800316c:	e002      	b.n	8003174 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2200      	movs	r2, #0
 8003172:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d123      	bne.n	80031c4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003196:	83fb      	strh	r3, [r7, #30]
 8003198:	8bfb      	ldrh	r3, [r7, #30]
 800319a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800319e:	83fb      	strh	r3, [r7, #30]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	8bfb      	ldrh	r3, [r7, #30]
 80031b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11f      	bne.n	800320e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e8:	83bb      	strh	r3, [r7, #28]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	441a      	add	r2, r3
 80031f8:	8bbb      	ldrh	r3, [r7, #28]
 80031fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003206:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800320a:	b29b      	uxth	r3, r3
 800320c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800320e:	8b7b      	ldrh	r3, [r7, #26]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6959      	ldr	r1, [r3, #20]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	895a      	ldrh	r2, [r3, #10]
 8003220:	8b7b      	ldrh	r3, [r7, #26]
 8003222:	f004 fab7 	bl	8007794 <USB_ReadPMA>
    }
  }

  return count;
 8003226:	8b7b      	ldrh	r3, [r7, #26]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b0a4      	sub	sp, #144	@ 0x90
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 81dd 	beq.w	8003604 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003252:	b29b      	uxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	3302      	adds	r3, #2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003272:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800327e:	429a      	cmp	r2, r3
 8003280:	d907      	bls.n	8003292 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	619a      	str	r2, [r3, #24]
 8003290:	e002      	b.n	8003298 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2200      	movs	r2, #0
 8003296:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 80b9 	bne.w	8003414 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d126      	bne.n	80032f8 <HAL_PCD_EP_DB_Transmit+0xc8>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032be:	4413      	add	r3, r2
 80032c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	011a      	lsls	r2, r3, #4
 80032c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ca:	4413      	add	r3, r2
 80032cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032dc:	b29a      	uxth	r2, r3
 80032de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e0:	801a      	strh	r2, [r3, #0]
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	e01a      	b.n	800332e <HAL_PCD_EP_DB_Transmit+0xfe>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	785b      	ldrb	r3, [r3, #1]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d116      	bne.n	800332e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	637b      	str	r3, [r7, #52]	@ 0x34
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800330e:	b29b      	uxth	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003314:	4413      	add	r3, r2
 8003316:	637b      	str	r3, [r7, #52]	@ 0x34
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	011a      	lsls	r2, r3, #4
 800331e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003320:	4413      	add	r3, r2
 8003322:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30
 8003328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332a:	2200      	movs	r2, #0
 800332c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	785b      	ldrb	r3, [r3, #1]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d126      	bne.n	800338a <HAL_PCD_EP_DB_Transmit+0x15a>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800334a:	b29b      	uxth	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	011a      	lsls	r2, r3, #4
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	b29b      	uxth	r3, r3
 800336a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336e:	b29a      	uxth	r2, r3
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	801a      	strh	r2, [r3, #0]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800337e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003382:	b29a      	uxth	r2, r3
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	801a      	strh	r2, [r3, #0]
 8003388:	e017      	b.n	80033ba <HAL_PCD_EP_DB_Transmit+0x18a>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	785b      	ldrb	r3, [r3, #1]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d113      	bne.n	80033ba <HAL_PCD_EP_DB_Transmit+0x18a>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800339a:	b29b      	uxth	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	4413      	add	r3, r2
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	011a      	lsls	r2, r3, #4
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	4413      	add	r3, r2
 80033ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	2200      	movs	r2, #0
 80033b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	4619      	mov	r1, r3
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f005 fdf0 	bl	8008fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 82fc 	beq.w	80039ca <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ec:	82fb      	strh	r3, [r7, #22]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	441a      	add	r2, r3
 80033fc:	8afb      	ldrh	r3, [r7, #22]
 80033fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003406:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800340a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340e:	b29b      	uxth	r3, r3
 8003410:	8013      	strh	r3, [r2, #0]
 8003412:	e2da      	b.n	80039ca <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d021      	beq.n	8003462 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003438:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	441a      	add	r2, r3
 800344a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800344e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003456:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800345a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800345e:	b29b      	uxth	r3, r3
 8003460:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 82ae 	bne.w	80039ca <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003476:	441a      	add	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003484:	441a      	add	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	429a      	cmp	r2, r3
 8003494:	d30b      	bcc.n	80034ae <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6a1a      	ldr	r2, [r3, #32]
 80034a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034a6:	1ad2      	subs	r2, r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	621a      	str	r2, [r3, #32]
 80034ac:	e017      	b.n	80034de <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d108      	bne.n	80034c8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80034b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80034c6:	e00a      	b.n	80034de <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2200      	movs	r2, #0
 80034dc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	785b      	ldrb	r3, [r3, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d165      	bne.n	80035b2 <HAL_PCD_EP_DB_Transmit+0x382>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fa:	4413      	add	r3, r2
 80034fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	011a      	lsls	r2, r3, #4
 8003504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003506:	4413      	add	r3, r2
 8003508:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800350c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003518:	b29a      	uxth	r2, r3
 800351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003522:	2b3e      	cmp	r3, #62	@ 0x3e
 8003524:	d91d      	bls.n	8003562 <HAL_PCD_EP_DB_Transmit+0x332>
 8003526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800352e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <HAL_PCD_EP_DB_Transmit+0x310>
 800353a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800353c:	3b01      	subs	r3, #1
 800353e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29a      	uxth	r2, r3
 8003546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003548:	b29b      	uxth	r3, r3
 800354a:	029b      	lsls	r3, r3, #10
 800354c:	b29b      	uxth	r3, r3
 800354e:	4313      	orrs	r3, r2
 8003550:	b29b      	uxth	r3, r3
 8003552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800355a:	b29a      	uxth	r2, r3
 800355c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355e:	801a      	strh	r2, [r3, #0]
 8003560:	e044      	b.n	80035ec <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003562:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <HAL_PCD_EP_DB_Transmit+0x350>
 800356a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003578:	b29a      	uxth	r2, r3
 800357a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357c:	801a      	strh	r2, [r3, #0]
 800357e:	e035      	b.n	80035ec <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003588:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_PCD_EP_DB_Transmit+0x36a>
 8003594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003596:	3301      	adds	r3, #1
 8003598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	029b      	lsls	r3, r3, #10
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ae:	801a      	strh	r2, [r3, #0]
 80035b0:	e01c      	b.n	80035ec <HAL_PCD_EP_DB_Transmit+0x3bc>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	785b      	ldrb	r3, [r3, #1]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d118      	bne.n	80035ec <HAL_PCD_EP_DB_Transmit+0x3bc>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	647b      	str	r3, [r7, #68]	@ 0x44
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ce:	4413      	add	r3, r2
 80035d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	011a      	lsls	r2, r3, #4
 80035d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035da:	4413      	add	r3, r2
 80035dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80035e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	6959      	ldr	r1, [r3, #20]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	891a      	ldrh	r2, [r3, #8]
 80035f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f004 f884 	bl	800770a <USB_WritePMA>
 8003602:	e1e2      	b.n	80039ca <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800360c:	b29b      	uxth	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	3306      	adds	r3, #6
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800362c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003638:	429a      	cmp	r2, r3
 800363a:	d307      	bcc.n	800364c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003644:	1ad2      	subs	r2, r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	619a      	str	r2, [r3, #24]
 800364a:	e002      	b.n	8003652 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2200      	movs	r2, #0
 8003650:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 80c0 	bne.w	80037dc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	785b      	ldrb	r3, [r3, #1]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d126      	bne.n	80036b2 <HAL_PCD_EP_DB_Transmit+0x482>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003672:	b29b      	uxth	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003678:	4413      	add	r3, r2
 800367a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	011a      	lsls	r2, r3, #4
 8003682:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003684:	4413      	add	r3, r2
 8003686:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800368a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800368c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003696:	b29a      	uxth	r2, r3
 8003698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800369a:	801a      	strh	r2, [r3, #0]
 800369c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	e01a      	b.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	785b      	ldrb	r3, [r3, #1]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d116      	bne.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	667b      	str	r3, [r7, #100]	@ 0x64
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036ce:	4413      	add	r3, r2
 80036d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	011a      	lsls	r2, r3, #4
 80036d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036da:	4413      	add	r3, r2
 80036dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80036e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036e4:	2200      	movs	r2, #0
 80036e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	785b      	ldrb	r3, [r3, #1]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d12b      	bne.n	800374e <HAL_PCD_EP_DB_Transmit+0x51e>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003704:	b29b      	uxth	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800370a:	4413      	add	r3, r2
 800370c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	011a      	lsls	r2, r3, #4
 8003714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003716:	4413      	add	r3, r2
 8003718:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800371c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003720:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b29b      	uxth	r3, r3
 8003728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372c:	b29a      	uxth	r2, r3
 800372e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003732:	801a      	strh	r2, [r3, #0]
 8003734:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29b      	uxth	r3, r3
 800373c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003744:	b29a      	uxth	r2, r3
 8003746:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800374a:	801a      	strh	r2, [r3, #0]
 800374c:	e017      	b.n	800377e <HAL_PCD_EP_DB_Transmit+0x54e>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	785b      	ldrb	r3, [r3, #1]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d113      	bne.n	800377e <HAL_PCD_EP_DB_Transmit+0x54e>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800375e:	b29b      	uxth	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003764:	4413      	add	r3, r2
 8003766:	677b      	str	r3, [r7, #116]	@ 0x74
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	011a      	lsls	r2, r3, #4
 800376e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003770:	4413      	add	r3, r2
 8003772:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003776:	673b      	str	r3, [r7, #112]	@ 0x70
 8003778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800377a:	2200      	movs	r2, #0
 800377c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	4619      	mov	r1, r3
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f005 fc0e 	bl	8008fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 811a 	bne.w	80039ca <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	441a      	add	r2, r3
 80037c2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80037c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	8013      	strh	r3, [r2, #0]
 80037da:	e0f6      	b.n	80039ca <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d121      	bne.n	800382a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003800:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800381a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800381e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003826:	b29b      	uxth	r3, r3
 8003828:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003830:	2b01      	cmp	r3, #1
 8003832:	f040 80ca 	bne.w	80039ca <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800383e:	441a      	add	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800384c:	441a      	add	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6a1a      	ldr	r2, [r3, #32]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	429a      	cmp	r2, r3
 800385c:	d30b      	bcc.n	8003876 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6a1a      	ldr	r2, [r3, #32]
 800386a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800386e:	1ad2      	subs	r2, r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	621a      	str	r2, [r3, #32]
 8003874:	e017      	b.n	80038a6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d108      	bne.n	8003890 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800387e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003882:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800388e:	e00a      	b.n	80038a6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2200      	movs	r2, #0
 800389c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	785b      	ldrb	r3, [r3, #1]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d165      	bne.n	8003980 <HAL_PCD_EP_DB_Transmit+0x750>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c8:	4413      	add	r3, r2
 80038ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	011a      	lsls	r2, r3, #4
 80038d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038d4:	4413      	add	r3, r2
 80038d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80038f2:	d91d      	bls.n	8003930 <HAL_PCD_EP_DB_Transmit+0x700>
 80038f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003908:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800390a:	3b01      	subs	r3, #1
 800390c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800390e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	b29a      	uxth	r2, r3
 8003914:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003916:	b29b      	uxth	r3, r3
 8003918:	029b      	lsls	r3, r3, #10
 800391a:	b29b      	uxth	r3, r3
 800391c:	4313      	orrs	r3, r2
 800391e:	b29b      	uxth	r3, r3
 8003920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003928:	b29a      	uxth	r2, r3
 800392a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	e041      	b.n	80039b4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003930:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <HAL_PCD_EP_DB_Transmit+0x71e>
 8003938:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003946:	b29a      	uxth	r2, r3
 8003948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800394a:	801a      	strh	r2, [r3, #0]
 800394c:	e032      	b.n	80039b4 <HAL_PCD_EP_DB_Transmit+0x784>
 800394e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_PCD_EP_DB_Transmit+0x738>
 8003962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003964:	3301      	adds	r3, #1
 8003966:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003968:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29a      	uxth	r2, r3
 800396e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003970:	b29b      	uxth	r3, r3
 8003972:	029b      	lsls	r3, r3, #10
 8003974:	b29b      	uxth	r3, r3
 8003976:	4313      	orrs	r3, r2
 8003978:	b29a      	uxth	r2, r3
 800397a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800397c:	801a      	strh	r2, [r3, #0]
 800397e:	e019      	b.n	80039b4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d115      	bne.n	80039b4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003990:	b29b      	uxth	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003996:	4413      	add	r3, r2
 8003998:	657b      	str	r3, [r7, #84]	@ 0x54
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	011a      	lsls	r2, r3, #4
 80039a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a2:	4413      	add	r3, r2
 80039a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80039aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6959      	ldr	r1, [r3, #20]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	895a      	ldrh	r2, [r3, #10]
 80039c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f003 fea0 	bl	800770a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039e4:	82bb      	strh	r3, [r7, #20]
 80039e6:	8abb      	ldrh	r3, [r7, #20]
 80039e8:	f083 0310 	eor.w	r3, r3, #16
 80039ec:	82bb      	strh	r3, [r7, #20]
 80039ee:	8abb      	ldrh	r3, [r7, #20]
 80039f0:	f083 0320 	eor.w	r3, r3, #32
 80039f4:	82bb      	strh	r3, [r7, #20]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	441a      	add	r2, r3
 8003a04:	8abb      	ldrh	r3, [r7, #20]
 8003a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3790      	adds	r7, #144	@ 0x90
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	817b      	strh	r3, [r7, #10]
 8003a32:	4613      	mov	r3, r2
 8003a34:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a42:	897b      	ldrh	r3, [r7, #10]
 8003a44:	f003 0207 	and.w	r2, r3, #7
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	3310      	adds	r3, #16
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e009      	b.n	8003a6e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a5a:	897a      	ldrh	r2, [r7, #10]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a6e:	893b      	ldrh	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	80da      	strh	r2, [r3, #6]
 8003a82:	e00b      	b.n	8003a9c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2201      	movs	r2, #1
 8003a88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e272      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8087 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ac8:	4b92      	ldr	r3, [pc, #584]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d00c      	beq.n	8003aee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ad4:	4b8f      	ldr	r3, [pc, #572]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d112      	bne.n	8003b06 <HAL_RCC_OscConfig+0x5e>
 8003ae0:	4b8c      	ldr	r3, [pc, #560]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aec:	d10b      	bne.n	8003b06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aee:	4b89      	ldr	r3, [pc, #548]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d06c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x12c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d168      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e24c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x76>
 8003b10:	4b80      	ldr	r3, [pc, #512]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7f      	ldr	r2, [pc, #508]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e02e      	b.n	8003b7c <HAL_RCC_OscConfig+0xd4>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x98>
 8003b26:	4b7b      	ldr	r3, [pc, #492]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7a      	ldr	r2, [pc, #488]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b78      	ldr	r3, [pc, #480]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a77      	ldr	r2, [pc, #476]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e01d      	b.n	8003b7c <HAL_RCC_OscConfig+0xd4>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0xbc>
 8003b4a:	4b72      	ldr	r3, [pc, #456]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a71      	ldr	r2, [pc, #452]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b6f      	ldr	r3, [pc, #444]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0xd4>
 8003b64:	4b6b      	ldr	r3, [pc, #428]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6a      	ldr	r2, [pc, #424]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b68      	ldr	r3, [pc, #416]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a67      	ldr	r2, [pc, #412]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fd fea4 	bl	80018d0 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fd fea0 	bl	80018d0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e200      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0xe4>
 8003baa:	e014      	b.n	8003bd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fd fe90 	bl	80018d0 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fd fe8c 	bl	80018d0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	@ 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e1ec      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	4b53      	ldr	r3, [pc, #332]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x10c>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d063      	beq.n	8003caa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003be2:	4b4c      	ldr	r3, [pc, #304]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bee:	4b49      	ldr	r3, [pc, #292]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d11c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x18c>
 8003bfa:	4b46      	ldr	r3, [pc, #280]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d116      	bne.n	8003c34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c06:	4b43      	ldr	r3, [pc, #268]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_RCC_OscConfig+0x176>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d001      	beq.n	8003c1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e1c0      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4939      	ldr	r1, [pc, #228]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	e03a      	b.n	8003caa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3c:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <HAL_RCC_OscConfig+0x270>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fd fe45 	bl	80018d0 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7fd fe41 	bl	80018d0 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e1a1      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	4b2a      	ldr	r3, [pc, #168]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4927      	ldr	r1, [pc, #156]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
 8003c7c:	e015      	b.n	8003caa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7e:	4b26      	ldr	r3, [pc, #152]	@ (8003d18 <HAL_RCC_OscConfig+0x270>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fd fe24 	bl	80018d0 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8c:	f7fd fe20 	bl	80018d0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e180      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d03a      	beq.n	8003d2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d019      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cbe:	4b17      	ldr	r3, [pc, #92]	@ (8003d1c <HAL_RCC_OscConfig+0x274>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fd fe04 	bl	80018d0 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ccc:	f7fd fe00 	bl	80018d0 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e160      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cde:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cea:	2001      	movs	r0, #1
 8003cec:	f000 face 	bl	800428c <RCC_Delay>
 8003cf0:	e01c      	b.n	8003d2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d1c <HAL_RCC_OscConfig+0x274>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fdea 	bl	80018d0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfe:	e00f      	b.n	8003d20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d00:	f7fd fde6 	bl	80018d0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d908      	bls.n	8003d20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e146      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	42420000 	.word	0x42420000
 8003d1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d20:	4b92      	ldr	r3, [pc, #584]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e9      	bne.n	8003d00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80a6 	beq.w	8003e86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10d      	bne.n	8003d66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4a:	4b88      	ldr	r3, [pc, #544]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4a87      	ldr	r2, [pc, #540]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d54:	61d3      	str	r3, [r2, #28]
 8003d56:	4b85      	ldr	r3, [pc, #532]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	4b82      	ldr	r3, [pc, #520]	@ (8003f70 <HAL_RCC_OscConfig+0x4c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d118      	bne.n	8003da4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d72:	4b7f      	ldr	r3, [pc, #508]	@ (8003f70 <HAL_RCC_OscConfig+0x4c8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a7e      	ldr	r2, [pc, #504]	@ (8003f70 <HAL_RCC_OscConfig+0x4c8>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7e:	f7fd fda7 	bl	80018d0 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d86:	f7fd fda3 	bl	80018d0 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b64      	cmp	r3, #100	@ 0x64
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e103      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	4b75      	ldr	r3, [pc, #468]	@ (8003f70 <HAL_RCC_OscConfig+0x4c8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x312>
 8003dac:	4b6f      	ldr	r3, [pc, #444]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6213      	str	r3, [r2, #32]
 8003db8:	e02d      	b.n	8003e16 <HAL_RCC_OscConfig+0x36e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x334>
 8003dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4a69      	ldr	r2, [pc, #420]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	6213      	str	r3, [r2, #32]
 8003dce:	4b67      	ldr	r3, [pc, #412]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	4a66      	ldr	r2, [pc, #408]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	6213      	str	r3, [r2, #32]
 8003dda:	e01c      	b.n	8003e16 <HAL_RCC_OscConfig+0x36e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d10c      	bne.n	8003dfe <HAL_RCC_OscConfig+0x356>
 8003de4:	4b61      	ldr	r3, [pc, #388]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	4a60      	ldr	r2, [pc, #384]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	f043 0304 	orr.w	r3, r3, #4
 8003dee:	6213      	str	r3, [r2, #32]
 8003df0:	4b5e      	ldr	r3, [pc, #376]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4a5d      	ldr	r2, [pc, #372]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6213      	str	r3, [r2, #32]
 8003dfc:	e00b      	b.n	8003e16 <HAL_RCC_OscConfig+0x36e>
 8003dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4a5a      	ldr	r2, [pc, #360]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6213      	str	r3, [r2, #32]
 8003e0a:	4b58      	ldr	r3, [pc, #352]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4a57      	ldr	r2, [pc, #348]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d015      	beq.n	8003e4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fd57 	bl	80018d0 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fd fd53 	bl	80018d0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e0b1      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ee      	beq.n	8003e26 <HAL_RCC_OscConfig+0x37e>
 8003e48:	e014      	b.n	8003e74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4a:	f7fd fd41 	bl	80018d0 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fd fd3d 	bl	80018d0 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e09b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e68:	4b40      	ldr	r3, [pc, #256]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ee      	bne.n	8003e52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8087 	beq.w	8003f9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e90:	4b36      	ldr	r3, [pc, #216]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d061      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d146      	bne.n	8003f32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea4:	4b33      	ldr	r3, [pc, #204]	@ (8003f74 <HAL_RCC_OscConfig+0x4cc>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eaa:	f7fd fd11 	bl	80018d0 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb2:	f7fd fd0d 	bl	80018d0 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e06d      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec4:	4b29      	ldr	r3, [pc, #164]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed8:	d108      	bne.n	8003eec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eda:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	4921      	ldr	r1, [pc, #132]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eec:	4b1f      	ldr	r3, [pc, #124]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a19      	ldr	r1, [r3, #32]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	430b      	orrs	r3, r1
 8003efe:	491b      	ldr	r1, [pc, #108]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f04:	4b1b      	ldr	r3, [pc, #108]	@ (8003f74 <HAL_RCC_OscConfig+0x4cc>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fd fce1 	bl	80018d0 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f12:	f7fd fcdd 	bl	80018d0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e03d      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f24:	4b11      	ldr	r3, [pc, #68]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x46a>
 8003f30:	e035      	b.n	8003f9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f32:	4b10      	ldr	r3, [pc, #64]	@ (8003f74 <HAL_RCC_OscConfig+0x4cc>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fd fcca 	bl	80018d0 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd fcc6 	bl	80018d0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e026      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f52:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <HAL_RCC_OscConfig+0x4c4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x498>
 8003f5e:	e01e      	b.n	8003f9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e019      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40007000 	.word	0x40007000
 8003f74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f78:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <HAL_RCC_OscConfig+0x500>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d106      	bne.n	8003f9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d001      	beq.n	8003f9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000

08003fac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0d0      	b.n	8004162 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800416c <HAL_RCC_ClockConfig+0x1c0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d910      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b67      	ldr	r3, [pc, #412]	@ (800416c <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 0207 	bic.w	r2, r3, #7
 8003fd6:	4965      	ldr	r1, [pc, #404]	@ (800416c <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b63      	ldr	r3, [pc, #396]	@ (800416c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0b8      	b.n	8004162 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004008:	4b59      	ldr	r3, [pc, #356]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a58      	ldr	r2, [pc, #352]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004012:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004020:	4b53      	ldr	r3, [pc, #332]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a52      	ldr	r2, [pc, #328]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800402a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b50      	ldr	r3, [pc, #320]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	494d      	ldr	r1, [pc, #308]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d040      	beq.n	80040cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b47      	ldr	r3, [pc, #284]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d115      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406a:	4b41      	ldr	r3, [pc, #260]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e073      	b.n	8004162 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407a:	4b3d      	ldr	r3, [pc, #244]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e06b      	b.n	8004162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800408a:	4b39      	ldr	r3, [pc, #228]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4936      	ldr	r1, [pc, #216]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800409c:	f7fd fc18 	bl	80018d0 <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a4:	f7fd fc14 	bl	80018d0 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e053      	b.n	8004162 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 020c 	and.w	r2, r3, #12
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d1eb      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040cc:	4b27      	ldr	r3, [pc, #156]	@ (800416c <HAL_RCC_ClockConfig+0x1c0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d210      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b24      	ldr	r3, [pc, #144]	@ (800416c <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 0207 	bic.w	r2, r3, #7
 80040e2:	4922      	ldr	r1, [pc, #136]	@ (800416c <HAL_RCC_ClockConfig+0x1c0>)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b20      	ldr	r3, [pc, #128]	@ (800416c <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e032      	b.n	8004162 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004108:	4b19      	ldr	r3, [pc, #100]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4916      	ldr	r1, [pc, #88]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004126:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	490e      	ldr	r1, [pc, #56]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800413a:	f000 f821 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800413e:	4602      	mov	r2, r0
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	490a      	ldr	r1, [pc, #40]	@ (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 800414c:	5ccb      	ldrb	r3, [r1, r3]
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	4a09      	ldr	r2, [pc, #36]	@ (8004178 <HAL_RCC_ClockConfig+0x1cc>)
 8004154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004156:	4b09      	ldr	r3, [pc, #36]	@ (800417c <HAL_RCC_ClockConfig+0x1d0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fd fb76 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40022000 	.word	0x40022000
 8004170:	40021000 	.word	0x40021000
 8004174:	080096cc 	.word	0x080096cc
 8004178:	20000000 	.word	0x20000000
 800417c:	20000008 	.word	0x20000008

08004180 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800419a:	4b1e      	ldr	r3, [pc, #120]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x94>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d002      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x30>
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d003      	beq.n	80041b6 <HAL_RCC_GetSysClockFreq+0x36>
 80041ae:	e027      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041b0:	4b19      	ldr	r3, [pc, #100]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x98>)
 80041b2:	613b      	str	r3, [r7, #16]
      break;
 80041b4:	e027      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	0c9b      	lsrs	r3, r3, #18
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	4a17      	ldr	r2, [pc, #92]	@ (800421c <HAL_RCC_GetSysClockFreq+0x9c>)
 80041c0:	5cd3      	ldrb	r3, [r2, r3]
 80041c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d010      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041ce:	4b11      	ldr	r3, [pc, #68]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x94>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	0c5b      	lsrs	r3, r3, #17
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	4a11      	ldr	r2, [pc, #68]	@ (8004220 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041da:	5cd3      	ldrb	r3, [r2, r3]
 80041dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x98>)
 80041e2:	fb03 f202 	mul.w	r2, r3, r2
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	e004      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004224 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041f4:	fb02 f303 	mul.w	r3, r2, r3
 80041f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	613b      	str	r3, [r7, #16]
      break;
 80041fe:	e002      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x98>)
 8004202:	613b      	str	r3, [r7, #16]
      break;
 8004204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004206:	693b      	ldr	r3, [r7, #16]
}
 8004208:	4618      	mov	r0, r3
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40021000 	.word	0x40021000
 8004218:	007a1200 	.word	0x007a1200
 800421c:	080096e4 	.word	0x080096e4
 8004220:	080096f4 	.word	0x080096f4
 8004224:	003d0900 	.word	0x003d0900

08004228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800422c:	4b02      	ldr	r3, [pc, #8]	@ (8004238 <HAL_RCC_GetHCLKFreq+0x10>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	20000000 	.word	0x20000000

0800423c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004240:	f7ff fff2 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b05      	ldr	r3, [pc, #20]	@ (800425c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4903      	ldr	r1, [pc, #12]	@ (8004260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000
 8004260:	080096dc 	.word	0x080096dc

08004264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004268:	f7ff ffde 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 800426c:	4602      	mov	r2, r0
 800426e:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	0adb      	lsrs	r3, r3, #11
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	4903      	ldr	r1, [pc, #12]	@ (8004288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800427a:	5ccb      	ldrb	r3, [r1, r3]
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	080096dc 	.word	0x080096dc

0800428c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004294:	4b0a      	ldr	r3, [pc, #40]	@ (80042c0 <RCC_Delay+0x34>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0a      	ldr	r2, [pc, #40]	@ (80042c4 <RCC_Delay+0x38>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	0a5b      	lsrs	r3, r3, #9
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042a8:	bf00      	nop
  }
  while (Delay --);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1e5a      	subs	r2, r3, #1
 80042ae:	60fa      	str	r2, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f9      	bne.n	80042a8 <RCC_Delay+0x1c>
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	20000000 	.word	0x20000000
 80042c4:	10624dd3 	.word	0x10624dd3

080042c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d07d      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e8:	4b4f      	ldr	r3, [pc, #316]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10d      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042fe:	61d3      	str	r3, [r2, #28]
 8004300:	4b49      	ldr	r3, [pc, #292]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	4b46      	ldr	r3, [pc, #280]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d118      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431c:	4b43      	ldr	r3, [pc, #268]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a42      	ldr	r2, [pc, #264]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004326:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004328:	f7fd fad2 	bl	80018d0 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432e:	e008      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004330:	f7fd face 	bl	80018d0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	@ 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e06d      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004342:	4b3a      	ldr	r3, [pc, #232]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800434e:	4b36      	ldr	r3, [pc, #216]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004356:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d02e      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	429a      	cmp	r2, r3
 800436a:	d027      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800436c:	4b2e      	ldr	r3, [pc, #184]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004374:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004376:	4b2e      	ldr	r3, [pc, #184]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800437c:	4b2c      	ldr	r3, [pc, #176]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004382:	4a29      	ldr	r2, [pc, #164]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d014      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fd fa9d 	bl	80018d0 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fd fa99 	bl	80018d0 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e036      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ee      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4917      	ldr	r1, [pc, #92]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d105      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d4:	4b14      	ldr	r3, [pc, #80]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	4a13      	ldr	r2, [pc, #76]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	490b      	ldr	r1, [pc, #44]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800440a:	4b07      	ldr	r3, [pc, #28]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	4904      	ldr	r1, [pc, #16]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	40007000 	.word	0x40007000
 8004430:	42420440 	.word	0x42420440

08004434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e042      	b.n	80044cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc fbec 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	@ 0x24
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fdb7 	bl	8004fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800448c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800449c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08a      	sub	sp, #40	@ 0x28
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d175      	bne.n	80045e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_UART_Transmit+0x2c>
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e06e      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2221      	movs	r2, #33	@ 0x21
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004512:	f7fd f9dd 	bl	80018d0 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452c:	d108      	bne.n	8004540 <HAL_UART_Transmit+0x6c>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	e003      	b.n	8004548 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004548:	e02e      	b.n	80045a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	2180      	movs	r1, #128	@ 0x80
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fb1c 	bl	8004b92 <UART_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e03a      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004580:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	3302      	adds	r3, #2
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	e007      	b.n	800459a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1cb      	bne.n	800454a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2140      	movs	r1, #64	@ 0x40
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fae8 	bl	8004b92 <UART_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e006      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b20      	cmp	r3, #32
 8004602:	d112      	bne.n	800462a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_UART_Receive_IT+0x26>
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e00b      	b.n	800462c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	461a      	mov	r2, r3
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fb0f 	bl	8004c44 <UART_Start_Receive_IT>
 8004626:	4603      	mov	r3, r0
 8004628:	e000      	b.n	800462c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b0ba      	sub	sp, #232	@ 0xe8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004660:	2300      	movs	r3, #0
 8004662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800467a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_UART_IRQHandler+0x66>
 8004686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fbec 	bl	8004e70 <UART_Receive_IT>
      return;
 8004698:	e25b      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800469a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80de 	beq.w	8004860 <HAL_UART_IRQHandler+0x22c>
 80046a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80d1 	beq.w	8004860 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <HAL_UART_IRQHandler+0xae>
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_UART_IRQHandler+0xd2>
 80046ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_UART_IRQHandler+0xf6>
 8004712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004722:	f043 0204 	orr.w	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d011      	beq.n	800475a <HAL_UART_IRQHandler+0x126>
 8004736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	f043 0208 	orr.w	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 81f2 	beq.w	8004b48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_UART_IRQHandler+0x14e>
 8004770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb77 	bl	8004e70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <HAL_UART_IRQHandler+0x17a>
 80047a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d04f      	beq.n	800484e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa81 	bl	8004cb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d041      	beq.n	8004846 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1d9      	bne.n	80047c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d013      	beq.n	800483e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a14 <HAL_UART_IRQHandler+0x3e0>)
 800481c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004822:	4618      	mov	r0, r3
 8004824:	f7fd f9ca 	bl	8001bbc <HAL_DMA_Abort_IT>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d016      	beq.n	800485c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004838:	4610      	mov	r0, r2
 800483a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	e00e      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f993 	bl	8004b6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	e00a      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f98f 	bl	8004b6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	e006      	b.n	800485c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f98b 	bl	8004b6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800485a:	e175      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	bf00      	nop
    return;
 800485e:	e173      	b.n	8004b48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	2b01      	cmp	r3, #1
 8004866:	f040 814f 	bne.w	8004b08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8148 	beq.w	8004b08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8141 	beq.w	8004b08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80b6 	beq.w	8004a18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8145 	beq.w	8004b4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048ca:	429a      	cmp	r2, r3
 80048cc:	f080 813e 	bcs.w	8004b4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b20      	cmp	r3, #32
 80048e0:	f000 8088 	beq.w	80049f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004902:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004910:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004914:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800491c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1d9      	bne.n	80048e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3314      	adds	r3, #20
 8004936:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004940:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004954:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004958:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800495c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e1      	bne.n	8004930 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800497c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800497e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3314      	adds	r3, #20
 800498c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004990:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004992:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004996:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800499e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e3      	bne.n	800496c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c4:	f023 0310 	bic.w	r3, r3, #16
 80049c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049d8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e3      	bne.n	80049b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fd f8a9 	bl	8001b46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8b6 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a10:	e09c      	b.n	8004b4c <HAL_UART_IRQHandler+0x518>
 8004a12:	bf00      	nop
 8004a14:	08004d7b 	.word	0x08004d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 808e 	beq.w	8004b50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8089 	beq.w	8004b50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	330c      	adds	r3, #12
 8004a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a62:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e3      	bne.n	8004a3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3314      	adds	r3, #20
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	623b      	str	r3, [r7, #32]
   return(result);
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e3      	bne.n	8004a76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0310 	bic.w	r3, r3, #16
 8004ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ae0:	61fa      	str	r2, [r7, #28]
 8004ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	617b      	str	r3, [r7, #20]
   return(result);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e3      	bne.n	8004abc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004afa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f83b 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b06:	e023      	b.n	8004b50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d009      	beq.n	8004b28 <HAL_UART_IRQHandler+0x4f4>
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f93e 	bl	8004da2 <UART_Transmit_IT>
    return;
 8004b26:	e014      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00e      	beq.n	8004b52 <HAL_UART_IRQHandler+0x51e>
 8004b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f97d 	bl	8004e40 <UART_EndTransmit_IT>
    return;
 8004b46:	e004      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b48:	bf00      	nop
 8004b4a:	e002      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b4c:	bf00      	nop
 8004b4e:	e000      	b.n	8004b52 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b50:	bf00      	nop
  }
}
 8004b52:	37e8      	adds	r7, #232	@ 0xe8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba2:	e03b      	b.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d037      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7fc fe90 	bl	80018d0 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	6a3a      	ldr	r2, [r7, #32]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e03a      	b.n	8004c3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d023      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b80      	cmp	r3, #128	@ 0x80
 8004bd8:	d020      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d01d      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d116      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f856 	bl	8004cb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e00f      	b.n	8004c3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d0b4      	beq.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	88fa      	ldrh	r2, [r7, #6]
 8004c5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2222      	movs	r2, #34	@ 0x22
 8004c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0201 	orr.w	r2, r2, #1
 8004c98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0220 	orr.w	r2, r2, #32
 8004ca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b095      	sub	sp, #84	@ 0x54
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cde:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ce4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1e5      	bne.n	8004cbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e5      	bne.n	8004cf2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d119      	bne.n	8004d62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0310 	bic.w	r3, r3, #16
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d4e:	61ba      	str	r2, [r7, #24]
 8004d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e5      	bne.n	8004d2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d70:	bf00      	nop
 8004d72:	3754      	adds	r7, #84	@ 0x54
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr

08004d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff fee8 	bl	8004b6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b21      	cmp	r3, #33	@ 0x21
 8004db4:	d13e      	bne.n	8004e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dbe:	d114      	bne.n	8004dea <UART_Transmit_IT+0x48>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d110      	bne.n	8004dea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	1c9a      	adds	r2, r3, #2
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	621a      	str	r2, [r3, #32]
 8004de8:	e008      	b.n	8004dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	1c59      	adds	r1, r3, #1
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6211      	str	r1, [r2, #32]
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10f      	bne.n	8004e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fe79 	bl	8004b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08c      	sub	sp, #48	@ 0x30
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b22      	cmp	r3, #34	@ 0x22
 8004e82:	f040 80ae 	bne.w	8004fe2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e8e:	d117      	bne.n	8004ec0 <UART_Receive_IT+0x50>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d113      	bne.n	8004ec0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ebe:	e026      	b.n	8004f0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed2:	d007      	beq.n	8004ee4 <UART_Receive_IT+0x74>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <UART_Receive_IT+0x82>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e008      	b.n	8004f04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d15d      	bne.n	8004fde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0220 	bic.w	r2, r2, #32
 8004f30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d135      	bne.n	8004fd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f023 0310 	bic.w	r3, r3, #16
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8e:	623a      	str	r2, [r7, #32]
 8004f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	69f9      	ldr	r1, [r7, #28]
 8004f94:	6a3a      	ldr	r2, [r7, #32]
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e5      	bne.n	8004f6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d10a      	bne.n	8004fc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fdd5 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
 8004fd2:	e002      	b.n	8004fda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fb fd45 	bl	8000a64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e002      	b.n	8004fe4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3730      	adds	r7, #48	@ 0x30
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005026:	f023 030c 	bic.w	r3, r3, #12
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	430b      	orrs	r3, r1
 8005032:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2c      	ldr	r2, [pc, #176]	@ (8005100 <UART_SetConfig+0x114>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d103      	bne.n	800505c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005054:	f7ff f906 	bl	8004264 <HAL_RCC_GetPCLK2Freq>
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	e002      	b.n	8005062 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800505c:	f7ff f8ee 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8005060:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009a      	lsls	r2, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	4a22      	ldr	r2, [pc, #136]	@ (8005104 <UART_SetConfig+0x118>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	0119      	lsls	r1, r3, #4
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009a      	lsls	r2, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	fbb2 f2f3 	udiv	r2, r2, r3
 8005098:	4b1a      	ldr	r3, [pc, #104]	@ (8005104 <UART_SetConfig+0x118>)
 800509a:	fba3 0302 	umull	r0, r3, r3, r2
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	2064      	movs	r0, #100	@ 0x64
 80050a2:	fb00 f303 	mul.w	r3, r0, r3
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	3332      	adds	r3, #50	@ 0x32
 80050ac:	4a15      	ldr	r2, [pc, #84]	@ (8005104 <UART_SetConfig+0x118>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050b8:	4419      	add	r1, r3
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009a      	lsls	r2, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <UART_SetConfig+0x118>)
 80050d2:	fba3 0302 	umull	r0, r3, r3, r2
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	2064      	movs	r0, #100	@ 0x64
 80050da:	fb00 f303 	mul.w	r3, r0, r3
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	3332      	adds	r3, #50	@ 0x32
 80050e4:	4a07      	ldr	r2, [pc, #28]	@ (8005104 <UART_SetConfig+0x118>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	f003 020f 	and.w	r2, r3, #15
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	440a      	add	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40013800 	.word	0x40013800
 8005104:	51eb851f 	.word	0x51eb851f

08005108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	4638      	mov	r0, r7
 8005112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005132:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005136:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	b29a      	uxth	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005156:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800515a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	b29b      	uxth	r3, r3
 8005168:	43db      	mvns	r3, r3
 800516a:	b29b      	uxth	r3, r3
 800516c:	4013      	ands	r3, r2
 800516e:	b29a      	uxth	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr

08005182 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	4638      	mov	r0, r7
 80051a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b09d      	sub	sp, #116	@ 0x74
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	78db      	ldrb	r3, [r3, #3]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d81f      	bhi.n	8005246 <USB_ActivateEndpoint+0x72>
 8005206:	a201      	add	r2, pc, #4	@ (adr r2, 800520c <USB_ActivateEndpoint+0x38>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	0800521d 	.word	0x0800521d
 8005210:	08005239 	.word	0x08005239
 8005214:	0800524f 	.word	0x0800524f
 8005218:	0800522b 	.word	0x0800522b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800521c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005220:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005224:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005228:	e012      	b.n	8005250 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800522a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800522e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005232:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005236:	e00b      	b.n	8005250 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005238:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800523c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005240:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005244:	e004      	b.n	8005250 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800524c:	e000      	b.n	8005250 <USB_ActivateEndpoint+0x7c>
      break;
 800524e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	441a      	add	r2, r3
 800525a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800525e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800526a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800526e:	b29b      	uxth	r3, r3
 8005270:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29b      	uxth	r3, r3
 8005280:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005288:	b29b      	uxth	r3, r3
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	4313      	orrs	r3, r2
 8005290:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	441a      	add	r2, r3
 800529e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80052a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	7b1b      	ldrb	r3, [r3, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 8178 	bne.w	80055b0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8084 	beq.w	80053d2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	4413      	add	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	011a      	lsls	r2, r3, #4
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	88db      	ldrh	r3, [r3, #6]
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	827b      	strh	r3, [r7, #18]
 800530c:	8a7b      	ldrh	r3, [r7, #18]
 800530e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01b      	beq.n	800534e <USB_ActivateEndpoint+0x17a>
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532c:	823b      	strh	r3, [r7, #16]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	441a      	add	r2, r3
 8005338:	8a3b      	ldrh	r3, [r7, #16]
 800533a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800533e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005346:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800534a:	b29b      	uxth	r3, r3
 800534c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	78db      	ldrb	r3, [r3, #3]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d020      	beq.n	8005398 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800536c:	81bb      	strh	r3, [r7, #12]
 800536e:	89bb      	ldrh	r3, [r7, #12]
 8005370:	f083 0320 	eor.w	r3, r3, #32
 8005374:	81bb      	strh	r3, [r7, #12]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	441a      	add	r2, r3
 8005380:	89bb      	ldrh	r3, [r7, #12]
 8005382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800538a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800538e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005392:	b29b      	uxth	r3, r3
 8005394:	8013      	strh	r3, [r2, #0]
 8005396:	e2d5      	b.n	8005944 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ae:	81fb      	strh	r3, [r7, #14]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	89fb      	ldrh	r3, [r7, #14]
 80053bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	8013      	strh	r3, [r2, #0]
 80053d0:	e2b8      	b.n	8005944 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053dc:	b29b      	uxth	r3, r3
 80053de:	461a      	mov	r2, r3
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	4413      	add	r3, r2
 80053e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	011a      	lsls	r2, r3, #4
 80053ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80053f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	88db      	ldrh	r3, [r3, #6]
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005404:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005410:	b29b      	uxth	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	4413      	add	r3, r2
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	011a      	lsls	r2, r3, #4
 8005420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005422:	4413      	add	r3, r2
 8005424:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005434:	b29a      	uxth	r2, r3
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005440:	d91d      	bls.n	800547e <USB_ActivateEndpoint+0x2aa>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	66bb      	str	r3, [r7, #104]	@ 0x68
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <USB_ActivateEndpoint+0x288>
 8005456:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005458:	3b01      	subs	r3, #1
 800545a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b29a      	uxth	r2, r3
 8005462:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005464:	b29b      	uxth	r3, r3
 8005466:	029b      	lsls	r3, r3, #10
 8005468:	b29b      	uxth	r3, r3
 800546a:	4313      	orrs	r3, r2
 800546c:	b29b      	uxth	r3, r3
 800546e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005476:	b29a      	uxth	r2, r3
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e026      	b.n	80054cc <USB_ActivateEndpoint+0x2f8>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <USB_ActivateEndpoint+0x2c8>
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005494:	b29a      	uxth	r2, r3
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	e017      	b.n	80054cc <USB_ActivateEndpoint+0x2f8>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <USB_ActivateEndpoint+0x2e2>
 80054b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054b2:	3301      	adds	r3, #1
 80054b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054be:	b29b      	uxth	r3, r3
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	4313      	orrs	r3, r2
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80054da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80054dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01b      	beq.n	800551c <USB_ActivateEndpoint+0x348>
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fa:	843b      	strh	r3, [r7, #32]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	8c3b      	ldrh	r3, [r7, #32]
 8005508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005510:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005518:	b29b      	uxth	r3, r3
 800551a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d124      	bne.n	800556e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553a:	83bb      	strh	r3, [r7, #28]
 800553c:	8bbb      	ldrh	r3, [r7, #28]
 800553e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005542:	83bb      	strh	r3, [r7, #28]
 8005544:	8bbb      	ldrh	r3, [r7, #28]
 8005546:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800554a:	83bb      	strh	r3, [r7, #28]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	8bbb      	ldrh	r3, [r7, #28]
 8005558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800555c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005568:	b29b      	uxth	r3, r3
 800556a:	8013      	strh	r3, [r2, #0]
 800556c:	e1ea      	b.n	8005944 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005584:	83fb      	strh	r3, [r7, #30]
 8005586:	8bfb      	ldrh	r3, [r7, #30]
 8005588:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800558c:	83fb      	strh	r3, [r7, #30]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	441a      	add	r2, r3
 8005598:	8bfb      	ldrh	r3, [r7, #30]
 800559a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800559e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	8013      	strh	r3, [r2, #0]
 80055ae:	e1c9      	b.n	8005944 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	78db      	ldrb	r3, [r3, #3]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d11e      	bne.n	80055f6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ce:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80055e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80055ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]
 80055f4:	e01d      	b.n	8005632 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800561e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800562a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800562e:	b29b      	uxth	r3, r3
 8005630:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800563c:	b29b      	uxth	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005642:	4413      	add	r3, r2
 8005644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	011a      	lsls	r2, r3, #4
 800564c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800564e:	4413      	add	r3, r2
 8005650:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005654:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	891b      	ldrh	r3, [r3, #8]
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	b29b      	uxth	r3, r3
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	657b      	str	r3, [r7, #84]	@ 0x54
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005670:	b29b      	uxth	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005676:	4413      	add	r3, r2
 8005678:	657b      	str	r3, [r7, #84]	@ 0x54
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	011a      	lsls	r2, r3, #4
 8005680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005682:	4413      	add	r3, r2
 8005684:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005688:	653b      	str	r3, [r7, #80]	@ 0x50
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	895b      	ldrh	r3, [r3, #10]
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	b29b      	uxth	r3, r3
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005698:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 8093 	bne.w	80057ca <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80056b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80056b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01b      	beq.n	80056f8 <USB_ActivateEndpoint+0x524>
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80056e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005706:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01b      	beq.n	8005748 <USB_ActivateEndpoint+0x574>
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005726:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800573c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005740:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800575a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005760:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005762:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005766:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005768:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800576a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800576e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	441a      	add	r2, r3
 80057b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80057b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	8013      	strh	r3, [r2, #0]
 80057c8:	e0bc      	b.n	8005944 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80057da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01d      	beq.n	8005822 <USB_ActivateEndpoint+0x64e>
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800580e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005816:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800581a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800581e:	b29b      	uxth	r3, r3
 8005820:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005832:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01d      	beq.n	800587a <USB_ActivateEndpoint+0x6a6>
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005854:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	441a      	add	r2, r3
 8005862:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005866:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800586a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800586e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005872:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005876:	b29b      	uxth	r3, r3
 8005878:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	78db      	ldrb	r3, [r3, #3]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d024      	beq.n	80058cc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005898:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800589c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80058a0:	f083 0320 	eor.w	r3, r3, #32
 80058a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	441a      	add	r2, r3
 80058b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80058b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8013      	strh	r3, [r2, #0]
 80058ca:	e01d      	b.n	8005908 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	441a      	add	r2, r3
 80058f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005904:	b29b      	uxth	r3, r3
 8005906:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800591a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	441a      	add	r2, r3
 800592c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005940:	b29b      	uxth	r3, r3
 8005942:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005944:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005948:	4618      	mov	r0, r3
 800594a:	3774      	adds	r7, #116	@ 0x74
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop

08005954 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005954:	b480      	push	{r7}
 8005956:	b08d      	sub	sp, #52	@ 0x34
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	7b1b      	ldrb	r3, [r3, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f040 808e 	bne.w	8005a84 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d044      	beq.n	80059fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	81bb      	strh	r3, [r7, #12]
 800597e:	89bb      	ldrh	r3, [r7, #12]
 8005980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01b      	beq.n	80059c0 <USB_DeactivateEndpoint+0x6c>
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800599a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599e:	817b      	strh	r3, [r7, #10]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	897b      	ldrh	r3, [r7, #10]
 80059ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059bc:	b29b      	uxth	r3, r3
 80059be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d6:	813b      	strh	r3, [r7, #8]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	893b      	ldrh	r3, [r7, #8]
 80059e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	8013      	strh	r3, [r2, #0]
 80059f8:	e192      	b.n	8005d20 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	827b      	strh	r3, [r7, #18]
 8005a08:	8a7b      	ldrh	r3, [r7, #18]
 8005a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01b      	beq.n	8005a4a <USB_DeactivateEndpoint+0xf6>
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a28:	823b      	strh	r3, [r7, #16]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	441a      	add	r2, r3
 8005a34:	8a3b      	ldrh	r3, [r7, #16]
 8005a36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a60:	81fb      	strh	r3, [r7, #14]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	441a      	add	r2, r3
 8005a6c:	89fb      	ldrh	r3, [r7, #14]
 8005a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	8013      	strh	r3, [r2, #0]
 8005a82:	e14d      	b.n	8005d20 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f040 80a5 	bne.w	8005bd8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	843b      	strh	r3, [r7, #32]
 8005a9c:	8c3b      	ldrh	r3, [r7, #32]
 8005a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d01b      	beq.n	8005ade <USB_DeactivateEndpoint+0x18a>
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abc:	83fb      	strh	r3, [r7, #30]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	441a      	add	r2, r3
 8005ac8:	8bfb      	ldrh	r3, [r7, #30]
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	83bb      	strh	r3, [r7, #28]
 8005aec:	8bbb      	ldrh	r3, [r7, #28]
 8005aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01b      	beq.n	8005b2e <USB_DeactivateEndpoint+0x1da>
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0c:	837b      	strh	r3, [r7, #26]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	441a      	add	r2, r3
 8005b18:	8b7b      	ldrh	r3, [r7, #26]
 8005b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b44:	833b      	strh	r3, [r7, #24]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	441a      	add	r2, r3
 8005b50:	8b3b      	ldrh	r3, [r7, #24]
 8005b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7c:	82fb      	strh	r3, [r7, #22]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	441a      	add	r2, r3
 8005b88:	8afb      	ldrh	r3, [r7, #22]
 8005b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb4:	82bb      	strh	r3, [r7, #20]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	441a      	add	r2, r3
 8005bc0:	8abb      	ldrh	r3, [r7, #20]
 8005bc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	8013      	strh	r3, [r2, #0]
 8005bd6:	e0a3      	b.n	8005d20 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005be6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01b      	beq.n	8005c28 <USB_DeactivateEndpoint+0x2d4>
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005c36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01b      	beq.n	8005c78 <USB_DeactivateEndpoint+0x324>
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c56:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	441a      	add	r2, r3
 8005c9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	441a      	add	r2, r3
 8005cd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3734      	adds	r7, #52	@ 0x34
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr

08005d2c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b0c2      	sub	sp, #264	@ 0x108
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d3a:	6018      	str	r0, [r3, #0]
 8005d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d44:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	f040 86b7 	bne.w	8006ac6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699a      	ldr	r2, [r3, #24]
 8005d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d908      	bls.n	8005d86 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d84:	e007      	b.n	8005d96 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	7b1b      	ldrb	r3, [r3, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d13a      	bne.n	8005e1c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6959      	ldr	r1, [r3, #20]
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	88da      	ldrh	r2, [r3, #6]
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005dc8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005dcc:	6800      	ldr	r0, [r0, #0]
 8005dce:	f001 fc9c 	bl	800770a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4413      	add	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	011a      	lsls	r2, r3, #4
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4413      	add	r3, r2
 8005e08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	f000 be1f 	b.w	8006a5a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	78db      	ldrb	r3, [r3, #3]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	f040 8462 	bne.w	80066f2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6a1a      	ldr	r2, [r3, #32]
 8005e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	f240 83df 	bls.w	800660a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e72:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	441a      	add	r2, r3
 8005e90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e9c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6a1a      	ldr	r2, [r3, #32]
 8005eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb8:	1ad2      	subs	r2, r2, r3
 8005eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 81c7 	beq.w	800627c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d177      	bne.n	8005ffa <USB_EPStartXfer+0x2ce>
 8005f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	461a      	mov	r2, r3
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	4413      	add	r3, r2
 8005f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	011a      	lsls	r2, r3, #4
 8005f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3e:	4413      	add	r3, r2
 8005f40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f5c:	d921      	bls.n	8005fa2 <USB_EPStartXfer+0x276>
 8005f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	f003 031f 	and.w	r3, r3, #31
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <USB_EPStartXfer+0x252>
 8005f74:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	029b      	lsls	r3, r3, #10
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	801a      	strh	r2, [r3, #0]
 8005fa0:	e050      	b.n	8006044 <USB_EPStartXfer+0x318>
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <USB_EPStartXfer+0x294>
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	801a      	strh	r2, [r3, #0]
 8005fbe:	e041      	b.n	8006044 <USB_EPStartXfer+0x318>
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d004      	beq.n	8005fe0 <USB_EPStartXfer+0x2b4>
 8005fd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005fda:	3301      	adds	r3, #1
 8005fdc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	029b      	lsls	r3, r3, #10
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	e024      	b.n	8006044 <USB_EPStartXfer+0x318>
 8005ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d11c      	bne.n	8006044 <USB_EPStartXfer+0x318>
 800600a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006018:	b29b      	uxth	r3, r3
 800601a:	461a      	mov	r2, r3
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	4413      	add	r3, r2
 8006020:	633b      	str	r3, [r7, #48]	@ 0x30
 8006022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	011a      	lsls	r2, r3, #4
 8006030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006032:	4413      	add	r3, r2
 8006034:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800603a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603e:	b29a      	uxth	r2, r3
 8006040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006042:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	895b      	ldrh	r3, [r3, #10]
 8006050:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6959      	ldr	r1, [r3, #20]
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006064:	b29b      	uxth	r3, r3
 8006066:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800606a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800606e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006072:	6800      	ldr	r0, [r0, #0]
 8006074:	f001 fb49 	bl	800770a <USB_WritePMA>
            ep->xfer_buff += len;
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695a      	ldr	r2, [r3, #20]
 8006084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006088:	441a      	add	r2, r3
 800608a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6a1a      	ldr	r2, [r3, #32]
 80060a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d90f      	bls.n	80060d2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80060b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c2:	1ad2      	subs	r2, r2, r3
 80060c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	621a      	str	r2, [r3, #32]
 80060d0:	e00e      	b.n	80060f0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80060d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80060e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2200      	movs	r2, #0
 80060ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d177      	bne.n	80061f0 <USB_EPStartXfer+0x4c4>
 8006100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800611a:	b29b      	uxth	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	4413      	add	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	011a      	lsls	r2, r3, #4
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	4413      	add	r3, r2
 8006136:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006146:	b29a      	uxth	r2, r3
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006150:	2b3e      	cmp	r3, #62	@ 0x3e
 8006152:	d921      	bls.n	8006198 <USB_EPStartXfer+0x46c>
 8006154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800615e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	2b00      	cmp	r3, #0
 8006168:	d104      	bne.n	8006174 <USB_EPStartXfer+0x448>
 800616a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616e:	3b01      	subs	r3, #1
 8006170:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800617e:	b29b      	uxth	r3, r3
 8006180:	029b      	lsls	r3, r3, #10
 8006182:	b29b      	uxth	r3, r3
 8006184:	4313      	orrs	r3, r2
 8006186:	b29b      	uxth	r3, r3
 8006188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006190:	b29a      	uxth	r2, r3
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	e056      	b.n	8006246 <USB_EPStartXfer+0x51a>
 8006198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <USB_EPStartXfer+0x48a>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	e047      	b.n	8006246 <USB_EPStartXfer+0x51a>
 80061b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <USB_EPStartXfer+0x4aa>
 80061cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d0:	3301      	adds	r3, #1
 80061d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	029b      	lsls	r3, r3, #10
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	4313      	orrs	r3, r2
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	801a      	strh	r2, [r3, #0]
 80061ee:	e02a      	b.n	8006246 <USB_EPStartXfer+0x51a>
 80061f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	785b      	ldrb	r3, [r3, #1]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d122      	bne.n	8006246 <USB_EPStartXfer+0x51a>
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	623b      	str	r3, [r7, #32]
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800621a:	b29b      	uxth	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	4413      	add	r3, r2
 8006222:	623b      	str	r3, [r7, #32]
 8006224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	011a      	lsls	r2, r3, #4
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	4413      	add	r3, r2
 8006236:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006240:	b29a      	uxth	r2, r3
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	891b      	ldrh	r3, [r3, #8]
 8006252:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6959      	ldr	r1, [r3, #20]
 8006262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006266:	b29b      	uxth	r3, r3
 8006268:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800626c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006270:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006274:	6800      	ldr	r0, [r0, #0]
 8006276:	f001 fa48 	bl	800770a <USB_WritePMA>
 800627a:	e3ee      	b.n	8006a5a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800627c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d177      	bne.n	800637c <USB_EPStartXfer+0x650>
 800628c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006290:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ac:	4413      	add	r3, r2
 80062ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	011a      	lsls	r2, r3, #4
 80062be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062c0:	4413      	add	r3, r2
 80062c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80062c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062d6:	801a      	strh	r2, [r3, #0]
 80062d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80062de:	d921      	bls.n	8006324 <USB_EPStartXfer+0x5f8>
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e4:	095b      	lsrs	r3, r3, #5
 80062e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d104      	bne.n	8006300 <USB_EPStartXfer+0x5d4>
 80062f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062fa:	3b01      	subs	r3, #1
 80062fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29a      	uxth	r2, r3
 8006306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800630a:	b29b      	uxth	r3, r3
 800630c:	029b      	lsls	r3, r3, #10
 800630e:	b29b      	uxth	r3, r3
 8006310:	4313      	orrs	r3, r2
 8006312:	b29b      	uxth	r3, r3
 8006314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800631c:	b29a      	uxth	r2, r3
 800631e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	e056      	b.n	80063d2 <USB_EPStartXfer+0x6a6>
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <USB_EPStartXfer+0x616>
 800632c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633a:	b29a      	uxth	r2, r3
 800633c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800633e:	801a      	strh	r2, [r3, #0]
 8006340:	e047      	b.n	80063d2 <USB_EPStartXfer+0x6a6>
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006346:	085b      	lsrs	r3, r3, #1
 8006348:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <USB_EPStartXfer+0x636>
 8006358:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800635c:	3301      	adds	r3, #1
 800635e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29a      	uxth	r2, r3
 8006368:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800636c:	b29b      	uxth	r3, r3
 800636e:	029b      	lsls	r3, r3, #10
 8006370:	b29b      	uxth	r3, r3
 8006372:	4313      	orrs	r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	e02a      	b.n	80063d2 <USB_EPStartXfer+0x6a6>
 800637c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d122      	bne.n	80063d2 <USB_EPStartXfer+0x6a6>
 800638c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	653b      	str	r3, [r7, #80]	@ 0x50
 8006398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ac:	4413      	add	r3, r2
 80063ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80063b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	011a      	lsls	r2, r3, #4
 80063be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	891b      	ldrh	r3, [r3, #8]
 80063de:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6959      	ldr	r1, [r3, #20]
 80063ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006400:	6800      	ldr	r0, [r0, #0]
 8006402:	f001 f982 	bl	800770a <USB_WritePMA>
            ep->xfer_buff += len;
 8006406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695a      	ldr	r2, [r3, #20]
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006416:	441a      	add	r2, r3
 8006418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	429a      	cmp	r2, r3
 800643e:	d90f      	bls.n	8006460 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a1a      	ldr	r2, [r3, #32]
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006450:	1ad2      	subs	r2, r2, r3
 8006452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	621a      	str	r2, [r3, #32]
 800645e:	e00e      	b.n	800647e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2200      	movs	r2, #0
 800647c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	643b      	str	r3, [r7, #64]	@ 0x40
 800648a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	785b      	ldrb	r3, [r3, #1]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d177      	bne.n	800658a <USB_EPStartXfer+0x85e>
 800649a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	4413      	add	r3, r2
 80064bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	011a      	lsls	r2, r3, #4
 80064cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ce:	4413      	add	r3, r2
 80064d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80064ec:	d921      	bls.n	8006532 <USB_EPStartXfer+0x806>
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	2b00      	cmp	r3, #0
 8006502:	d104      	bne.n	800650e <USB_EPStartXfer+0x7e2>
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006508:	3b01      	subs	r3, #1
 800650a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800650e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29a      	uxth	r2, r3
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006518:	b29b      	uxth	r3, r3
 800651a:	029b      	lsls	r3, r3, #10
 800651c:	b29b      	uxth	r3, r3
 800651e:	4313      	orrs	r3, r2
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652a:	b29a      	uxth	r2, r3
 800652c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e050      	b.n	80065d4 <USB_EPStartXfer+0x8a8>
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <USB_EPStartXfer+0x824>
 800653a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006548:	b29a      	uxth	r2, r3
 800654a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e041      	b.n	80065d4 <USB_EPStartXfer+0x8a8>
 8006550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006554:	085b      	lsrs	r3, r3, #1
 8006556:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800655a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <USB_EPStartXfer+0x844>
 8006566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656a:	3301      	adds	r3, #1
 800656c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29a      	uxth	r2, r3
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657a:	b29b      	uxth	r3, r3
 800657c:	029b      	lsls	r3, r3, #10
 800657e:	b29b      	uxth	r3, r3
 8006580:	4313      	orrs	r3, r2
 8006582:	b29a      	uxth	r2, r3
 8006584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006586:	801a      	strh	r2, [r3, #0]
 8006588:	e024      	b.n	80065d4 <USB_EPStartXfer+0x8a8>
 800658a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d11c      	bne.n	80065d4 <USB_EPStartXfer+0x8a8>
 800659a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ae:	4413      	add	r3, r2
 80065b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80065b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	011a      	lsls	r2, r3, #4
 80065c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065c2:	4413      	add	r3, r2
 80065c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	895b      	ldrh	r3, [r3, #10]
 80065e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6959      	ldr	r1, [r3, #20]
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006602:	6800      	ldr	r0, [r0, #0]
 8006604:	f001 f881 	bl	800770a <USB_WritePMA>
 8006608:	e227      	b.n	8006a5a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800660a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800661a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800663c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006640:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	441a      	add	r2, r3
 800665e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800666a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006672:	b29b      	uxth	r3, r3
 8006674:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006686:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006690:	b29b      	uxth	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006696:	4413      	add	r3, r2
 8006698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800669a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	011a      	lsls	r2, r3, #4
 80066a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066aa:	4413      	add	r3, r2
 80066ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	891b      	ldrh	r3, [r3, #8]
 80066c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6959      	ldr	r1, [r3, #20]
 80066d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	f001 f80d 	bl	800770a <USB_WritePMA>
 80066f0:	e1b3      	b.n	8006a5a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6a1a      	ldr	r2, [r3, #32]
 80066fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80c6 	beq.w	80068c4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	673b      	str	r3, [r7, #112]	@ 0x70
 8006744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d177      	bne.n	8006844 <USB_EPStartXfer+0xb18>
 8006754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800676e:	b29b      	uxth	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006774:	4413      	add	r3, r2
 8006776:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	011a      	lsls	r2, r3, #4
 8006786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006788:	4413      	add	r3, r2
 800678a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800678e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679a:	b29a      	uxth	r2, r3
 800679c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80067a6:	d921      	bls.n	80067ec <USB_EPStartXfer+0xac0>
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <USB_EPStartXfer+0xa9c>
 80067be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067c2:	3b01      	subs	r3, #1
 80067c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	029b      	lsls	r3, r3, #10
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	4313      	orrs	r3, r2
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e050      	b.n	800688e <USB_EPStartXfer+0xb62>
 80067ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <USB_EPStartXfer+0xade>
 80067f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006802:	b29a      	uxth	r2, r3
 8006804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	e041      	b.n	800688e <USB_EPStartXfer+0xb62>
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <USB_EPStartXfer+0xafe>
 8006820:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006824:	3301      	adds	r3, #1
 8006826:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800682a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29a      	uxth	r2, r3
 8006830:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006834:	b29b      	uxth	r3, r3
 8006836:	029b      	lsls	r3, r3, #10
 8006838:	b29b      	uxth	r3, r3
 800683a:	4313      	orrs	r3, r2
 800683c:	b29a      	uxth	r2, r3
 800683e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006840:	801a      	strh	r2, [r3, #0]
 8006842:	e024      	b.n	800688e <USB_EPStartXfer+0xb62>
 8006844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d11c      	bne.n	800688e <USB_EPStartXfer+0xb62>
 8006854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006862:	b29b      	uxth	r3, r3
 8006864:	461a      	mov	r2, r3
 8006866:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006868:	4413      	add	r3, r2
 800686a:	673b      	str	r3, [r7, #112]	@ 0x70
 800686c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	011a      	lsls	r2, r3, #4
 800687a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800687c:	4413      	add	r3, r2
 800687e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006882:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006888:	b29a      	uxth	r2, r3
 800688a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800688c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800688e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	895b      	ldrh	r3, [r3, #10]
 800689a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800689e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6959      	ldr	r1, [r3, #20]
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068bc:	6800      	ldr	r0, [r0, #0]
 80068be:	f000 ff24 	bl	800770a <USB_WritePMA>
 80068c2:	e0ca      	b.n	8006a5a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d177      	bne.n	80069c4 <USB_EPStartXfer+0xc98>
 80068d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068f4:	4413      	add	r3, r2
 80068f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	011a      	lsls	r2, r3, #4
 8006906:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006908:	4413      	add	r3, r2
 800690a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800690e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800691a:	b29a      	uxth	r2, r3
 800691c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800691e:	801a      	strh	r2, [r3, #0]
 8006920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006924:	2b3e      	cmp	r3, #62	@ 0x3e
 8006926:	d921      	bls.n	800696c <USB_EPStartXfer+0xc40>
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <USB_EPStartXfer+0xc1c>
 800693e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006942:	3b01      	subs	r3, #1
 8006944:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29a      	uxth	r2, r3
 800694e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006952:	b29b      	uxth	r3, r3
 8006954:	029b      	lsls	r3, r3, #10
 8006956:	b29b      	uxth	r3, r3
 8006958:	4313      	orrs	r3, r2
 800695a:	b29b      	uxth	r3, r3
 800695c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006964:	b29a      	uxth	r2, r3
 8006966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	e05c      	b.n	8006a26 <USB_EPStartXfer+0xcfa>
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <USB_EPStartXfer+0xc5e>
 8006974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800697e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006982:	b29a      	uxth	r2, r3
 8006984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	e04d      	b.n	8006a26 <USB_EPStartXfer+0xcfa>
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <USB_EPStartXfer+0xc7e>
 80069a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80069a4:	3301      	adds	r3, #1
 80069a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80069aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	029b      	lsls	r3, r3, #10
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	4313      	orrs	r3, r2
 80069bc:	b29a      	uxth	r2, r3
 80069be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	e030      	b.n	8006a26 <USB_EPStartXfer+0xcfa>
 80069c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d128      	bne.n	8006a26 <USB_EPStartXfer+0xcfa>
 80069d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	461a      	mov	r2, r3
 80069f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069f8:	4413      	add	r3, r2
 80069fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	011a      	lsls	r2, r3, #4
 8006a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a10:	4413      	add	r3, r2
 8006a12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	891b      	ldrh	r3, [r3, #8]
 8006a32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6959      	ldr	r1, [r3, #20]
 8006a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a54:	6800      	ldr	r0, [r0, #0]
 8006a56:	f000 fe58 	bl	800770a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a80:	817b      	strh	r3, [r7, #10]
 8006a82:	897b      	ldrh	r3, [r7, #10]
 8006a84:	f083 0310 	eor.w	r3, r3, #16
 8006a88:	817b      	strh	r3, [r7, #10]
 8006a8a:	897b      	ldrh	r3, [r7, #10]
 8006a8c:	f083 0320 	eor.w	r3, r3, #32
 8006a90:	817b      	strh	r3, [r7, #10]
 8006a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	897b      	ldrh	r3, [r7, #10]
 8006aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	8013      	strh	r3, [r2, #0]
 8006ac2:	f000 bcde 	b.w	8007482 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	7b1b      	ldrb	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 80bb 	bne.w	8006c4e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	699a      	ldr	r2, [r3, #24]
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d917      	bls.n	8006b24 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b14:	1ad2      	subs	r2, r2, r3
 8006b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	619a      	str	r2, [r3, #24]
 8006b22:	e00e      	b.n	8006b42 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b66:	4413      	add	r3, r2
 8006b68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	011a      	lsls	r2, r3, #4
 8006b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b7e:	4413      	add	r3, r2
 8006b80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ba2:	d924      	bls.n	8006bee <USB_EPStartXfer+0xec2>
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <USB_EPStartXfer+0xe98>
 8006bba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	029b      	lsls	r3, r3, #10
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	f000 bc10 	b.w	800740e <USB_EPStartXfer+0x16e2>
 8006bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10c      	bne.n	8006c10 <USB_EPStartXfer+0xee4>
 8006bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c0c:	801a      	strh	r2, [r3, #0]
 8006c0e:	e3fe      	b.n	800740e <USB_EPStartXfer+0x16e2>
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d004      	beq.n	8006c30 <USB_EPStartXfer+0xf04>
 8006c26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	029b      	lsls	r3, r3, #10
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	4313      	orrs	r3, r2
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c4a:	801a      	strh	r2, [r3, #0]
 8006c4c:	e3df      	b.n	800740e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	78db      	ldrb	r3, [r3, #3]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	f040 8218 	bne.w	8007090 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f040 809d 	bne.w	8006dac <USB_EPStartXfer+0x1080>
 8006c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c96:	4413      	add	r3, r2
 8006c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	011a      	lsls	r2, r3, #4
 8006caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cae:	4413      	add	r3, r2
 8006cb0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006cb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cca:	801a      	strh	r2, [r3, #0]
 8006ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cda:	d92b      	bls.n	8006d34 <USB_EPStartXfer+0x1008>
 8006cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <USB_EPStartXfer+0xfe0>
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d06:	3b01      	subs	r3, #1
 8006d08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	029b      	lsls	r3, r3, #10
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d30:	801a      	strh	r2, [r3, #0]
 8006d32:	e070      	b.n	8006e16 <USB_EPStartXfer+0x10ea>
 8006d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10c      	bne.n	8006d5e <USB_EPStartXfer+0x1032>
 8006d44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d5a:	801a      	strh	r2, [r3, #0]
 8006d5c:	e05b      	b.n	8006e16 <USB_EPStartXfer+0x10ea>
 8006d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	085b      	lsrs	r3, r3, #1
 8006d6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <USB_EPStartXfer+0x1062>
 8006d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d88:	3301      	adds	r3, #1
 8006d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	029b      	lsls	r3, r3, #10
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	4313      	orrs	r3, r2
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	e034      	b.n	8006e16 <USB_EPStartXfer+0x10ea>
 8006dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d12c      	bne.n	8006e16 <USB_EPStartXfer+0x10ea>
 8006dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006de0:	4413      	add	r3, r2
 8006de2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	011a      	lsls	r2, r3, #4
 8006df4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006df8:	4413      	add	r3, r2
 8006dfa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e14:	801a      	strh	r2, [r3, #0]
 8006e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 809d 	bne.w	8006f70 <USB_EPStartXfer+0x1244>
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	011a      	lsls	r2, r3, #4
 8006e6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e72:	4413      	add	r3, r2
 8006e74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e9e:	d92b      	bls.n	8006ef8 <USB_EPStartXfer+0x11cc>
 8006ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f003 031f 	and.w	r3, r3, #31
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d104      	bne.n	8006ed0 <USB_EPStartXfer+0x11a4>
 8006ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	029b      	lsls	r3, r3, #10
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	e069      	b.n	8006fcc <USB_EPStartXfer+0x12a0>
 8006ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10c      	bne.n	8006f22 <USB_EPStartXfer+0x11f6>
 8006f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f1e:	801a      	strh	r2, [r3, #0]
 8006f20:	e054      	b.n	8006fcc <USB_EPStartXfer+0x12a0>
 8006f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	085b      	lsrs	r3, r3, #1
 8006f30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d004      	beq.n	8006f52 <USB_EPStartXfer+0x1226>
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	029b      	lsls	r3, r3, #10
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	4313      	orrs	r3, r2
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	e02d      	b.n	8006fcc <USB_EPStartXfer+0x12a0>
 8006f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	785b      	ldrb	r3, [r3, #1]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d125      	bne.n	8006fcc <USB_EPStartXfer+0x12a0>
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f96:	4413      	add	r3, r2
 8006f98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	011a      	lsls	r2, r3, #4
 8006faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fae:	4413      	add	r3, r2
 8006fb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fca:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 8218 	beq.w	800740e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ffe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <USB_EPStartXfer+0x12ea>
 800700a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800700e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10d      	bne.n	8007032 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007016:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800701a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800701e:	2b00      	cmp	r3, #0
 8007020:	f040 81f5 	bne.w	800740e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007024:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 81ee 	bne.w	800740e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007036:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007058:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800705c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007060:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	441a      	add	r2, r3
 8007076:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800707a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800707e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007086:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800708a:	b29b      	uxth	r3, r3
 800708c:	8013      	strh	r3, [r2, #0]
 800708e:	e1be      	b.n	800740e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	78db      	ldrb	r3, [r3, #3]
 800709c:	2b01      	cmp	r3, #1
 800709e:	f040 81b4 	bne.w	800740a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d917      	bls.n	80070ee <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80070be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80070ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	619a      	str	r2, [r3, #24]
 80070ec:	e00e      	b.n	800710c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80070ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80070fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2200      	movs	r2, #0
 800710a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800710c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	785b      	ldrb	r3, [r3, #1]
 8007118:	2b00      	cmp	r3, #0
 800711a:	f040 8085 	bne.w	8007228 <USB_EPStartXfer+0x14fc>
 800711e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800713a:	b29b      	uxth	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007142:	4413      	add	r3, r2
 8007144:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	011a      	lsls	r2, r3, #4
 8007156:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800715a:	4413      	add	r3, r2
 800715c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007160:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007170:	b29a      	uxth	r2, r3
 8007172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	2b3e      	cmp	r3, #62	@ 0x3e
 800717e:	d923      	bls.n	80071c8 <USB_EPStartXfer+0x149c>
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007184:	095b      	lsrs	r3, r3, #5
 8007186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718e:	f003 031f 	and.w	r3, r3, #31
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <USB_EPStartXfer+0x1474>
 8007196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800719a:	3b01      	subs	r3, #1
 800719c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80071a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	029b      	lsls	r3, r3, #10
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	4313      	orrs	r3, r2
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	e060      	b.n	800728a <USB_EPStartXfer+0x155e>
 80071c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10c      	bne.n	80071ea <USB_EPStartXfer+0x14be>
 80071d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071e6:	801a      	strh	r2, [r3, #0]
 80071e8:	e04f      	b.n	800728a <USB_EPStartXfer+0x155e>
 80071ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ee:	085b      	lsrs	r3, r3, #1
 80071f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d004      	beq.n	800720a <USB_EPStartXfer+0x14de>
 8007200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007204:	3301      	adds	r3, #1
 8007206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800720a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29a      	uxth	r2, r3
 8007212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007216:	b29b      	uxth	r3, r3
 8007218:	029b      	lsls	r3, r3, #10
 800721a:	b29b      	uxth	r3, r3
 800721c:	4313      	orrs	r3, r2
 800721e:	b29a      	uxth	r2, r3
 8007220:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	e030      	b.n	800728a <USB_EPStartXfer+0x155e>
 8007228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d128      	bne.n	800728a <USB_EPStartXfer+0x155e>
 8007238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007254:	b29b      	uxth	r3, r3
 8007256:	461a      	mov	r2, r3
 8007258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800725c:	4413      	add	r3, r2
 800725e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	011a      	lsls	r2, r3, #4
 8007270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007274:	4413      	add	r3, r2
 8007276:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800727a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007282:	b29a      	uxth	r2, r3
 8007284:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007288:	801a      	strh	r2, [r3, #0]
 800728a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f040 8085 	bne.w	80073b4 <USB_EPStartXfer+0x1688>
 80072aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072ce:	4413      	add	r3, r2
 80072d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	011a      	lsls	r2, r3, #4
 80072e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072e6:	4413      	add	r3, r2
 80072e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007302:	801a      	strh	r2, [r3, #0]
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007308:	2b3e      	cmp	r3, #62	@ 0x3e
 800730a:	d923      	bls.n	8007354 <USB_EPStartXfer+0x1628>
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007310:	095b      	lsrs	r3, r3, #5
 8007312:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731a:	f003 031f 	and.w	r3, r3, #31
 800731e:	2b00      	cmp	r3, #0
 8007320:	d104      	bne.n	800732c <USB_EPStartXfer+0x1600>
 8007322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007326:	3b01      	subs	r3, #1
 8007328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800732c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29a      	uxth	r2, r3
 8007334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007338:	b29b      	uxth	r3, r3
 800733a:	029b      	lsls	r3, r3, #10
 800733c:	b29b      	uxth	r3, r3
 800733e:	4313      	orrs	r3, r2
 8007340:	b29b      	uxth	r3, r3
 8007342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734a:	b29a      	uxth	r2, r3
 800734c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	e05c      	b.n	800740e <USB_EPStartXfer+0x16e2>
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10c      	bne.n	8007376 <USB_EPStartXfer+0x164a>
 800735c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800736c:	b29a      	uxth	r2, r3
 800736e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007372:	801a      	strh	r2, [r3, #0]
 8007374:	e04b      	b.n	800740e <USB_EPStartXfer+0x16e2>
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d004      	beq.n	8007396 <USB_EPStartXfer+0x166a>
 800738c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007390:	3301      	adds	r3, #1
 8007392:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	029b      	lsls	r3, r3, #10
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	4313      	orrs	r3, r2
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073b0:	801a      	strh	r2, [r3, #0]
 80073b2:	e02c      	b.n	800740e <USB_EPStartXfer+0x16e2>
 80073b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	785b      	ldrb	r3, [r3, #1]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d124      	bne.n	800740e <USB_EPStartXfer+0x16e2>
 80073c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	461a      	mov	r2, r3
 80073d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073da:	4413      	add	r3, r2
 80073dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	011a      	lsls	r2, r3, #4
 80073ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073f2:	4413      	add	r3, r2
 80073f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	b29a      	uxth	r2, r3
 8007402:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007406:	801a      	strh	r2, [r3, #0]
 8007408:	e001      	b.n	800740e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e03a      	b.n	8007484 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800740e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007434:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007438:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800743c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007440:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007444:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007448:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800744c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	441a      	add	r2, r3
 800746a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800746e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800747a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800747e:	b29b      	uxth	r3, r3
 8007480:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800748e:	b480      	push	{r7}
 8007490:	b085      	sub	sp, #20
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d020      	beq.n	80074e2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b6:	81bb      	strh	r3, [r7, #12]
 80074b8:	89bb      	ldrh	r3, [r7, #12]
 80074ba:	f083 0310 	eor.w	r3, r3, #16
 80074be:	81bb      	strh	r3, [r7, #12]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	441a      	add	r2, r3
 80074ca:	89bb      	ldrh	r3, [r7, #12]
 80074cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074dc:	b29b      	uxth	r3, r3
 80074de:	8013      	strh	r3, [r2, #0]
 80074e0:	e01f      	b.n	8007522 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074f8:	81fb      	strh	r3, [r7, #14]
 80074fa:	89fb      	ldrh	r3, [r7, #14]
 80074fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007500:	81fb      	strh	r3, [r7, #14]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	441a      	add	r2, r3
 800750c:	89fb      	ldrh	r3, [r7, #14]
 800750e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800751a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751e:	b29b      	uxth	r3, r3
 8007520:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr

0800752e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800752e:	b480      	push	{r7}
 8007530:	b087      	sub	sp, #28
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	7b1b      	ldrb	r3, [r3, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 809d 	bne.w	800767c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	785b      	ldrb	r3, [r3, #1]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d04c      	beq.n	80075e4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	823b      	strh	r3, [r7, #16]
 8007558:	8a3b      	ldrh	r3, [r7, #16]
 800755a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01b      	beq.n	800759a <USB_EPClearStall+0x6c>
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007578:	81fb      	strh	r3, [r7, #14]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	441a      	add	r2, r3
 8007584:	89fb      	ldrh	r3, [r7, #14]
 8007586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800758a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800758e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007592:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007596:	b29b      	uxth	r3, r3
 8007598:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	78db      	ldrb	r3, [r3, #3]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d06c      	beq.n	800767c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075b8:	81bb      	strh	r3, [r7, #12]
 80075ba:	89bb      	ldrh	r3, [r7, #12]
 80075bc:	f083 0320 	eor.w	r3, r3, #32
 80075c0:	81bb      	strh	r3, [r7, #12]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	441a      	add	r2, r3
 80075cc:	89bb      	ldrh	r3, [r7, #12]
 80075ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075de:	b29b      	uxth	r3, r3
 80075e0:	8013      	strh	r3, [r2, #0]
 80075e2:	e04b      	b.n	800767c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	82fb      	strh	r3, [r7, #22]
 80075f2:	8afb      	ldrh	r3, [r7, #22]
 80075f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01b      	beq.n	8007634 <USB_EPClearStall+0x106>
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800760e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007612:	82bb      	strh	r3, [r7, #20]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	441a      	add	r2, r3
 800761e:	8abb      	ldrh	r3, [r7, #20]
 8007620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800762c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007630:	b29b      	uxth	r3, r3
 8007632:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	b29b      	uxth	r3, r3
 8007642:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764a:	827b      	strh	r3, [r7, #18]
 800764c:	8a7b      	ldrh	r3, [r7, #18]
 800764e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007652:	827b      	strh	r3, [r7, #18]
 8007654:	8a7b      	ldrh	r3, [r7, #18]
 8007656:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800765a:	827b      	strh	r3, [r7, #18]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	441a      	add	r2, r3
 8007666:	8a7b      	ldrh	r3, [r7, #18]
 8007668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007678:	b29b      	uxth	r3, r3
 800767a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr

08007688 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2280      	movs	r2, #128	@ 0x80
 800769e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr

080076ae <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr

080076c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr

080076d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b085      	sub	sp, #20
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076e8:	68fb      	ldr	r3, [r7, #12]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr

080076f4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	bc80      	pop	{r7}
 8007708:	4770      	bx	lr

0800770a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800770a:	b480      	push	{r7}
 800770c:	b08b      	sub	sp, #44	@ 0x2c
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	4611      	mov	r1, r2
 8007716:	461a      	mov	r2, r3
 8007718:	460b      	mov	r3, r1
 800771a:	80fb      	strh	r3, [r7, #6]
 800771c:	4613      	mov	r3, r2
 800771e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007720:	88bb      	ldrh	r3, [r7, #4]
 8007722:	3301      	adds	r3, #1
 8007724:	085b      	lsrs	r3, r3, #1
 8007726:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	005a      	lsls	r2, r3, #1
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800773c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	627b      	str	r3, [r7, #36]	@ 0x24
 8007742:	e01e      	b.n	8007782 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	3301      	adds	r3, #1
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	b21a      	sxth	r2, r3
 8007754:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007758:	4313      	orrs	r3, r2
 800775a:	b21b      	sxth	r3, r3
 800775c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	8a7a      	ldrh	r2, [r7, #18]
 8007762:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	3302      	adds	r3, #2
 8007768:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	3302      	adds	r3, #2
 800776e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	3301      	adds	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	3301      	adds	r3, #1
 800777a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800777c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777e:	3b01      	subs	r3, #1
 8007780:	627b      	str	r3, [r7, #36]	@ 0x24
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1dd      	bne.n	8007744 <USB_WritePMA+0x3a>
  }
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	372c      	adds	r7, #44	@ 0x2c
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr

08007794 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007794:	b480      	push	{r7}
 8007796:	b08b      	sub	sp, #44	@ 0x2c
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	4611      	mov	r1, r2
 80077a0:	461a      	mov	r2, r3
 80077a2:	460b      	mov	r3, r1
 80077a4:	80fb      	strh	r3, [r7, #6]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80077aa:	88bb      	ldrh	r3, [r7, #4]
 80077ac:	085b      	lsrs	r3, r3, #1
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	005a      	lsls	r2, r3, #1
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077c6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80077cc:	e01b      	b.n	8007806 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	3302      	adds	r3, #2
 80077da:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	3301      	adds	r3, #1
 80077e8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	0a1b      	lsrs	r3, r3, #8
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	3301      	adds	r3, #1
 80077f8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	3302      	adds	r3, #2
 80077fe:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	3b01      	subs	r3, #1
 8007804:	627b      	str	r3, [r7, #36]	@ 0x24
 8007806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e0      	bne.n	80077ce <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800780c:	88bb      	ldrh	r3, [r7, #4]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	b29b      	uxth	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	b2da      	uxtb	r2, r3
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	701a      	strb	r2, [r3, #0]
  }
}
 8007828:	bf00      	nop
 800782a:	372c      	adds	r7, #44	@ 0x2c
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr

08007832 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	4613      	mov	r3, r2
 800783e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007846:	2302      	movs	r3, #2
 8007848:	e01a      	b.n	8007880 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	79fa      	ldrb	r2, [r7, #7]
 8007876:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f001 fc03 	bl	8009084 <USBD_LL_Init>

  return USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d006      	beq.n	80078aa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
 80078a8:	e001      	b.n	80078ae <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80078aa:	2302      	movs	r3, #2
 80078ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 fc26 	bl	8009114 <USBD_LL_Start>

  return USBD_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr

080078e6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	460b      	mov	r3, r1
 80078f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80078f2:	2302      	movs	r3, #2
 80078f4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00c      	beq.n	800791a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	4611      	mov	r1, r2
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	4798      	blx	r3
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800791a:	7bfb      	ldrb	r3, [r7, #15]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	4611      	mov	r1, r2
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3

  return USBD_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fed8 	bl	8008712 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007970:	461a      	mov	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800797e:	f003 031f 	and.w	r3, r3, #31
 8007982:	2b02      	cmp	r3, #2
 8007984:	d016      	beq.n	80079b4 <USBD_LL_SetupStage+0x6a>
 8007986:	2b02      	cmp	r3, #2
 8007988:	d81c      	bhi.n	80079c4 <USBD_LL_SetupStage+0x7a>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <USBD_LL_SetupStage+0x4a>
 800798e:	2b01      	cmp	r3, #1
 8007990:	d008      	beq.n	80079a4 <USBD_LL_SetupStage+0x5a>
 8007992:	e017      	b.n	80079c4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9cb 	bl	8007d38 <USBD_StdDevReq>
      break;
 80079a2:	e01a      	b.n	80079da <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fa2d 	bl	8007e0c <USBD_StdItfReq>
      break;
 80079b2:	e012      	b.n	80079da <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa6d 	bl	8007e9c <USBD_StdEPReq>
      break;
 80079c2:	e00a      	b.n	80079da <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80079ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fbfe 	bl	80091d4 <USBD_LL_StallEP>
      break;
 80079d8:	bf00      	nop
  }

  return USBD_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	460b      	mov	r3, r1
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80079f2:	7afb      	ldrb	r3, [r7, #11]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d14b      	bne.n	8007a90 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80079fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d134      	bne.n	8007a74 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d919      	bls.n	8007a4a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	1ad2      	subs	r2, r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d203      	bcs.n	8007a38 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	e002      	b.n	8007a3e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f001 f8f0 	bl	8008c28 <USBD_CtlContinueRx>
 8007a48:	e038      	b.n	8007abc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d105      	bne.n	8007a6c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f001 f8ed 	bl	8008c4c <USBD_CtlSendStatus>
 8007a72:	e023      	b.n	8007abc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a7a:	2b05      	cmp	r3, #5
 8007a7c:	d11e      	bne.n	8007abc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007a86:	2100      	movs	r1, #0
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f001 fba3 	bl	80091d4 <USBD_LL_StallEP>
 8007a8e:	e015      	b.n	8007abc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00d      	beq.n	8007ab8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d108      	bne.n	8007ab8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	7afa      	ldrb	r2, [r7, #11]
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	4798      	blx	r3
 8007ab6:	e001      	b.n	8007abc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e000      	b.n	8007abe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ad4:	7afb      	ldrb	r3, [r7, #11]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d17f      	bne.n	8007bda <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3314      	adds	r3, #20
 8007ade:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d15c      	bne.n	8007ba4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d915      	bls.n	8007b22 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	1ad2      	subs	r2, r2, r3
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f001 f878 	bl	8008c04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b14:	2300      	movs	r3, #0
 8007b16:	2200      	movs	r2, #0
 8007b18:	2100      	movs	r1, #0
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 fc05 	bl	800932a <USBD_LL_PrepareReceive>
 8007b20:	e04e      	b.n	8007bc0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	6912      	ldr	r2, [r2, #16]
 8007b2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b2e:	fb01 f202 	mul.w	r2, r1, r2
 8007b32:	1a9b      	subs	r3, r3, r2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d11c      	bne.n	8007b72 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d316      	bcc.n	8007b72 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d20f      	bcs.n	8007b72 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b52:	2200      	movs	r2, #0
 8007b54:	2100      	movs	r1, #0
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f001 f854 	bl	8008c04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b64:	2300      	movs	r3, #0
 8007b66:	2200      	movs	r2, #0
 8007b68:	2100      	movs	r1, #0
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 fbdd 	bl	800932a <USBD_LL_PrepareReceive>
 8007b70:	e026      	b.n	8007bc0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d105      	bne.n	8007b94 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007b94:	2180      	movs	r1, #128	@ 0x80
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f001 fb1c 	bl	80091d4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f001 f868 	bl	8008c72 <USBD_CtlReceiveStatus>
 8007ba2:	e00d      	b.n	8007bc0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d004      	beq.n	8007bb8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d103      	bne.n	8007bc0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007bb8:	2180      	movs	r1, #128	@ 0x80
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f001 fb0a 	bl	80091d4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d11d      	bne.n	8007c06 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff fe81 	bl	80078d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007bd8:	e015      	b.n	8007c06 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00d      	beq.n	8007c02 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d108      	bne.n	8007c02 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	7afa      	ldrb	r2, [r7, #11]
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	4798      	blx	r3
 8007c00:	e001      	b.n	8007c06 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c02:	2302      	movs	r3, #2
 8007c04:	e000      	b.n	8007c08 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c18:	2340      	movs	r3, #64	@ 0x40
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 fa93 	bl	800914a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2240      	movs	r2, #64	@ 0x40
 8007c30:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c34:	2340      	movs	r3, #64	@ 0x40
 8007c36:	2200      	movs	r2, #0
 8007c38:	2180      	movs	r1, #128	@ 0x80
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fa85 	bl	800914a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2240      	movs	r2, #64	@ 0x40
 8007c4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d009      	beq.n	8007c88 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6852      	ldr	r2, [r2, #4]
 8007c80:	b2d2      	uxtb	r2, r2
 8007c82:	4611      	mov	r1, r2
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	4798      	blx	r3
  }

  return USBD_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	78fa      	ldrb	r2, [r7, #3]
 8007ca2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr

08007cb0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2204      	movs	r2, #4
 8007cc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bc80      	pop	{r7}
 8007cd6:	4770      	bx	lr

08007cd8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d105      	bne.n	8007cf6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr

08007d02 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d10b      	bne.n	8007d2c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d005      	beq.n	8007d2c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d4e:	2b40      	cmp	r3, #64	@ 0x40
 8007d50:	d005      	beq.n	8007d5e <USBD_StdDevReq+0x26>
 8007d52:	2b40      	cmp	r3, #64	@ 0x40
 8007d54:	d84f      	bhi.n	8007df6 <USBD_StdDevReq+0xbe>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <USBD_StdDevReq+0x36>
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	d14b      	bne.n	8007df6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
      break;
 8007d6c:	e048      	b.n	8007e00 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	785b      	ldrb	r3, [r3, #1]
 8007d72:	2b09      	cmp	r3, #9
 8007d74:	d839      	bhi.n	8007dea <USBD_StdDevReq+0xb2>
 8007d76:	a201      	add	r2, pc, #4	@ (adr r2, 8007d7c <USBD_StdDevReq+0x44>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007dcd 	.word	0x08007dcd
 8007d80:	08007de1 	.word	0x08007de1
 8007d84:	08007deb 	.word	0x08007deb
 8007d88:	08007dd7 	.word	0x08007dd7
 8007d8c:	08007deb 	.word	0x08007deb
 8007d90:	08007daf 	.word	0x08007daf
 8007d94:	08007da5 	.word	0x08007da5
 8007d98:	08007deb 	.word	0x08007deb
 8007d9c:	08007dc3 	.word	0x08007dc3
 8007da0:	08007db9 	.word	0x08007db9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f9dc 	bl	8008164 <USBD_GetDescriptor>
          break;
 8007dac:	e022      	b.n	8007df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fb3f 	bl	8008434 <USBD_SetAddress>
          break;
 8007db6:	e01d      	b.n	8007df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fb7e 	bl	80084bc <USBD_SetConfig>
          break;
 8007dc0:	e018      	b.n	8007df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fc07 	bl	80085d8 <USBD_GetConfig>
          break;
 8007dca:	e013      	b.n	8007df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fc37 	bl	8008642 <USBD_GetStatus>
          break;
 8007dd4:	e00e      	b.n	8007df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fc65 	bl	80086a8 <USBD_SetFeature>
          break;
 8007dde:	e009      	b.n	8007df4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fc74 	bl	80086d0 <USBD_ClrFeature>
          break;
 8007de8:	e004      	b.n	8007df4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fcc9 	bl	8008784 <USBD_CtlError>
          break;
 8007df2:	bf00      	nop
      }
      break;
 8007df4:	e004      	b.n	8007e00 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fcc3 	bl	8008784 <USBD_CtlError>
      break;
 8007dfe:	bf00      	nop
  }

  return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e22:	2b40      	cmp	r3, #64	@ 0x40
 8007e24:	d005      	beq.n	8007e32 <USBD_StdItfReq+0x26>
 8007e26:	2b40      	cmp	r3, #64	@ 0x40
 8007e28:	d82e      	bhi.n	8007e88 <USBD_StdItfReq+0x7c>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <USBD_StdItfReq+0x26>
 8007e2e:	2b20      	cmp	r3, #32
 8007e30:	d12a      	bne.n	8007e88 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d81d      	bhi.n	8007e7a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	889b      	ldrh	r3, [r3, #4]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d813      	bhi.n	8007e70 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	88db      	ldrh	r3, [r3, #6]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d110      	bne.n	8007e84 <USBD_StdItfReq+0x78>
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10d      	bne.n	8007e84 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 feef 	bl	8008c4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e6e:	e009      	b.n	8007e84 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fc86 	bl	8008784 <USBD_CtlError>
          break;
 8007e78:	e004      	b.n	8007e84 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fc81 	bl	8008784 <USBD_CtlError>
          break;
 8007e82:	e000      	b.n	8007e86 <USBD_StdItfReq+0x7a>
          break;
 8007e84:	bf00      	nop
      }
      break;
 8007e86:	e004      	b.n	8007e92 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fc7a 	bl	8008784 <USBD_CtlError>
      break;
 8007e90:	bf00      	nop
  }

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	889b      	ldrh	r3, [r3, #4]
 8007eae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007eb8:	2b40      	cmp	r3, #64	@ 0x40
 8007eba:	d007      	beq.n	8007ecc <USBD_StdEPReq+0x30>
 8007ebc:	2b40      	cmp	r3, #64	@ 0x40
 8007ebe:	f200 8146 	bhi.w	800814e <USBD_StdEPReq+0x2b2>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <USBD_StdEPReq+0x40>
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	f040 8141 	bne.w	800814e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
      break;
 8007eda:	e13d      	b.n	8008158 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d10a      	bne.n	8007efe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	e12d      	b.n	800815a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d007      	beq.n	8007f16 <USBD_StdEPReq+0x7a>
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	f300 811b 	bgt.w	8008142 <USBD_StdEPReq+0x2a6>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d072      	beq.n	8007ff6 <USBD_StdEPReq+0x15a>
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d03a      	beq.n	8007f8a <USBD_StdEPReq+0xee>
 8007f14:	e115      	b.n	8008142 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d002      	beq.n	8007f26 <USBD_StdEPReq+0x8a>
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d015      	beq.n	8007f50 <USBD_StdEPReq+0xb4>
 8007f24:	e02b      	b.n	8007f7e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00c      	beq.n	8007f46 <USBD_StdEPReq+0xaa>
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	2b80      	cmp	r3, #128	@ 0x80
 8007f30:	d009      	beq.n	8007f46 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 f94c 	bl	80091d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f3c:	2180      	movs	r1, #128	@ 0x80
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f001 f948 	bl	80091d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f44:	e020      	b.n	8007f88 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fc1b 	bl	8008784 <USBD_CtlError>
              break;
 8007f4e:	e01b      	b.n	8007f88 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	885b      	ldrh	r3, [r3, #2]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10e      	bne.n	8007f76 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00b      	beq.n	8007f76 <USBD_StdEPReq+0xda>
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	2b80      	cmp	r3, #128	@ 0x80
 8007f62:	d008      	beq.n	8007f76 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	88db      	ldrh	r3, [r3, #6]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d104      	bne.n	8007f76 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 f92f 	bl	80091d4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fe68 	bl	8008c4c <USBD_CtlSendStatus>

              break;
 8007f7c:	e004      	b.n	8007f88 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fbff 	bl	8008784 <USBD_CtlError>
              break;
 8007f86:	bf00      	nop
          }
          break;
 8007f88:	e0e0      	b.n	800814c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d002      	beq.n	8007f9a <USBD_StdEPReq+0xfe>
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d015      	beq.n	8007fc4 <USBD_StdEPReq+0x128>
 8007f98:	e026      	b.n	8007fe8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00c      	beq.n	8007fba <USBD_StdEPReq+0x11e>
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	2b80      	cmp	r3, #128	@ 0x80
 8007fa4:	d009      	beq.n	8007fba <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 f912 	bl	80091d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007fb0:	2180      	movs	r1, #128	@ 0x80
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 f90e 	bl	80091d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fb8:	e01c      	b.n	8007ff4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fbe1 	bl	8008784 <USBD_CtlError>
              break;
 8007fc2:	e017      	b.n	8007ff4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	885b      	ldrh	r3, [r3, #2]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d112      	bne.n	8007ff2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 f919 	bl	8009212 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fe33 	bl	8008c4c <USBD_CtlSendStatus>
              }
              break;
 8007fe6:	e004      	b.n	8007ff2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fbca 	bl	8008784 <USBD_CtlError>
              break;
 8007ff0:	e000      	b.n	8007ff4 <USBD_StdEPReq+0x158>
              break;
 8007ff2:	bf00      	nop
          }
          break;
 8007ff4:	e0aa      	b.n	800814c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d002      	beq.n	8008006 <USBD_StdEPReq+0x16a>
 8008000:	2b03      	cmp	r3, #3
 8008002:	d032      	beq.n	800806a <USBD_StdEPReq+0x1ce>
 8008004:	e097      	b.n	8008136 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <USBD_StdEPReq+0x180>
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	2b80      	cmp	r3, #128	@ 0x80
 8008010:	d004      	beq.n	800801c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fbb5 	bl	8008784 <USBD_CtlError>
                break;
 800801a:	e091      	b.n	8008140 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800801c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008020:	2b00      	cmp	r3, #0
 8008022:	da0b      	bge.n	800803c <USBD_StdEPReq+0x1a0>
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	3310      	adds	r3, #16
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	4413      	add	r3, r2
 8008038:	3304      	adds	r3, #4
 800803a:	e00b      	b.n	8008054 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	3304      	adds	r3, #4
 8008054:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2202      	movs	r2, #2
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fdb2 	bl	8008bcc <USBD_CtlSendData>
              break;
 8008068:	e06a      	b.n	8008140 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800806a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800806e:	2b00      	cmp	r3, #0
 8008070:	da11      	bge.n	8008096 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	f003 020f 	and.w	r2, r3, #15
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	3318      	adds	r3, #24
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d117      	bne.n	80080bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fb78 	bl	8008784 <USBD_CtlError>
                  break;
 8008094:	e054      	b.n	8008140 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	f003 020f 	and.w	r2, r3, #15
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	440b      	add	r3, r1
 80080a8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d104      	bne.n	80080bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fb65 	bl	8008784 <USBD_CtlError>
                  break;
 80080ba:	e041      	b.n	8008140 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da0b      	bge.n	80080dc <USBD_StdEPReq+0x240>
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	3310      	adds	r3, #16
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	4413      	add	r3, r2
 80080d8:	3304      	adds	r3, #4
 80080da:	e00b      	b.n	80080f4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	4413      	add	r3, r2
 80080f2:	3304      	adds	r3, #4
 80080f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <USBD_StdEPReq+0x266>
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	2b80      	cmp	r3, #128	@ 0x80
 8008100:	d103      	bne.n	800810a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2200      	movs	r2, #0
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	e00e      	b.n	8008128 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 f89e 	bl	8009250 <USBD_LL_IsStallEP>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2201      	movs	r2, #1
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	e002      	b.n	8008128 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2202      	movs	r2, #2
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fd4c 	bl	8008bcc <USBD_CtlSendData>
              break;
 8008134:	e004      	b.n	8008140 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fb23 	bl	8008784 <USBD_CtlError>
              break;
 800813e:	bf00      	nop
          }
          break;
 8008140:	e004      	b.n	800814c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fb1d 	bl	8008784 <USBD_CtlError>
          break;
 800814a:	bf00      	nop
      }
      break;
 800814c:	e004      	b.n	8008158 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fb17 	bl	8008784 <USBD_CtlError>
      break;
 8008156:	bf00      	nop
  }

  return ret;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	885b      	ldrh	r3, [r3, #2]
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	b29b      	uxth	r3, r3
 8008182:	3b01      	subs	r3, #1
 8008184:	2b06      	cmp	r3, #6
 8008186:	f200 8128 	bhi.w	80083da <USBD_GetDescriptor+0x276>
 800818a:	a201      	add	r2, pc, #4	@ (adr r2, 8008190 <USBD_GetDescriptor+0x2c>)
 800818c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008190:	080081ad 	.word	0x080081ad
 8008194:	080081c5 	.word	0x080081c5
 8008198:	08008205 	.word	0x08008205
 800819c:	080083db 	.word	0x080083db
 80081a0:	080083db 	.word	0x080083db
 80081a4:	0800837b 	.word	0x0800837b
 80081a8:	080083a7 	.word	0x080083a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	7c12      	ldrb	r2, [r2, #16]
 80081b8:	f107 0108 	add.w	r1, r7, #8
 80081bc:	4610      	mov	r0, r2
 80081be:	4798      	blx	r3
 80081c0:	60f8      	str	r0, [r7, #12]
      break;
 80081c2:	e112      	b.n	80083ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	7c1b      	ldrb	r3, [r3, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10d      	bne.n	80081e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d4:	f107 0208 	add.w	r2, r7, #8
 80081d8:	4610      	mov	r0, r2
 80081da:	4798      	blx	r3
 80081dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	2202      	movs	r2, #2
 80081e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081e6:	e100      	b.n	80083ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f0:	f107 0208 	add.w	r2, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	2202      	movs	r2, #2
 8008200:	701a      	strb	r2, [r3, #0]
      break;
 8008202:	e0f2      	b.n	80083ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	885b      	ldrh	r3, [r3, #2]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b05      	cmp	r3, #5
 800820c:	f200 80ac 	bhi.w	8008368 <USBD_GetDescriptor+0x204>
 8008210:	a201      	add	r2, pc, #4	@ (adr r2, 8008218 <USBD_GetDescriptor+0xb4>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	08008231 	.word	0x08008231
 800821c:	08008265 	.word	0x08008265
 8008220:	08008299 	.word	0x08008299
 8008224:	080082cd 	.word	0x080082cd
 8008228:	08008301 	.word	0x08008301
 800822c:	08008335 	.word	0x08008335
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	7c12      	ldrb	r2, [r2, #16]
 8008248:	f107 0108 	add.w	r1, r7, #8
 800824c:	4610      	mov	r0, r2
 800824e:	4798      	blx	r3
 8008250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008252:	e091      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa94 	bl	8008784 <USBD_CtlError>
            err++;
 800825c:	7afb      	ldrb	r3, [r7, #11]
 800825e:	3301      	adds	r3, #1
 8008260:	72fb      	strb	r3, [r7, #11]
          break;
 8008262:	e089      	b.n	8008378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00b      	beq.n	8008288 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	7c12      	ldrb	r2, [r2, #16]
 800827c:	f107 0108 	add.w	r1, r7, #8
 8008280:	4610      	mov	r0, r2
 8008282:	4798      	blx	r3
 8008284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008286:	e077      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fa7a 	bl	8008784 <USBD_CtlError>
            err++;
 8008290:	7afb      	ldrb	r3, [r7, #11]
 8008292:	3301      	adds	r3, #1
 8008294:	72fb      	strb	r3, [r7, #11]
          break;
 8008296:	e06f      	b.n	8008378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	7c12      	ldrb	r2, [r2, #16]
 80082b0:	f107 0108 	add.w	r1, r7, #8
 80082b4:	4610      	mov	r0, r2
 80082b6:	4798      	blx	r3
 80082b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ba:	e05d      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa60 	bl	8008784 <USBD_CtlError>
            err++;
 80082c4:	7afb      	ldrb	r3, [r7, #11]
 80082c6:	3301      	adds	r3, #1
 80082c8:	72fb      	strb	r3, [r7, #11]
          break;
 80082ca:	e055      	b.n	8008378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00b      	beq.n	80082f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	7c12      	ldrb	r2, [r2, #16]
 80082e4:	f107 0108 	add.w	r1, r7, #8
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
 80082ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ee:	e043      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa46 	bl	8008784 <USBD_CtlError>
            err++;
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	3301      	adds	r3, #1
 80082fc:	72fb      	strb	r3, [r7, #11]
          break;
 80082fe:	e03b      	b.n	8008378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	7c12      	ldrb	r2, [r2, #16]
 8008318:	f107 0108 	add.w	r1, r7, #8
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3
 8008320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008322:	e029      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fa2c 	bl	8008784 <USBD_CtlError>
            err++;
 800832c:	7afb      	ldrb	r3, [r7, #11]
 800832e:	3301      	adds	r3, #1
 8008330:	72fb      	strb	r3, [r7, #11]
          break;
 8008332:	e021      	b.n	8008378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00b      	beq.n	8008358 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	7c12      	ldrb	r2, [r2, #16]
 800834c:	f107 0108 	add.w	r1, r7, #8
 8008350:	4610      	mov	r0, r2
 8008352:	4798      	blx	r3
 8008354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008356:	e00f      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa12 	bl	8008784 <USBD_CtlError>
            err++;
 8008360:	7afb      	ldrb	r3, [r7, #11]
 8008362:	3301      	adds	r3, #1
 8008364:	72fb      	strb	r3, [r7, #11]
          break;
 8008366:	e007      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa0a 	bl	8008784 <USBD_CtlError>
          err++;
 8008370:	7afb      	ldrb	r3, [r7, #11]
 8008372:	3301      	adds	r3, #1
 8008374:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008376:	e038      	b.n	80083ea <USBD_GetDescriptor+0x286>
 8008378:	e037      	b.n	80083ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	7c1b      	ldrb	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800838a:	f107 0208 	add.w	r2, r7, #8
 800838e:	4610      	mov	r0, r2
 8008390:	4798      	blx	r3
 8008392:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008394:	e029      	b.n	80083ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f9f3 	bl	8008784 <USBD_CtlError>
        err++;
 800839e:	7afb      	ldrb	r3, [r7, #11]
 80083a0:	3301      	adds	r3, #1
 80083a2:	72fb      	strb	r3, [r7, #11]
      break;
 80083a4:	e021      	b.n	80083ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7c1b      	ldrb	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10d      	bne.n	80083ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b6:	f107 0208 	add.w	r2, r7, #8
 80083ba:	4610      	mov	r0, r2
 80083bc:	4798      	blx	r3
 80083be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3301      	adds	r3, #1
 80083c4:	2207      	movs	r2, #7
 80083c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083c8:	e00f      	b.n	80083ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f9d9 	bl	8008784 <USBD_CtlError>
        err++;
 80083d2:	7afb      	ldrb	r3, [r7, #11]
 80083d4:	3301      	adds	r3, #1
 80083d6:	72fb      	strb	r3, [r7, #11]
      break;
 80083d8:	e007      	b.n	80083ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f9d1 	bl	8008784 <USBD_CtlError>
      err++;
 80083e2:	7afb      	ldrb	r3, [r7, #11]
 80083e4:	3301      	adds	r3, #1
 80083e6:	72fb      	strb	r3, [r7, #11]
      break;
 80083e8:	bf00      	nop
  }

  if (err != 0U)
 80083ea:	7afb      	ldrb	r3, [r7, #11]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d11c      	bne.n	800842a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80083f0:	893b      	ldrh	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d011      	beq.n	800841a <USBD_GetDescriptor+0x2b6>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	88db      	ldrh	r3, [r3, #6]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00d      	beq.n	800841a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	88da      	ldrh	r2, [r3, #6]
 8008402:	893b      	ldrh	r3, [r7, #8]
 8008404:	4293      	cmp	r3, r2
 8008406:	bf28      	it	cs
 8008408:	4613      	movcs	r3, r2
 800840a:	b29b      	uxth	r3, r3
 800840c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800840e:	893b      	ldrh	r3, [r7, #8]
 8008410:	461a      	mov	r2, r3
 8008412:	68f9      	ldr	r1, [r7, #12]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fbd9 	bl	8008bcc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	88db      	ldrh	r3, [r3, #6]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fc12 	bl	8008c4c <USBD_CtlSendStatus>
 8008428:	e000      	b.n	800842c <USBD_GetDescriptor+0x2c8>
    return;
 800842a:	bf00      	nop
    }
  }
}
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop

08008434 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	889b      	ldrh	r3, [r3, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d130      	bne.n	80084a8 <USBD_SetAddress+0x74>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	88db      	ldrh	r3, [r3, #6]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d12c      	bne.n	80084a8 <USBD_SetAddress+0x74>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	885b      	ldrh	r3, [r3, #2]
 8008452:	2b7f      	cmp	r3, #127	@ 0x7f
 8008454:	d828      	bhi.n	80084a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	885b      	ldrh	r3, [r3, #2]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008460:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008468:	2b03      	cmp	r3, #3
 800846a:	d104      	bne.n	8008476 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f988 	bl	8008784 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008474:	e01d      	b.n	80084b2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	7bfa      	ldrb	r2, [r7, #15]
 800847a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800847e:	7bfb      	ldrb	r3, [r7, #15]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 ff0f 	bl	80092a6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fbdf 	bl	8008c4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d004      	beq.n	800849e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849c:	e009      	b.n	80084b2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a6:	e004      	b.n	80084b2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f96a 	bl	8008784 <USBD_CtlError>
  }
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	885b      	ldrh	r3, [r3, #2]
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	4b41      	ldr	r3, [pc, #260]	@ (80085d4 <USBD_SetConfig+0x118>)
 80084ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084d0:	4b40      	ldr	r3, [pc, #256]	@ (80085d4 <USBD_SetConfig+0x118>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d904      	bls.n	80084e2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f952 	bl	8008784 <USBD_CtlError>
 80084e0:	e075      	b.n	80085ce <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d002      	beq.n	80084f2 <USBD_SetConfig+0x36>
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d023      	beq.n	8008538 <USBD_SetConfig+0x7c>
 80084f0:	e062      	b.n	80085b8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80084f2:	4b38      	ldr	r3, [pc, #224]	@ (80085d4 <USBD_SetConfig+0x118>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d01a      	beq.n	8008530 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80084fa:	4b36      	ldr	r3, [pc, #216]	@ (80085d4 <USBD_SetConfig+0x118>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2203      	movs	r2, #3
 8008508:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800850c:	4b31      	ldr	r3, [pc, #196]	@ (80085d4 <USBD_SetConfig+0x118>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff f9e7 	bl	80078e6 <USBD_SetClassConfig>
 8008518:	4603      	mov	r3, r0
 800851a:	2b02      	cmp	r3, #2
 800851c:	d104      	bne.n	8008528 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f92f 	bl	8008784 <USBD_CtlError>
            return;
 8008526:	e052      	b.n	80085ce <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fb8f 	bl	8008c4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800852e:	e04e      	b.n	80085ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fb8b 	bl	8008c4c <USBD_CtlSendStatus>
        break;
 8008536:	e04a      	b.n	80085ce <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008538:	4b26      	ldr	r3, [pc, #152]	@ (80085d4 <USBD_SetConfig+0x118>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d112      	bne.n	8008566 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008548:	4b22      	ldr	r3, [pc, #136]	@ (80085d4 <USBD_SetConfig+0x118>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008552:	4b20      	ldr	r3, [pc, #128]	@ (80085d4 <USBD_SetConfig+0x118>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff f9e3 	bl	8007924 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fb74 	bl	8008c4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008564:	e033      	b.n	80085ce <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008566:	4b1b      	ldr	r3, [pc, #108]	@ (80085d4 <USBD_SetConfig+0x118>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d01d      	beq.n	80085b0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	b2db      	uxtb	r3, r3
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff f9d1 	bl	8007924 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008582:	4b14      	ldr	r3, [pc, #80]	@ (80085d4 <USBD_SetConfig+0x118>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800858c:	4b11      	ldr	r3, [pc, #68]	@ (80085d4 <USBD_SetConfig+0x118>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff f9a7 	bl	80078e6 <USBD_SetClassConfig>
 8008598:	4603      	mov	r3, r0
 800859a:	2b02      	cmp	r3, #2
 800859c:	d104      	bne.n	80085a8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f8ef 	bl	8008784 <USBD_CtlError>
            return;
 80085a6:	e012      	b.n	80085ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fb4f 	bl	8008c4c <USBD_CtlSendStatus>
        break;
 80085ae:	e00e      	b.n	80085ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fb4b 	bl	8008c4c <USBD_CtlSendStatus>
        break;
 80085b6:	e00a      	b.n	80085ce <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f8e2 	bl	8008784 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80085c0:	4b04      	ldr	r3, [pc, #16]	@ (80085d4 <USBD_SetConfig+0x118>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7ff f9ac 	bl	8007924 <USBD_ClrClassConfig>
        break;
 80085cc:	bf00      	nop
    }
  }
}
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000e7c 	.word	0x20000e7c

080085d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	88db      	ldrh	r3, [r3, #6]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d004      	beq.n	80085f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f8c9 	bl	8008784 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085f2:	e022      	b.n	800863a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	dc02      	bgt.n	8008604 <USBD_GetConfig+0x2c>
 80085fe:	2b00      	cmp	r3, #0
 8008600:	dc03      	bgt.n	800860a <USBD_GetConfig+0x32>
 8008602:	e015      	b.n	8008630 <USBD_GetConfig+0x58>
 8008604:	2b03      	cmp	r3, #3
 8008606:	d00b      	beq.n	8008620 <USBD_GetConfig+0x48>
 8008608:	e012      	b.n	8008630 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3308      	adds	r3, #8
 8008614:	2201      	movs	r2, #1
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fad7 	bl	8008bcc <USBD_CtlSendData>
        break;
 800861e:	e00c      	b.n	800863a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3304      	adds	r3, #4
 8008624:	2201      	movs	r2, #1
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 facf 	bl	8008bcc <USBD_CtlSendData>
        break;
 800862e:	e004      	b.n	800863a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f8a6 	bl	8008784 <USBD_CtlError>
        break;
 8008638:	bf00      	nop
}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008652:	3b01      	subs	r3, #1
 8008654:	2b02      	cmp	r3, #2
 8008656:	d81e      	bhi.n	8008696 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	88db      	ldrh	r3, [r3, #6]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d004      	beq.n	800866a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f88e 	bl	8008784 <USBD_CtlError>
        break;
 8008668:	e01a      	b.n	80086a0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d005      	beq.n	8008686 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	f043 0202 	orr.w	r2, r3, #2
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	330c      	adds	r3, #12
 800868a:	2202      	movs	r2, #2
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa9c 	bl	8008bcc <USBD_CtlSendData>
      break;
 8008694:	e004      	b.n	80086a0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f873 	bl	8008784 <USBD_CtlError>
      break;
 800869e:	bf00      	nop
  }
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	885b      	ldrh	r3, [r3, #2]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d106      	bne.n	80086c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fac2 	bl	8008c4c <USBD_CtlSendStatus>
  }
}
 80086c8:	bf00      	nop
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e0:	3b01      	subs	r3, #1
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d80b      	bhi.n	80086fe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	885b      	ldrh	r3, [r3, #2]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d10c      	bne.n	8008708 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 faa8 	bl	8008c4c <USBD_CtlSendStatus>
      }
      break;
 80086fc:	e004      	b.n	8008708 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f83f 	bl	8008784 <USBD_CtlError>
      break;
 8008706:	e000      	b.n	800870a <USBD_ClrFeature+0x3a>
      break;
 8008708:	bf00      	nop
  }
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	781a      	ldrb	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	785a      	ldrb	r2, [r3, #1]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	3302      	adds	r3, #2
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	3303      	adds	r3, #3
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	021b      	lsls	r3, r3, #8
 800873c:	b29b      	uxth	r3, r3
 800873e:	4413      	add	r3, r2
 8008740:	b29a      	uxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	3304      	adds	r3, #4
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	461a      	mov	r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	3305      	adds	r3, #5
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	021b      	lsls	r3, r3, #8
 8008756:	b29b      	uxth	r3, r3
 8008758:	4413      	add	r3, r2
 800875a:	b29a      	uxth	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	3306      	adds	r3, #6
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	3307      	adds	r3, #7
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	021b      	lsls	r3, r3, #8
 8008770:	b29b      	uxth	r3, r3
 8008772:	4413      	add	r3, r2
 8008774:	b29a      	uxth	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	80da      	strh	r2, [r3, #6]

}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	bc80      	pop	{r7}
 8008782:	4770      	bx	lr

08008784 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800878e:	2180      	movs	r1, #128	@ 0x80
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fd1f 	bl	80091d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008796:	2100      	movs	r1, #0
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fd1b 	bl	80091d4 <USBD_LL_StallEP>
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b086      	sub	sp, #24
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d032      	beq.n	8008822 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 f834 	bl	800882a <USBD_GetLen>
 80087c2:	4603      	mov	r3, r0
 80087c4:	3301      	adds	r3, #1
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	75fa      	strb	r2, [r7, #23]
 80087d6:	461a      	mov	r2, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	4413      	add	r3, r2
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	7812      	ldrb	r2, [r2, #0]
 80087e0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	75fa      	strb	r2, [r7, #23]
 80087e8:	461a      	mov	r2, r3
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	4413      	add	r3, r2
 80087ee:	2203      	movs	r2, #3
 80087f0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80087f2:	e012      	b.n	800881a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	60fa      	str	r2, [r7, #12]
 80087fa:	7dfa      	ldrb	r2, [r7, #23]
 80087fc:	1c51      	adds	r1, r2, #1
 80087fe:	75f9      	strb	r1, [r7, #23]
 8008800:	4611      	mov	r1, r2
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	440a      	add	r2, r1
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	75fa      	strb	r2, [r7, #23]
 8008810:	461a      	mov	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	4413      	add	r3, r2
 8008816:	2200      	movs	r2, #0
 8008818:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e8      	bne.n	80087f4 <USBD_GetString+0x4e>
    }
  }
}
 8008822:	bf00      	nop
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800882a:	b480      	push	{r7}
 800882c:	b085      	sub	sp, #20
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008836:	e005      	b.n	8008844 <USBD_GetLen+0x1a>
  {
    len++;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	3301      	adds	r3, #1
 800883c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3301      	adds	r3, #1
 8008842:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1f5      	bne.n	8008838 <USBD_GetLen+0xe>
  }

  return len;
 800884c:	7bfb      	ldrb	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr

08008858 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008864:	2304      	movs	r3, #4
 8008866:	2203      	movs	r2, #3
 8008868:	2181      	movs	r1, #129	@ 0x81
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fc6d 	bl	800914a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008876:	2010      	movs	r0, #16
 8008878:	f000 fd7a 	bl	8009370 <USBD_static_malloc>
 800887c:	4602      	mov	r2, r0
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800888e:	2302      	movs	r3, #2
 8008890:	e005      	b.n	800889e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008898:	2200      	movs	r2, #0
 800889a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80088b2:	2181      	movs	r1, #129	@ 0x81
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fc6e 	bl	8009196 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d009      	beq.n	80088de <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 fd59 	bl	8009388 <USBD_static_free>
    pdev->pClassData = NULL;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_HID_Setup>:
  * @retval status
  */

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008912:	2b00      	cmp	r3, #0
 8008914:	d045      	beq.n	80089a2 <USBD_HID_Setup+0xba>
 8008916:	2b20      	cmp	r3, #32
 8008918:	f040 80d3 	bne.w	8008ac2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	785b      	ldrb	r3, [r3, #1]
 8008920:	3b02      	subs	r3, #2
 8008922:	2b09      	cmp	r3, #9
 8008924:	d835      	bhi.n	8008992 <USBD_HID_Setup+0xaa>
 8008926:	a201      	add	r2, pc, #4	@ (adr r2, 800892c <USBD_HID_Setup+0x44>)
 8008928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892c:	08008983 	.word	0x08008983
 8008930:	08008963 	.word	0x08008963
 8008934:	08008993 	.word	0x08008993
 8008938:	08008993 	.word	0x08008993
 800893c:	08008993 	.word	0x08008993
 8008940:	08008993 	.word	0x08008993
 8008944:	08008993 	.word	0x08008993
 8008948:	08008993 	.word	0x08008993
 800894c:	08008971 	.word	0x08008971
 8008950:	08008955 	.word	0x08008955
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	885b      	ldrh	r3, [r3, #2]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	461a      	mov	r2, r3
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	601a      	str	r2, [r3, #0]
          break;
 8008960:	e01e      	b.n	80089a0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	2201      	movs	r2, #1
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f92f 	bl	8008bcc <USBD_CtlSendData>
          break;
 800896e:	e017      	b.n	80089a0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	885b      	ldrh	r3, [r3, #2]
 8008974:	0a1b      	lsrs	r3, r3, #8
 8008976:	b29b      	uxth	r3, r3
 8008978:	b2db      	uxtb	r3, r3
 800897a:	461a      	mov	r2, r3
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	605a      	str	r2, [r3, #4]
          break;
 8008980:	e00e      	b.n	80089a0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	3304      	adds	r3, #4
 8008986:	2201      	movs	r2, #1
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f91e 	bl	8008bcc <USBD_CtlSendData>
          break;
 8008990:	e006      	b.n	80089a0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff fef5 	bl	8008784 <USBD_CtlError>
          ret = USBD_FAIL;
 800899a:	2302      	movs	r3, #2
 800899c:	75fb      	strb	r3, [r7, #23]
          break;
 800899e:	bf00      	nop
      }
      break;
 80089a0:	e096      	b.n	8008ad0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	785b      	ldrb	r3, [r3, #1]
 80089a6:	2b0b      	cmp	r3, #11
 80089a8:	f200 8083 	bhi.w	8008ab2 <USBD_HID_Setup+0x1ca>
 80089ac:	a201      	add	r2, pc, #4	@ (adr r2, 80089b4 <USBD_HID_Setup+0xcc>)
 80089ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b2:	bf00      	nop
 80089b4:	080089e5 	.word	0x080089e5
 80089b8:	08008ab3 	.word	0x08008ab3
 80089bc:	08008ab3 	.word	0x08008ab3
 80089c0:	08008ab3 	.word	0x08008ab3
 80089c4:	08008ab3 	.word	0x08008ab3
 80089c8:	08008ab3 	.word	0x08008ab3
 80089cc:	08008a0d 	.word	0x08008a0d
 80089d0:	08008ab3 	.word	0x08008ab3
 80089d4:	08008ab3 	.word	0x08008ab3
 80089d8:	08008ab3 	.word	0x08008ab3
 80089dc:	08008a65 	.word	0x08008a65
 80089e0:	08008a8d 	.word	0x08008a8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d107      	bne.n	80089fe <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80089ee:	f107 030e 	add.w	r3, r7, #14
 80089f2:	2202      	movs	r2, #2
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8e8 	bl	8008bcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089fc:	e060      	b.n	8008ac0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff febf 	bl	8008784 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a06:	2302      	movs	r3, #2
 8008a08:	75fb      	strb	r3, [r7, #23]
          break;
 8008a0a:	e059      	b.n	8008ac0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	885b      	ldrh	r3, [r3, #2]
 8008a10:	0a1b      	lsrs	r3, r3, #8
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	2b22      	cmp	r3, #34	@ 0x22
 8008a16:	d108      	bne.n	8008a2a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	88db      	ldrh	r3, [r3, #6]
 8008a1c:	2b73      	cmp	r3, #115	@ 0x73
 8008a1e:	bf28      	it	cs
 8008a20:	2373      	movcs	r3, #115	@ 0x73
 8008a22:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8008a24:	4b2d      	ldr	r3, [pc, #180]	@ (8008adc <USBD_HID_Setup+0x1f4>)
 8008a26:	61bb      	str	r3, [r7, #24]
 8008a28:	e015      	b.n	8008a56 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	885b      	ldrh	r3, [r3, #2]
 8008a2e:	0a1b      	lsrs	r3, r3, #8
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b21      	cmp	r3, #33	@ 0x21
 8008a34:	d108      	bne.n	8008a48 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008a36:	4b2a      	ldr	r3, [pc, #168]	@ (8008ae0 <USBD_HID_Setup+0x1f8>)
 8008a38:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	2b09      	cmp	r3, #9
 8008a40:	bf28      	it	cs
 8008a42:	2309      	movcs	r3, #9
 8008a44:	83fb      	strh	r3, [r7, #30]
 8008a46:	e006      	b.n	8008a56 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff fe9a 	bl	8008784 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a50:	2302      	movs	r3, #2
 8008a52:	75fb      	strb	r3, [r7, #23]
            break;
 8008a54:	e034      	b.n	8008ac0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008a56:	8bfb      	ldrh	r3, [r7, #30]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	69b9      	ldr	r1, [r7, #24]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f8b5 	bl	8008bcc <USBD_CtlSendData>
          break;
 8008a62:	e02d      	b.n	8008ac0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d107      	bne.n	8008a7e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	3308      	adds	r3, #8
 8008a72:	2201      	movs	r2, #1
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f8a8 	bl	8008bcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a7c:	e020      	b.n	8008ac0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff fe7f 	bl	8008784 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a86:	2302      	movs	r3, #2
 8008a88:	75fb      	strb	r3, [r7, #23]
          break;
 8008a8a:	e019      	b.n	8008ac0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d106      	bne.n	8008aa4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	885b      	ldrh	r3, [r3, #2]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008aa2:	e00d      	b.n	8008ac0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff fe6c 	bl	8008784 <USBD_CtlError>
            ret = USBD_FAIL;
 8008aac:	2302      	movs	r3, #2
 8008aae:	75fb      	strb	r3, [r7, #23]
          break;
 8008ab0:	e006      	b.n	8008ac0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff fe65 	bl	8008784 <USBD_CtlError>
          ret = USBD_FAIL;
 8008aba:	2302      	movs	r3, #2
 8008abc:	75fb      	strb	r3, [r7, #23]
          break;
 8008abe:	bf00      	nop
      }
      break;
 8008ac0:	e006      	b.n	8008ad0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff fe5d 	bl	8008784 <USBD_CtlError>
      ret = USBD_FAIL;
 8008aca:	2302      	movs	r3, #2
 8008acc:	75fb      	strb	r3, [r7, #23]
      break;
 8008ace:	bf00      	nop
  }

  return ret;
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3720      	adds	r7, #32
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	200000cc 	.word	0x200000cc
 8008ae0:	200000b4 	.word	0x200000b4

08008ae4 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	4613      	mov	r3, r2
 8008af0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008af8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d10c      	bne.n	8008b1e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	7b1b      	ldrb	r3, [r3, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d108      	bne.n	8008b1e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	2181      	movs	r1, #129	@ 0x81
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 fbe3 	bl	80092e4 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2222      	movs	r2, #34	@ 0x22
 8008b34:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008b36:	4b03      	ldr	r3, [pc, #12]	@ (8008b44 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000048 	.word	0x20000048

08008b48 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2222      	movs	r2, #34	@ 0x22
 8008b54:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8008b56:	4b03      	ldr	r3, [pc, #12]	@ (8008b64 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	2000006c 	.word	0x2000006c

08008b68 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2222      	movs	r2, #34	@ 0x22
 8008b74:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008b76:	4b03      	ldr	r3, [pc, #12]	@ (8008b84 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20000090 	.word	0x20000090

08008b88 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr
	...

08008bac <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	220a      	movs	r2, #10
 8008bb8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008bba:	4b03      	ldr	r3, [pc, #12]	@ (8008bc8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	200000c0 	.word	0x200000c0

08008bcc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2202      	movs	r2, #2
 8008bde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008be2:	88fa      	ldrh	r2, [r7, #6]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008be8:	88fa      	ldrh	r2, [r7, #6]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fb75 	bl	80092e4 <USBD_LL_Transmit>

  return USBD_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c12:	88fb      	ldrh	r3, [r7, #6]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	2100      	movs	r1, #0
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 fb63 	bl	80092e4 <USBD_LL_Transmit>

  return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c36:	88fb      	ldrh	r3, [r7, #6]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 fb74 	bl	800932a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2204      	movs	r2, #4
 8008c58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2100      	movs	r1, #0
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fb3e 	bl	80092e4 <USBD_LL_Transmit>

  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2205      	movs	r2, #5
 8008c7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c82:	2300      	movs	r3, #0
 8008c84:	2200      	movs	r2, #0
 8008c86:	2100      	movs	r1, #0
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fb4e 	bl	800932a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	490e      	ldr	r1, [pc, #56]	@ (8008cd8 <MX_USB_DEVICE_Init+0x40>)
 8008ca0:	480e      	ldr	r0, [pc, #56]	@ (8008cdc <MX_USB_DEVICE_Init+0x44>)
 8008ca2:	f7fe fdc6 	bl	8007832 <USBD_Init>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cac:	f7f8 f873 	bl	8000d96 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008cb0:	490b      	ldr	r1, [pc, #44]	@ (8008ce0 <MX_USB_DEVICE_Init+0x48>)
 8008cb2:	480a      	ldr	r0, [pc, #40]	@ (8008cdc <MX_USB_DEVICE_Init+0x44>)
 8008cb4:	f7fe fde8 	bl	8007888 <USBD_RegisterClass>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cbe:	f7f8 f86a 	bl	8000d96 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cc2:	4806      	ldr	r0, [pc, #24]	@ (8008cdc <MX_USB_DEVICE_Init+0x44>)
 8008cc4:	f7fe fdf9 	bl	80078ba <USBD_Start>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008cce:	f7f8 f862 	bl	8000d96 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cd2:	bf00      	nop
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000140 	.word	0x20000140
 8008cdc:	20000e80 	.word	0x20000e80
 8008ce0:	20000010 	.word	0x20000010

08008ce4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	4603      	mov	r3, r0
 8008cec:	6039      	str	r1, [r7, #0]
 8008cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2212      	movs	r2, #18
 8008cf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008cf6:	4b03      	ldr	r3, [pc, #12]	@ (8008d04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	2000015c 	.word	0x2000015c

08008d08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	4603      	mov	r3, r0
 8008d10:	6039      	str	r1, [r7, #0]
 8008d12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2204      	movs	r2, #4
 8008d18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d1a:	4b03      	ldr	r3, [pc, #12]	@ (8008d28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc80      	pop	{r7}
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	20000170 	.word	0x20000170

08008d2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	6039      	str	r1, [r7, #0]
 8008d36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d105      	bne.n	8008d4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	4907      	ldr	r1, [pc, #28]	@ (8008d60 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d42:	4808      	ldr	r0, [pc, #32]	@ (8008d64 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d44:	f7ff fd2f 	bl	80087a6 <USBD_GetString>
 8008d48:	e004      	b.n	8008d54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	4904      	ldr	r1, [pc, #16]	@ (8008d60 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d4e:	4805      	ldr	r0, [pc, #20]	@ (8008d64 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d50:	f7ff fd29 	bl	80087a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d54:	4b02      	ldr	r3, [pc, #8]	@ (8008d60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20001144 	.word	0x20001144
 8008d64:	08009698 	.word	0x08009698

08008d68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	6039      	str	r1, [r7, #0]
 8008d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	4904      	ldr	r1, [pc, #16]	@ (8008d88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d78:	4804      	ldr	r0, [pc, #16]	@ (8008d8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d7a:	f7ff fd14 	bl	80087a6 <USBD_GetString>
  return USBD_StrDesc;
 8008d7e:	4b02      	ldr	r3, [pc, #8]	@ (8008d88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20001144 	.word	0x20001144
 8008d8c:	080096a8 	.word	0x080096a8

08008d90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	6039      	str	r1, [r7, #0]
 8008d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	221a      	movs	r2, #26
 8008da0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008da2:	f000 f843 	bl	8008e2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008da6:	4b02      	ldr	r3, [pc, #8]	@ (8008db0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000174 	.word	0x20000174

08008db4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d105      	bne.n	8008dd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	4907      	ldr	r1, [pc, #28]	@ (8008de8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dca:	4808      	ldr	r0, [pc, #32]	@ (8008dec <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dcc:	f7ff fceb 	bl	80087a6 <USBD_GetString>
 8008dd0:	e004      	b.n	8008ddc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	4904      	ldr	r1, [pc, #16]	@ (8008de8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dd6:	4805      	ldr	r0, [pc, #20]	@ (8008dec <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dd8:	f7ff fce5 	bl	80087a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ddc:	4b02      	ldr	r3, [pc, #8]	@ (8008de8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	20001144 	.word	0x20001144
 8008dec:	080096b0 	.word	0x080096b0

08008df0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d105      	bne.n	8008e0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	4907      	ldr	r1, [pc, #28]	@ (8008e24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e06:	4808      	ldr	r0, [pc, #32]	@ (8008e28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e08:	f7ff fccd 	bl	80087a6 <USBD_GetString>
 8008e0c:	e004      	b.n	8008e18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	4904      	ldr	r1, [pc, #16]	@ (8008e24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e12:	4805      	ldr	r0, [pc, #20]	@ (8008e28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e14:	f7ff fcc7 	bl	80087a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e18:	4b02      	ldr	r3, [pc, #8]	@ (8008e24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20001144 	.word	0x20001144
 8008e28:	080096bc 	.word	0x080096bc

08008e2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e32:	4b0f      	ldr	r3, [pc, #60]	@ (8008e70 <Get_SerialNum+0x44>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e38:	4b0e      	ldr	r3, [pc, #56]	@ (8008e74 <Get_SerialNum+0x48>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e78 <Get_SerialNum+0x4c>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4413      	add	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e52:	2208      	movs	r2, #8
 8008e54:	4909      	ldr	r1, [pc, #36]	@ (8008e7c <Get_SerialNum+0x50>)
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 f814 	bl	8008e84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e5c:	2204      	movs	r2, #4
 8008e5e:	4908      	ldr	r1, [pc, #32]	@ (8008e80 <Get_SerialNum+0x54>)
 8008e60:	68b8      	ldr	r0, [r7, #8]
 8008e62:	f000 f80f 	bl	8008e84 <IntToUnicode>
  }
}
 8008e66:	bf00      	nop
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	1ffff7e8 	.word	0x1ffff7e8
 8008e74:	1ffff7ec 	.word	0x1ffff7ec
 8008e78:	1ffff7f0 	.word	0x1ffff7f0
 8008e7c:	20000176 	.word	0x20000176
 8008e80:	20000186 	.word	0x20000186

08008e84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e96:	2300      	movs	r3, #0
 8008e98:	75fb      	strb	r3, [r7, #23]
 8008e9a:	e027      	b.n	8008eec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	0f1b      	lsrs	r3, r3, #28
 8008ea0:	2b09      	cmp	r3, #9
 8008ea2:	d80b      	bhi.n	8008ebc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	0f1b      	lsrs	r3, r3, #28
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	4619      	mov	r1, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	440b      	add	r3, r1
 8008eb4:	3230      	adds	r2, #48	@ 0x30
 8008eb6:	b2d2      	uxtb	r2, r2
 8008eb8:	701a      	strb	r2, [r3, #0]
 8008eba:	e00a      	b.n	8008ed2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	0f1b      	lsrs	r3, r3, #28
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	440b      	add	r3, r1
 8008ecc:	3237      	adds	r2, #55	@ 0x37
 8008ece:	b2d2      	uxtb	r2, r2
 8008ed0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	005b      	lsls	r3, r3, #1
 8008edc:	3301      	adds	r3, #1
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	75fb      	strb	r3, [r7, #23]
 8008eec:	7dfa      	ldrb	r2, [r7, #23]
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d3d3      	bcc.n	8008e9c <IntToUnicode+0x18>
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bc80      	pop	{r7}
 8008efe:	4770      	bx	lr

08008f00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8008f44 <HAL_PCD_MspInit+0x44>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d113      	bne.n	8008f3a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f12:	4b0d      	ldr	r3, [pc, #52]	@ (8008f48 <HAL_PCD_MspInit+0x48>)
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	4a0c      	ldr	r2, [pc, #48]	@ (8008f48 <HAL_PCD_MspInit+0x48>)
 8008f18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008f1c:	61d3      	str	r3, [r2, #28]
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f48 <HAL_PCD_MspInit+0x48>)
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	2014      	movs	r0, #20
 8008f30:	f7f8 fdd3 	bl	8001ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008f34:	2014      	movs	r0, #20
 8008f36:	f7f8 fdec 	bl	8001b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	40005c00 	.word	0x40005c00
 8008f48:	40021000 	.word	0x40021000

08008f4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008f60:	4619      	mov	r1, r3
 8008f62:	4610      	mov	r0, r2
 8008f64:	f7fe fcf1 	bl	800794a <USBD_LL_SetupStage>
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008f82:	78fa      	ldrb	r2, [r7, #3]
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	4613      	mov	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	440b      	add	r3, r1
 8008f90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f7fe fd23 	bl	80079e4 <USBD_LL_DataOutStage>
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008fb8:	78fa      	ldrb	r2, [r7, #3]
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	440b      	add	r3, r1
 8008fc6:	3324      	adds	r3, #36	@ 0x24
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f7fe fd7a 	bl	8007ac6 <USBD_LL_DataInStage>
}
 8008fd2:	bf00      	nop
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe fe8a 	bl	8007d02 <USBD_LL_SOF>
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ffe:	2301      	movs	r3, #1
 8009000:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	799b      	ldrb	r3, [r3, #6]
 8009006:	2b02      	cmp	r3, #2
 8009008:	d001      	beq.n	800900e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800900a:	f7f7 fec4 	bl	8000d96 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009014:	7bfa      	ldrb	r2, [r7, #15]
 8009016:	4611      	mov	r1, r2
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fe3a 	bl	8007c92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe fdf3 	bl	8007c10 <USBD_LL_Reset>
}
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe fe34 	bl	8007cb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	7a9b      	ldrb	r3, [r3, #10]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009050:	4b04      	ldr	r3, [pc, #16]	@ (8009064 <HAL_PCD_SuspendCallback+0x30>)
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	4a03      	ldr	r2, [pc, #12]	@ (8009064 <HAL_PCD_SuspendCallback+0x30>)
 8009056:	f043 0306 	orr.w	r3, r3, #6
 800905a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	e000ed00 	.word	0xe000ed00

08009068 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fe2e 	bl	8007cd8 <USBD_LL_Resume>
}
 800907c:	bf00      	nop
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800908c:	4a1f      	ldr	r2, [pc, #124]	@ (800910c <USBD_LL_Init+0x88>)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a1d      	ldr	r2, [pc, #116]	@ (800910c <USBD_LL_Init+0x88>)
 8009098:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800909c:	4b1b      	ldr	r3, [pc, #108]	@ (800910c <USBD_LL_Init+0x88>)
 800909e:	4a1c      	ldr	r2, [pc, #112]	@ (8009110 <USBD_LL_Init+0x8c>)
 80090a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80090a2:	4b1a      	ldr	r3, [pc, #104]	@ (800910c <USBD_LL_Init+0x88>)
 80090a4:	2208      	movs	r2, #8
 80090a6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80090a8:	4b18      	ldr	r3, [pc, #96]	@ (800910c <USBD_LL_Init+0x88>)
 80090aa:	2202      	movs	r2, #2
 80090ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80090ae:	4b17      	ldr	r3, [pc, #92]	@ (800910c <USBD_LL_Init+0x88>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80090b4:	4b15      	ldr	r3, [pc, #84]	@ (800910c <USBD_LL_Init+0x88>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80090ba:	4b14      	ldr	r3, [pc, #80]	@ (800910c <USBD_LL_Init+0x88>)
 80090bc:	2200      	movs	r2, #0
 80090be:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80090c0:	4812      	ldr	r0, [pc, #72]	@ (800910c <USBD_LL_Init+0x88>)
 80090c2:	f7f8 ffa8 	bl	8002016 <HAL_PCD_Init>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80090cc:	f7f7 fe63 	bl	8000d96 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090d6:	2318      	movs	r3, #24
 80090d8:	2200      	movs	r2, #0
 80090da:	2100      	movs	r1, #0
 80090dc:	f7fa fca2 	bl	8003a24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090e6:	2358      	movs	r3, #88	@ 0x58
 80090e8:	2200      	movs	r2, #0
 80090ea:	2180      	movs	r1, #128	@ 0x80
 80090ec:	f7fa fc9a 	bl	8003a24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090fa:	2200      	movs	r2, #0
 80090fc:	2181      	movs	r1, #129	@ 0x81
 80090fe:	f7fa fc91 	bl	8003a24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20001344 	.word	0x20001344
 8009110:	40005c00 	.word	0x40005c00

08009114 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800912a:	4618      	mov	r0, r3
 800912c:	f7f9 f869 	bl	8002202 <HAL_PCD_Start>
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	4618      	mov	r0, r3
 8009138:	f000 f93a 	bl	80093b0 <USBD_Get_USB_Status>
 800913c:	4603      	mov	r3, r0
 800913e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009140:	7bbb      	ldrb	r3, [r7, #14]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	4608      	mov	r0, r1
 8009154:	4611      	mov	r1, r2
 8009156:	461a      	mov	r2, r3
 8009158:	4603      	mov	r3, r0
 800915a:	70fb      	strb	r3, [r7, #3]
 800915c:	460b      	mov	r3, r1
 800915e:	70bb      	strb	r3, [r7, #2]
 8009160:	4613      	mov	r3, r2
 8009162:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009172:	78bb      	ldrb	r3, [r7, #2]
 8009174:	883a      	ldrh	r2, [r7, #0]
 8009176:	78f9      	ldrb	r1, [r7, #3]
 8009178:	f7f9 f9bd 	bl	80024f6 <HAL_PCD_EP_Open>
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 f914 	bl	80093b0 <USBD_Get_USB_Status>
 8009188:	4603      	mov	r3, r0
 800918a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800918c:	7bbb      	ldrb	r3, [r7, #14]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	460b      	mov	r3, r1
 80091a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091b0:	78fa      	ldrb	r2, [r7, #3]
 80091b2:	4611      	mov	r1, r2
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7f9 f9fb 	bl	80025b0 <HAL_PCD_EP_Close>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 f8f5 	bl	80093b0 <USBD_Get_USB_Status>
 80091c6:	4603      	mov	r3, r0
 80091c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091ee:	78fa      	ldrb	r2, [r7, #3]
 80091f0:	4611      	mov	r1, r2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7f9 fa8c 	bl	8002710 <HAL_PCD_EP_SetStall>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 f8d6 	bl	80093b0 <USBD_Get_USB_Status>
 8009204:	4603      	mov	r3, r0
 8009206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009208:	7bbb      	ldrb	r3, [r7, #14]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	460b      	mov	r3, r1
 800921c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	4611      	mov	r1, r2
 8009230:	4618      	mov	r0, r3
 8009232:	f7f9 facd 	bl	80027d0 <HAL_PCD_EP_ClrStall>
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	4618      	mov	r0, r3
 800923e:	f000 f8b7 	bl	80093b0 <USBD_Get_USB_Status>
 8009242:	4603      	mov	r3, r0
 8009244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009246:	7bbb      	ldrb	r3, [r7, #14]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009262:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009268:	2b00      	cmp	r3, #0
 800926a:	da0b      	bge.n	8009284 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009272:	68f9      	ldr	r1, [r7, #12]
 8009274:	4613      	mov	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	440b      	add	r3, r1
 800927e:	3312      	adds	r3, #18
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	e00b      	b.n	800929c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	4613      	mov	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	440b      	add	r3, r1
 8009296:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800929a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bc80      	pop	{r7}
 80092a4:	4770      	bx	lr

080092a6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092c0:	78fa      	ldrb	r2, [r7, #3]
 80092c2:	4611      	mov	r1, r2
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f9 f8f2 	bl	80024ae <HAL_PCD_SetAddress>
 80092ca:	4603      	mov	r3, r0
 80092cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 f86d 	bl	80093b0 <USBD_Get_USB_Status>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092da:	7bbb      	ldrb	r3, [r7, #14]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	607a      	str	r2, [r7, #4]
 80092ee:	461a      	mov	r2, r3
 80092f0:	460b      	mov	r3, r1
 80092f2:	72fb      	strb	r3, [r7, #11]
 80092f4:	4613      	mov	r3, r2
 80092f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009306:	893b      	ldrh	r3, [r7, #8]
 8009308:	7af9      	ldrb	r1, [r7, #11]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	f7f9 f9c9 	bl	80026a2 <HAL_PCD_EP_Transmit>
 8009310:	4603      	mov	r3, r0
 8009312:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	4618      	mov	r0, r3
 8009318:	f000 f84a 	bl	80093b0 <USBD_Get_USB_Status>
 800931c:	4603      	mov	r3, r0
 800931e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009320:	7dbb      	ldrb	r3, [r7, #22]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b086      	sub	sp, #24
 800932e:	af00      	add	r7, sp, #0
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	461a      	mov	r2, r3
 8009336:	460b      	mov	r3, r1
 8009338:	72fb      	strb	r3, [r7, #11]
 800933a:	4613      	mov	r3, r2
 800933c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800934c:	893b      	ldrh	r3, [r7, #8]
 800934e:	7af9      	ldrb	r1, [r7, #11]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	f7f9 f975 	bl	8002640 <HAL_PCD_EP_Receive>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	4618      	mov	r0, r3
 800935e:	f000 f827 	bl	80093b0 <USBD_Get_USB_Status>
 8009362:	4603      	mov	r3, r0
 8009364:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009366:	7dbb      	ldrb	r3, [r7, #22]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009378:	4b02      	ldr	r3, [pc, #8]	@ (8009384 <USBD_static_malloc+0x14>)
}
 800937a:	4618      	mov	r0, r3
 800937c:	370c      	adds	r7, #12
 800937e:	46bd      	mov	sp, r7
 8009380:	bc80      	pop	{r7}
 8009382:	4770      	bx	lr
 8009384:	2000161c 	.word	0x2000161c

08009388 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]

}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	bc80      	pop	{r7}
 8009398:	4770      	bx	lr

0800939a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bc80      	pop	{r7}
 80093ae:	4770      	bx	lr

080093b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093be:	79fb      	ldrb	r3, [r7, #7]
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d817      	bhi.n	80093f4 <USBD_Get_USB_Status+0x44>
 80093c4:	a201      	add	r2, pc, #4	@ (adr r2, 80093cc <USBD_Get_USB_Status+0x1c>)
 80093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ca:	bf00      	nop
 80093cc:	080093dd 	.word	0x080093dd
 80093d0:	080093e3 	.word	0x080093e3
 80093d4:	080093e9 	.word	0x080093e9
 80093d8:	080093ef 	.word	0x080093ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]
    break;
 80093e0:	e00b      	b.n	80093fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093e2:	2302      	movs	r3, #2
 80093e4:	73fb      	strb	r3, [r7, #15]
    break;
 80093e6:	e008      	b.n	80093fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093e8:	2301      	movs	r3, #1
 80093ea:	73fb      	strb	r3, [r7, #15]
    break;
 80093ec:	e005      	b.n	80093fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093ee:	2302      	movs	r3, #2
 80093f0:	73fb      	strb	r3, [r7, #15]
    break;
 80093f2:	e002      	b.n	80093fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093f4:	2302      	movs	r3, #2
 80093f6:	73fb      	strb	r3, [r7, #15]
    break;
 80093f8:	bf00      	nop
  }
  return usb_status;
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop

08009408 <memset>:
 8009408:	4603      	mov	r3, r0
 800940a:	4402      	add	r2, r0
 800940c:	4293      	cmp	r3, r2
 800940e:	d100      	bne.n	8009412 <memset+0xa>
 8009410:	4770      	bx	lr
 8009412:	f803 1b01 	strb.w	r1, [r3], #1
 8009416:	e7f9      	b.n	800940c <memset+0x4>

08009418 <__errno>:
 8009418:	4b01      	ldr	r3, [pc, #4]	@ (8009420 <__errno+0x8>)
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	20000190 	.word	0x20000190

08009424 <__libc_init_array>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	2600      	movs	r6, #0
 8009428:	4d0c      	ldr	r5, [pc, #48]	@ (800945c <__libc_init_array+0x38>)
 800942a:	4c0d      	ldr	r4, [pc, #52]	@ (8009460 <__libc_init_array+0x3c>)
 800942c:	1b64      	subs	r4, r4, r5
 800942e:	10a4      	asrs	r4, r4, #2
 8009430:	42a6      	cmp	r6, r4
 8009432:	d109      	bne.n	8009448 <__libc_init_array+0x24>
 8009434:	f000 f914 	bl	8009660 <_init>
 8009438:	2600      	movs	r6, #0
 800943a:	4d0a      	ldr	r5, [pc, #40]	@ (8009464 <__libc_init_array+0x40>)
 800943c:	4c0a      	ldr	r4, [pc, #40]	@ (8009468 <__libc_init_array+0x44>)
 800943e:	1b64      	subs	r4, r4, r5
 8009440:	10a4      	asrs	r4, r4, #2
 8009442:	42a6      	cmp	r6, r4
 8009444:	d105      	bne.n	8009452 <__libc_init_array+0x2e>
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	f855 3b04 	ldr.w	r3, [r5], #4
 800944c:	4798      	blx	r3
 800944e:	3601      	adds	r6, #1
 8009450:	e7ee      	b.n	8009430 <__libc_init_array+0xc>
 8009452:	f855 3b04 	ldr.w	r3, [r5], #4
 8009456:	4798      	blx	r3
 8009458:	3601      	adds	r6, #1
 800945a:	e7f2      	b.n	8009442 <__libc_init_array+0x1e>
 800945c:	080096f8 	.word	0x080096f8
 8009460:	080096f8 	.word	0x080096f8
 8009464:	080096f8 	.word	0x080096f8
 8009468:	080096fc 	.word	0x080096fc

0800946c <sqrt>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	4606      	mov	r6, r0
 8009470:	460f      	mov	r7, r1
 8009472:	f000 f81f 	bl	80094b4 <__ieee754_sqrt>
 8009476:	4632      	mov	r2, r6
 8009478:	4604      	mov	r4, r0
 800947a:	460d      	mov	r5, r1
 800947c:	463b      	mov	r3, r7
 800947e:	4630      	mov	r0, r6
 8009480:	4639      	mov	r1, r7
 8009482:	f7f7 fab9 	bl	80009f8 <__aeabi_dcmpun>
 8009486:	b990      	cbnz	r0, 80094ae <sqrt+0x42>
 8009488:	2200      	movs	r2, #0
 800948a:	2300      	movs	r3, #0
 800948c:	4630      	mov	r0, r6
 800948e:	4639      	mov	r1, r7
 8009490:	f7f7 fa8a 	bl	80009a8 <__aeabi_dcmplt>
 8009494:	b158      	cbz	r0, 80094ae <sqrt+0x42>
 8009496:	f7ff ffbf 	bl	8009418 <__errno>
 800949a:	2321      	movs	r3, #33	@ 0x21
 800949c:	2200      	movs	r2, #0
 800949e:	6003      	str	r3, [r0, #0]
 80094a0:	2300      	movs	r3, #0
 80094a2:	4610      	mov	r0, r2
 80094a4:	4619      	mov	r1, r3
 80094a6:	f7f7 f937 	bl	8000718 <__aeabi_ddiv>
 80094aa:	4604      	mov	r4, r0
 80094ac:	460d      	mov	r5, r1
 80094ae:	4620      	mov	r0, r4
 80094b0:	4629      	mov	r1, r5
 80094b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094b4 <__ieee754_sqrt>:
 80094b4:	4a67      	ldr	r2, [pc, #412]	@ (8009654 <__ieee754_sqrt+0x1a0>)
 80094b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ba:	438a      	bics	r2, r1
 80094bc:	4606      	mov	r6, r0
 80094be:	460f      	mov	r7, r1
 80094c0:	460b      	mov	r3, r1
 80094c2:	4604      	mov	r4, r0
 80094c4:	d10e      	bne.n	80094e4 <__ieee754_sqrt+0x30>
 80094c6:	4602      	mov	r2, r0
 80094c8:	f7f6 fffc 	bl	80004c4 <__aeabi_dmul>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4630      	mov	r0, r6
 80094d2:	4639      	mov	r1, r7
 80094d4:	f7f6 fe40 	bl	8000158 <__adddf3>
 80094d8:	4606      	mov	r6, r0
 80094da:	460f      	mov	r7, r1
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e4:	2900      	cmp	r1, #0
 80094e6:	dc0c      	bgt.n	8009502 <__ieee754_sqrt+0x4e>
 80094e8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80094ec:	4302      	orrs	r2, r0
 80094ee:	d0f5      	beq.n	80094dc <__ieee754_sqrt+0x28>
 80094f0:	b189      	cbz	r1, 8009516 <__ieee754_sqrt+0x62>
 80094f2:	4602      	mov	r2, r0
 80094f4:	f7f6 fe2e 	bl	8000154 <__aeabi_dsub>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	f7f7 f90c 	bl	8000718 <__aeabi_ddiv>
 8009500:	e7ea      	b.n	80094d8 <__ieee754_sqrt+0x24>
 8009502:	150a      	asrs	r2, r1, #20
 8009504:	d115      	bne.n	8009532 <__ieee754_sqrt+0x7e>
 8009506:	2100      	movs	r1, #0
 8009508:	e009      	b.n	800951e <__ieee754_sqrt+0x6a>
 800950a:	0ae3      	lsrs	r3, r4, #11
 800950c:	3a15      	subs	r2, #21
 800950e:	0564      	lsls	r4, r4, #21
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0fa      	beq.n	800950a <__ieee754_sqrt+0x56>
 8009514:	e7f7      	b.n	8009506 <__ieee754_sqrt+0x52>
 8009516:	460a      	mov	r2, r1
 8009518:	e7fa      	b.n	8009510 <__ieee754_sqrt+0x5c>
 800951a:	005b      	lsls	r3, r3, #1
 800951c:	3101      	adds	r1, #1
 800951e:	02d8      	lsls	r0, r3, #11
 8009520:	d5fb      	bpl.n	800951a <__ieee754_sqrt+0x66>
 8009522:	1e48      	subs	r0, r1, #1
 8009524:	1a12      	subs	r2, r2, r0
 8009526:	f1c1 0020 	rsb	r0, r1, #32
 800952a:	fa24 f000 	lsr.w	r0, r4, r0
 800952e:	4303      	orrs	r3, r0
 8009530:	408c      	lsls	r4, r1
 8009532:	2600      	movs	r6, #0
 8009534:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009538:	2116      	movs	r1, #22
 800953a:	07d2      	lsls	r2, r2, #31
 800953c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009540:	4632      	mov	r2, r6
 8009542:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800954a:	bf5c      	itt	pl
 800954c:	005b      	lslpl	r3, r3, #1
 800954e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009552:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009556:	bf58      	it	pl
 8009558:	0064      	lslpl	r4, r4, #1
 800955a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800955e:	107f      	asrs	r7, r7, #1
 8009560:	0064      	lsls	r4, r4, #1
 8009562:	1815      	adds	r5, r2, r0
 8009564:	429d      	cmp	r5, r3
 8009566:	bfde      	ittt	le
 8009568:	182a      	addle	r2, r5, r0
 800956a:	1b5b      	suble	r3, r3, r5
 800956c:	1836      	addle	r6, r6, r0
 800956e:	0fe5      	lsrs	r5, r4, #31
 8009570:	3901      	subs	r1, #1
 8009572:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009576:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800957a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800957e:	d1f0      	bne.n	8009562 <__ieee754_sqrt+0xae>
 8009580:	460d      	mov	r5, r1
 8009582:	f04f 0a20 	mov.w	sl, #32
 8009586:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800958a:	429a      	cmp	r2, r3
 800958c:	eb01 0c00 	add.w	ip, r1, r0
 8009590:	db02      	blt.n	8009598 <__ieee754_sqrt+0xe4>
 8009592:	d113      	bne.n	80095bc <__ieee754_sqrt+0x108>
 8009594:	45a4      	cmp	ip, r4
 8009596:	d811      	bhi.n	80095bc <__ieee754_sqrt+0x108>
 8009598:	f1bc 0f00 	cmp.w	ip, #0
 800959c:	eb0c 0100 	add.w	r1, ip, r0
 80095a0:	da42      	bge.n	8009628 <__ieee754_sqrt+0x174>
 80095a2:	2900      	cmp	r1, #0
 80095a4:	db40      	blt.n	8009628 <__ieee754_sqrt+0x174>
 80095a6:	f102 0e01 	add.w	lr, r2, #1
 80095aa:	1a9b      	subs	r3, r3, r2
 80095ac:	4672      	mov	r2, lr
 80095ae:	45a4      	cmp	ip, r4
 80095b0:	bf88      	it	hi
 80095b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80095b6:	eba4 040c 	sub.w	r4, r4, ip
 80095ba:	4405      	add	r5, r0
 80095bc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80095c0:	f1ba 0a01 	subs.w	sl, sl, #1
 80095c4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80095c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80095cc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80095d0:	d1db      	bne.n	800958a <__ieee754_sqrt+0xd6>
 80095d2:	431c      	orrs	r4, r3
 80095d4:	d01a      	beq.n	800960c <__ieee754_sqrt+0x158>
 80095d6:	4c20      	ldr	r4, [pc, #128]	@ (8009658 <__ieee754_sqrt+0x1a4>)
 80095d8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800965c <__ieee754_sqrt+0x1a8>
 80095dc:	e9d4 0100 	ldrd	r0, r1, [r4]
 80095e0:	e9db 2300 	ldrd	r2, r3, [fp]
 80095e4:	f7f6 fdb6 	bl	8000154 <__aeabi_dsub>
 80095e8:	e9d4 8900 	ldrd	r8, r9, [r4]
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4640      	mov	r0, r8
 80095f2:	4649      	mov	r1, r9
 80095f4:	f7f7 f9e2 	bl	80009bc <__aeabi_dcmple>
 80095f8:	b140      	cbz	r0, 800960c <__ieee754_sqrt+0x158>
 80095fa:	e9d4 0100 	ldrd	r0, r1, [r4]
 80095fe:	e9db 2300 	ldrd	r2, r3, [fp]
 8009602:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009606:	d111      	bne.n	800962c <__ieee754_sqrt+0x178>
 8009608:	4655      	mov	r5, sl
 800960a:	3601      	adds	r6, #1
 800960c:	1072      	asrs	r2, r6, #1
 800960e:	086b      	lsrs	r3, r5, #1
 8009610:	07f1      	lsls	r1, r6, #31
 8009612:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009616:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800961a:	bf48      	it	mi
 800961c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009620:	4618      	mov	r0, r3
 8009622:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009626:	e757      	b.n	80094d8 <__ieee754_sqrt+0x24>
 8009628:	4696      	mov	lr, r2
 800962a:	e7be      	b.n	80095aa <__ieee754_sqrt+0xf6>
 800962c:	f7f6 fd94 	bl	8000158 <__adddf3>
 8009630:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4640      	mov	r0, r8
 800963a:	4649      	mov	r1, r9
 800963c:	f7f7 f9b4 	bl	80009a8 <__aeabi_dcmplt>
 8009640:	b120      	cbz	r0, 800964c <__ieee754_sqrt+0x198>
 8009642:	1ca8      	adds	r0, r5, #2
 8009644:	bf08      	it	eq
 8009646:	3601      	addeq	r6, #1
 8009648:	3502      	adds	r5, #2
 800964a:	e7df      	b.n	800960c <__ieee754_sqrt+0x158>
 800964c:	1c6b      	adds	r3, r5, #1
 800964e:	f023 0501 	bic.w	r5, r3, #1
 8009652:	e7db      	b.n	800960c <__ieee754_sqrt+0x158>
 8009654:	7ff00000 	.word	0x7ff00000
 8009658:	200001e8 	.word	0x200001e8
 800965c:	200001e0 	.word	0x200001e0

08009660 <_init>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	bf00      	nop
 8009664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009666:	bc08      	pop	{r3}
 8009668:	469e      	mov	lr, r3
 800966a:	4770      	bx	lr

0800966c <_fini>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	bf00      	nop
 8009670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009672:	bc08      	pop	{r3}
 8009674:	469e      	mov	lr, r3
 8009676:	4770      	bx	lr
