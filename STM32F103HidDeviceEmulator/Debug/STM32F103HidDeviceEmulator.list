
STM32F103HidDeviceEmulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080082d8  080082d8  000092d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008338  08008338  0000a18c  2**0
                  CONTENTS
  4 .ARM          00000000  08008338  08008338  0000a18c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008338  08008338  0000a18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008338  08008338  00009338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800833c  0800833c  0000933c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08008340  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  2000018c  080084cc  0000a18c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  080084cc  0000a9d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a18c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102f5  00000000  00000000  0000a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003257  00000000  00000000  0001a4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0001d708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d3  00000000  00000000  0001e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b0b  00000000  00000000  0001ee0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a7d  00000000  00000000  00038916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000870ae  00000000  00000000  0004d393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003300  00000000  00000000  000d4484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d7784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000018c 	.word	0x2000018c
 8000128:	00000000 	.word	0x00000000
 800012c:	080082c0 	.word	0x080082c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000190 	.word	0x20000190
 8000148:	080082c0 	.word	0x080082c0

0800014c <HAL_UART_RxCpltCallback>:
uint8_t length = 0;
uint8_t parsedData = 0;
uint8_t buffer[32] = {};
uint32_t timer = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t byte = rxcall;
 8000154:	4b29      	ldr	r3, [pc, #164]	@ (80001fc <HAL_UART_RxCpltCallback+0xb0>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	73fb      	strb	r3, [r7, #15]
	if((HAL_GetTick()-timer) > 2){
 800015a:	f000 fb2f 	bl	80007bc <HAL_GetTick>
 800015e:	4602      	mov	r2, r0
 8000160:	4b27      	ldr	r3, [pc, #156]	@ (8000200 <HAL_UART_RxCpltCallback+0xb4>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	1ad3      	subs	r3, r2, r3
 8000166:	2b02      	cmp	r3, #2
 8000168:	d905      	bls.n	8000176 <HAL_UART_RxCpltCallback+0x2a>
		length = 0;
 800016a:	4b26      	ldr	r3, [pc, #152]	@ (8000204 <HAL_UART_RxCpltCallback+0xb8>)
 800016c:	2200      	movs	r2, #0
 800016e:	701a      	strb	r2, [r3, #0]
		parsedData = 0;
 8000170:	4b25      	ldr	r3, [pc, #148]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 8000172:	2200      	movs	r2, #0
 8000174:	701a      	strb	r2, [r3, #0]
	}
	if(byte == HEADER || parsedData > 0){
 8000176:	7bfb      	ldrb	r3, [r7, #15]
 8000178:	2bc5      	cmp	r3, #197	@ 0xc5
 800017a:	d003      	beq.n	8000184 <HAL_UART_RxCpltCallback+0x38>
 800017c:	4b22      	ldr	r3, [pc, #136]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d02d      	beq.n	80001e0 <HAL_UART_RxCpltCallback+0x94>
		buffer[parsedData] = byte;
 8000184:	4b20      	ldr	r3, [pc, #128]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	4a20      	ldr	r2, [pc, #128]	@ (800020c <HAL_UART_RxCpltCallback+0xc0>)
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	5453      	strb	r3, [r2, r1]
		if(parsedData == 3)
 8000190:	4b1d      	ldr	r3, [pc, #116]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b03      	cmp	r3, #3
 8000196:	d102      	bne.n	800019e <HAL_UART_RxCpltCallback+0x52>
			length = byte;
 8000198:	4a1a      	ldr	r2, [pc, #104]	@ (8000204 <HAL_UART_RxCpltCallback+0xb8>)
 800019a:	7bfb      	ldrb	r3, [r7, #15]
 800019c:	7013      	strb	r3, [r2, #0]
		if(parsedData >= length+4){
 800019e:	4b19      	ldr	r3, [pc, #100]	@ (8000204 <HAL_UART_RxCpltCallback+0xb8>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	3303      	adds	r3, #3
 80001a4:	4a18      	ldr	r2, [pc, #96]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 80001a6:	7812      	ldrb	r2, [r2, #0]
 80001a8:	4293      	cmp	r3, r2
 80001aa:	da13      	bge.n	80001d4 <HAL_UART_RxCpltCallback+0x88>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001b0:	4817      	ldr	r0, [pc, #92]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 80001b2:	f000 fe69 	bl	8000e88 <HAL_GPIO_TogglePin>
			ParsingData(buffer, parsedData+1);
 80001b6:	4b14      	ldr	r3, [pc, #80]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	3301      	adds	r3, #1
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	4619      	mov	r1, r3
 80001c0:	4812      	ldr	r0, [pc, #72]	@ (800020c <HAL_UART_RxCpltCallback+0xc0>)
 80001c2:	f000 f885 	bl	80002d0 <ParsingData>
			length = 0;
 80001c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000204 <HAL_UART_RxCpltCallback+0xb8>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	701a      	strb	r2, [r3, #0]
			parsedData = 0;
 80001cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	701a      	strb	r2, [r3, #0]
 80001d2:	e005      	b.n	80001e0 <HAL_UART_RxCpltCallback+0x94>
		}else
			parsedData++;
 80001d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	3301      	adds	r3, #1
 80001da:	b2da      	uxtb	r2, r3
 80001dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 80001de:	701a      	strb	r2, [r3, #0]
	}
	timer = HAL_GetTick();
 80001e0:	f000 faec 	bl	80007bc <HAL_GetTick>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4a06      	ldr	r2, [pc, #24]	@ (8000200 <HAL_UART_RxCpltCallback+0xb4>)
 80001e8:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart,&rxcall,1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	4903      	ldr	r1, [pc, #12]	@ (80001fc <HAL_UART_RxCpltCallback+0xb0>)
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f003 f94d 	bl	800348e <HAL_UART_Receive_IT>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200001d0 	.word	0x200001d0
 8000200:	200001cc 	.word	0x200001cc
 8000204:	200001a8 	.word	0x200001a8
 8000208:	200001a9 	.word	0x200001a9
 800020c:	200001ac 	.word	0x200001ac
 8000210:	40011000 	.word	0x40011000

08000214 <crc8>:
#ifndef INC_CRC8_H_
#define INC_CRC8_H_

#include "main.h"

uint8_t crc8(uint8_t *buffer, uint8_t size) {
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < size; i++) {
 8000224:	2300      	movs	r3, #0
 8000226:	73bb      	strb	r3, [r7, #14]
 8000228:	e027      	b.n	800027a <crc8+0x66>
		uint8_t data = buffer[i];
 800022a:	7bbb      	ldrb	r3, [r7, #14]
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	4413      	add	r3, r2
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8000234:	2308      	movs	r3, #8
 8000236:	60bb      	str	r3, [r7, #8]
 8000238:	e019      	b.n	800026e <crc8+0x5a>
		crc = ((crc ^ data) & 1) ? (crc >> 1) ^ 0x8C : (crc >> 1);
 800023a:	7bfa      	ldrb	r2, [r7, #15]
 800023c:	7b7b      	ldrb	r3, [r7, #13]
 800023e:	4053      	eors	r3, r2
 8000240:	b2db      	uxtb	r3, r3
 8000242:	f003 0301 	and.w	r3, r3, #1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d007      	beq.n	800025a <crc8+0x46>
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	085b      	lsrs	r3, r3, #1
 800024e:	b2db      	uxtb	r3, r3
 8000250:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8000254:	43db      	mvns	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	e002      	b.n	8000260 <crc8+0x4c>
 800025a:	7bfb      	ldrb	r3, [r7, #15]
 800025c:	085b      	lsrs	r3, r3, #1
 800025e:	b2db      	uxtb	r3, r3
 8000260:	73fb      	strb	r3, [r7, #15]
		data >>= 1;
 8000262:	7b7b      	ldrb	r3, [r7, #13]
 8000264:	085b      	lsrs	r3, r3, #1
 8000266:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	3b01      	subs	r3, #1
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	2b00      	cmp	r3, #0
 8000272:	dce2      	bgt.n	800023a <crc8+0x26>
	for (uint8_t i = 0; i < size; i++) {
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	3301      	adds	r3, #1
 8000278:	73bb      	strb	r3, [r7, #14]
 800027a:	7bba      	ldrb	r2, [r7, #14]
 800027c:	78fb      	ldrb	r3, [r7, #3]
 800027e:	429a      	cmp	r2, r3
 8000280:	d3d3      	bcc.n	800022a <crc8+0x16>
		}
	}
	return crc;
 8000282:	7bfb      	ldrb	r3, [r7, #15]
}
 8000284:	4618      	mov	r0, r3
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
	...

08000290 <answer>:
#include "UsartController.h"
#include "crc8.h"

extern UART_HandleTypeDef huart3;

void answer(uint8_t data){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[3] = {HEADER, data, 0};
 800029a:	23c5      	movs	r3, #197	@ 0xc5
 800029c:	733b      	strb	r3, [r7, #12]
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	737b      	strb	r3, [r7, #13]
 80002a2:	2300      	movs	r3, #0
 80002a4:	73bb      	strb	r3, [r7, #14]
	data_out[2] = crc8(data_out, 2);
 80002a6:	f107 030c 	add.w	r3, r7, #12
 80002aa:	2102      	movs	r1, #2
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ffb1 	bl	8000214 <crc8>
 80002b2:	4603      	mov	r3, r0
 80002b4:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, data_out, 3, 100);
 80002b6:	f107 010c 	add.w	r1, r7, #12
 80002ba:	2364      	movs	r3, #100	@ 0x64
 80002bc:	2203      	movs	r2, #3
 80002be:	4803      	ldr	r0, [pc, #12]	@ (80002cc <answer+0x3c>)
 80002c0:	f003 f85a 	bl	8003378 <HAL_UART_Transmit>
}
 80002c4:	bf00      	nop
 80002c6:	3710      	adds	r7, #16
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	200001d4 	.word	0x200001d4

080002d0 <ParsingData>:

#include "UsartRouter.h"
#include "crc8.h"
#include "UsartAnswerModule.h"

void ParsingData(uint8_t *buffer, uint8_t len){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	70fb      	strb	r3, [r7, #3]
	if(buffer[0] == HEADER){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2bc5      	cmp	r3, #197	@ 0xc5
 80002e2:	d121      	bne.n	8000328 <ParsingData+0x58>
		if(buffer[3]+5 == len){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3303      	adds	r3, #3
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	1d5a      	adds	r2, r3, #5
 80002ec:	78fb      	ldrb	r3, [r7, #3]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d11a      	bne.n	8000328 <ParsingData+0x58>
			if(crc8(buffer, buffer[3]+4) == buffer[buffer[3]+4]){
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3303      	adds	r3, #3
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	3304      	adds	r3, #4
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	4619      	mov	r1, r3
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f7ff ff88 	bl	8000214 <crc8>
 8000304:	4603      	mov	r3, r0
 8000306:	4619      	mov	r1, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	3303      	adds	r3, #3
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	3304      	adds	r3, #4
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4413      	add	r3, r2
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4299      	cmp	r1, r3
 8000318:	d103      	bne.n	8000322 <ParsingData+0x52>
				answer(USART_OK);
 800031a:	2001      	movs	r0, #1
 800031c:	f7ff ffb8 	bl	8000290 <answer>
			}else
				answer(USART_ERROR);
		}
	}
}
 8000320:	e002      	b.n	8000328 <ParsingData+0x58>
				answer(USART_ERROR);
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffb4 	bl	8000290 <answer>
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000344:	4b24      	ldr	r3, [pc, #144]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a23      	ldr	r2, [pc, #140]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b21      	ldr	r3, [pc, #132]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0310 	and.w	r3, r3, #16
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800035c:	4b1e      	ldr	r3, [pc, #120]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a1d      	ldr	r2, [pc, #116]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 8000362:	f043 0320 	orr.w	r3, r3, #32
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b1b      	ldr	r3, [pc, #108]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0320 	and.w	r3, r3, #32
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000374:	4b18      	ldr	r3, [pc, #96]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a17      	ldr	r2, [pc, #92]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0304 	and.w	r3, r3, #4
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038c:	4b12      	ldr	r3, [pc, #72]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a11      	ldr	r2, [pc, #68]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <MX_GPIO_Init+0xa8>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0308 	and.w	r3, r3, #8
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003aa:	480c      	ldr	r0, [pc, #48]	@ (80003dc <MX_GPIO_Init+0xac>)
 80003ac:	f000 fd54 	bl	8000e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2302      	movs	r3, #2
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	4804      	ldr	r0, [pc, #16]	@ (80003dc <MX_GPIO_Init+0xac>)
 80003ca:	f000 fbc1 	bl	8000b50 <HAL_GPIO_Init>

}
 80003ce:	bf00      	nop
 80003d0:	3720      	adds	r7, #32
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40011000 	.word	0x40011000

080003e0 <main>:

void SystemClock_Config(void);
char *user_data = "The application is running\r\n";

int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	HAL_Init();
 80003e4:	f000 f992 	bl	800070c <HAL_Init>
	SystemClock_Config();
 80003e8:	f000 f812 	bl	8000410 <SystemClock_Config>
	MX_GPIO_Init();
 80003ec:	f7ff ffa0 	bl	8000330 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80003f0:	f007 fb82 	bl	8007af8 <MX_USB_DEVICE_Init>
	MX_USART3_UART_Init();
 80003f4:	f000 f8e6 	bl	80005c4 <MX_USART3_UART_Init>

	HAL_UART_Receive_IT(&huart3,&rxcall,1);
 80003f8:	2201      	movs	r2, #1
 80003fa:	4903      	ldr	r1, [pc, #12]	@ (8000408 <main+0x28>)
 80003fc:	4803      	ldr	r0, [pc, #12]	@ (800040c <main+0x2c>)
 80003fe:	f003 f846 	bl	800348e <HAL_UART_Receive_IT>
	while (1)
 8000402:	bf00      	nop
 8000404:	e7fd      	b.n	8000402 <main+0x22>
 8000406:	bf00      	nop
 8000408:	200001d0 	.word	0x200001d0
 800040c:	200001d4 	.word	0x200001d4

08000410 <SystemClock_Config>:
//		HAL_Delay(500);
	}
}

void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b094      	sub	sp, #80	@ 0x50
 8000414:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800041a:	2228      	movs	r2, #40	@ 0x28
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f007 ff22 	bl	8008268 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000440:	2301      	movs	r3, #1
 8000442:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000444:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000448:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	2301      	movs	r3, #1
 8000450:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000452:	2302      	movs	r3, #2
 8000454:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000456:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800045a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800045c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000460:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000462:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000466:	4618      	mov	r0, r3
 8000468:	f002 fa70 	bl	800294c <HAL_RCC_OscConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000472:	f000 f828 	bl	80004c6 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000476:	230f      	movs	r3, #15
 8000478:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047a:	2302      	movs	r3, #2
 800047c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000486:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	2101      	movs	r1, #1
 8000492:	4618      	mov	r0, r3
 8000494:	f002 fcdc 	bl	8002e50 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x92>
	{
		Error_Handler();
 800049e:	f000 f812 	bl	80004c6 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004a2:	2310      	movs	r3, #16
 80004a4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80004aa:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fe5c 	bl	800316c <HAL_RCCEx_PeriphCLKConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0xae>
	{
		Error_Handler();
 80004ba:	f000 f804 	bl	80004c6 <Error_Handler>
	}
}
 80004be:	bf00      	nop
 80004c0:	3750      	adds	r7, #80	@ 0x50
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <Error_Handler>:

void Error_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ca:	b672      	cpsid	i
}
 80004cc:	bf00      	nop
  __disable_irq();
  while (1){}
 80004ce:	bf00      	nop
 80004d0:	e7fd      	b.n	80004ce <Error_Handler+0x8>
	...

080004d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <HAL_MspInit+0x5c>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a14      	ldr	r2, [pc, #80]	@ (8000530 <HAL_MspInit+0x5c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6193      	str	r3, [r2, #24]
 80004e6:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <HAL_MspInit+0x5c>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <HAL_MspInit+0x5c>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <HAL_MspInit+0x5c>)
 80004f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_MspInit+0x5c>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050a:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <HAL_MspInit+0x60>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <HAL_MspInit+0x60>)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40021000 	.word	0x40021000
 8000534:	40010000 	.word	0x40010000

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <NMI_Handler+0x4>

08000540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <HardFault_Handler+0x4>

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <MemManage_Handler+0x4>

08000550 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <BusFault_Handler+0x4>

08000558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <UsageFault_Handler+0x4>

08000560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000588:	f000 f906 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000594:	4802      	ldr	r0, [pc, #8]	@ (80005a0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000596:	f000 fdac 	bl	80010f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200006e8 	.word	0x200006e8

080005a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <USART3_IRQHandler+0x10>)
 80005aa:	f002 ff95 	bl	80034d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200001d4 	.word	0x200001d4

080005b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005c8:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_USART3_UART_Init+0x4c>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	@ (8000614 <MX_USART3_UART_Init+0x50>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <MX_USART3_UART_Init+0x4c>)
 80005d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <MX_USART3_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <MX_USART3_UART_Init+0x4c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <MX_USART3_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <MX_USART3_UART_Init+0x4c>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <MX_USART3_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <MX_USART3_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <MX_USART3_UART_Init+0x4c>)
 80005fc:	f002 fe6c 	bl	80032d8 <HAL_UART_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000606:	f7ff ff5e 	bl	80004c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200001d4 	.word	0x200001d4
 8000614:	40004800 	.word	0x40004800

08000618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a20      	ldr	r2, [pc, #128]	@ (80006b4 <HAL_UART_MspInit+0x9c>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d139      	bne.n	80006ac <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <HAL_UART_MspInit+0xa0>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	4a1e      	ldr	r2, [pc, #120]	@ (80006b8 <HAL_UART_MspInit+0xa0>)
 800063e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000642:	61d3      	str	r3, [r2, #28]
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <HAL_UART_MspInit+0xa0>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <HAL_UART_MspInit+0xa0>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a18      	ldr	r2, [pc, #96]	@ (80006b8 <HAL_UART_MspInit+0xa0>)
 8000656:	f043 0308 	orr.w	r3, r3, #8
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <HAL_UART_MspInit+0xa0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0308 	and.w	r3, r3, #8
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000668:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800066c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	480f      	ldr	r0, [pc, #60]	@ (80006bc <HAL_UART_MspInit+0xa4>)
 800067e:	f000 fa67 	bl	8000b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000682:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4809      	ldr	r0, [pc, #36]	@ (80006bc <HAL_UART_MspInit+0xa4>)
 8000698:	f000 fa5a 	bl	8000b50 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2101      	movs	r1, #1
 80006a0:	2027      	movs	r0, #39	@ 0x27
 80006a2:	f000 f96c 	bl	800097e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80006a6:	2027      	movs	r0, #39	@ 0x27
 80006a8:	f000 f985 	bl	80009b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40004800 	.word	0x40004800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010c00 	.word	0x40010c00

080006c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c0:	f7ff ff7a 	bl	80005b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006c6:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006c8:	4a0c      	ldr	r2, [pc, #48]	@ (80006fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a09      	ldr	r2, [pc, #36]	@ (8000700 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006dc:	4c09      	ldr	r4, [pc, #36]	@ (8000704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ea:	f007 fdc5 	bl	8008278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff fe77 	bl	80003e0 <main>
  bx lr
 80006f2:	4770      	bx	lr
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f8:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80006fc:	08008340 	.word	0x08008340
  ldr r2, =_sbss
 8000700:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8000704:	200009d4 	.word	0x200009d4

08000708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_2_IRQHandler>
	...

0800070c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <HAL_Init+0x28>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a07      	ldr	r2, [pc, #28]	@ (8000734 <HAL_Init+0x28>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 f923 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000722:	200f      	movs	r0, #15
 8000724:	f000 f808 	bl	8000738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000728:	f7ff fed4 	bl	80004d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40022000 	.word	0x40022000

08000738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_InitTick+0x54>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <HAL_InitTick+0x58>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f93b 	bl	80009d2 <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e00e      	b.n	8000784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b0f      	cmp	r3, #15
 800076a:	d80a      	bhi.n	8000782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076c:	2200      	movs	r2, #0
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f000 f903 	bl	800097e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000778:	4a06      	ldr	r2, [pc, #24]	@ (8000794 <HAL_InitTick+0x5c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	e000      	b.n	8000784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000000 	.word	0x20000000
 8000790:	20000008 	.word	0x20000008
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HAL_IncTick+0x1c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <HAL_IncTick+0x20>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a03      	ldr	r2, [pc, #12]	@ (80007b8 <HAL_IncTick+0x20>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	20000008 	.word	0x20000008
 80007b8:	2000021c 	.word	0x2000021c

080007bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b02      	ldr	r3, [pc, #8]	@ (80007cc <HAL_GetTick+0x10>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	2000021c 	.word	0x2000021c

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db0b      	blt.n	800085e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 021f 	and.w	r2, r3, #31
 800084c:	4906      	ldr	r1, [pc, #24]	@ (8000868 <__NVIC_EnableIRQ+0x34>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	2001      	movs	r0, #1
 8000856:	fa00 f202 	lsl.w	r2, r0, r2
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	@ (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	@ (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	@ 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	@ 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000934:	d301      	bcc.n	800093a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e00f      	b.n	800095a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <SysTick_Config+0x40>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	210f      	movs	r1, #15
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f7ff ff90 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <SysTick_Config+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000952:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <SysTick_Config+0x40>)
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff2d 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff42 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ff90 	bl	80008c0 <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5f 	bl	800086c <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff35 	bl	8000834 <__NVIC_EnableIRQ>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffa2 	bl	8000924 <SysTick_Config>
 80009e0:	4603      	mov	r3, r0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b085      	sub	sp, #20
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d008      	beq.n	8000a14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2204      	movs	r2, #4
 8000a06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e020      	b.n	8000a56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f022 020e 	bic.w	r2, r2, #14
 8000a22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 0201 	bic.w	r2, r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d005      	beq.n	8000a84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]
 8000a82:	e051      	b.n	8000b28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 020e 	bic.w	r2, r2, #14
 8000a92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f022 0201 	bic.w	r2, r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a22      	ldr	r2, [pc, #136]	@ (8000b34 <HAL_DMA_Abort_IT+0xd4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d029      	beq.n	8000b02 <HAL_DMA_Abort_IT+0xa2>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a21      	ldr	r2, [pc, #132]	@ (8000b38 <HAL_DMA_Abort_IT+0xd8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d022      	beq.n	8000afe <HAL_DMA_Abort_IT+0x9e>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1f      	ldr	r2, [pc, #124]	@ (8000b3c <HAL_DMA_Abort_IT+0xdc>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d01a      	beq.n	8000af8 <HAL_DMA_Abort_IT+0x98>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b40 <HAL_DMA_Abort_IT+0xe0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d012      	beq.n	8000af2 <HAL_DMA_Abort_IT+0x92>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b44 <HAL_DMA_Abort_IT+0xe4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d00a      	beq.n	8000aec <HAL_DMA_Abort_IT+0x8c>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1b      	ldr	r2, [pc, #108]	@ (8000b48 <HAL_DMA_Abort_IT+0xe8>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d102      	bne.n	8000ae6 <HAL_DMA_Abort_IT+0x86>
 8000ae0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ae4:	e00e      	b.n	8000b04 <HAL_DMA_Abort_IT+0xa4>
 8000ae6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000aea:	e00b      	b.n	8000b04 <HAL_DMA_Abort_IT+0xa4>
 8000aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af0:	e008      	b.n	8000b04 <HAL_DMA_Abort_IT+0xa4>
 8000af2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af6:	e005      	b.n	8000b04 <HAL_DMA_Abort_IT+0xa4>
 8000af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000afc:	e002      	b.n	8000b04 <HAL_DMA_Abort_IT+0xa4>
 8000afe:	2310      	movs	r3, #16
 8000b00:	e000      	b.n	8000b04 <HAL_DMA_Abort_IT+0xa4>
 8000b02:	2301      	movs	r3, #1
 8000b04:	4a11      	ldr	r2, [pc, #68]	@ (8000b4c <HAL_DMA_Abort_IT+0xec>)
 8000b06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
    } 
  }
  return status;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40020008 	.word	0x40020008
 8000b38:	4002001c 	.word	0x4002001c
 8000b3c:	40020030 	.word	0x40020030
 8000b40:	40020044 	.word	0x40020044
 8000b44:	40020058 	.word	0x40020058
 8000b48:	4002006c 	.word	0x4002006c
 8000b4c:	40020000 	.word	0x40020000

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b08b      	sub	sp, #44	@ 0x2c
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b62:	e169      	b.n	8000e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b64:	2201      	movs	r2, #1
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f040 8158 	bne.w	8000e32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	4a9a      	ldr	r2, [pc, #616]	@ (8000df0 <HAL_GPIO_Init+0x2a0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d05e      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000b8c:	4a98      	ldr	r2, [pc, #608]	@ (8000df0 <HAL_GPIO_Init+0x2a0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d875      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000b92:	4a98      	ldr	r2, [pc, #608]	@ (8000df4 <HAL_GPIO_Init+0x2a4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d058      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000b98:	4a96      	ldr	r2, [pc, #600]	@ (8000df4 <HAL_GPIO_Init+0x2a4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d86f      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000b9e:	4a96      	ldr	r2, [pc, #600]	@ (8000df8 <HAL_GPIO_Init+0x2a8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d052      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000ba4:	4a94      	ldr	r2, [pc, #592]	@ (8000df8 <HAL_GPIO_Init+0x2a8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d869      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000baa:	4a94      	ldr	r2, [pc, #592]	@ (8000dfc <HAL_GPIO_Init+0x2ac>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d04c      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000bb0:	4a92      	ldr	r2, [pc, #584]	@ (8000dfc <HAL_GPIO_Init+0x2ac>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d863      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bb6:	4a92      	ldr	r2, [pc, #584]	@ (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d046      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000bbc:	4a90      	ldr	r2, [pc, #576]	@ (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d85d      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d82a      	bhi.n	8000c1c <HAL_GPIO_Init+0xcc>
 8000bc6:	2b12      	cmp	r3, #18
 8000bc8:	d859      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bca:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd0 <HAL_GPIO_Init+0x80>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000c4b 	.word	0x08000c4b
 8000bd4:	08000c25 	.word	0x08000c25
 8000bd8:	08000c37 	.word	0x08000c37
 8000bdc:	08000c79 	.word	0x08000c79
 8000be0:	08000c7f 	.word	0x08000c7f
 8000be4:	08000c7f 	.word	0x08000c7f
 8000be8:	08000c7f 	.word	0x08000c7f
 8000bec:	08000c7f 	.word	0x08000c7f
 8000bf0:	08000c7f 	.word	0x08000c7f
 8000bf4:	08000c7f 	.word	0x08000c7f
 8000bf8:	08000c7f 	.word	0x08000c7f
 8000bfc:	08000c7f 	.word	0x08000c7f
 8000c00:	08000c7f 	.word	0x08000c7f
 8000c04:	08000c7f 	.word	0x08000c7f
 8000c08:	08000c7f 	.word	0x08000c7f
 8000c0c:	08000c7f 	.word	0x08000c7f
 8000c10:	08000c7f 	.word	0x08000c7f
 8000c14:	08000c2d 	.word	0x08000c2d
 8000c18:	08000c41 	.word	0x08000c41
 8000c1c:	4a79      	ldr	r2, [pc, #484]	@ (8000e04 <HAL_GPIO_Init+0x2b4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d013      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c22:	e02c      	b.n	8000c7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e029      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	3304      	adds	r3, #4
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e024      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	3308      	adds	r3, #8
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e01f      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	330c      	adds	r3, #12
 8000c46:	623b      	str	r3, [r7, #32]
          break;
 8000c48:	e01a      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c52:	2304      	movs	r3, #4
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e013      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d105      	bne.n	8000c6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c60:	2308      	movs	r3, #8
 8000c62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	611a      	str	r2, [r3, #16]
          break;
 8000c6a:	e009      	b.n	8000c80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	615a      	str	r2, [r3, #20]
          break;
 8000c76:	e003      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e000      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          break;
 8000c7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	2bff      	cmp	r3, #255	@ 0xff
 8000c84:	d801      	bhi.n	8000c8a <HAL_GPIO_Init+0x13a>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	e001      	b.n	8000c8e <HAL_GPIO_Init+0x13e>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2bff      	cmp	r3, #255	@ 0xff
 8000c94:	d802      	bhi.n	8000c9c <HAL_GPIO_Init+0x14c>
 8000c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	e002      	b.n	8000ca2 <HAL_GPIO_Init+0x152>
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9e:	3b08      	subs	r3, #8
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	210f      	movs	r1, #15
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	6a39      	ldr	r1, [r7, #32]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 80b1 	beq.w	8000e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce8:	4a48      	ldr	r2, [pc, #288]	@ (8000e0c <HAL_GPIO_Init+0x2bc>)
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a40      	ldr	r2, [pc, #256]	@ (8000e10 <HAL_GPIO_Init+0x2c0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d013      	beq.n	8000d3c <HAL_GPIO_Init+0x1ec>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3f      	ldr	r2, [pc, #252]	@ (8000e14 <HAL_GPIO_Init+0x2c4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d00d      	beq.n	8000d38 <HAL_GPIO_Init+0x1e8>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e18 <HAL_GPIO_Init+0x2c8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d007      	beq.n	8000d34 <HAL_GPIO_Init+0x1e4>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a3d      	ldr	r2, [pc, #244]	@ (8000e1c <HAL_GPIO_Init+0x2cc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d101      	bne.n	8000d30 <HAL_GPIO_Init+0x1e0>
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e006      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d30:	2304      	movs	r3, #4
 8000d32:	e004      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e002      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d40:	f002 0203 	and.w	r2, r2, #3
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	4093      	lsls	r3, r2
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d4e:	492f      	ldr	r1, [pc, #188]	@ (8000e0c <HAL_GPIO_Init+0x2bc>)
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d006      	beq.n	8000d76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d68:	4b2d      	ldr	r3, [pc, #180]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	492c      	ldr	r1, [pc, #176]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	4928      	ldr	r1, [pc, #160]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d90:	4b23      	ldr	r3, [pc, #140]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	4922      	ldr	r1, [pc, #136]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	60cb      	str	r3, [r1, #12]
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	491e      	ldr	r1, [pc, #120]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db8:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4918      	ldr	r1, [pc, #96]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4914      	ldr	r1, [pc, #80]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d021      	beq.n	8000e24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	490e      	ldr	r1, [pc, #56]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
 8000dec:	e021      	b.n	8000e32 <HAL_GPIO_Init+0x2e2>
 8000dee:	bf00      	nop
 8000df0:	10320000 	.word	0x10320000
 8000df4:	10310000 	.word	0x10310000
 8000df8:	10220000 	.word	0x10220000
 8000dfc:	10210000 	.word	0x10210000
 8000e00:	10120000 	.word	0x10120000
 8000e04:	10110000 	.word	0x10110000
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	40010800 	.word	0x40010800
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40011400 	.word	0x40011400
 8000e20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <HAL_GPIO_Init+0x304>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4909      	ldr	r1, [pc, #36]	@ (8000e54 <HAL_GPIO_Init+0x304>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e34:	3301      	adds	r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f47f ae8e 	bne.w	8000b64 <HAL_GPIO_Init+0x14>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	372c      	adds	r7, #44	@ 0x2c
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40010400 	.word	0x40010400

08000e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
 8000e64:	4613      	mov	r3, r2
 8000e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e68:	787b      	ldrb	r3, [r7, #1]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e74:	e003      	b.n	8000e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	041a      	lsls	r2, r3, #16
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	611a      	str	r2, [r3, #16]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	041a      	lsls	r2, r3, #16
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	43d9      	mvns	r1, r3
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	400b      	ands	r3, r1
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	611a      	str	r2, [r3, #16]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e0e8      	b.n	800109e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d106      	bne.n	8000ee6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f006 ff3d 	bl	8007d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 f87a 	bl	8003ff2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3304      	adds	r3, #4
 8000f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f08:	f003 f850 	bl	8003fac <USB_CoreInit>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d005      	beq.n	8000f1e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2202      	movs	r2, #2
 8000f16:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e0bf      	b.n	800109e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f003 f87e 	bl	8004026 <USB_SetCurrentMode>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2202      	movs	r2, #2
 8000f34:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e0b0      	b.n	800109e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e03e      	b.n	8000fc0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	3311      	adds	r3, #17
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	440b      	add	r3, r1
 8000f64:	3310      	adds	r3, #16
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	440b      	add	r3, r1
 8000f78:	3313      	adds	r3, #19
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3320      	adds	r3, #32
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3324      	adds	r3, #36	@ 0x24
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	791b      	ldrb	r3, [r3, #4]
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d3bb      	bcc.n	8000f42 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e044      	b.n	800105a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fd0:	7bfa      	ldrb	r2, [r7, #15]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	440b      	add	r3, r1
 8000fde:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	440b      	add	r3, r1
 8001020:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	3301      	adds	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	429a      	cmp	r2, r3
 8001062:	d3b5      	bcc.n	8000fd0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3304      	adds	r3, #4
 800106c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106e:	f002 ffe6 	bl	800403e <USB_DevInit>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2202      	movs	r2, #2
 800107c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e00c      	b.n	800109e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f005 fa65 	bl	8006566 <USB_DevDisconnect>

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_PCD_Start+0x16>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e016      	b.n	80010ea <HAL_PCD_Start+0x44>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 ff7c 	bl	8003fc6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80010ce:	2101      	movs	r1, #1
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f007 f892 	bl	80081fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f005 fa39 	bl	8006552 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b088      	sub	sp, #32
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f005 fa3b 	bl	800657a <USB_ReadInterrupts>
 8001104:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fb03 	bl	800171c <PCD_EP_ISR_Handler>

    return;
 8001116:	e119      	b.n	800134c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800111e:	2b00      	cmp	r3, #0
 8001120:	d013      	beq.n	800114a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800112a:	b29a      	uxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001134:	b292      	uxth	r2, r2
 8001136:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f006 fe8b 	bl	8007e56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001140:	2100      	movs	r1, #0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f905 	bl	8001352 <HAL_PCD_SetAddress>

    return;
 8001148:	e100      	b.n	800134c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00c      	beq.n	800116e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001166:	b292      	uxth	r2, r2
 8001168:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800116c:	e0ee      	b.n	800134c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00c      	beq.n	8001192 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001180:	b29a      	uxth	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800118a:	b292      	uxth	r2, r2
 800118c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001190:	e0dc      	b.n	800134c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d027      	beq.n	80011ec <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0204 	bic.w	r2, r2, #4
 80011ae:	b292      	uxth	r2, r2
 80011b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0208 	bic.w	r2, r2, #8
 80011c6:	b292      	uxth	r2, r2
 80011c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f006 fe7b 	bl	8007ec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011e4:	b292      	uxth	r2, r2
 80011e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80011ea:	e0af      	b.n	800134c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8083 	beq.w	80012fe <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	77fb      	strb	r3, [r7, #31]
 80011fc:	e010      	b.n	8001220 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	7ffb      	ldrb	r3, [r7, #31]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	441a      	add	r2, r3
 800120a:	7ffb      	ldrb	r3, [r7, #31]
 800120c:	8812      	ldrh	r2, [r2, #0]
 800120e:	b292      	uxth	r2, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	3320      	adds	r3, #32
 8001214:	443b      	add	r3, r7
 8001216:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800121a:	7ffb      	ldrb	r3, [r7, #31]
 800121c:	3301      	adds	r3, #1
 800121e:	77fb      	strb	r3, [r7, #31]
 8001220:	7ffb      	ldrb	r3, [r7, #31]
 8001222:	2b07      	cmp	r3, #7
 8001224:	d9eb      	bls.n	80011fe <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800122e:	b29a      	uxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	b292      	uxth	r2, r2
 800123a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0201 	bic.w	r2, r2, #1
 8001250:	b292      	uxth	r2, r2
 8001252:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001256:	bf00      	nop
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001260:	b29b      	uxth	r3, r3
 8001262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f6      	beq.n	8001258 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800127c:	b292      	uxth	r2, r2
 800127e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	77fb      	strb	r3, [r7, #31]
 8001286:	e00f      	b.n	80012a8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001288:	7ffb      	ldrb	r3, [r7, #31]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	4611      	mov	r1, r2
 8001290:	7ffa      	ldrb	r2, [r7, #31]
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	440a      	add	r2, r1
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	3320      	adds	r3, #32
 800129a:	443b      	add	r3, r7
 800129c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80012a0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	3301      	adds	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	7ffb      	ldrb	r3, [r7, #31]
 80012aa:	2b07      	cmp	r3, #7
 80012ac:	d9ec      	bls.n	8001288 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0208 	orr.w	r2, r2, #8
 80012c0:	b292      	uxth	r2, r2
 80012c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012d8:	b292      	uxth	r2, r2
 80012da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0204 	orr.w	r2, r2, #4
 80012f0:	b292      	uxth	r2, r2
 80012f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f006 fdcc 	bl	8007e94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80012fc:	e026      	b.n	800134c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00f      	beq.n	8001328 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001310:	b29a      	uxth	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800131a:	b292      	uxth	r2, r2
 800131c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f006 fd8a 	bl	8007e3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001326:	e011      	b.n	800134c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00c      	beq.n	800134c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001344:	b292      	uxth	r2, r2
 8001346:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800134a:	bf00      	nop
  }
}
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_PCD_SetAddress+0x1a>
 8001368:	2302      	movs	r3, #2
 800136a:	e012      	b.n	8001392 <HAL_PCD_SetAddress+0x40>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	78fa      	ldrb	r2, [r7, #3]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f005 f8d2 	bl	800652c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	4608      	mov	r0, r1
 80013a4:	4611      	mov	r1, r2
 80013a6:	461a      	mov	r2, r3
 80013a8:	4603      	mov	r3, r0
 80013aa:	70fb      	strb	r3, [r7, #3]
 80013ac:	460b      	mov	r3, r1
 80013ae:	803b      	strh	r3, [r7, #0]
 80013b0:	4613      	mov	r3, r2
 80013b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da0e      	bge.n	80013de <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	f003 0207 	and.w	r2, r3, #7
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	3310      	adds	r3, #16
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	705a      	strb	r2, [r3, #1]
 80013dc:	e00e      	b.n	80013fc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	f003 0207 	and.w	r2, r3, #7
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	b2da      	uxtb	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001408:	883a      	ldrh	r2, [r7, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	78ba      	ldrb	r2, [r7, #2]
 8001412:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001414:	78bb      	ldrb	r3, [r7, #2]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d102      	bne.n	8001420 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_PCD_EP_Open+0x94>
 800142a:	2302      	movs	r3, #2
 800142c:	e00e      	b.n	800144c <HAL_PCD_EP_Open+0xb2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68f9      	ldr	r1, [r7, #12]
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fe1b 	bl	8004078 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800144a:	7afb      	ldrb	r3, [r7, #11]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001464:	2b00      	cmp	r3, #0
 8001466:	da0e      	bge.n	8001486 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	f003 0207 	and.w	r2, r3, #7
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	3310      	adds	r3, #16
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2201      	movs	r2, #1
 8001482:	705a      	strb	r2, [r3, #1]
 8001484:	e00e      	b.n	80014a4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	f003 0207 	and.w	r2, r3, #7
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <HAL_PCD_EP_Close+0x6a>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e00e      	b.n	80014dc <HAL_PCD_EP_Close+0x88>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68f9      	ldr	r1, [r7, #12]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 f993 	bl	80047f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	460b      	mov	r3, r1
 80014f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	f003 0207 	and.w	r2, r3, #7
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4413      	add	r3, r2
 800150a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2200      	movs	r2, #0
 8001522:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001524:	7afb      	ldrb	r3, [r7, #11]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	b2da      	uxtb	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6979      	ldr	r1, [r7, #20]
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fb4a 	bl	8004bd0 <USB_EPStartXfer>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	460b      	mov	r3, r1
 8001554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	f003 0207 	and.w	r2, r3, #7
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	3310      	adds	r3, #16
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2201      	movs	r2, #1
 8001590:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001592:	7afb      	ldrb	r3, [r7, #11]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	b2da      	uxtb	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6979      	ldr	r1, [r7, #20]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fb13 	bl	8004bd0 <USB_EPStartXfer>

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	7912      	ldrb	r2, [r2, #4]
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e04c      	b.n	800166c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da0e      	bge.n	80015f8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	f003 0207 	and.w	r2, r3, #7
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	3310      	adds	r3, #16
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2201      	movs	r2, #1
 80015f4:	705a      	strb	r2, [r3, #1]
 80015f6:	e00c      	b.n	8001612 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2201      	movs	r2, #1
 8001616:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	b2da      	uxtb	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_PCD_EP_SetStall+0x7e>
 800162e:	2302      	movs	r3, #2
 8001630:	e01c      	b.n	800166c <HAL_PCD_EP_SetStall+0xb8>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68f9      	ldr	r1, [r7, #12]
 8001640:	4618      	mov	r0, r3
 8001642:	f004 fe76 	bl	8006332 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	2b00      	cmp	r3, #0
 800164e:	d108      	bne.n	8001662 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f004 ff9b 	bl	8006598 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	7912      	ldrb	r2, [r2, #4]
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e040      	b.n	8001714 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001696:	2b00      	cmp	r3, #0
 8001698:	da0e      	bge.n	80016b8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	f003 0207 	and.w	r2, r3, #7
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	3310      	adds	r3, #16
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	705a      	strb	r2, [r3, #1]
 80016b6:	e00e      	b.n	80016d6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	f003 0207 	and.w	r2, r3, #7
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_PCD_EP_ClrStall+0x82>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e00e      	b.n	8001714 <HAL_PCD_EP_ClrStall+0xa0>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68f9      	ldr	r1, [r7, #12]
 8001704:	4618      	mov	r0, r3
 8001706:	f004 fe64 	bl	80063d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b096      	sub	sp, #88	@ 0x58
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001724:	e3bb      	b.n	8001e9e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800172e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001732:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001740:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001744:	2b00      	cmp	r3, #0
 8001746:	f040 8175 	bne.w	8001a34 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800174a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	d14e      	bne.n	80017f4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001766:	81fb      	strh	r3, [r7, #14]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	89fb      	ldrh	r3, [r7, #14]
 800176e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001776:	b29b      	uxth	r3, r3
 8001778:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3310      	adds	r3, #16
 800177e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001788:	b29b      	uxth	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	3302      	adds	r3, #2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	441a      	add	r2, r3
 80017b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017ba:	2100      	movs	r1, #0
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f006 fb22 	bl	8007e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7b5b      	ldrb	r3, [r3, #13]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8368 	beq.w	8001e9e <PCD_EP_ISR_Handler+0x782>
 80017ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 8363 	bne.w	8001e9e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7b5b      	ldrb	r3, [r3, #13]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	735a      	strb	r2, [r3, #13]
 80017f2:	e354      	b.n	8001e9e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017fa:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001806:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800180a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800180e:	2b00      	cmp	r3, #0
 8001810:	d034      	beq.n	800187c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800181a:	b29b      	uxth	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	3306      	adds	r3, #6
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	4413      	add	r3, r2
 8001830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800183a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800184c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001850:	b29b      	uxth	r3, r3
 8001852:	f004 fef1 	bl	8006638 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29a      	uxth	r2, r3
 800185e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001862:	4013      	ands	r3, r2
 8001864:	823b      	strh	r3, [r7, #16]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	8a3a      	ldrh	r2, [r7, #16]
 800186c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001870:	b292      	uxth	r2, r2
 8001872:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f006 fa99 	bl	8007dac <HAL_PCD_SetupStageCallback>
 800187a:	e310      	b.n	8001e9e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800187c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001880:	2b00      	cmp	r3, #0
 8001882:	f280 830c 	bge.w	8001e9e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	b29a      	uxth	r2, r3
 800188e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001892:	4013      	ands	r3, r2
 8001894:	83fb      	strh	r3, [r7, #30]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	8bfa      	ldrh	r2, [r7, #30]
 800189c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018a0:	b292      	uxth	r2, r2
 80018a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	3306      	adds	r3, #6
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d019      	beq.n	800190c <PCD_EP_ISR_Handler+0x1f0>
 80018d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d015      	beq.n	800190c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e6:	6959      	ldr	r1, [r3, #20]
 80018e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f004 fea1 	bl	8006638 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	441a      	add	r2, r3
 8001900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001902:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001904:	2100      	movs	r1, #0
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f006 fa62 	bl	8007dd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001916:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800191a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 82bd 	bne.w	8001e9e <PCD_EP_ISR_Handler+0x782>
 8001924:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001928:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800192c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001930:	f000 82b5 	beq.w	8001e9e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001942:	b29b      	uxth	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4413      	add	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800195e:	b29a      	uxth	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	801a      	strh	r2, [r3, #0]
 8001964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b3e      	cmp	r3, #62	@ 0x3e
 800196a:	d91d      	bls.n	80019a8 <PCD_EP_ISR_Handler+0x28c>
 800196c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	647b      	str	r3, [r7, #68]	@ 0x44
 8001974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <PCD_EP_ISR_Handler+0x26a>
 8001980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001982:	3b01      	subs	r3, #1
 8001984:	647b      	str	r3, [r7, #68]	@ 0x44
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29a      	uxth	r2, r3
 800198c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800198e:	b29b      	uxth	r3, r3
 8001990:	029b      	lsls	r3, r3, #10
 8001992:	b29b      	uxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800199c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	e026      	b.n	80019f6 <PCD_EP_ISR_Handler+0x2da>
 80019a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <PCD_EP_ISR_Handler+0x2aa>
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019be:	b29a      	uxth	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	801a      	strh	r2, [r3, #0]
 80019c4:	e017      	b.n	80019f6 <PCD_EP_ISR_Handler+0x2da>
 80019c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80019ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <PCD_EP_ISR_Handler+0x2c4>
 80019da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019dc:	3301      	adds	r3, #1
 80019de:	647b      	str	r3, [r7, #68]	@ 0x44
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a06:	827b      	strh	r3, [r7, #18]
 8001a08:	8a7b      	ldrh	r3, [r7, #18]
 8001a0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001a0e:	827b      	strh	r3, [r7, #18]
 8001a10:	8a7b      	ldrh	r3, [r7, #18]
 8001a12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001a16:	827b      	strh	r3, [r7, #18]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	8a7b      	ldrh	r3, [r7, #18]
 8001a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	8013      	strh	r3, [r2, #0]
 8001a32:	e234      	b.n	8001e9e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a48:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f280 80fc 	bge.w	8001c4a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a68:	4013      	ands	r3, r2
 8001a6a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001a80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a84:	b292      	uxth	r2, r2
 8001a86:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a88:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa0:	7b1b      	ldrb	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d125      	bne.n	8001af2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3306      	adds	r3, #6
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ace:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001ad2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8092 	beq.w	8001c00 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae2:	6959      	ldr	r1, [r3, #20]
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae6:	88da      	ldrh	r2, [r3, #6]
 8001ae8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001aec:	f004 fda4 	bl	8006638 <USB_ReadPMA>
 8001af0:	e086      	b.n	8001c00 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af4:	78db      	ldrb	r3, [r3, #3]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d10a      	bne.n	8001b10 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001afa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001afe:	461a      	mov	r2, r3
 8001b00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f9d9 	bl	8001eba <HAL_PCD_EP_DB_Receive>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001b0e:	e077      	b.n	8001c00 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b2a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	441a      	add	r2, r3
 8001b3c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d024      	beq.n	8001bb8 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	3302      	adds	r3, #2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b96:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d02e      	beq.n	8001c00 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba8:	6959      	ldr	r1, [r3, #20]
 8001baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bac:	891a      	ldrh	r2, [r3, #8]
 8001bae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bb2:	f004 fd41 	bl	8006638 <USB_ReadPMA>
 8001bb6:	e023      	b.n	8001c00 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3306      	adds	r3, #6
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001be4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf2:	6959      	ldr	r1, [r3, #20]
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf6:	895a      	ldrh	r2, [r3, #10]
 8001bf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bfc:	f004 fd1c 	bl	8006638 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c08:	441a      	add	r2, r3
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c16:	441a      	add	r2, r3
 8001c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <PCD_EP_ISR_Handler+0x514>
 8001c24:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d206      	bcs.n	8001c3e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f006 f8ca 	bl	8007dd0 <HAL_PCD_DataOutStageCallback>
 8001c3c:	e005      	b.n	8001c4a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 ffc3 	bl	8004bd0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8123 	beq.w	8001e9e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c58:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	3310      	adds	r3, #16
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	441a      	add	r2, r3
 8001c98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001caa:	78db      	ldrb	r3, [r3, #3]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	f040 80a2 	bne.w	8001df6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cba:	7b1b      	ldrb	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8093 	beq.w	8001de8 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d046      	beq.n	8001d5c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d126      	bne.n	8001d24 <PCD_EP_ISR_Handler+0x608>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	4413      	add	r3, r2
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	011a      	lsls	r2, r3, #4
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001cfc:	623b      	str	r3, [r7, #32]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	801a      	strh	r2, [r3, #0]
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	e061      	b.n	8001de8 <PCD_EP_ISR_Handler+0x6cc>
 8001d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d15d      	bne.n	8001de8 <PCD_EP_ISR_Handler+0x6cc>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d40:	4413      	add	r3, r2
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	011a      	lsls	r2, r3, #4
 8001d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d56:	2200      	movs	r2, #0
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	e045      	b.n	8001de8 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d64:	785b      	ldrb	r3, [r3, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d126      	bne.n	8001db8 <PCD_EP_ISR_Handler+0x69c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d7e:	4413      	add	r3, r2
 8001d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	011a      	lsls	r2, r3, #4
 8001d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	e017      	b.n	8001de8 <PCD_EP_ISR_Handler+0x6cc>
 8001db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d113      	bne.n	8001de8 <PCD_EP_ISR_Handler+0x6cc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dce:	4413      	add	r3, r2
 8001dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	011a      	lsls	r2, r3, #4
 8001dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dda:	4413      	add	r3, r2
 8001ddc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001de0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001de4:	2200      	movs	r2, #0
 8001de6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f006 f809 	bl	8007e06 <HAL_PCD_DataInStageCallback>
 8001df4:	e053      	b.n	8001e9e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001df6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d146      	bne.n	8001e90 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	3302      	adds	r3, #2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d907      	bls.n	8001e4a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e42:	1ad2      	subs	r2, r2, r3
 8001e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e46:	619a      	str	r2, [r3, #24]
 8001e48:	e002      	b.n	8001e50 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d106      	bne.n	8001e66 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f005 ffd1 	bl	8007e06 <HAL_PCD_DataInStageCallback>
 8001e64:	e01b      	b.n	8001e9e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e6e:	441a      	add	r2, r3
 8001e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e72:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e7c:	441a      	add	r2, r3
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e80:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 fea1 	bl	8004bd0 <USB_EPStartXfer>
 8001e8e:	e006      	b.n	8001e9e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e94:	461a      	mov	r2, r3
 8001e96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f91b 	bl	80020d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f6ff ac3b 	blt.w	8001726 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3758      	adds	r7, #88	@ 0x58
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b088      	sub	sp, #32
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d07e      	beq.n	8001fd0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001efa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	8b7b      	ldrh	r3, [r7, #26]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d306      	bcc.n	8001f14 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	8b7b      	ldrh	r3, [r7, #26]
 8001f0c:	1ad2      	subs	r2, r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	619a      	str	r2, [r3, #24]
 8001f12:	e002      	b.n	8001f1a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d123      	bne.n	8001f6a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f3c:	833b      	strh	r3, [r7, #24]
 8001f3e:	8b3b      	ldrh	r3, [r7, #24]
 8001f40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f44:	833b      	strh	r3, [r7, #24]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	441a      	add	r2, r3
 8001f54:	8b3b      	ldrh	r3, [r7, #24]
 8001f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01f      	beq.n	8001fb4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f8e:	82fb      	strh	r3, [r7, #22]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	441a      	add	r2, r3
 8001f9e:	8afb      	ldrh	r3, [r7, #22]
 8001fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fb4:	8b7b      	ldrh	r3, [r7, #26]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8087 	beq.w	80020ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6959      	ldr	r1, [r3, #20]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	891a      	ldrh	r2, [r3, #8]
 8001fc8:	8b7b      	ldrh	r3, [r7, #26]
 8001fca:	f004 fb35 	bl	8006638 <USB_ReadPMA>
 8001fce:	e07c      	b.n	80020ca <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3306      	adds	r3, #6
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	8b7b      	ldrh	r3, [r7, #26]
 8002000:	429a      	cmp	r2, r3
 8002002:	d306      	bcc.n	8002012 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	8b7b      	ldrh	r3, [r7, #26]
 800200a:	1ad2      	subs	r2, r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	619a      	str	r2, [r3, #24]
 8002010:	e002      	b.n	8002018 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d123      	bne.n	8002068 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800203a:	83fb      	strh	r3, [r7, #30]
 800203c:	8bfb      	ldrh	r3, [r7, #30]
 800203e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002042:	83fb      	strh	r3, [r7, #30]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	441a      	add	r2, r3
 8002052:	8bfb      	ldrh	r3, [r7, #30]
 8002054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002058:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800205c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002064:	b29b      	uxth	r3, r3
 8002066:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11f      	bne.n	80020b2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800208c:	83bb      	strh	r3, [r7, #28]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	441a      	add	r2, r3
 800209c:	8bbb      	ldrh	r3, [r7, #28]
 800209e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020b2:	8b7b      	ldrh	r3, [r7, #26]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	6959      	ldr	r1, [r3, #20]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	895a      	ldrh	r2, [r3, #10]
 80020c4:	8b7b      	ldrh	r3, [r7, #26]
 80020c6:	f004 fab7 	bl	8006638 <USB_ReadPMA>
    }
  }

  return count;
 80020ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0a4      	sub	sp, #144	@ 0x90
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 81dd 	beq.w	80024a8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	3302      	adds	r3, #2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002116:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002122:	429a      	cmp	r2, r3
 8002124:	d907      	bls.n	8002136 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800212e:	1ad2      	subs	r2, r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	619a      	str	r2, [r3, #24]
 8002134:	e002      	b.n	800213c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 80b9 	bne.w	80022b8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d126      	bne.n	800219c <HAL_PCD_EP_DB_Transmit+0xc8>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800215c:	b29b      	uxth	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002162:	4413      	add	r3, r2
 8002164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	011a      	lsls	r2, r3, #4
 800216c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216e:	4413      	add	r3, r2
 8002170:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002174:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002180:	b29a      	uxth	r2, r3
 8002182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002184:	801a      	strh	r2, [r3, #0]
 8002186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002194:	b29a      	uxth	r2, r3
 8002196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	e01a      	b.n	80021d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	785b      	ldrb	r3, [r3, #1]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d116      	bne.n	80021d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b8:	4413      	add	r3, r2
 80021ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	011a      	lsls	r2, r3, #4
 80021c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c4:	4413      	add	r3, r2
 80021c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80021cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ce:	2200      	movs	r2, #0
 80021d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d126      	bne.n	800222e <HAL_PCD_EP_DB_Transmit+0x15a>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	011a      	lsls	r2, r3, #4
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002212:	b29a      	uxth	r2, r3
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	801a      	strh	r2, [r3, #0]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	b29b      	uxth	r3, r3
 800221e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002226:	b29a      	uxth	r2, r3
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	801a      	strh	r2, [r3, #0]
 800222c:	e017      	b.n	800225e <HAL_PCD_EP_DB_Transmit+0x18a>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d113      	bne.n	800225e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	4413      	add	r3, r2
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	011a      	lsls	r2, r3, #4
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	4413      	add	r3, r2
 8002252:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	2200      	movs	r2, #0
 800225c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f005 fdce 	bl	8007e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 82fc 	beq.w	800286e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800228c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002290:	82fb      	strh	r3, [r7, #22]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	441a      	add	r2, r3
 80022a0:	8afb      	ldrh	r3, [r7, #22]
 80022a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	8013      	strh	r3, [r2, #0]
 80022b6:	e2da      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d021      	beq.n	8002306 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80022f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002302:	b29b      	uxth	r3, r3
 8002304:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 82ae 	bne.w	800286e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800231a:	441a      	add	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002328:	441a      	add	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	429a      	cmp	r2, r3
 8002338:	d30b      	bcc.n	8002352 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800234a:	1ad2      	subs	r2, r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	621a      	str	r2, [r3, #32]
 8002350:	e017      	b.n	8002382 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d108      	bne.n	800236c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800235a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800235e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800236a:	e00a      	b.n	8002382 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	785b      	ldrb	r3, [r3, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d165      	bne.n	8002456 <HAL_PCD_EP_DB_Transmit+0x382>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800239e:	4413      	add	r3, r2
 80023a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	011a      	lsls	r2, r3, #4
 80023a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023aa:	4413      	add	r3, r2
 80023ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023bc:	b29a      	uxth	r2, r3
 80023be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80023c8:	d91d      	bls.n	8002406 <HAL_PCD_EP_DB_Transmit+0x332>
 80023ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x310>
 80023de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023e0:	3b01      	subs	r3, #1
 80023e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	029b      	lsls	r3, r3, #10
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fe:	b29a      	uxth	r2, r3
 8002400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002402:	801a      	strh	r2, [r3, #0]
 8002404:	e044      	b.n	8002490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10a      	bne.n	8002424 <HAL_PCD_EP_DB_Transmit+0x350>
 800240e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800241c:	b29a      	uxth	r2, r3
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	801a      	strh	r2, [r3, #0]
 8002422:	e035      	b.n	8002490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800242c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800243a:	3301      	adds	r3, #1
 800243c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29a      	uxth	r2, r3
 8002444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002446:	b29b      	uxth	r3, r3
 8002448:	029b      	lsls	r3, r3, #10
 800244a:	b29b      	uxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b29a      	uxth	r2, r3
 8002450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	e01c      	b.n	8002490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	785b      	ldrb	r3, [r3, #1]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d118      	bne.n	8002490 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	647b      	str	r3, [r7, #68]	@ 0x44
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002472:	4413      	add	r3, r2
 8002474:	647b      	str	r3, [r7, #68]	@ 0x44
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	011a      	lsls	r2, r3, #4
 800247c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800247e:	4413      	add	r3, r2
 8002480:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002484:	643b      	str	r3, [r7, #64]	@ 0x40
 8002486:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800248a:	b29a      	uxth	r2, r3
 800248c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800248e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	6959      	ldr	r1, [r3, #20]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	891a      	ldrh	r2, [r3, #8]
 800249c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f004 f884 	bl	80065ae <USB_WritePMA>
 80024a6:	e1e2      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	3306      	adds	r3, #6
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024dc:	429a      	cmp	r2, r3
 80024de:	d307      	bcc.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	699a      	ldr	r2, [r3, #24]
 80024e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024e8:	1ad2      	subs	r2, r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	619a      	str	r2, [r3, #24]
 80024ee:	e002      	b.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 80c0 	bne.w	8002680 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d126      	bne.n	8002556 <HAL_PCD_EP_DB_Transmit+0x482>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800251c:	4413      	add	r3, r2
 800251e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	011a      	lsls	r2, r3, #4
 8002526:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002528:	4413      	add	r3, r2
 800252a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800252e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800253a:	b29a      	uxth	r2, r3
 800253c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800253e:	801a      	strh	r2, [r3, #0]
 8002540:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800254a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800254e:	b29a      	uxth	r2, r3
 8002550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002552:	801a      	strh	r2, [r3, #0]
 8002554:	e01a      	b.n	800258c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	785b      	ldrb	r3, [r3, #1]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d116      	bne.n	800258c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	667b      	str	r3, [r7, #100]	@ 0x64
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800256c:	b29b      	uxth	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002572:	4413      	add	r3, r2
 8002574:	667b      	str	r3, [r7, #100]	@ 0x64
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	011a      	lsls	r2, r3, #4
 800257c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800257e:	4413      	add	r3, r2
 8002580:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002584:	663b      	str	r3, [r7, #96]	@ 0x60
 8002586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002588:	2200      	movs	r2, #0
 800258a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	677b      	str	r3, [r7, #116]	@ 0x74
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d12b      	bne.n	80025f2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ae:	4413      	add	r3, r2
 80025b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	011a      	lsls	r2, r3, #4
 80025b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ba:	4413      	add	r3, r2
 80025bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025d6:	801a      	strh	r2, [r3, #0]
 80025d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	e017      	b.n	8002622 <HAL_PCD_EP_DB_Transmit+0x54e>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d113      	bne.n	8002622 <HAL_PCD_EP_DB_Transmit+0x54e>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002608:	4413      	add	r3, r2
 800260a:	677b      	str	r3, [r7, #116]	@ 0x74
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	011a      	lsls	r2, r3, #4
 8002612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002614:	4413      	add	r3, r2
 8002616:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800261a:	673b      	str	r3, [r7, #112]	@ 0x70
 800261c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800261e:	2200      	movs	r2, #0
 8002620:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f005 fbec 	bl	8007e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f040 811a 	bne.w	800286e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002654:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800266a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800266e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800267a:	b29b      	uxth	r3, r3
 800267c:	8013      	strh	r3, [r2, #0]
 800267e:	e0f6      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d121      	bne.n	80026ce <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	441a      	add	r2, r3
 80026b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80026ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	f040 80ca 	bne.w	800286e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026e2:	441a      	add	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026f0:	441a      	add	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	6a1a      	ldr	r2, [r3, #32]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d30b      	bcc.n	800271a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	6a1a      	ldr	r2, [r3, #32]
 800270e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002712:	1ad2      	subs	r2, r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	621a      	str	r2, [r3, #32]
 8002718:	e017      	b.n	800274a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002722:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002732:	e00a      	b.n	800274a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d165      	bne.n	8002824 <HAL_PCD_EP_DB_Transmit+0x750>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800276c:	4413      	add	r3, r2
 800276e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	011a      	lsls	r2, r3, #4
 8002776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002778:	4413      	add	r3, r2
 800277a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800277e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002780:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800278a:	b29a      	uxth	r2, r3
 800278c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002794:	2b3e      	cmp	r3, #62	@ 0x3e
 8002796:	d91d      	bls.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x700>
 8002798:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x6de>
 80027ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ae:	3b01      	subs	r3, #1
 80027b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	029b      	lsls	r3, r3, #10
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4313      	orrs	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	e041      	b.n	8002858 <HAL_PCD_EP_DB_Transmit+0x784>
 80027d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80027dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	e032      	b.n	8002858 <HAL_PCD_EP_DB_Transmit+0x784>
 80027f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_PCD_EP_DB_Transmit+0x738>
 8002806:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002808:	3301      	adds	r3, #1
 800280a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800280c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b29a      	uxth	r2, r3
 8002812:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002814:	b29b      	uxth	r3, r3
 8002816:	029b      	lsls	r3, r3, #10
 8002818:	b29b      	uxth	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	b29a      	uxth	r2, r3
 800281e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	e019      	b.n	8002858 <HAL_PCD_EP_DB_Transmit+0x784>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d115      	bne.n	8002858 <HAL_PCD_EP_DB_Transmit+0x784>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800283a:	4413      	add	r3, r2
 800283c:	657b      	str	r3, [r7, #84]	@ 0x54
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	011a      	lsls	r2, r3, #4
 8002844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002846:	4413      	add	r3, r2
 8002848:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800284c:	653b      	str	r3, [r7, #80]	@ 0x50
 800284e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002852:	b29a      	uxth	r2, r3
 8002854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002856:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	6959      	ldr	r1, [r3, #20]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	895a      	ldrh	r2, [r3, #10]
 8002864:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002868:	b29b      	uxth	r3, r3
 800286a:	f003 fea0 	bl	80065ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002888:	82bb      	strh	r3, [r7, #20]
 800288a:	8abb      	ldrh	r3, [r7, #20]
 800288c:	f083 0310 	eor.w	r3, r3, #16
 8002890:	82bb      	strh	r3, [r7, #20]
 8002892:	8abb      	ldrh	r3, [r7, #20]
 8002894:	f083 0320 	eor.w	r3, r3, #32
 8002898:	82bb      	strh	r3, [r7, #20]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	441a      	add	r2, r3
 80028a8:	8abb      	ldrh	r3, [r7, #20]
 80028aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3790      	adds	r7, #144	@ 0x90
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	817b      	strh	r3, [r7, #10]
 80028d6:	4613      	mov	r3, r2
 80028d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028da:	897b      	ldrh	r3, [r7, #10]
 80028dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e6:	897b      	ldrh	r3, [r7, #10]
 80028e8:	f003 0207 	and.w	r2, r3, #7
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	3310      	adds	r3, #16
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4413      	add	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e009      	b.n	8002912 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028fe:	897a      	ldrh	r2, [r7, #10]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002912:	893b      	ldrh	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2200      	movs	r2, #0
 800291c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	b29a      	uxth	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	80da      	strh	r2, [r3, #6]
 8002926:	e00b      	b.n	8002940 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2201      	movs	r2, #1
 800292c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	b29a      	uxth	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	b29a      	uxth	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e272      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8087 	beq.w	8002a7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800296c:	4b92      	ldr	r3, [pc, #584]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b04      	cmp	r3, #4
 8002976:	d00c      	beq.n	8002992 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002978:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b08      	cmp	r3, #8
 8002982:	d112      	bne.n	80029aa <HAL_RCC_OscConfig+0x5e>
 8002984:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002990:	d10b      	bne.n	80029aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002992:	4b89      	ldr	r3, [pc, #548]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d06c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x12c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d168      	bne.n	8002a78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e24c      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x76>
 80029b4:	4b80      	ldr	r3, [pc, #512]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a7f      	ldr	r2, [pc, #508]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	e02e      	b.n	8002a20 <HAL_RCC_OscConfig+0xd4>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x98>
 80029ca:	4b7b      	ldr	r3, [pc, #492]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7a      	ldr	r2, [pc, #488]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b78      	ldr	r3, [pc, #480]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a77      	ldr	r2, [pc, #476]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e01d      	b.n	8002a20 <HAL_RCC_OscConfig+0xd4>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0xbc>
 80029ee:	4b72      	ldr	r3, [pc, #456]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a71      	ldr	r2, [pc, #452]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0xd4>
 8002a08:	4b6b      	ldr	r3, [pc, #428]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a6a      	ldr	r2, [pc, #424]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b68      	ldr	r3, [pc, #416]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a67      	ldr	r2, [pc, #412]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fd fec8 	bl	80007bc <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7fd fec4 	bl	80007bc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	@ 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e200      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0xe4>
 8002a4e:	e014      	b.n	8002a7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fd feb4 	bl	80007bc <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a58:	f7fd feb0 	bl	80007bc <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	@ 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1ec      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	4b53      	ldr	r3, [pc, #332]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x10c>
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d063      	beq.n	8002b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a86:	4b4c      	ldr	r3, [pc, #304]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a92:	4b49      	ldr	r3, [pc, #292]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x18c>
 8002a9e:	4b46      	ldr	r3, [pc, #280]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d116      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aaa:	4b43      	ldr	r3, [pc, #268]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x176>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e1c0      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4939      	ldr	r1, [pc, #228]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad6:	e03a      	b.n	8002b4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d020      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae0:	4b36      	ldr	r3, [pc, #216]	@ (8002bbc <HAL_RCC_OscConfig+0x270>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fd fe69 	bl	80007bc <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aee:	f7fd fe65 	bl	80007bc <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e1a1      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4927      	ldr	r1, [pc, #156]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]
 8002b20:	e015      	b.n	8002b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b22:	4b26      	ldr	r3, [pc, #152]	@ (8002bbc <HAL_RCC_OscConfig+0x270>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fd fe48 	bl	80007bc <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b30:	f7fd fe44 	bl	80007bc <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e180      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d03a      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d019      	beq.n	8002b96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b62:	4b17      	ldr	r3, [pc, #92]	@ (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b68:	f7fd fe28 	bl	80007bc <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b70:	f7fd fe24 	bl	80007bc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e160      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f000 face 	bl	8003130 <RCC_Delay>
 8002b94:	e01c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b96:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9c:	f7fd fe0e 	bl	80007bc <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba2:	e00f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7fd fe0a 	bl	80007bc <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d908      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e146      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	42420000 	.word	0x42420000
 8002bc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	4b92      	ldr	r3, [pc, #584]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e9      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a6 	beq.w	8002d2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be2:	4b8b      	ldr	r3, [pc, #556]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10d      	bne.n	8002c0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	4b88      	ldr	r3, [pc, #544]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	4a87      	ldr	r2, [pc, #540]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	61d3      	str	r3, [r2, #28]
 8002bfa:	4b85      	ldr	r3, [pc, #532]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b82      	ldr	r3, [pc, #520]	@ (8002e14 <HAL_RCC_OscConfig+0x4c8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	4b7f      	ldr	r3, [pc, #508]	@ (8002e14 <HAL_RCC_OscConfig+0x4c8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e14 <HAL_RCC_OscConfig+0x4c8>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7fd fdcb 	bl	80007bc <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2a:	f7fd fdc7 	bl	80007bc <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b64      	cmp	r3, #100	@ 0x64
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e103      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	4b75      	ldr	r3, [pc, #468]	@ (8002e14 <HAL_RCC_OscConfig+0x4c8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x312>
 8002c50:	4b6f      	ldr	r3, [pc, #444]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4a6e      	ldr	r2, [pc, #440]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6213      	str	r3, [r2, #32]
 8002c5c:	e02d      	b.n	8002cba <HAL_RCC_OscConfig+0x36e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x334>
 8002c66:	4b6a      	ldr	r3, [pc, #424]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	4a69      	ldr	r2, [pc, #420]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	6213      	str	r3, [r2, #32]
 8002c72:	4b67      	ldr	r3, [pc, #412]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4a66      	ldr	r2, [pc, #408]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	6213      	str	r3, [r2, #32]
 8002c7e:	e01c      	b.n	8002cba <HAL_RCC_OscConfig+0x36e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d10c      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x356>
 8002c88:	4b61      	ldr	r3, [pc, #388]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4a60      	ldr	r2, [pc, #384]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	6213      	str	r3, [r2, #32]
 8002c94:	4b5e      	ldr	r3, [pc, #376]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4a5d      	ldr	r2, [pc, #372]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6213      	str	r3, [r2, #32]
 8002ca0:	e00b      	b.n	8002cba <HAL_RCC_OscConfig+0x36e>
 8002ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6213      	str	r3, [r2, #32]
 8002cae:	4b58      	ldr	r3, [pc, #352]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a57      	ldr	r2, [pc, #348]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f023 0304 	bic.w	r3, r3, #4
 8002cb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d015      	beq.n	8002cee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc2:	f7fd fd7b 	bl	80007bc <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fd fd77 	bl	80007bc <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e0b1      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ee      	beq.n	8002cca <HAL_RCC_OscConfig+0x37e>
 8002cec:	e014      	b.n	8002d18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cee:	f7fd fd65 	bl	80007bc <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7fd fd61 	bl	80007bc <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e09b      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0c:	4b40      	ldr	r3, [pc, #256]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ee      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4a3b      	ldr	r2, [pc, #236]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8087 	beq.w	8002e42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d34:	4b36      	ldr	r3, [pc, #216]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d061      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d146      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d48:	4b33      	ldr	r3, [pc, #204]	@ (8002e18 <HAL_RCC_OscConfig+0x4cc>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fd fd35 	bl	80007bc <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d56:	f7fd fd31 	bl	80007bc <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e06d      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d68:	4b29      	ldr	r3, [pc, #164]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d7c:	d108      	bne.n	8002d90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d7e:	4b24      	ldr	r3, [pc, #144]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4921      	ldr	r1, [pc, #132]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d90:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a19      	ldr	r1, [r3, #32]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	430b      	orrs	r3, r1
 8002da2:	491b      	ldr	r1, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <HAL_RCC_OscConfig+0x4cc>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fd fd05 	bl	80007bc <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fd fd01 	bl	80007bc <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e03d      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc8:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x46a>
 8002dd4:	e035      	b.n	8002e42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd6:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <HAL_RCC_OscConfig+0x4cc>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fd fcee 	bl	80007bc <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fd fcea 	bl	80007bc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e026      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df6:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x498>
 8002e02:	e01e      	b.n	8002e42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e019      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40007000 	.word	0x40007000
 8002e18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e4c <HAL_RCC_OscConfig+0x500>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000

08002e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0d0      	b.n	8003006 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b6a      	ldr	r3, [pc, #424]	@ (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d910      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b67      	ldr	r3, [pc, #412]	@ (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 0207 	bic.w	r2, r3, #7
 8002e7a:	4965      	ldr	r1, [pc, #404]	@ (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b63      	ldr	r3, [pc, #396]	@ (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b8      	b.n	8003006 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eac:	4b59      	ldr	r3, [pc, #356]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a58      	ldr	r2, [pc, #352]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002eb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec4:	4b53      	ldr	r3, [pc, #332]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ece:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b50      	ldr	r3, [pc, #320]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	494d      	ldr	r1, [pc, #308]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d040      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b47      	ldr	r3, [pc, #284]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d115      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e07f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0e:	4b41      	ldr	r3, [pc, #260]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e073      	b.n	8003006 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06b      	b.n	8003006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2e:	4b39      	ldr	r3, [pc, #228]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f023 0203 	bic.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4936      	ldr	r1, [pc, #216]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f40:	f7fd fc3c 	bl	80007bc <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f48:	f7fd fc38 	bl	80007bc <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e053      	b.n	8003006 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 020c 	and.w	r2, r3, #12
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d1eb      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f70:	4b27      	ldr	r3, [pc, #156]	@ (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d210      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b24      	ldr	r3, [pc, #144]	@ (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0207 	bic.w	r2, r3, #7
 8002f86:	4922      	ldr	r1, [pc, #136]	@ (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b20      	ldr	r3, [pc, #128]	@ (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e032      	b.n	8003006 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b19      	ldr	r3, [pc, #100]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4916      	ldr	r1, [pc, #88]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fca:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	490e      	ldr	r1, [pc, #56]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fde:	f000 f821 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	490a      	ldr	r1, [pc, #40]	@ (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff0:	5ccb      	ldrb	r3, [r1, r3]
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	4a09      	ldr	r2, [pc, #36]	@ (800301c <HAL_RCC_ClockConfig+0x1cc>)
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <HAL_RCC_ClockConfig+0x1d0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fb9a 	bl	8000738 <HAL_InitTick>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40022000 	.word	0x40022000
 8003014:	40021000 	.word	0x40021000
 8003018:	0800830c 	.word	0x0800830c
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800303e:	4b1e      	ldr	r3, [pc, #120]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b04      	cmp	r3, #4
 800304c:	d002      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x30>
 800304e:	2b08      	cmp	r3, #8
 8003050:	d003      	beq.n	800305a <HAL_RCC_GetSysClockFreq+0x36>
 8003052:	e027      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003054:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003056:	613b      	str	r3, [r7, #16]
      break;
 8003058:	e027      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	0c9b      	lsrs	r3, r3, #18
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	4a17      	ldr	r2, [pc, #92]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003064:	5cd3      	ldrb	r3, [r2, r3]
 8003066:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d010      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003072:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	0c5b      	lsrs	r3, r3, #17
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	4a11      	ldr	r2, [pc, #68]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a0d      	ldr	r2, [pc, #52]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003086:	fb03 f202 	mul.w	r2, r3, r2
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e004      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a0c      	ldr	r2, [pc, #48]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	613b      	str	r3, [r7, #16]
      break;
 80030a2:	e002      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x98>)
 80030a6:	613b      	str	r3, [r7, #16]
      break;
 80030a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030aa:	693b      	ldr	r3, [r7, #16]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	007a1200 	.word	0x007a1200
 80030c0:	08008324 	.word	0x08008324
 80030c4:	08008334 	.word	0x08008334
 80030c8:	003d0900 	.word	0x003d0900

080030cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b02      	ldr	r3, [pc, #8]	@ (80030dc <HAL_RCC_GetHCLKFreq+0x10>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030e4:	f7ff fff2 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4903      	ldr	r1, [pc, #12]	@ (8003104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	0800831c 	.word	0x0800831c

08003108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800310c:	f7ff ffde 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	0adb      	lsrs	r3, r3, #11
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4903      	ldr	r1, [pc, #12]	@ (800312c <HAL_RCC_GetPCLK2Freq+0x24>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	0800831c 	.word	0x0800831c

08003130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003138:	4b0a      	ldr	r3, [pc, #40]	@ (8003164 <RCC_Delay+0x34>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <RCC_Delay+0x38>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0a5b      	lsrs	r3, r3, #9
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800314c:	bf00      	nop
  }
  while (Delay --);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1e5a      	subs	r2, r3, #1
 8003152:	60fa      	str	r2, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f9      	bne.n	800314c <RCC_Delay+0x1c>
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	20000000 	.word	0x20000000
 8003168:	10624dd3 	.word	0x10624dd3

0800316c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d07d      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003188:	2300      	movs	r3, #0
 800318a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318c:	4b4f      	ldr	r3, [pc, #316]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10d      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003198:	4b4c      	ldr	r3, [pc, #304]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	4a4b      	ldr	r2, [pc, #300]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	61d3      	str	r3, [r2, #28]
 80031a4:	4b49      	ldr	r3, [pc, #292]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	4b46      	ldr	r3, [pc, #280]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d118      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c0:	4b43      	ldr	r3, [pc, #268]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a42      	ldr	r2, [pc, #264]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031cc:	f7fd faf6 	bl	80007bc <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	e008      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d4:	f7fd faf2 	bl	80007bc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	@ 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e06d      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e6:	4b3a      	ldr	r3, [pc, #232]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031f2:	4b36      	ldr	r3, [pc, #216]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02e      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	429a      	cmp	r2, r3
 800320e:	d027      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003210:	4b2e      	ldr	r3, [pc, #184]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003218:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800321a:	4b2e      	ldr	r3, [pc, #184]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003220:	4b2c      	ldr	r3, [pc, #176]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003226:	4a29      	ldr	r2, [pc, #164]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d014      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fd fac1 	bl	80007bc <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fd fabd 	bl	80007bc <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e036      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	4b1d      	ldr	r3, [pc, #116]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ee      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003260:	4b1a      	ldr	r3, [pc, #104]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4917      	ldr	r1, [pc, #92]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	4313      	orrs	r3, r2
 8003270:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4a13      	ldr	r2, [pc, #76]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003282:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003290:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	490b      	ldr	r1, [pc, #44]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ae:	4b07      	ldr	r3, [pc, #28]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	4904      	ldr	r1, [pc, #16]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40007000 	.word	0x40007000
 80032d4:	42420440 	.word	0x42420440

080032d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e042      	b.n	8003370 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fd f98a 	bl	8000618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	@ 0x24
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800331a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fdb7 	bl	8003e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	@ 0x28
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b20      	cmp	r3, #32
 8003396:	d175      	bne.n	8003484 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_UART_Transmit+0x2c>
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e06e      	b.n	8003486 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2221      	movs	r2, #33	@ 0x21
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b6:	f7fd fa01 	bl	80007bc <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	88fa      	ldrh	r2, [r7, #6]
 80033c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d0:	d108      	bne.n	80033e4 <HAL_UART_Transmit+0x6c>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d104      	bne.n	80033e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e003      	b.n	80033ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033ec:	e02e      	b.n	800344c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2180      	movs	r1, #128	@ 0x80
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fb1c 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e03a      	b.n	8003486 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	3302      	adds	r3, #2
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e007      	b.n	800343e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	3301      	adds	r3, #1
 800343c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1cb      	bne.n	80033ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	2140      	movs	r1, #64	@ 0x40
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fae8 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e006      	b.n	8003486 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	e000      	b.n	8003486 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	4613      	mov	r3, r2
 800349a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d112      	bne.n	80034ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_UART_Receive_IT+0x26>
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e00b      	b.n	80034d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	461a      	mov	r2, r3
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fb0f 	bl	8003ae8 <UART_Start_Receive_IT>
 80034ca:	4603      	mov	r3, r0
 80034cc:	e000      	b.n	80034d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0ba      	sub	sp, #232	@ 0xe8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800350a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_UART_IRQHandler+0x66>
 800352a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fbec 	bl	8003d14 <UART_Receive_IT>
      return;
 800353c:	e25b      	b.n	80039f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800353e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80de 	beq.w	8003704 <HAL_UART_IRQHandler+0x22c>
 8003548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003558:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80d1 	beq.w	8003704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_UART_IRQHandler+0xae>
 800356e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_UART_IRQHandler+0xd2>
 8003592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f043 0202 	orr.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_UART_IRQHandler+0xf6>
 80035b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	f043 0204 	orr.w	r2, r3, #4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d011      	beq.n	80035fe <HAL_UART_IRQHandler+0x126>
 80035da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	f043 0208 	orr.w	r2, r3, #8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 81f2 	beq.w	80039ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_UART_IRQHandler+0x14e>
 8003614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fb77 	bl	8003d14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <HAL_UART_IRQHandler+0x17a>
 800364a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d04f      	beq.n	80036f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fa81 	bl	8003b5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d041      	beq.n	80036ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800367c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3314      	adds	r3, #20
 800368e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003692:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800369e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1d9      	bne.n	8003666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d013      	beq.n	80036e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036be:	4a7e      	ldr	r2, [pc, #504]	@ (80038b8 <HAL_UART_IRQHandler+0x3e0>)
 80036c0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fd f9ca 	bl	8000a60 <HAL_DMA_Abort_IT>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036dc:	4610      	mov	r0, r2
 80036de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	e00e      	b.n	8003700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f993 	bl	8003a0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	e00a      	b.n	8003700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f98f 	bl	8003a0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	e006      	b.n	8003700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f98b 	bl	8003a0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80036fe:	e175      	b.n	80039ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003700:	bf00      	nop
    return;
 8003702:	e173      	b.n	80039ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 814f 	bne.w	80039ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8148 	beq.w	80039ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800371c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8141 	beq.w	80039ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80b6 	beq.w	80038bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800375c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8145 	beq.w	80039f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800376a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800376e:	429a      	cmp	r2, r3
 8003770:	f080 813e 	bcs.w	80039f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800377a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b20      	cmp	r3, #32
 8003784:	f000 8088 	beq.w	8003898 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800379e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037b4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1d9      	bne.n	8003788 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3314      	adds	r3, #20
 80037da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3314      	adds	r3, #20
 80037f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037f8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003800:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800380a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e1      	bne.n	80037d4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3314      	adds	r3, #20
 8003816:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3314      	adds	r3, #20
 8003830:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003834:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003836:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800383a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e3      	bne.n	8003810 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003868:	f023 0310 	bic.w	r3, r3, #16
 800386c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800387a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800387c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003880:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e3      	bne.n	8003856 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd f8a9 	bl	80009ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8b6 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038b4:	e09c      	b.n	80039f0 <HAL_UART_IRQHandler+0x518>
 80038b6:	bf00      	nop
 80038b8:	08003c1f 	.word	0x08003c1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 808e 	beq.w	80039f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8089 	beq.w	80039f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003906:	647a      	str	r2, [r7, #68]	@ 0x44
 8003908:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800390c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e3      	bne.n	80038e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3314      	adds	r3, #20
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	623b      	str	r3, [r7, #32]
   return(result);
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3314      	adds	r3, #20
 800393a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800393e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e3      	bne.n	800391a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0310 	bic.w	r3, r3, #16
 8003976:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003984:	61fa      	str	r2, [r7, #28]
 8003986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	69b9      	ldr	r1, [r7, #24]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	617b      	str	r3, [r7, #20]
   return(result);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e3      	bne.n	8003960 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800399e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f83b 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039aa:	e023      	b.n	80039f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <HAL_UART_IRQHandler+0x4f4>
 80039b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f93e 	bl	8003c46 <UART_Transmit_IT>
    return;
 80039ca:	e014      	b.n	80039f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <HAL_UART_IRQHandler+0x51e>
 80039d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f97d 	bl	8003ce4 <UART_EndTransmit_IT>
    return;
 80039ea:	e004      	b.n	80039f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80039ec:	bf00      	nop
 80039ee:	e002      	b.n	80039f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80039f0:	bf00      	nop
 80039f2:	e000      	b.n	80039f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80039f4:	bf00      	nop
  }
}
 80039f6:	37e8      	adds	r7, #232	@ 0xe8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b086      	sub	sp, #24
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a46:	e03b      	b.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d037      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a50:	f7fc feb4 	bl	80007bc <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	6a3a      	ldr	r2, [r7, #32]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e03a      	b.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d023      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b80      	cmp	r3, #128	@ 0x80
 8003a7c:	d020      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b40      	cmp	r3, #64	@ 0x40
 8003a82:	d01d      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d116      	bne.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f856 	bl	8003b5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e00f      	b.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d0b4      	beq.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	88fa      	ldrh	r2, [r7, #6]
 8003b06:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2222      	movs	r2, #34	@ 0x22
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0220 	orr.w	r2, r2, #32
 8003b4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b095      	sub	sp, #84	@ 0x54
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	330c      	adds	r3, #12
 8003b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b82:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e5      	bne.n	8003b62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3314      	adds	r3, #20
 8003b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e5      	bne.n	8003b96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d119      	bne.n	8003c06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f023 0310 	bic.w	r3, r3, #16
 8003be8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bf2:	61ba      	str	r2, [r7, #24]
 8003bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6979      	ldr	r1, [r7, #20]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c14:	bf00      	nop
 8003c16:	3754      	adds	r7, #84	@ 0x54
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff fee8 	bl	8003a0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b21      	cmp	r3, #33	@ 0x21
 8003c58:	d13e      	bne.n	8003cd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c62:	d114      	bne.n	8003c8e <UART_Transmit_IT+0x48>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d110      	bne.n	8003c8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	1c9a      	adds	r2, r3, #2
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	621a      	str	r2, [r3, #32]
 8003c8c:	e008      	b.n	8003ca0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	1c59      	adds	r1, r3, #1
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6211      	str	r1, [r2, #32]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4619      	mov	r1, r3
 8003cae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10f      	bne.n	8003cd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e000      	b.n	8003cda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cd8:	2302      	movs	r3, #2
  }
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fe79 	bl	80039fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08c      	sub	sp, #48	@ 0x30
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b22      	cmp	r3, #34	@ 0x22
 8003d26:	f040 80ae 	bne.w	8003e86 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d32:	d117      	bne.n	8003d64 <UART_Receive_IT+0x50>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d113      	bne.n	8003d64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d44:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	1c9a      	adds	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d62:	e026      	b.n	8003db2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d76:	d007      	beq.n	8003d88 <UART_Receive_IT+0x74>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <UART_Receive_IT+0x82>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	e008      	b.n	8003da8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d15d      	bne.n	8003e82 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0220 	bic.w	r2, r2, #32
 8003dd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003de4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d135      	bne.n	8003e78 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	613b      	str	r3, [r7, #16]
   return(result);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f023 0310 	bic.w	r3, r3, #16
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e32:	623a      	str	r2, [r7, #32]
 8003e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	69f9      	ldr	r1, [r7, #28]
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e5      	bne.n	8003e12 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d10a      	bne.n	8003e6a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff fdd5 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
 8003e76:	e002      	b.n	8003e7e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fc f967 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e002      	b.n	8003e88 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
  }
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3730      	adds	r7, #48	@ 0x30
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003eca:	f023 030c 	bic.w	r3, r3, #12
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa4 <UART_SetConfig+0x114>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d103      	bne.n	8003f00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ef8:	f7ff f906 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	e002      	b.n	8003f06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f00:	f7ff f8ee 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8003f04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009a      	lsls	r2, r3, #2
 8003f10:	441a      	add	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	4a22      	ldr	r2, [pc, #136]	@ (8003fa8 <UART_SetConfig+0x118>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	0119      	lsls	r1, r3, #4
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009a      	lsls	r2, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa8 <UART_SetConfig+0x118>)
 8003f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	2064      	movs	r0, #100	@ 0x64
 8003f46:	fb00 f303 	mul.w	r3, r0, r3
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	3332      	adds	r3, #50	@ 0x32
 8003f50:	4a15      	ldr	r2, [pc, #84]	@ (8003fa8 <UART_SetConfig+0x118>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f5c:	4419      	add	r1, r3
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009a      	lsls	r2, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <UART_SetConfig+0x118>)
 8003f76:	fba3 0302 	umull	r0, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2064      	movs	r0, #100	@ 0x64
 8003f7e:	fb00 f303 	mul.w	r3, r0, r3
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	3332      	adds	r3, #50	@ 0x32
 8003f88:	4a07      	ldr	r2, [pc, #28]	@ (8003fa8 <UART_SetConfig+0x118>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	f003 020f 	and.w	r2, r3, #15
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	440a      	add	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40013800 	.word	0x40013800
 8003fa8:	51eb851f 	.word	0x51eb851f

08003fac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fd6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003fda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ffa:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003ffe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	b29b      	uxth	r3, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	b29b      	uxth	r3, r3
 8004010:	4013      	ands	r3, r2
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr

0800403e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	4638      	mov	r0, r7
 8004048:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004078:	b480      	push	{r7}
 800407a:	b09d      	sub	sp, #116	@ 0x74
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800409a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	78db      	ldrb	r3, [r3, #3]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d81f      	bhi.n	80040ea <USB_ActivateEndpoint+0x72>
 80040aa:	a201      	add	r2, pc, #4	@ (adr r2, 80040b0 <USB_ActivateEndpoint+0x38>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040f3 	.word	0x080040f3
 80040bc:	080040cf 	.word	0x080040cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80040cc:	e012      	b.n	80040f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040d2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80040d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80040da:	e00b      	b.n	80040f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80040e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80040e8:	e004      	b.n	80040f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80040f0:	e000      	b.n	80040f4 <USB_ActivateEndpoint+0x7c>
      break;
 80040f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800410a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800410e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004112:	b29b      	uxth	r3, r3
 8004114:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412c:	b29b      	uxth	r3, r3
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800414a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800414e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004156:	b29b      	uxth	r3, r3
 8004158:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	7b1b      	ldrb	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 8178 	bne.w	8004454 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	785b      	ldrb	r3, [r3, #1]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8084 	beq.w	8004276 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004178:	b29b      	uxth	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	4413      	add	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	011a      	lsls	r2, r3, #4
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	88db      	ldrh	r3, [r3, #6]
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	b29b      	uxth	r3, r3
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	827b      	strh	r3, [r7, #18]
 80041b0:	8a7b      	ldrh	r3, [r7, #18]
 80041b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01b      	beq.n	80041f2 <USB_ActivateEndpoint+0x17a>
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d0:	823b      	strh	r3, [r7, #16]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	441a      	add	r2, r3
 80041dc:	8a3b      	ldrh	r3, [r7, #16]
 80041de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	78db      	ldrb	r3, [r3, #3]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d020      	beq.n	800423c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800420c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004210:	81bb      	strh	r3, [r7, #12]
 8004212:	89bb      	ldrh	r3, [r7, #12]
 8004214:	f083 0320 	eor.w	r3, r3, #32
 8004218:	81bb      	strh	r3, [r7, #12]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	441a      	add	r2, r3
 8004224:	89bb      	ldrh	r3, [r7, #12]
 8004226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800422a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800422e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004236:	b29b      	uxth	r3, r3
 8004238:	8013      	strh	r3, [r2, #0]
 800423a:	e2d5      	b.n	80047e8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800424e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004252:	81fb      	strh	r3, [r7, #14]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	441a      	add	r2, r3
 800425e:	89fb      	ldrh	r3, [r7, #14]
 8004260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800426c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004270:	b29b      	uxth	r3, r3
 8004272:	8013      	strh	r3, [r2, #0]
 8004274:	e2b8      	b.n	80047e8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	633b      	str	r3, [r7, #48]	@ 0x30
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004280:	b29b      	uxth	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	4413      	add	r3, r2
 8004288:	633b      	str	r3, [r7, #48]	@ 0x30
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	011a      	lsls	r2, r3, #4
 8004290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004292:	4413      	add	r3, r2
 8004294:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	88db      	ldrh	r3, [r3, #6]
 800429e:	085b      	lsrs	r3, r3, #1
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ba:	4413      	add	r3, r2
 80042bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	011a      	lsls	r2, r3, #4
 80042c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c6:	4413      	add	r3, r2
 80042c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042d8:	b29a      	uxth	r2, r3
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80042e4:	d91d      	bls.n	8004322 <USB_ActivateEndpoint+0x2aa>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <USB_ActivateEndpoint+0x288>
 80042fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042fc:	3b01      	subs	r3, #1
 80042fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29a      	uxth	r2, r3
 8004306:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004308:	b29b      	uxth	r3, r3
 800430a:	029b      	lsls	r3, r3, #10
 800430c:	b29b      	uxth	r3, r3
 800430e:	4313      	orrs	r3, r2
 8004310:	b29b      	uxth	r3, r3
 8004312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800431a:	b29a      	uxth	r2, r3
 800431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	e026      	b.n	8004370 <USB_ActivateEndpoint+0x2f8>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <USB_ActivateEndpoint+0x2c8>
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004338:	b29a      	uxth	r2, r3
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	801a      	strh	r2, [r3, #0]
 800433e:	e017      	b.n	8004370 <USB_ActivateEndpoint+0x2f8>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <USB_ActivateEndpoint+0x2e2>
 8004354:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004356:	3301      	adds	r3, #1
 8004358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29a      	uxth	r2, r3
 8004360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004362:	b29b      	uxth	r3, r3
 8004364:	029b      	lsls	r3, r3, #10
 8004366:	b29b      	uxth	r3, r3
 8004368:	4313      	orrs	r3, r2
 800436a:	b29a      	uxth	r2, r3
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800437e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01b      	beq.n	80043c0 <USB_ActivateEndpoint+0x348>
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800439a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439e:	843b      	strh	r3, [r7, #32]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	8c3b      	ldrh	r3, [r7, #32]
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d124      	bne.n	8004412 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043de:	83bb      	strh	r3, [r7, #28]
 80043e0:	8bbb      	ldrh	r3, [r7, #28]
 80043e2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80043e6:	83bb      	strh	r3, [r7, #28]
 80043e8:	8bbb      	ldrh	r3, [r7, #28]
 80043ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043ee:	83bb      	strh	r3, [r7, #28]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	8bbb      	ldrh	r3, [r7, #28]
 80043fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800440c:	b29b      	uxth	r3, r3
 800440e:	8013      	strh	r3, [r2, #0]
 8004410:	e1ea      	b.n	80047e8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004428:	83fb      	strh	r3, [r7, #30]
 800442a:	8bfb      	ldrh	r3, [r7, #30]
 800442c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004430:	83fb      	strh	r3, [r7, #30]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	8bfb      	ldrh	r3, [r7, #30]
 800443e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800444a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444e:	b29b      	uxth	r3, r3
 8004450:	8013      	strh	r3, [r2, #0]
 8004452:	e1c9      	b.n	80047e8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	78db      	ldrb	r3, [r3, #3]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d11e      	bne.n	800449a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004472:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	441a      	add	r2, r3
 8004480:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800448c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004494:	b29b      	uxth	r3, r3
 8004496:	8013      	strh	r3, [r2, #0]
 8004498:	e01d      	b.n	80044d6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80044ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80044c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044e6:	4413      	add	r3, r2
 80044e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	011a      	lsls	r2, r3, #4
 80044f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	891b      	ldrh	r3, [r3, #8]
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	b29b      	uxth	r3, r3
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	657b      	str	r3, [r7, #84]	@ 0x54
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004514:	b29b      	uxth	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451a:	4413      	add	r3, r2
 800451c:	657b      	str	r3, [r7, #84]	@ 0x54
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	011a      	lsls	r2, r3, #4
 8004524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004526:	4413      	add	r3, r2
 8004528:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800452c:	653b      	str	r3, [r7, #80]	@ 0x50
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	895b      	ldrh	r3, [r3, #10]
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	b29b      	uxth	r3, r3
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800453c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f040 8093 	bne.w	800466e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004558:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800455c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01b      	beq.n	800459c <USB_ActivateEndpoint+0x524>
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800458c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004590:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004598:	b29b      	uxth	r3, r3
 800459a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80045aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <USB_ActivateEndpoint+0x574>
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80045d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004602:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004604:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004606:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800460a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800460c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800460e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004612:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800462c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004630:	b29b      	uxth	r3, r3
 8004632:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800464a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800465c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004668:	b29b      	uxth	r3, r3
 800466a:	8013      	strh	r3, [r2, #0]
 800466c:	e0bc      	b.n	80047e8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800467e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01d      	beq.n	80046c6 <USB_ActivateEndpoint+0x64e>
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800469c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80046b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80046d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01d      	beq.n	800471e <USB_ActivateEndpoint+0x6a6>
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800470a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800470e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004716:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800471a:	b29b      	uxth	r3, r3
 800471c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	78db      	ldrb	r3, [r3, #3]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d024      	beq.n	8004770 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800473c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004740:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004744:	f083 0320 	eor.w	r3, r3, #32
 8004748:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]
 800476e:	e01d      	b.n	80047ac <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004786:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800479c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80047d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80047e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3774      	adds	r7, #116	@ 0x74
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop

080047f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b08d      	sub	sp, #52	@ 0x34
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	7b1b      	ldrb	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 808e 	bne.w	8004928 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	785b      	ldrb	r3, [r3, #1]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d044      	beq.n	800489e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	81bb      	strh	r3, [r7, #12]
 8004822:	89bb      	ldrh	r3, [r7, #12]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01b      	beq.n	8004864 <USB_DeactivateEndpoint+0x6c>
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800483e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004842:	817b      	strh	r3, [r7, #10]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	441a      	add	r2, r3
 800484e:	897b      	ldrh	r3, [r7, #10]
 8004850:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004854:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800485c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004860:	b29b      	uxth	r3, r3
 8004862:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800487a:	813b      	strh	r3, [r7, #8]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	893b      	ldrh	r3, [r7, #8]
 8004888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]
 800489c:	e192      	b.n	8004bc4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	827b      	strh	r3, [r7, #18]
 80048ac:	8a7b      	ldrh	r3, [r7, #18]
 80048ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01b      	beq.n	80048ee <USB_DeactivateEndpoint+0xf6>
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048cc:	823b      	strh	r3, [r7, #16]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	8a3b      	ldrh	r3, [r7, #16]
 80048da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004904:	81fb      	strh	r3, [r7, #14]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	441a      	add	r2, r3
 8004910:	89fb      	ldrh	r3, [r7, #14]
 8004912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800491a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800491e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004922:	b29b      	uxth	r3, r3
 8004924:	8013      	strh	r3, [r2, #0]
 8004926:	e14d      	b.n	8004bc4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f040 80a5 	bne.w	8004a7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	843b      	strh	r3, [r7, #32]
 8004940:	8c3b      	ldrh	r3, [r7, #32]
 8004942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01b      	beq.n	8004982 <USB_DeactivateEndpoint+0x18a>
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004960:	83fb      	strh	r3, [r7, #30]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	441a      	add	r2, r3
 800496c:	8bfb      	ldrh	r3, [r7, #30]
 800496e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004976:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800497a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497e:	b29b      	uxth	r3, r3
 8004980:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	83bb      	strh	r3, [r7, #28]
 8004990:	8bbb      	ldrh	r3, [r7, #28]
 8004992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01b      	beq.n	80049d2 <USB_DeactivateEndpoint+0x1da>
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b0:	837b      	strh	r3, [r7, #26]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	441a      	add	r2, r3
 80049bc:	8b7b      	ldrh	r3, [r7, #26]
 80049be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e8:	833b      	strh	r3, [r7, #24]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	8b3b      	ldrh	r3, [r7, #24]
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a20:	82fb      	strh	r3, [r7, #22]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	8afb      	ldrh	r3, [r7, #22]
 8004a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a58:	82bb      	strh	r3, [r7, #20]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	441a      	add	r2, r3
 8004a64:	8abb      	ldrh	r3, [r7, #20]
 8004a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	8013      	strh	r3, [r2, #0]
 8004a7a:	e0a3      	b.n	8004bc4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004a8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <USB_DeactivateEndpoint+0x2d4>
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aaa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	441a      	add	r2, r3
 8004ab6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004ada:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01b      	beq.n	8004b1c <USB_DeactivateEndpoint+0x324>
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	441a      	add	r2, r3
 8004b06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	441a      	add	r2, r3
 8004b3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3734      	adds	r7, #52	@ 0x34
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0c2      	sub	sp, #264	@ 0x108
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bde:	6018      	str	r0, [r3, #0]
 8004be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	f040 86b7 	bne.w	800596a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d908      	bls.n	8004c2a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c28:	e007      	b.n	8004c3a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	7b1b      	ldrb	r3, [r3, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d13a      	bne.n	8004cc0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6959      	ldr	r1, [r3, #20]
 8004c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	88da      	ldrh	r2, [r3, #6]
 8004c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c6c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c70:	6800      	ldr	r0, [r0, #0]
 8004c72:	f001 fc9c 	bl	80065ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	011a      	lsls	r2, r3, #4
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4413      	add	r3, r2
 8004cac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	f000 be1f 	b.w	80058fe <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	78db      	ldrb	r3, [r3, #3]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	f040 8462 	bne.w	8005596 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a1a      	ldr	r2, [r3, #32]
 8004cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	f240 83df 	bls.w	80054ae <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d16:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	441a      	add	r2, r3
 8004d34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d40:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d5c:	1ad2      	subs	r2, r2, r3
 8004d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 81c7 	beq.w	8005120 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d177      	bne.n	8004e9e <USB_EPStartXfer+0x2ce>
 8004dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	4413      	add	r3, r2
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	011a      	lsls	r2, r3, #4
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	4413      	add	r3, r2
 8004de4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfe:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e00:	d921      	bls.n	8004e46 <USB_EPStartXfer+0x276>
 8004e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <USB_EPStartXfer+0x252>
 8004e18:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	029b      	lsls	r3, r3, #10
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4313      	orrs	r3, r2
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	801a      	strh	r2, [r3, #0]
 8004e44:	e050      	b.n	8004ee8 <USB_EPStartXfer+0x318>
 8004e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <USB_EPStartXfer+0x294>
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	e041      	b.n	8004ee8 <USB_EPStartXfer+0x318>
 8004e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d004      	beq.n	8004e84 <USB_EPStartXfer+0x2b4>
 8004e7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e7e:	3301      	adds	r3, #1
 8004e80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	029b      	lsls	r3, r3, #10
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	4313      	orrs	r3, r2
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	e024      	b.n	8004ee8 <USB_EPStartXfer+0x318>
 8004e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d11c      	bne.n	8004ee8 <USB_EPStartXfer+0x318>
 8004eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec2:	4413      	add	r3, r2
 8004ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	011a      	lsls	r2, r3, #4
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	895b      	ldrh	r3, [r3, #10]
 8004ef4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6959      	ldr	r1, [r3, #20]
 8004f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f16:	6800      	ldr	r0, [r0, #0]
 8004f18:	f001 fb49 	bl	80065ae <USB_WritePMA>
            ep->xfer_buff += len;
 8004f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2c:	441a      	add	r2, r3
 8004f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6a1a      	ldr	r2, [r3, #32]
 8004f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90f      	bls.n	8004f76 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	1ad2      	subs	r2, r2, r3
 8004f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	621a      	str	r2, [r3, #32]
 8004f74:	e00e      	b.n	8004f94 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2200      	movs	r2, #0
 8004f92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d177      	bne.n	8005094 <USB_EPStartXfer+0x4c4>
 8004fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	011a      	lsls	r2, r3, #4
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ff6:	d921      	bls.n	800503c <USB_EPStartXfer+0x46c>
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <USB_EPStartXfer+0x448>
 800500e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005012:	3b01      	subs	r3, #1
 8005014:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29a      	uxth	r2, r3
 800501e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005022:	b29b      	uxth	r3, r3
 8005024:	029b      	lsls	r3, r3, #10
 8005026:	b29b      	uxth	r3, r3
 8005028:	4313      	orrs	r3, r2
 800502a:	b29b      	uxth	r3, r3
 800502c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005034:	b29a      	uxth	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	e056      	b.n	80050ea <USB_EPStartXfer+0x51a>
 800503c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10a      	bne.n	800505a <USB_EPStartXfer+0x48a>
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005052:	b29a      	uxth	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	e047      	b.n	80050ea <USB_EPStartXfer+0x51a>
 800505a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <USB_EPStartXfer+0x4aa>
 8005070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005074:	3301      	adds	r3, #1
 8005076:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29a      	uxth	r2, r3
 8005080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005084:	b29b      	uxth	r3, r3
 8005086:	029b      	lsls	r3, r3, #10
 8005088:	b29b      	uxth	r3, r3
 800508a:	4313      	orrs	r3, r2
 800508c:	b29a      	uxth	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	e02a      	b.n	80050ea <USB_EPStartXfer+0x51a>
 8005094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d122      	bne.n	80050ea <USB_EPStartXfer+0x51a>
 80050a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	623b      	str	r3, [r7, #32]
 80050b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050be:	b29b      	uxth	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	4413      	add	r3, r2
 80050c6:	623b      	str	r3, [r7, #32]
 80050c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	011a      	lsls	r2, r3, #4
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	4413      	add	r3, r2
 80050da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	891b      	ldrh	r3, [r3, #8]
 80050f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6959      	ldr	r1, [r3, #20]
 8005106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510a:	b29b      	uxth	r3, r3
 800510c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005110:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005114:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005118:	6800      	ldr	r0, [r0, #0]
 800511a:	f001 fa48 	bl	80065ae <USB_WritePMA>
 800511e:	e3ee      	b.n	80058fe <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d177      	bne.n	8005220 <USB_EPStartXfer+0x650>
 8005130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800513c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800514a:	b29b      	uxth	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005150:	4413      	add	r3, r2
 8005152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	011a      	lsls	r2, r3, #4
 8005162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005164:	4413      	add	r3, r2
 8005166:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800516a:	647b      	str	r3, [r7, #68]	@ 0x44
 800516c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005176:	b29a      	uxth	r2, r3
 8005178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005180:	2b3e      	cmp	r3, #62	@ 0x3e
 8005182:	d921      	bls.n	80051c8 <USB_EPStartXfer+0x5f8>
 8005184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800518e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2b00      	cmp	r3, #0
 8005198:	d104      	bne.n	80051a4 <USB_EPStartXfer+0x5d4>
 800519a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800519e:	3b01      	subs	r3, #1
 80051a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	029b      	lsls	r3, r3, #10
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	4313      	orrs	r3, r2
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	e056      	b.n	8005276 <USB_EPStartXfer+0x6a6>
 80051c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <USB_EPStartXfer+0x616>
 80051d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	e047      	b.n	8005276 <USB_EPStartXfer+0x6a6>
 80051e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <USB_EPStartXfer+0x636>
 80051fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005200:	3301      	adds	r3, #1
 8005202:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29a      	uxth	r2, r3
 800520c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005210:	b29b      	uxth	r3, r3
 8005212:	029b      	lsls	r3, r3, #10
 8005214:	b29b      	uxth	r3, r3
 8005216:	4313      	orrs	r3, r2
 8005218:	b29a      	uxth	r2, r3
 800521a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	e02a      	b.n	8005276 <USB_EPStartXfer+0x6a6>
 8005220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d122      	bne.n	8005276 <USB_EPStartXfer+0x6a6>
 8005230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	653b      	str	r3, [r7, #80]	@ 0x50
 800523c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005250:	4413      	add	r3, r2
 8005252:	653b      	str	r3, [r7, #80]	@ 0x50
 8005254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	011a      	lsls	r2, r3, #4
 8005262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005264:	4413      	add	r3, r2
 8005266:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800526a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800526c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005270:	b29a      	uxth	r2, r3
 8005272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005274:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	891b      	ldrh	r3, [r3, #8]
 8005282:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6959      	ldr	r1, [r3, #20]
 8005292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005296:	b29b      	uxth	r3, r3
 8005298:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800529c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052a4:	6800      	ldr	r0, [r0, #0]
 80052a6:	f001 f982 	bl	80065ae <USB_WritePMA>
            ep->xfer_buff += len;
 80052aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ba:	441a      	add	r2, r3
 80052bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d90f      	bls.n	8005304 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80052e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f4:	1ad2      	subs	r2, r2, r3
 80052f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	621a      	str	r2, [r3, #32]
 8005302:	e00e      	b.n	8005322 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	643b      	str	r3, [r7, #64]	@ 0x40
 800532e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	785b      	ldrb	r3, [r3, #1]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d177      	bne.n	800542e <USB_EPStartXfer+0x85e>
 800533e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	63bb      	str	r3, [r7, #56]	@ 0x38
 800534a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005358:	b29b      	uxth	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535e:	4413      	add	r3, r2
 8005360:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	011a      	lsls	r2, r3, #4
 8005370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005372:	4413      	add	r3, r2
 8005374:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005378:	637b      	str	r3, [r7, #52]	@ 0x34
 800537a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005384:	b29a      	uxth	r2, r3
 8005386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005390:	d921      	bls.n	80053d6 <USB_EPStartXfer+0x806>
 8005392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800539c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <USB_EPStartXfer+0x7e2>
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ac:	3b01      	subs	r3, #1
 80053ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	b29b      	uxth	r3, r3
 80053be:	029b      	lsls	r3, r3, #10
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	4313      	orrs	r3, r2
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d2:	801a      	strh	r2, [r3, #0]
 80053d4:	e050      	b.n	8005478 <USB_EPStartXfer+0x8a8>
 80053d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <USB_EPStartXfer+0x824>
 80053de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	e041      	b.n	8005478 <USB_EPStartXfer+0x8a8>
 80053f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f8:	085b      	lsrs	r3, r3, #1
 80053fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <USB_EPStartXfer+0x844>
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	3301      	adds	r3, #1
 8005410:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29a      	uxth	r2, r3
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541e:	b29b      	uxth	r3, r3
 8005420:	029b      	lsls	r3, r3, #10
 8005422:	b29b      	uxth	r3, r3
 8005424:	4313      	orrs	r3, r2
 8005426:	b29a      	uxth	r2, r3
 8005428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	e024      	b.n	8005478 <USB_EPStartXfer+0x8a8>
 800542e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d11c      	bne.n	8005478 <USB_EPStartXfer+0x8a8>
 800543e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800544c:	b29b      	uxth	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005452:	4413      	add	r3, r2
 8005454:	643b      	str	r3, [r7, #64]	@ 0x40
 8005456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	011a      	lsls	r2, r3, #4
 8005464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005466:	4413      	add	r3, r2
 8005468:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800546c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005472:	b29a      	uxth	r2, r3
 8005474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005476:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	895b      	ldrh	r3, [r3, #10]
 8005484:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6959      	ldr	r1, [r3, #20]
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005498:	b29b      	uxth	r3, r3
 800549a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800549e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054a6:	6800      	ldr	r0, [r0, #0]
 80054a8:	f001 f881 	bl	80065ae <USB_WritePMA>
 80054ac:	e227      	b.n	80058fe <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80054ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80054be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80054e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80054e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800551a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005534:	b29b      	uxth	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800553a:	4413      	add	r3, r2
 800553c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800553e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	011a      	lsls	r2, r3, #4
 800554c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800554e:	4413      	add	r3, r2
 8005550:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005554:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555a:	b29a      	uxth	r2, r3
 800555c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800555e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	891b      	ldrh	r3, [r3, #8]
 800556c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6959      	ldr	r1, [r3, #20]
 800557c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005580:	b29b      	uxth	r3, r3
 8005582:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005586:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800558a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	f001 f80d 	bl	80065ae <USB_WritePMA>
 8005594:	e1b3      	b.n	80058fe <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a1a      	ldr	r2, [r3, #32]
 80055a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 80c6 	beq.w	8005768 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80055e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d177      	bne.n	80056e8 <USB_EPStartXfer+0xb18>
 80055f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005612:	b29b      	uxth	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005618:	4413      	add	r3, r2
 800561a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800561c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	011a      	lsls	r2, r3, #4
 800562a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800562c:	4413      	add	r3, r2
 800562e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005632:	667b      	str	r3, [r7, #100]	@ 0x64
 8005634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800563e:	b29a      	uxth	r2, r3
 8005640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	2b3e      	cmp	r3, #62	@ 0x3e
 800564a:	d921      	bls.n	8005690 <USB_EPStartXfer+0xac0>
 800564c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <USB_EPStartXfer+0xa9c>
 8005662:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005666:	3b01      	subs	r3, #1
 8005668:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800566c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29a      	uxth	r2, r3
 8005672:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005676:	b29b      	uxth	r3, r3
 8005678:	029b      	lsls	r3, r3, #10
 800567a:	b29b      	uxth	r3, r3
 800567c:	4313      	orrs	r3, r2
 800567e:	b29b      	uxth	r3, r3
 8005680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005688:	b29a      	uxth	r2, r3
 800568a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	e050      	b.n	8005732 <USB_EPStartXfer+0xb62>
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <USB_EPStartXfer+0xade>
 8005698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e041      	b.n	8005732 <USB_EPStartXfer+0xb62>
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <USB_EPStartXfer+0xafe>
 80056c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056c8:	3301      	adds	r3, #1
 80056ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056d8:	b29b      	uxth	r3, r3
 80056da:	029b      	lsls	r3, r3, #10
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4313      	orrs	r3, r2
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e024      	b.n	8005732 <USB_EPStartXfer+0xb62>
 80056e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d11c      	bne.n	8005732 <USB_EPStartXfer+0xb62>
 80056f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800570c:	4413      	add	r3, r2
 800570e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	011a      	lsls	r2, r3, #4
 800571e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005720:	4413      	add	r3, r2
 8005722:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005726:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572c:	b29a      	uxth	r2, r3
 800572e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005730:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	895b      	ldrh	r3, [r3, #10]
 800573e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6959      	ldr	r1, [r3, #20]
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005752:	b29b      	uxth	r3, r3
 8005754:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005758:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800575c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005760:	6800      	ldr	r0, [r0, #0]
 8005762:	f000 ff24 	bl	80065ae <USB_WritePMA>
 8005766:	e0ca      	b.n	80058fe <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d177      	bne.n	8005868 <USB_EPStartXfer+0xc98>
 8005778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005792:	b29b      	uxth	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005798:	4413      	add	r3, r2
 800579a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800579c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057ac:	4413      	add	r3, r2
 80057ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057c2:	801a      	strh	r2, [r3, #0]
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80057ca:	d921      	bls.n	8005810 <USB_EPStartXfer+0xc40>
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <USB_EPStartXfer+0xc1c>
 80057e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80057e6:	3b01      	subs	r3, #1
 80057e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e05c      	b.n	80058ca <USB_EPStartXfer+0xcfa>
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <USB_EPStartXfer+0xc5e>
 8005818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e04d      	b.n	80058ca <USB_EPStartXfer+0xcfa>
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <USB_EPStartXfer+0xc7e>
 8005844:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005848:	3301      	adds	r3, #1
 800584a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800584e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29a      	uxth	r2, r3
 8005854:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005858:	b29b      	uxth	r3, r3
 800585a:	029b      	lsls	r3, r3, #10
 800585c:	b29b      	uxth	r3, r3
 800585e:	4313      	orrs	r3, r2
 8005860:	b29a      	uxth	r2, r3
 8005862:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e030      	b.n	80058ca <USB_EPStartXfer+0xcfa>
 8005868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d128      	bne.n	80058ca <USB_EPStartXfer+0xcfa>
 8005878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005894:	b29b      	uxth	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800589c:	4413      	add	r3, r2
 800589e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	011a      	lsls	r2, r3, #4
 80058b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058b4:	4413      	add	r3, r2
 80058b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	891b      	ldrh	r3, [r3, #8]
 80058d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6959      	ldr	r1, [r3, #20]
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058f8:	6800      	ldr	r0, [r0, #0]
 80058fa:	f000 fe58 	bl	80065ae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005924:	817b      	strh	r3, [r7, #10]
 8005926:	897b      	ldrh	r3, [r7, #10]
 8005928:	f083 0310 	eor.w	r3, r3, #16
 800592c:	817b      	strh	r3, [r7, #10]
 800592e:	897b      	ldrh	r3, [r7, #10]
 8005930:	f083 0320 	eor.w	r3, r3, #32
 8005934:	817b      	strh	r3, [r7, #10]
 8005936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	441a      	add	r2, r3
 8005950:	897b      	ldrh	r3, [r7, #10]
 8005952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800595a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005962:	b29b      	uxth	r3, r3
 8005964:	8013      	strh	r3, [r2, #0]
 8005966:	f000 bcde 	b.w	8006326 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800596a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	7b1b      	ldrb	r3, [r3, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 80bb 	bne.w	8005af2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800597c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d917      	bls.n	80059c8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80059a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b8:	1ad2      	subs	r2, r2, r3
 80059ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	619a      	str	r2, [r3, #24]
 80059c6:	e00e      	b.n	80059e6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80059c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	011a      	lsls	r2, r3, #4
 8005a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a22:	4413      	add	r3, r2
 8005a24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a44:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a46:	d924      	bls.n	8005a92 <USB_EPStartXfer+0xec2>
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <USB_EPStartXfer+0xe98>
 8005a5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a62:	3b01      	subs	r3, #1
 8005a64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	029b      	lsls	r3, r3, #10
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	f000 bc10 	b.w	80062b2 <USB_EPStartXfer+0x16e2>
 8005a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10c      	bne.n	8005ab4 <USB_EPStartXfer+0xee4>
 8005a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	e3fe      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
 8005ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <USB_EPStartXfer+0xf04>
 8005aca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aee:	801a      	strh	r2, [r3, #0]
 8005af0:	e3df      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	78db      	ldrb	r3, [r3, #3]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	f040 8218 	bne.w	8005f34 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f040 809d 	bne.w	8005c50 <USB_EPStartXfer+0x1080>
 8005b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	011a      	lsls	r2, r3, #4
 8005b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b52:	4413      	add	r3, r2
 8005b54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b7e:	d92b      	bls.n	8005bd8 <USB_EPStartXfer+0x1008>
 8005b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <USB_EPStartXfer+0xfe0>
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005baa:	3b01      	subs	r3, #1
 8005bac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	029b      	lsls	r3, r3, #10
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	e070      	b.n	8005cba <USB_EPStartXfer+0x10ea>
 8005bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10c      	bne.n	8005c02 <USB_EPStartXfer+0x1032>
 8005be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e05b      	b.n	8005cba <USB_EPStartXfer+0x10ea>
 8005c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <USB_EPStartXfer+0x1062>
 8005c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	e034      	b.n	8005cba <USB_EPStartXfer+0x10ea>
 8005c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d12c      	bne.n	8005cba <USB_EPStartXfer+0x10ea>
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c84:	4413      	add	r3, r2
 8005c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	011a      	lsls	r2, r3, #4
 8005c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 809d 	bne.w	8005e14 <USB_EPStartXfer+0x1244>
 8005cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cfe:	4413      	add	r3, r2
 8005d00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	011a      	lsls	r2, r3, #4
 8005d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d16:	4413      	add	r3, r2
 8005d18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d42:	d92b      	bls.n	8005d9c <USB_EPStartXfer+0x11cc>
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <USB_EPStartXfer+0x11a4>
 8005d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e069      	b.n	8005e70 <USB_EPStartXfer+0x12a0>
 8005d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <USB_EPStartXfer+0x11f6>
 8005dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e054      	b.n	8005e70 <USB_EPStartXfer+0x12a0>
 8005dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <USB_EPStartXfer+0x1226>
 8005dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df0:	3301      	adds	r3, #1
 8005df2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005df6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e02d      	b.n	8005e70 <USB_EPStartXfer+0x12a0>
 8005e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d125      	bne.n	8005e70 <USB_EPStartXfer+0x12a0>
 8005e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	011a      	lsls	r2, r3, #4
 8005e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e52:	4413      	add	r3, r2
 8005e54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e6e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8218 	beq.w	80062b2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ea2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <USB_EPStartXfer+0x12ea>
 8005eae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10d      	bne.n	8005ed6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005eba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f040 81f5 	bne.w	80062b2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ec8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 81ee 	bne.w	80062b2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	441a      	add	r2, r3
 8005f1a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	8013      	strh	r3, [r2, #0]
 8005f32:	e1be      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	78db      	ldrb	r3, [r3, #3]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	f040 81b4 	bne.w	80062ae <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d917      	bls.n	8005f92 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	619a      	str	r2, [r3, #24]
 8005f90:	e00e      	b.n	8005fb0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2200      	movs	r2, #0
 8005fae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 8085 	bne.w	80060cc <USB_EPStartXfer+0x14fc>
 8005fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	011a      	lsls	r2, r3, #4
 8005ffa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ffe:	4413      	add	r3, r2
 8006000:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006004:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006008:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006014:	b29a      	uxth	r2, r3
 8006016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	2b3e      	cmp	r3, #62	@ 0x3e
 8006022:	d923      	bls.n	800606c <USB_EPStartXfer+0x149c>
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <USB_EPStartXfer+0x1474>
 800603a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800603e:	3b01      	subs	r3, #1
 8006040:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29a      	uxth	r2, r3
 800604c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006050:	b29b      	uxth	r3, r3
 8006052:	029b      	lsls	r3, r3, #10
 8006054:	b29b      	uxth	r3, r3
 8006056:	4313      	orrs	r3, r2
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29a      	uxth	r2, r3
 8006064:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	e060      	b.n	800612e <USB_EPStartXfer+0x155e>
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10c      	bne.n	800608e <USB_EPStartXfer+0x14be>
 8006074:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006084:	b29a      	uxth	r2, r3
 8006086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	e04f      	b.n	800612e <USB_EPStartXfer+0x155e>
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <USB_EPStartXfer+0x14de>
 80060a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a8:	3301      	adds	r3, #1
 80060aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	029b      	lsls	r3, r3, #10
 80060be:	b29b      	uxth	r3, r3
 80060c0:	4313      	orrs	r3, r2
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	e030      	b.n	800612e <USB_EPStartXfer+0x155e>
 80060cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	785b      	ldrb	r3, [r3, #1]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d128      	bne.n	800612e <USB_EPStartXfer+0x155e>
 80060dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006100:	4413      	add	r3, r2
 8006102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	011a      	lsls	r2, r3, #4
 8006114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006118:	4413      	add	r3, r2
 800611a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800611e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	b29a      	uxth	r2, r3
 8006128:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800613c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 8085 	bne.w	8006258 <USB_EPStartXfer+0x1688>
 800614e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006152:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800615c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800616a:	b29b      	uxth	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006172:	4413      	add	r3, r2
 8006174:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	011a      	lsls	r2, r3, #4
 8006186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800618a:	4413      	add	r3, r2
 800618c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006194:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80061ae:	d923      	bls.n	80061f8 <USB_EPStartXfer+0x1628>
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <USB_EPStartXfer+0x1600>
 80061c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061ca:	3b01      	subs	r3, #1
 80061cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061dc:	b29b      	uxth	r3, r3
 80061de:	029b      	lsls	r3, r3, #10
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	4313      	orrs	r3, r2
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	e05c      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10c      	bne.n	800621a <USB_EPStartXfer+0x164a>
 8006200:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006210:	b29a      	uxth	r2, r3
 8006212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	e04b      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
 800621a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <USB_EPStartXfer+0x166a>
 8006230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006234:	3301      	adds	r3, #1
 8006236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800623a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29a      	uxth	r2, r3
 8006242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006246:	b29b      	uxth	r3, r3
 8006248:	029b      	lsls	r3, r3, #10
 800624a:	b29b      	uxth	r3, r3
 800624c:	4313      	orrs	r3, r2
 800624e:	b29a      	uxth	r2, r3
 8006250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	e02c      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
 8006258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d124      	bne.n	80062b2 <USB_EPStartXfer+0x16e2>
 8006268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006276:	b29b      	uxth	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800627e:	4413      	add	r3, r2
 8006280:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	011a      	lsls	r2, r3, #4
 8006292:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006296:	4413      	add	r3, r2
 8006298:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800629c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	e001      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e03a      	b.n	8006328 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80062e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	441a      	add	r2, r3
 800630e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800631a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800631e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006322:	b29b      	uxth	r3, r3
 8006324:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d020      	beq.n	8006386 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800635a:	81bb      	strh	r3, [r7, #12]
 800635c:	89bb      	ldrh	r3, [r7, #12]
 800635e:	f083 0310 	eor.w	r3, r3, #16
 8006362:	81bb      	strh	r3, [r7, #12]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	441a      	add	r2, r3
 800636e:	89bb      	ldrh	r3, [r7, #12]
 8006370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800637c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006380:	b29b      	uxth	r3, r3
 8006382:	8013      	strh	r3, [r2, #0]
 8006384:	e01f      	b.n	80063c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639c:	81fb      	strh	r3, [r7, #14]
 800639e:	89fb      	ldrh	r3, [r7, #14]
 80063a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80063a4:	81fb      	strh	r3, [r7, #14]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	441a      	add	r2, r3
 80063b0:	89fb      	ldrh	r3, [r7, #14]
 80063b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr

080063d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b087      	sub	sp, #28
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	7b1b      	ldrb	r3, [r3, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f040 809d 	bne.w	8006520 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d04c      	beq.n	8006488 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	823b      	strh	r3, [r7, #16]
 80063fc:	8a3b      	ldrh	r3, [r7, #16]
 80063fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01b      	beq.n	800643e <USB_EPClearStall+0x6c>
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641c:	81fb      	strh	r3, [r7, #14]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	441a      	add	r2, r3
 8006428:	89fb      	ldrh	r3, [r7, #14]
 800642a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800642e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006436:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800643a:	b29b      	uxth	r3, r3
 800643c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	78db      	ldrb	r3, [r3, #3]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d06c      	beq.n	8006520 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800645c:	81bb      	strh	r3, [r7, #12]
 800645e:	89bb      	ldrh	r3, [r7, #12]
 8006460:	f083 0320 	eor.w	r3, r3, #32
 8006464:	81bb      	strh	r3, [r7, #12]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	441a      	add	r2, r3
 8006470:	89bb      	ldrh	r3, [r7, #12]
 8006472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800647e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006482:	b29b      	uxth	r3, r3
 8006484:	8013      	strh	r3, [r2, #0]
 8006486:	e04b      	b.n	8006520 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	82fb      	strh	r3, [r7, #22]
 8006496:	8afb      	ldrh	r3, [r7, #22]
 8006498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01b      	beq.n	80064d8 <USB_EPClearStall+0x106>
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b6:	82bb      	strh	r3, [r7, #20]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	441a      	add	r2, r3
 80064c2:	8abb      	ldrh	r3, [r7, #20]
 80064c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ee:	827b      	strh	r3, [r7, #18]
 80064f0:	8a7b      	ldrh	r3, [r7, #18]
 80064f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064f6:	827b      	strh	r3, [r7, #18]
 80064f8:	8a7b      	ldrh	r3, [r7, #18]
 80064fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064fe:	827b      	strh	r3, [r7, #18]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	8a7b      	ldrh	r3, [r7, #18]
 800650c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800651c:	b29b      	uxth	r3, r3
 800651e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr

0800652c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d103      	bne.n	8006546 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2280      	movs	r2, #128	@ 0x80
 8006542:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr

08006552 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	bc80      	pop	{r7}
 8006564:	4770      	bx	lr

08006566 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr

0800657a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006588:	b29b      	uxth	r3, r3
 800658a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800658c:	68fb      	ldr	r3, [r7, #12]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr

08006598 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b08b      	sub	sp, #44	@ 0x2c
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	4611      	mov	r1, r2
 80065ba:	461a      	mov	r2, r3
 80065bc:	460b      	mov	r3, r1
 80065be:	80fb      	strh	r3, [r7, #6]
 80065c0:	4613      	mov	r3, r2
 80065c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065c4:	88bb      	ldrh	r3, [r7, #4]
 80065c6:	3301      	adds	r3, #1
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	005a      	lsls	r2, r3, #1
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065e0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e6:	e01e      	b.n	8006626 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	3301      	adds	r3, #1
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	b21a      	sxth	r2, r3
 80065f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b21b      	sxth	r3, r3
 8006600:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	8a7a      	ldrh	r2, [r7, #18]
 8006606:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	3302      	adds	r3, #2
 800660c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	3302      	adds	r3, #2
 8006612:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	3301      	adds	r3, #1
 8006618:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	3301      	adds	r3, #1
 800661e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	3b01      	subs	r3, #1
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1dd      	bne.n	80065e8 <USB_WritePMA+0x3a>
  }
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	372c      	adds	r7, #44	@ 0x2c
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006638:	b480      	push	{r7}
 800663a:	b08b      	sub	sp, #44	@ 0x2c
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	4611      	mov	r1, r2
 8006644:	461a      	mov	r2, r3
 8006646:	460b      	mov	r3, r1
 8006648:	80fb      	strh	r3, [r7, #6]
 800664a:	4613      	mov	r3, r2
 800664c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800664e:	88bb      	ldrh	r3, [r7, #4]
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	b29b      	uxth	r3, r3
 8006654:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	005a      	lsls	r2, r3, #1
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800666a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006670:	e01b      	b.n	80066aa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	3302      	adds	r3, #2
 800667e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	3301      	adds	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	0a1b      	lsrs	r3, r3, #8
 8006692:	b2da      	uxtb	r2, r3
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	3301      	adds	r3, #1
 800669c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	3302      	adds	r3, #2
 80066a2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	3b01      	subs	r3, #1
 80066a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e0      	bne.n	8006672 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80066b0:	88bb      	ldrh	r3, [r7, #4]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	701a      	strb	r2, [r3, #0]
  }
}
 80066cc:	bf00      	nop
 80066ce:	372c      	adds	r7, #44	@ 0x2c
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr

080066d6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066ea:	2302      	movs	r3, #2
 80066ec:	e01a      	b.n	8006724 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	79fa      	ldrb	r2, [r7, #7]
 800671a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f001 fbe1 	bl	8007ee4 <USBD_LL_Init>

  return USBD_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d006      	beq.n	800674e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]
 800674c:	e001      	b.n	8006752 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800674e:	2302      	movs	r3, #2
 8006750:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr

0800675e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fc04 	bl	8007f74 <USBD_LL_Start>

  return USBD_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006796:	2302      	movs	r3, #2
 8006798:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00c      	beq.n	80067be <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	4611      	mov	r1, r2
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80067be:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	78fa      	ldrb	r2, [r7, #3]
 80067de:	4611      	mov	r1, r2
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3

  return USBD_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fed8 	bl	80075b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006814:	461a      	mov	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	2b02      	cmp	r3, #2
 8006828:	d016      	beq.n	8006858 <USBD_LL_SetupStage+0x6a>
 800682a:	2b02      	cmp	r3, #2
 800682c:	d81c      	bhi.n	8006868 <USBD_LL_SetupStage+0x7a>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <USBD_LL_SetupStage+0x4a>
 8006832:	2b01      	cmp	r3, #1
 8006834:	d008      	beq.n	8006848 <USBD_LL_SetupStage+0x5a>
 8006836:	e017      	b.n	8006868 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9cb 	bl	8006bdc <USBD_StdDevReq>
      break;
 8006846:	e01a      	b.n	800687e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fa2d 	bl	8006cb0 <USBD_StdItfReq>
      break;
 8006856:	e012      	b.n	800687e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fa6d 	bl	8006d40 <USBD_StdEPReq>
      break;
 8006866:	e00a      	b.n	800687e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800686e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006872:	b2db      	uxtb	r3, r3
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fbdc 	bl	8008034 <USBD_LL_StallEP>
      break;
 800687c:	bf00      	nop
  }

  return USBD_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	460b      	mov	r3, r1
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006896:	7afb      	ldrb	r3, [r7, #11]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d14b      	bne.n	8006934 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80068a2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d134      	bne.n	8006918 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d919      	bls.n	80068ee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	1ad2      	subs	r2, r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d203      	bcs.n	80068dc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80068d8:	b29b      	uxth	r3, r3
 80068da:	e002      	b.n	80068e2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f001 f8ce 	bl	8007a88 <USBD_CtlContinueRx>
 80068ec:	e038      	b.n	8006960 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006900:	2b03      	cmp	r3, #3
 8006902:	d105      	bne.n	8006910 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f001 f8cb 	bl	8007aac <USBD_CtlSendStatus>
 8006916:	e023      	b.n	8006960 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800691e:	2b05      	cmp	r3, #5
 8006920:	d11e      	bne.n	8006960 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800692a:	2100      	movs	r1, #0
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f001 fb81 	bl	8008034 <USBD_LL_StallEP>
 8006932:	e015      	b.n	8006960 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006946:	2b03      	cmp	r3, #3
 8006948:	d108      	bne.n	800695c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	7afa      	ldrb	r2, [r7, #11]
 8006954:	4611      	mov	r1, r2
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	4798      	blx	r3
 800695a:	e001      	b.n	8006960 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800695c:	2302      	movs	r3, #2
 800695e:	e000      	b.n	8006962 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	460b      	mov	r3, r1
 8006974:	607a      	str	r2, [r7, #4]
 8006976:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006978:	7afb      	ldrb	r3, [r7, #11]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d17f      	bne.n	8006a7e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3314      	adds	r3, #20
 8006982:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800698a:	2b02      	cmp	r3, #2
 800698c:	d15c      	bne.n	8006a48 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	429a      	cmp	r2, r3
 8006998:	d915      	bls.n	80069c6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	1ad2      	subs	r2, r2, r3
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f001 f856 	bl	8007a64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069b8:	2300      	movs	r3, #0
 80069ba:	2200      	movs	r2, #0
 80069bc:	2100      	movs	r1, #0
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f001 fbe3 	bl	800818a <USBD_LL_PrepareReceive>
 80069c4:	e04e      	b.n	8006a64 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	6912      	ldr	r2, [r2, #16]
 80069ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80069d2:	fb01 f202 	mul.w	r2, r1, r2
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d11c      	bne.n	8006a16 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d316      	bcc.n	8006a16 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d20f      	bcs.n	8006a16 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069f6:	2200      	movs	r2, #0
 80069f8:	2100      	movs	r1, #0
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f001 f832 	bl	8007a64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f001 fbbb 	bl	800818a <USBD_LL_PrepareReceive>
 8006a14:	e026      	b.n	8006a64 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d105      	bne.n	8006a38 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006a38:	2180      	movs	r1, #128	@ 0x80
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f001 fafa 	bl	8008034 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f001 f846 	bl	8007ad2 <USBD_CtlReceiveStatus>
 8006a46:	e00d      	b.n	8006a64 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d004      	beq.n	8006a5c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006a5c:	2180      	movs	r1, #128	@ 0x80
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f001 fae8 	bl	8008034 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d11d      	bne.n	8006aaa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff fe81 	bl	8006776 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006a7c:	e015      	b.n	8006aaa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00d      	beq.n	8006aa6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d108      	bne.n	8006aa6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	7afa      	ldrb	r2, [r7, #11]
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	4798      	blx	r3
 8006aa4:	e001      	b.n	8006aaa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e000      	b.n	8006aac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006abc:	2340      	movs	r3, #64	@ 0x40
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fa71 	bl	8007faa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2240      	movs	r2, #64	@ 0x40
 8006ad4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ad8:	2340      	movs	r3, #64	@ 0x40
 8006ada:	2200      	movs	r2, #0
 8006adc:	2180      	movs	r1, #128	@ 0x80
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 fa63 	bl	8007faa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2240      	movs	r2, #64	@ 0x40
 8006aee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6852      	ldr	r2, [r2, #4]
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	4611      	mov	r1, r2
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
  }

  return USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	78fa      	ldrb	r2, [r7, #3]
 8006b46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2204      	movs	r2, #4
 8006b6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr

08006b7c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d105      	bne.n	8006b9a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d10b      	bne.n	8006bd0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bf2:	2b40      	cmp	r3, #64	@ 0x40
 8006bf4:	d005      	beq.n	8006c02 <USBD_StdDevReq+0x26>
 8006bf6:	2b40      	cmp	r3, #64	@ 0x40
 8006bf8:	d84f      	bhi.n	8006c9a <USBD_StdDevReq+0xbe>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <USBD_StdDevReq+0x36>
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d14b      	bne.n	8006c9a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4798      	blx	r3
      break;
 8006c10:	e048      	b.n	8006ca4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b09      	cmp	r3, #9
 8006c18:	d839      	bhi.n	8006c8e <USBD_StdDevReq+0xb2>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <USBD_StdDevReq+0x44>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c71 	.word	0x08006c71
 8006c24:	08006c85 	.word	0x08006c85
 8006c28:	08006c8f 	.word	0x08006c8f
 8006c2c:	08006c7b 	.word	0x08006c7b
 8006c30:	08006c8f 	.word	0x08006c8f
 8006c34:	08006c53 	.word	0x08006c53
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c8f 	.word	0x08006c8f
 8006c40:	08006c67 	.word	0x08006c67
 8006c44:	08006c5d 	.word	0x08006c5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f9dc 	bl	8007008 <USBD_GetDescriptor>
          break;
 8006c50:	e022      	b.n	8006c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fb3f 	bl	80072d8 <USBD_SetAddress>
          break;
 8006c5a:	e01d      	b.n	8006c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fb7e 	bl	8007360 <USBD_SetConfig>
          break;
 8006c64:	e018      	b.n	8006c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fc07 	bl	800747c <USBD_GetConfig>
          break;
 8006c6e:	e013      	b.n	8006c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fc37 	bl	80074e6 <USBD_GetStatus>
          break;
 8006c78:	e00e      	b.n	8006c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fc65 	bl	800754c <USBD_SetFeature>
          break;
 8006c82:	e009      	b.n	8006c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fc74 	bl	8007574 <USBD_ClrFeature>
          break;
 8006c8c:	e004      	b.n	8006c98 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fcc9 	bl	8007628 <USBD_CtlError>
          break;
 8006c96:	bf00      	nop
      }
      break;
 8006c98:	e004      	b.n	8006ca4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fcc3 	bl	8007628 <USBD_CtlError>
      break;
 8006ca2:	bf00      	nop
  }

  return ret;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop

08006cb0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cc6:	2b40      	cmp	r3, #64	@ 0x40
 8006cc8:	d005      	beq.n	8006cd6 <USBD_StdItfReq+0x26>
 8006cca:	2b40      	cmp	r3, #64	@ 0x40
 8006ccc:	d82e      	bhi.n	8006d2c <USBD_StdItfReq+0x7c>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <USBD_StdItfReq+0x26>
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d12a      	bne.n	8006d2c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d81d      	bhi.n	8006d1e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	889b      	ldrh	r3, [r3, #4]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d813      	bhi.n	8006d14 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d110      	bne.n	8006d28 <USBD_StdItfReq+0x78>
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10d      	bne.n	8006d28 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fecd 	bl	8007aac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d12:	e009      	b.n	8006d28 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fc86 	bl	8007628 <USBD_CtlError>
          break;
 8006d1c:	e004      	b.n	8006d28 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fc81 	bl	8007628 <USBD_CtlError>
          break;
 8006d26:	e000      	b.n	8006d2a <USBD_StdItfReq+0x7a>
          break;
 8006d28:	bf00      	nop
      }
      break;
 8006d2a:	e004      	b.n	8006d36 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fc7a 	bl	8007628 <USBD_CtlError>
      break;
 8006d34:	bf00      	nop
  }

  return USBD_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	889b      	ldrh	r3, [r3, #4]
 8006d52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d5c:	2b40      	cmp	r3, #64	@ 0x40
 8006d5e:	d007      	beq.n	8006d70 <USBD_StdEPReq+0x30>
 8006d60:	2b40      	cmp	r3, #64	@ 0x40
 8006d62:	f200 8146 	bhi.w	8006ff2 <USBD_StdEPReq+0x2b2>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <USBD_StdEPReq+0x40>
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	f040 8141 	bne.w	8006ff2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
      break;
 8006d7e:	e13d      	b.n	8006ffc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d10a      	bne.n	8006da2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	e12d      	b.n	8006ffe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d007      	beq.n	8006dba <USBD_StdEPReq+0x7a>
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	f300 811b 	bgt.w	8006fe6 <USBD_StdEPReq+0x2a6>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d072      	beq.n	8006e9a <USBD_StdEPReq+0x15a>
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d03a      	beq.n	8006e2e <USBD_StdEPReq+0xee>
 8006db8:	e115      	b.n	8006fe6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d002      	beq.n	8006dca <USBD_StdEPReq+0x8a>
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d015      	beq.n	8006df4 <USBD_StdEPReq+0xb4>
 8006dc8:	e02b      	b.n	8006e22 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00c      	beq.n	8006dea <USBD_StdEPReq+0xaa>
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b80      	cmp	r3, #128	@ 0x80
 8006dd4:	d009      	beq.n	8006dea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 f92a 	bl	8008034 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006de0:	2180      	movs	r1, #128	@ 0x80
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 f926 	bl	8008034 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006de8:	e020      	b.n	8006e2c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fc1b 	bl	8007628 <USBD_CtlError>
              break;
 8006df2:	e01b      	b.n	8006e2c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	885b      	ldrh	r3, [r3, #2]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10e      	bne.n	8006e1a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00b      	beq.n	8006e1a <USBD_StdEPReq+0xda>
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b80      	cmp	r3, #128	@ 0x80
 8006e06:	d008      	beq.n	8006e1a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	88db      	ldrh	r3, [r3, #6]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d104      	bne.n	8006e1a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 f90d 	bl	8008034 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fe46 	bl	8007aac <USBD_CtlSendStatus>

              break;
 8006e20:	e004      	b.n	8006e2c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fbff 	bl	8007628 <USBD_CtlError>
              break;
 8006e2a:	bf00      	nop
          }
          break;
 8006e2c:	e0e0      	b.n	8006ff0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d002      	beq.n	8006e3e <USBD_StdEPReq+0xfe>
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d015      	beq.n	8006e68 <USBD_StdEPReq+0x128>
 8006e3c:	e026      	b.n	8006e8c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00c      	beq.n	8006e5e <USBD_StdEPReq+0x11e>
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	2b80      	cmp	r3, #128	@ 0x80
 8006e48:	d009      	beq.n	8006e5e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 f8f0 	bl	8008034 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e54:	2180      	movs	r1, #128	@ 0x80
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 f8ec 	bl	8008034 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e5c:	e01c      	b.n	8006e98 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fbe1 	bl	8007628 <USBD_CtlError>
              break;
 8006e66:	e017      	b.n	8006e98 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	885b      	ldrh	r3, [r3, #2]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d112      	bne.n	8006e96 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d004      	beq.n	8006e84 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 f8f7 	bl	8008072 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fe11 	bl	8007aac <USBD_CtlSendStatus>
              }
              break;
 8006e8a:	e004      	b.n	8006e96 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fbca 	bl	8007628 <USBD_CtlError>
              break;
 8006e94:	e000      	b.n	8006e98 <USBD_StdEPReq+0x158>
              break;
 8006e96:	bf00      	nop
          }
          break;
 8006e98:	e0aa      	b.n	8006ff0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d002      	beq.n	8006eaa <USBD_StdEPReq+0x16a>
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d032      	beq.n	8006f0e <USBD_StdEPReq+0x1ce>
 8006ea8:	e097      	b.n	8006fda <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d007      	beq.n	8006ec0 <USBD_StdEPReq+0x180>
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	2b80      	cmp	r3, #128	@ 0x80
 8006eb4:	d004      	beq.n	8006ec0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fbb5 	bl	8007628 <USBD_CtlError>
                break;
 8006ebe:	e091      	b.n	8006fe4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	da0b      	bge.n	8006ee0 <USBD_StdEPReq+0x1a0>
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	3310      	adds	r3, #16
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	3304      	adds	r3, #4
 8006ede:	e00b      	b.n	8006ef8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2202      	movs	r2, #2
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fd90 	bl	8007a2c <USBD_CtlSendData>
              break;
 8006f0c:	e06a      	b.n	8006fe4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da11      	bge.n	8006f3a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	f003 020f 	and.w	r2, r3, #15
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	440b      	add	r3, r1
 8006f28:	3318      	adds	r3, #24
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d117      	bne.n	8006f60 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fb78 	bl	8007628 <USBD_CtlError>
                  break;
 8006f38:	e054      	b.n	8006fe4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	f003 020f 	and.w	r2, r3, #15
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d104      	bne.n	8006f60 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fb65 	bl	8007628 <USBD_CtlError>
                  break;
 8006f5e:	e041      	b.n	8006fe4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	da0b      	bge.n	8006f80 <USBD_StdEPReq+0x240>
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	3310      	adds	r3, #16
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	e00b      	b.n	8006f98 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
 8006f82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4413      	add	r3, r2
 8006f96:	3304      	adds	r3, #4
 8006f98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <USBD_StdEPReq+0x266>
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2b80      	cmp	r3, #128	@ 0x80
 8006fa4:	d103      	bne.n	8006fae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	e00e      	b.n	8006fcc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006fae:	7bbb      	ldrb	r3, [r7, #14]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 f87c 	bl	80080b0 <USBD_LL_IsStallEP>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	e002      	b.n	8006fcc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fd2a 	bl	8007a2c <USBD_CtlSendData>
              break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fb23 	bl	8007628 <USBD_CtlError>
              break;
 8006fe2:	bf00      	nop
          }
          break;
 8006fe4:	e004      	b.n	8006ff0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fb1d 	bl	8007628 <USBD_CtlError>
          break;
 8006fee:	bf00      	nop
      }
      break;
 8006ff0:	e004      	b.n	8006ffc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fb17 	bl	8007628 <USBD_CtlError>
      break;
 8006ffa:	bf00      	nop
  }

  return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	885b      	ldrh	r3, [r3, #2]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	2b06      	cmp	r3, #6
 800702a:	f200 8128 	bhi.w	800727e <USBD_GetDescriptor+0x276>
 800702e:	a201      	add	r2, pc, #4	@ (adr r2, 8007034 <USBD_GetDescriptor+0x2c>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	08007051 	.word	0x08007051
 8007038:	08007069 	.word	0x08007069
 800703c:	080070a9 	.word	0x080070a9
 8007040:	0800727f 	.word	0x0800727f
 8007044:	0800727f 	.word	0x0800727f
 8007048:	0800721f 	.word	0x0800721f
 800704c:	0800724b 	.word	0x0800724b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	7c12      	ldrb	r2, [r2, #16]
 800705c:	f107 0108 	add.w	r1, r7, #8
 8007060:	4610      	mov	r0, r2
 8007062:	4798      	blx	r3
 8007064:	60f8      	str	r0, [r7, #12]
      break;
 8007066:	e112      	b.n	800728e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	7c1b      	ldrb	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10d      	bne.n	800708c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007078:	f107 0208 	add.w	r2, r7, #8
 800707c:	4610      	mov	r0, r2
 800707e:	4798      	blx	r3
 8007080:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3301      	adds	r3, #1
 8007086:	2202      	movs	r2, #2
 8007088:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800708a:	e100      	b.n	800728e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007094:	f107 0208 	add.w	r2, r7, #8
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3301      	adds	r3, #1
 80070a2:	2202      	movs	r2, #2
 80070a4:	701a      	strb	r2, [r3, #0]
      break;
 80070a6:	e0f2      	b.n	800728e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	885b      	ldrh	r3, [r3, #2]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	f200 80ac 	bhi.w	800720c <USBD_GetDescriptor+0x204>
 80070b4:	a201      	add	r2, pc, #4	@ (adr r2, 80070bc <USBD_GetDescriptor+0xb4>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070d5 	.word	0x080070d5
 80070c0:	08007109 	.word	0x08007109
 80070c4:	0800713d 	.word	0x0800713d
 80070c8:	08007171 	.word	0x08007171
 80070cc:	080071a5 	.word	0x080071a5
 80070d0:	080071d9 	.word	0x080071d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	7c12      	ldrb	r2, [r2, #16]
 80070ec:	f107 0108 	add.w	r1, r7, #8
 80070f0:	4610      	mov	r0, r2
 80070f2:	4798      	blx	r3
 80070f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070f6:	e091      	b.n	800721c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa94 	bl	8007628 <USBD_CtlError>
            err++;
 8007100:	7afb      	ldrb	r3, [r7, #11]
 8007102:	3301      	adds	r3, #1
 8007104:	72fb      	strb	r3, [r7, #11]
          break;
 8007106:	e089      	b.n	800721c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	7c12      	ldrb	r2, [r2, #16]
 8007120:	f107 0108 	add.w	r1, r7, #8
 8007124:	4610      	mov	r0, r2
 8007126:	4798      	blx	r3
 8007128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800712a:	e077      	b.n	800721c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa7a 	bl	8007628 <USBD_CtlError>
            err++;
 8007134:	7afb      	ldrb	r3, [r7, #11]
 8007136:	3301      	adds	r3, #1
 8007138:	72fb      	strb	r3, [r7, #11]
          break;
 800713a:	e06f      	b.n	800721c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7c12      	ldrb	r2, [r2, #16]
 8007154:	f107 0108 	add.w	r1, r7, #8
 8007158:	4610      	mov	r0, r2
 800715a:	4798      	blx	r3
 800715c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800715e:	e05d      	b.n	800721c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa60 	bl	8007628 <USBD_CtlError>
            err++;
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	3301      	adds	r3, #1
 800716c:	72fb      	strb	r3, [r7, #11]
          break;
 800716e:	e055      	b.n	800721c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	7c12      	ldrb	r2, [r2, #16]
 8007188:	f107 0108 	add.w	r1, r7, #8
 800718c:	4610      	mov	r0, r2
 800718e:	4798      	blx	r3
 8007190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007192:	e043      	b.n	800721c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa46 	bl	8007628 <USBD_CtlError>
            err++;
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	3301      	adds	r3, #1
 80071a0:	72fb      	strb	r3, [r7, #11]
          break;
 80071a2:	e03b      	b.n	800721c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	7c12      	ldrb	r2, [r2, #16]
 80071bc:	f107 0108 	add.w	r1, r7, #8
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
 80071c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071c6:	e029      	b.n	800721c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fa2c 	bl	8007628 <USBD_CtlError>
            err++;
 80071d0:	7afb      	ldrb	r3, [r7, #11]
 80071d2:	3301      	adds	r3, #1
 80071d4:	72fb      	strb	r3, [r7, #11]
          break;
 80071d6:	e021      	b.n	800721c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00b      	beq.n	80071fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	7c12      	ldrb	r2, [r2, #16]
 80071f0:	f107 0108 	add.w	r1, r7, #8
 80071f4:	4610      	mov	r0, r2
 80071f6:	4798      	blx	r3
 80071f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071fa:	e00f      	b.n	800721c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa12 	bl	8007628 <USBD_CtlError>
            err++;
 8007204:	7afb      	ldrb	r3, [r7, #11]
 8007206:	3301      	adds	r3, #1
 8007208:	72fb      	strb	r3, [r7, #11]
          break;
 800720a:	e007      	b.n	800721c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa0a 	bl	8007628 <USBD_CtlError>
          err++;
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	3301      	adds	r3, #1
 8007218:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800721a:	e038      	b.n	800728e <USBD_GetDescriptor+0x286>
 800721c:	e037      	b.n	800728e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	7c1b      	ldrb	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d109      	bne.n	800723a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800722c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722e:	f107 0208 	add.w	r2, r7, #8
 8007232:	4610      	mov	r0, r2
 8007234:	4798      	blx	r3
 8007236:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007238:	e029      	b.n	800728e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f9f3 	bl	8007628 <USBD_CtlError>
        err++;
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	3301      	adds	r3, #1
 8007246:	72fb      	strb	r3, [r7, #11]
      break;
 8007248:	e021      	b.n	800728e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	7c1b      	ldrb	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10d      	bne.n	800726e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725a:	f107 0208 	add.w	r2, r7, #8
 800725e:	4610      	mov	r0, r2
 8007260:	4798      	blx	r3
 8007262:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	2207      	movs	r2, #7
 800726a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800726c:	e00f      	b.n	800728e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f9d9 	bl	8007628 <USBD_CtlError>
        err++;
 8007276:	7afb      	ldrb	r3, [r7, #11]
 8007278:	3301      	adds	r3, #1
 800727a:	72fb      	strb	r3, [r7, #11]
      break;
 800727c:	e007      	b.n	800728e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f9d1 	bl	8007628 <USBD_CtlError>
      err++;
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	3301      	adds	r3, #1
 800728a:	72fb      	strb	r3, [r7, #11]
      break;
 800728c:	bf00      	nop
  }

  if (err != 0U)
 800728e:	7afb      	ldrb	r3, [r7, #11]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d11c      	bne.n	80072ce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007294:	893b      	ldrh	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d011      	beq.n	80072be <USBD_GetDescriptor+0x2b6>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	88db      	ldrh	r3, [r3, #6]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00d      	beq.n	80072be <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	88da      	ldrh	r2, [r3, #6]
 80072a6:	893b      	ldrh	r3, [r7, #8]
 80072a8:	4293      	cmp	r3, r2
 80072aa:	bf28      	it	cs
 80072ac:	4613      	movcs	r3, r2
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072b2:	893b      	ldrh	r3, [r7, #8]
 80072b4:	461a      	mov	r2, r3
 80072b6:	68f9      	ldr	r1, [r7, #12]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fbb7 	bl	8007a2c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	88db      	ldrh	r3, [r3, #6]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fbf0 	bl	8007aac <USBD_CtlSendStatus>
 80072cc:	e000      	b.n	80072d0 <USBD_GetDescriptor+0x2c8>
    return;
 80072ce:	bf00      	nop
    }
  }
}
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop

080072d8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	889b      	ldrh	r3, [r3, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d130      	bne.n	800734c <USBD_SetAddress+0x74>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	88db      	ldrh	r3, [r3, #6]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12c      	bne.n	800734c <USBD_SetAddress+0x74>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	885b      	ldrh	r3, [r3, #2]
 80072f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80072f8:	d828      	bhi.n	800734c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	885b      	ldrh	r3, [r3, #2]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007304:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800730c:	2b03      	cmp	r3, #3
 800730e:	d104      	bne.n	800731a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f988 	bl	8007628 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007318:	e01d      	b.n	8007356 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7bfa      	ldrb	r2, [r7, #15]
 800731e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 feed 	bl	8008106 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fbbd 	bl	8007aac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d004      	beq.n	8007342 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007340:	e009      	b.n	8007356 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734a:	e004      	b.n	8007356 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f96a 	bl	8007628 <USBD_CtlError>
  }
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	885b      	ldrh	r3, [r3, #2]
 800736e:	b2da      	uxtb	r2, r3
 8007370:	4b41      	ldr	r3, [pc, #260]	@ (8007478 <USBD_SetConfig+0x118>)
 8007372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007374:	4b40      	ldr	r3, [pc, #256]	@ (8007478 <USBD_SetConfig+0x118>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d904      	bls.n	8007386 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f952 	bl	8007628 <USBD_CtlError>
 8007384:	e075      	b.n	8007472 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800738c:	2b02      	cmp	r3, #2
 800738e:	d002      	beq.n	8007396 <USBD_SetConfig+0x36>
 8007390:	2b03      	cmp	r3, #3
 8007392:	d023      	beq.n	80073dc <USBD_SetConfig+0x7c>
 8007394:	e062      	b.n	800745c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007396:	4b38      	ldr	r3, [pc, #224]	@ (8007478 <USBD_SetConfig+0x118>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01a      	beq.n	80073d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800739e:	4b36      	ldr	r3, [pc, #216]	@ (8007478 <USBD_SetConfig+0x118>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2203      	movs	r2, #3
 80073ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073b0:	4b31      	ldr	r3, [pc, #196]	@ (8007478 <USBD_SetConfig+0x118>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff f9e7 	bl	800678a <USBD_SetClassConfig>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d104      	bne.n	80073cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f92f 	bl	8007628 <USBD_CtlError>
            return;
 80073ca:	e052      	b.n	8007472 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fb6d 	bl	8007aac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80073d2:	e04e      	b.n	8007472 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fb69 	bl	8007aac <USBD_CtlSendStatus>
        break;
 80073da:	e04a      	b.n	8007472 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80073dc:	4b26      	ldr	r3, [pc, #152]	@ (8007478 <USBD_SetConfig+0x118>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d112      	bne.n	800740a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80073ec:	4b22      	ldr	r3, [pc, #136]	@ (8007478 <USBD_SetConfig+0x118>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80073f6:	4b20      	ldr	r3, [pc, #128]	@ (8007478 <USBD_SetConfig+0x118>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff f9e3 	bl	80067c8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fb52 	bl	8007aac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007408:	e033      	b.n	8007472 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800740a:	4b1b      	ldr	r3, [pc, #108]	@ (8007478 <USBD_SetConfig+0x118>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	d01d      	beq.n	8007454 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff f9d1 	bl	80067c8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007426:	4b14      	ldr	r3, [pc, #80]	@ (8007478 <USBD_SetConfig+0x118>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007430:	4b11      	ldr	r3, [pc, #68]	@ (8007478 <USBD_SetConfig+0x118>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff f9a7 	bl	800678a <USBD_SetClassConfig>
 800743c:	4603      	mov	r3, r0
 800743e:	2b02      	cmp	r3, #2
 8007440:	d104      	bne.n	800744c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f8ef 	bl	8007628 <USBD_CtlError>
            return;
 800744a:	e012      	b.n	8007472 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fb2d 	bl	8007aac <USBD_CtlSendStatus>
        break;
 8007452:	e00e      	b.n	8007472 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fb29 	bl	8007aac <USBD_CtlSendStatus>
        break;
 800745a:	e00a      	b.n	8007472 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f8e2 	bl	8007628 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007464:	4b04      	ldr	r3, [pc, #16]	@ (8007478 <USBD_SetConfig+0x118>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff f9ac 	bl	80067c8 <USBD_ClrClassConfig>
        break;
 8007470:	bf00      	nop
    }
  }
}
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20000220 	.word	0x20000220

0800747c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	88db      	ldrh	r3, [r3, #6]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d004      	beq.n	8007498 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f8c9 	bl	8007628 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007496:	e022      	b.n	80074de <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800749e:	2b02      	cmp	r3, #2
 80074a0:	dc02      	bgt.n	80074a8 <USBD_GetConfig+0x2c>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	dc03      	bgt.n	80074ae <USBD_GetConfig+0x32>
 80074a6:	e015      	b.n	80074d4 <USBD_GetConfig+0x58>
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d00b      	beq.n	80074c4 <USBD_GetConfig+0x48>
 80074ac:	e012      	b.n	80074d4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3308      	adds	r3, #8
 80074b8:	2201      	movs	r2, #1
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fab5 	bl	8007a2c <USBD_CtlSendData>
        break;
 80074c2:	e00c      	b.n	80074de <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3304      	adds	r3, #4
 80074c8:	2201      	movs	r2, #1
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 faad 	bl	8007a2c <USBD_CtlSendData>
        break;
 80074d2:	e004      	b.n	80074de <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f8a6 	bl	8007628 <USBD_CtlError>
        break;
 80074dc:	bf00      	nop
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f6:	3b01      	subs	r3, #1
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d81e      	bhi.n	800753a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	88db      	ldrh	r3, [r3, #6]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d004      	beq.n	800750e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f88e 	bl	8007628 <USBD_CtlError>
        break;
 800750c:	e01a      	b.n	8007544 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f043 0202 	orr.w	r2, r3, #2
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	330c      	adds	r3, #12
 800752e:	2202      	movs	r2, #2
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa7a 	bl	8007a2c <USBD_CtlSendData>
      break;
 8007538:	e004      	b.n	8007544 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f873 	bl	8007628 <USBD_CtlError>
      break;
 8007542:	bf00      	nop
  }
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	885b      	ldrh	r3, [r3, #2]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d106      	bne.n	800756c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 faa0 	bl	8007aac <USBD_CtlSendStatus>
  }
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007584:	3b01      	subs	r3, #1
 8007586:	2b02      	cmp	r3, #2
 8007588:	d80b      	bhi.n	80075a2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	885b      	ldrh	r3, [r3, #2]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d10c      	bne.n	80075ac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa86 	bl	8007aac <USBD_CtlSendStatus>
      }
      break;
 80075a0:	e004      	b.n	80075ac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f83f 	bl	8007628 <USBD_CtlError>
      break;
 80075aa:	e000      	b.n	80075ae <USBD_ClrFeature+0x3a>
      break;
 80075ac:	bf00      	nop
  }
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	785a      	ldrb	r2, [r3, #1]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	3302      	adds	r3, #2
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	3303      	adds	r3, #3
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	4413      	add	r3, r2
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	3304      	adds	r3, #4
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	3305      	adds	r3, #5
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	021b      	lsls	r3, r3, #8
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	4413      	add	r3, r2
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	3306      	adds	r3, #6
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	3307      	adds	r3, #7
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	b29b      	uxth	r3, r3
 8007616:	4413      	add	r3, r2
 8007618:	b29a      	uxth	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	80da      	strh	r2, [r3, #6]

}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr

08007628 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007632:	2180      	movs	r1, #128	@ 0x80
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fcfd 	bl	8008034 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800763a:	2100      	movs	r1, #0
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fcf9 	bl	8008034 <USBD_LL_StallEP>
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d032      	beq.n	80076c6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f834 	bl	80076ce <USBD_GetLen>
 8007666:	4603      	mov	r3, r0
 8007668:	3301      	adds	r3, #1
 800766a:	b29b      	uxth	r3, r3
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	75fa      	strb	r2, [r7, #23]
 800767a:	461a      	mov	r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4413      	add	r3, r2
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	75fa      	strb	r2, [r7, #23]
 800768c:	461a      	mov	r2, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	2203      	movs	r2, #3
 8007694:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007696:	e012      	b.n	80076be <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	60fa      	str	r2, [r7, #12]
 800769e:	7dfa      	ldrb	r2, [r7, #23]
 80076a0:	1c51      	adds	r1, r2, #1
 80076a2:	75f9      	strb	r1, [r7, #23]
 80076a4:	4611      	mov	r1, r2
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	440a      	add	r2, r1
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	75fa      	strb	r2, [r7, #23]
 80076b4:	461a      	mov	r2, r3
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	4413      	add	r3, r2
 80076ba:	2200      	movs	r2, #0
 80076bc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e8      	bne.n	8007698 <USBD_GetString+0x4e>
    }
  }
}
 80076c6:	bf00      	nop
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b085      	sub	sp, #20
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80076da:	e005      	b.n	80076e8 <USBD_GetLen+0x1a>
  {
    len++;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	3301      	adds	r3, #1
 80076e0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3301      	adds	r3, #1
 80076e6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1f5      	bne.n	80076dc <USBD_GetLen+0xe>
  }

  return len;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr

080076fc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007708:	2304      	movs	r3, #4
 800770a:	2203      	movs	r2, #3
 800770c:	2181      	movs	r1, #129	@ 0x81
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fc4b 	bl	8007faa <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800771a:	2010      	movs	r0, #16
 800771c:	f000 fd58 	bl	80081d0 <USBD_static_malloc>
 8007720:	4602      	mov	r2, r0
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007732:	2302      	movs	r3, #2
 8007734:	e005      	b.n	8007742 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800773c:	2200      	movs	r2, #0
 800773e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007756:	2181      	movs	r1, #129	@ 0x81
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fc4c 	bl	8007ff6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fd37 	bl	80081e8 <USBD_static_free>
    pdev->pClassData = NULL;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_HID_Setup>:
  * @retval status
  */

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800779c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d045      	beq.n	8007846 <USBD_HID_Setup+0xba>
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	f040 80d3 	bne.w	8007966 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	3b02      	subs	r3, #2
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d835      	bhi.n	8007836 <USBD_HID_Setup+0xaa>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <USBD_HID_Setup+0x44>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	08007827 	.word	0x08007827
 80077d4:	08007807 	.word	0x08007807
 80077d8:	08007837 	.word	0x08007837
 80077dc:	08007837 	.word	0x08007837
 80077e0:	08007837 	.word	0x08007837
 80077e4:	08007837 	.word	0x08007837
 80077e8:	08007837 	.word	0x08007837
 80077ec:	08007837 	.word	0x08007837
 80077f0:	08007815 	.word	0x08007815
 80077f4:	080077f9 	.word	0x080077f9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	885b      	ldrh	r3, [r3, #2]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	461a      	mov	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	601a      	str	r2, [r3, #0]
          break;
 8007804:	e01e      	b.n	8007844 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	2201      	movs	r2, #1
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f90d 	bl	8007a2c <USBD_CtlSendData>
          break;
 8007812:	e017      	b.n	8007844 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	885b      	ldrh	r3, [r3, #2]
 8007818:	0a1b      	lsrs	r3, r3, #8
 800781a:	b29b      	uxth	r3, r3
 800781c:	b2db      	uxtb	r3, r3
 800781e:	461a      	mov	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	605a      	str	r2, [r3, #4]
          break;
 8007824:	e00e      	b.n	8007844 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	3304      	adds	r3, #4
 800782a:	2201      	movs	r2, #1
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f8fc 	bl	8007a2c <USBD_CtlSendData>
          break;
 8007834:	e006      	b.n	8007844 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff fef5 	bl	8007628 <USBD_CtlError>
          ret = USBD_FAIL;
 800783e:	2302      	movs	r3, #2
 8007840:	75fb      	strb	r3, [r7, #23]
          break;
 8007842:	bf00      	nop
      }
      break;
 8007844:	e096      	b.n	8007974 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b0b      	cmp	r3, #11
 800784c:	f200 8083 	bhi.w	8007956 <USBD_HID_Setup+0x1ca>
 8007850:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <USBD_HID_Setup+0xcc>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	08007889 	.word	0x08007889
 800785c:	08007957 	.word	0x08007957
 8007860:	08007957 	.word	0x08007957
 8007864:	08007957 	.word	0x08007957
 8007868:	08007957 	.word	0x08007957
 800786c:	08007957 	.word	0x08007957
 8007870:	080078b1 	.word	0x080078b1
 8007874:	08007957 	.word	0x08007957
 8007878:	08007957 	.word	0x08007957
 800787c:	08007957 	.word	0x08007957
 8007880:	08007909 	.word	0x08007909
 8007884:	08007931 	.word	0x08007931
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800788e:	2b03      	cmp	r3, #3
 8007890:	d107      	bne.n	80078a2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007892:	f107 030e 	add.w	r3, r7, #14
 8007896:	2202      	movs	r2, #2
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f8c6 	bl	8007a2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078a0:	e060      	b.n	8007964 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff febf 	bl	8007628 <USBD_CtlError>
            ret = USBD_FAIL;
 80078aa:	2302      	movs	r3, #2
 80078ac:	75fb      	strb	r3, [r7, #23]
          break;
 80078ae:	e059      	b.n	8007964 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	885b      	ldrh	r3, [r3, #2]
 80078b4:	0a1b      	lsrs	r3, r3, #8
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	2b22      	cmp	r3, #34	@ 0x22
 80078ba:	d108      	bne.n	80078ce <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	88db      	ldrh	r3, [r3, #6]
 80078c0:	2b73      	cmp	r3, #115	@ 0x73
 80078c2:	bf28      	it	cs
 80078c4:	2373      	movcs	r3, #115	@ 0x73
 80078c6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80078c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007980 <USBD_HID_Setup+0x1f4>)
 80078ca:	61bb      	str	r3, [r7, #24]
 80078cc:	e015      	b.n	80078fa <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	885b      	ldrh	r3, [r3, #2]
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	2b21      	cmp	r3, #33	@ 0x21
 80078d8:	d108      	bne.n	80078ec <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80078da:	4b2a      	ldr	r3, [pc, #168]	@ (8007984 <USBD_HID_Setup+0x1f8>)
 80078dc:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	88db      	ldrh	r3, [r3, #6]
 80078e2:	2b09      	cmp	r3, #9
 80078e4:	bf28      	it	cs
 80078e6:	2309      	movcs	r3, #9
 80078e8:	83fb      	strh	r3, [r7, #30]
 80078ea:	e006      	b.n	80078fa <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff fe9a 	bl	8007628 <USBD_CtlError>
            ret = USBD_FAIL;
 80078f4:	2302      	movs	r3, #2
 80078f6:	75fb      	strb	r3, [r7, #23]
            break;
 80078f8:	e034      	b.n	8007964 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80078fa:	8bfb      	ldrh	r3, [r7, #30]
 80078fc:	461a      	mov	r2, r3
 80078fe:	69b9      	ldr	r1, [r7, #24]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f893 	bl	8007a2c <USBD_CtlSendData>
          break;
 8007906:	e02d      	b.n	8007964 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800790e:	2b03      	cmp	r3, #3
 8007910:	d107      	bne.n	8007922 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	3308      	adds	r3, #8
 8007916:	2201      	movs	r2, #1
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f886 	bl	8007a2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007920:	e020      	b.n	8007964 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7ff fe7f 	bl	8007628 <USBD_CtlError>
            ret = USBD_FAIL;
 800792a:	2302      	movs	r3, #2
 800792c:	75fb      	strb	r3, [r7, #23]
          break;
 800792e:	e019      	b.n	8007964 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007936:	2b03      	cmp	r3, #3
 8007938:	d106      	bne.n	8007948 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	885b      	ldrh	r3, [r3, #2]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007946:	e00d      	b.n	8007964 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff fe6c 	bl	8007628 <USBD_CtlError>
            ret = USBD_FAIL;
 8007950:	2302      	movs	r3, #2
 8007952:	75fb      	strb	r3, [r7, #23]
          break;
 8007954:	e006      	b.n	8007964 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff fe65 	bl	8007628 <USBD_CtlError>
          ret = USBD_FAIL;
 800795e:	2302      	movs	r3, #2
 8007960:	75fb      	strb	r3, [r7, #23]
          break;
 8007962:	bf00      	nop
      }
      break;
 8007964:	e006      	b.n	8007974 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff fe5d 	bl	8007628 <USBD_CtlError>
      ret = USBD_FAIL;
 800796e:	2302      	movs	r3, #2
 8007970:	75fb      	strb	r3, [r7, #23]
      break;
 8007972:	bf00      	nop
  }

  return ret;
 8007974:	7dfb      	ldrb	r3, [r7, #23]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3720      	adds	r7, #32
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	200000c8 	.word	0x200000c8
 8007984:	200000b0 	.word	0x200000b0

08007988 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2222      	movs	r2, #34	@ 0x22
 8007994:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007996:	4b03      	ldr	r3, [pc, #12]	@ (80079a4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20000044 	.word	0x20000044

080079a8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2222      	movs	r2, #34	@ 0x22
 80079b4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80079b6:	4b03      	ldr	r3, [pc, #12]	@ (80079c4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20000068 	.word	0x20000068

080079c8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2222      	movs	r2, #34	@ 0x22
 80079d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80079d6:	4b03      	ldr	r3, [pc, #12]	@ (80079e4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	2000008c 	.word	0x2000008c

080079e8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079fa:	2200      	movs	r2, #0
 80079fc:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr
	...

08007a0c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	220a      	movs	r2, #10
 8007a18:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007a1a:	4b03      	ldr	r3, [pc, #12]	@ (8007a28 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bc80      	pop	{r7}
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	200000bc 	.word	0x200000bc

08007a2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	4613      	mov	r3, r2
 8007a38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007a42:	88fa      	ldrh	r2, [r7, #6]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a48:	88fa      	ldrh	r2, [r7, #6]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	2100      	movs	r1, #0
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fb75 	bl	8008144 <USBD_LL_Transmit>

  return USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a72:	88fb      	ldrh	r3, [r7, #6]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	2100      	movs	r1, #0
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fb63 	bl	8008144 <USBD_LL_Transmit>

  return USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 fb74 	bl	800818a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007abc:	2300      	movs	r3, #0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fb3e 	bl	8008144 <USBD_LL_Transmit>

  return USBD_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2205      	movs	r2, #5
 8007ade:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fb4e 	bl	800818a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007afc:	2200      	movs	r2, #0
 8007afe:	490e      	ldr	r1, [pc, #56]	@ (8007b38 <MX_USB_DEVICE_Init+0x40>)
 8007b00:	480e      	ldr	r0, [pc, #56]	@ (8007b3c <MX_USB_DEVICE_Init+0x44>)
 8007b02:	f7fe fde8 	bl	80066d6 <USBD_Init>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b0c:	f7f8 fcdb 	bl	80004c6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007b10:	490b      	ldr	r1, [pc, #44]	@ (8007b40 <MX_USB_DEVICE_Init+0x48>)
 8007b12:	480a      	ldr	r0, [pc, #40]	@ (8007b3c <MX_USB_DEVICE_Init+0x44>)
 8007b14:	f7fe fe0a 	bl	800672c <USBD_RegisterClass>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b1e:	f7f8 fcd2 	bl	80004c6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b22:	4806      	ldr	r0, [pc, #24]	@ (8007b3c <MX_USB_DEVICE_Init+0x44>)
 8007b24:	f7fe fe1b 	bl	800675e <USBD_Start>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007b2e:	f7f8 fcca 	bl	80004c6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b32:	bf00      	nop
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	2000013c 	.word	0x2000013c
 8007b3c:	20000224 	.word	0x20000224
 8007b40:	2000000c 	.word	0x2000000c

08007b44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2212      	movs	r2, #18
 8007b54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b56:	4b03      	ldr	r3, [pc, #12]	@ (8007b64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	20000158 	.word	0x20000158

08007b68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2204      	movs	r2, #4
 8007b78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b7a:	4b03      	ldr	r3, [pc, #12]	@ (8007b88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bc80      	pop	{r7}
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	2000016c 	.word	0x2000016c

08007b8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d105      	bne.n	8007baa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4907      	ldr	r1, [pc, #28]	@ (8007bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ba2:	4808      	ldr	r0, [pc, #32]	@ (8007bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ba4:	f7ff fd51 	bl	800764a <USBD_GetString>
 8007ba8:	e004      	b.n	8007bb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	4904      	ldr	r1, [pc, #16]	@ (8007bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bae:	4805      	ldr	r0, [pc, #20]	@ (8007bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bb0:	f7ff fd4b 	bl	800764a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bb4:	4b02      	ldr	r3, [pc, #8]	@ (8007bc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	200004e8 	.word	0x200004e8
 8007bc4:	080082d8 	.word	0x080082d8

08007bc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	6039      	str	r1, [r7, #0]
 8007bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	4904      	ldr	r1, [pc, #16]	@ (8007be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bd8:	4804      	ldr	r0, [pc, #16]	@ (8007bec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bda:	f7ff fd36 	bl	800764a <USBD_GetString>
  return USBD_StrDesc;
 8007bde:	4b02      	ldr	r3, [pc, #8]	@ (8007be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	200004e8 	.word	0x200004e8
 8007bec:	080082e8 	.word	0x080082e8

08007bf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	221a      	movs	r2, #26
 8007c00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c02:	f000 f843 	bl	8007c8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c06:	4b02      	ldr	r3, [pc, #8]	@ (8007c10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000170 	.word	0x20000170

08007c14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	6039      	str	r1, [r7, #0]
 8007c1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d105      	bne.n	8007c32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4907      	ldr	r1, [pc, #28]	@ (8007c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c2a:	4808      	ldr	r0, [pc, #32]	@ (8007c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c2c:	f7ff fd0d 	bl	800764a <USBD_GetString>
 8007c30:	e004      	b.n	8007c3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	4904      	ldr	r1, [pc, #16]	@ (8007c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c36:	4805      	ldr	r0, [pc, #20]	@ (8007c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c38:	f7ff fd07 	bl	800764a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c3c:	4b02      	ldr	r3, [pc, #8]	@ (8007c48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200004e8 	.word	0x200004e8
 8007c4c:	080082f0 	.word	0x080082f0

08007c50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	6039      	str	r1, [r7, #0]
 8007c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d105      	bne.n	8007c6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4907      	ldr	r1, [pc, #28]	@ (8007c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c66:	4808      	ldr	r0, [pc, #32]	@ (8007c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c68:	f7ff fcef 	bl	800764a <USBD_GetString>
 8007c6c:	e004      	b.n	8007c78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	4904      	ldr	r1, [pc, #16]	@ (8007c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c72:	4805      	ldr	r0, [pc, #20]	@ (8007c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c74:	f7ff fce9 	bl	800764a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c78:	4b02      	ldr	r3, [pc, #8]	@ (8007c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	200004e8 	.word	0x200004e8
 8007c88:	080082fc 	.word	0x080082fc

08007c8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c92:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd0 <Get_SerialNum+0x44>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c98:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd4 <Get_SerialNum+0x48>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd8 <Get_SerialNum+0x4c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4413      	add	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cb2:	2208      	movs	r2, #8
 8007cb4:	4909      	ldr	r1, [pc, #36]	@ (8007cdc <Get_SerialNum+0x50>)
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f814 	bl	8007ce4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	4908      	ldr	r1, [pc, #32]	@ (8007ce0 <Get_SerialNum+0x54>)
 8007cc0:	68b8      	ldr	r0, [r7, #8]
 8007cc2:	f000 f80f 	bl	8007ce4 <IntToUnicode>
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	1ffff7e8 	.word	0x1ffff7e8
 8007cd4:	1ffff7ec 	.word	0x1ffff7ec
 8007cd8:	1ffff7f0 	.word	0x1ffff7f0
 8007cdc:	20000172 	.word	0x20000172
 8007ce0:	20000182 	.word	0x20000182

08007ce4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]
 8007cfa:	e027      	b.n	8007d4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	0f1b      	lsrs	r3, r3, #28
 8007d00:	2b09      	cmp	r3, #9
 8007d02:	d80b      	bhi.n	8007d1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	0f1b      	lsrs	r3, r3, #28
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	440b      	add	r3, r1
 8007d14:	3230      	adds	r2, #48	@ 0x30
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	e00a      	b.n	8007d32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	0f1b      	lsrs	r3, r3, #28
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	4619      	mov	r1, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	440b      	add	r3, r1
 8007d2c:	3237      	adds	r2, #55	@ 0x37
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	4413      	add	r3, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	75fb      	strb	r3, [r7, #23]
 8007d4c:	7dfa      	ldrb	r2, [r7, #23]
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d3d3      	bcc.n	8007cfc <IntToUnicode+0x18>
  }
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8007da4 <HAL_PCD_MspInit+0x44>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d113      	bne.n	8007d9a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d72:	4b0d      	ldr	r3, [pc, #52]	@ (8007da8 <HAL_PCD_MspInit+0x48>)
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	4a0c      	ldr	r2, [pc, #48]	@ (8007da8 <HAL_PCD_MspInit+0x48>)
 8007d78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d7c:	61d3      	str	r3, [r2, #28]
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007da8 <HAL_PCD_MspInit+0x48>)
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	2014      	movs	r0, #20
 8007d90:	f7f8 fdf5 	bl	800097e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007d94:	2014      	movs	r0, #20
 8007d96:	f7f8 fe0e 	bl	80009b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d9a:	bf00      	nop
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	40005c00 	.word	0x40005c00
 8007da8:	40021000 	.word	0x40021000

08007dac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f7fe fd13 	bl	80067ee <USBD_LL_SetupStage>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	440b      	add	r3, r1
 8007df0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f7fe fd45 	bl	8006888 <USBD_LL_DataOutStage>
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	440b      	add	r3, r1
 8007e26:	3324      	adds	r3, #36	@ 0x24
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	f7fe fd9c 	bl	800696a <USBD_LL_DataInStage>
}
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe feac 	bl	8006ba6 <USBD_LL_SOF>
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	799b      	ldrb	r3, [r3, #6]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d001      	beq.n	8007e6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e6a:	f7f8 fb2c 	bl	80004c6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e74:	7bfa      	ldrb	r2, [r7, #15]
 8007e76:	4611      	mov	r1, r2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe fe5c 	bl	8006b36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fe fe15 	bl	8006ab4 <USBD_LL_Reset>
}
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe fe56 	bl	8006b54 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	7a9b      	ldrb	r3, [r3, #10]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d005      	beq.n	8007ebc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007eb0:	4b04      	ldr	r3, [pc, #16]	@ (8007ec4 <HAL_PCD_SuspendCallback+0x30>)
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	4a03      	ldr	r2, [pc, #12]	@ (8007ec4 <HAL_PCD_SuspendCallback+0x30>)
 8007eb6:	f043 0306 	orr.w	r3, r3, #6
 8007eba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	e000ed00 	.word	0xe000ed00

08007ec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe fe50 	bl	8006b7c <USBD_LL_Resume>
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007eec:	4a1f      	ldr	r2, [pc, #124]	@ (8007f6c <USBD_LL_Init+0x88>)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8007f6c <USBD_LL_Init+0x88>)
 8007ef8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007efc:	4b1b      	ldr	r3, [pc, #108]	@ (8007f6c <USBD_LL_Init+0x88>)
 8007efe:	4a1c      	ldr	r2, [pc, #112]	@ (8007f70 <USBD_LL_Init+0x8c>)
 8007f00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f02:	4b1a      	ldr	r3, [pc, #104]	@ (8007f6c <USBD_LL_Init+0x88>)
 8007f04:	2208      	movs	r2, #8
 8007f06:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007f08:	4b18      	ldr	r3, [pc, #96]	@ (8007f6c <USBD_LL_Init+0x88>)
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007f0e:	4b17      	ldr	r3, [pc, #92]	@ (8007f6c <USBD_LL_Init+0x88>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007f14:	4b15      	ldr	r3, [pc, #84]	@ (8007f6c <USBD_LL_Init+0x88>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007f1a:	4b14      	ldr	r3, [pc, #80]	@ (8007f6c <USBD_LL_Init+0x88>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007f20:	4812      	ldr	r0, [pc, #72]	@ (8007f6c <USBD_LL_Init+0x88>)
 8007f22:	f7f8 ffca 	bl	8000eba <HAL_PCD_Init>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007f2c:	f7f8 facb 	bl	80004c6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f36:	2318      	movs	r3, #24
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	f7fa fcc4 	bl	80028c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f46:	2358      	movs	r3, #88	@ 0x58
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2180      	movs	r1, #128	@ 0x80
 8007f4c:	f7fa fcbc 	bl	80028c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2181      	movs	r1, #129	@ 0x81
 8007f5e:	f7fa fcb3 	bl	80028c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	200006e8 	.word	0x200006e8
 8007f70:	40005c00 	.word	0x40005c00

08007f74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7f9 f88b 	bl	80010a6 <HAL_PCD_Start>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f93a 	bl	8008210 <USBD_Get_USB_Status>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	4608      	mov	r0, r1
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	4603      	mov	r3, r0
 8007fba:	70fb      	strb	r3, [r7, #3]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70bb      	strb	r3, [r7, #2]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007fd2:	78bb      	ldrb	r3, [r7, #2]
 8007fd4:	883a      	ldrh	r2, [r7, #0]
 8007fd6:	78f9      	ldrb	r1, [r7, #3]
 8007fd8:	f7f9 f9df 	bl	800139a <HAL_PCD_EP_Open>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 f914 	bl	8008210 <USBD_Get_USB_Status>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008010:	78fa      	ldrb	r2, [r7, #3]
 8008012:	4611      	mov	r1, r2
 8008014:	4618      	mov	r0, r3
 8008016:	f7f9 fa1d 	bl	8001454 <HAL_PCD_EP_Close>
 800801a:	4603      	mov	r3, r0
 800801c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	4618      	mov	r0, r3
 8008022:	f000 f8f5 	bl	8008210 <USBD_Get_USB_Status>
 8008026:	4603      	mov	r3, r0
 8008028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800802a:	7bbb      	ldrb	r3, [r7, #14]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f7f9 faae 	bl	80015b4 <HAL_PCD_EP_SetStall>
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 f8d6 	bl	8008210 <USBD_Get_USB_Status>
 8008064:	4603      	mov	r3, r0
 8008066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008068:	7bbb      	ldrb	r3, [r7, #14]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	460b      	mov	r3, r1
 800807c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800808c:	78fa      	ldrb	r2, [r7, #3]
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f7f9 faef 	bl	8001674 <HAL_PCD_EP_ClrStall>
 8008096:	4603      	mov	r3, r0
 8008098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	4618      	mov	r0, r3
 800809e:	f000 f8b7 	bl	8008210 <USBD_Get_USB_Status>
 80080a2:	4603      	mov	r3, r0
 80080a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	da0b      	bge.n	80080e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080d2:	68f9      	ldr	r1, [r7, #12]
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	440b      	add	r3, r1
 80080de:	3312      	adds	r3, #18
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	e00b      	b.n	80080fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080ea:	68f9      	ldr	r1, [r7, #12]
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	440b      	add	r3, r1
 80080f6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80080fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr

08008106 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008120:	78fa      	ldrb	r2, [r7, #3]
 8008122:	4611      	mov	r1, r2
 8008124:	4618      	mov	r0, r3
 8008126:	f7f9 f914 	bl	8001352 <HAL_PCD_SetAddress>
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	4618      	mov	r0, r3
 8008132:	f000 f86d 	bl	8008210 <USBD_Get_USB_Status>
 8008136:	4603      	mov	r3, r0
 8008138:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800813a:	7bbb      	ldrb	r3, [r7, #14]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	607a      	str	r2, [r7, #4]
 800814e:	461a      	mov	r2, r3
 8008150:	460b      	mov	r3, r1
 8008152:	72fb      	strb	r3, [r7, #11]
 8008154:	4613      	mov	r3, r2
 8008156:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008166:	893b      	ldrh	r3, [r7, #8]
 8008168:	7af9      	ldrb	r1, [r7, #11]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	f7f9 f9eb 	bl	8001546 <HAL_PCD_EP_Transmit>
 8008170:	4603      	mov	r3, r0
 8008172:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f84a 	bl	8008210 <USBD_Get_USB_Status>
 800817c:	4603      	mov	r3, r0
 800817e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008180:	7dbb      	ldrb	r3, [r7, #22]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b086      	sub	sp, #24
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	461a      	mov	r2, r3
 8008196:	460b      	mov	r3, r1
 8008198:	72fb      	strb	r3, [r7, #11]
 800819a:	4613      	mov	r3, r2
 800819c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081ac:	893b      	ldrh	r3, [r7, #8]
 80081ae:	7af9      	ldrb	r1, [r7, #11]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	f7f9 f997 	bl	80014e4 <HAL_PCD_EP_Receive>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 f827 	bl	8008210 <USBD_Get_USB_Status>
 80081c2:	4603      	mov	r3, r0
 80081c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081d8:	4b02      	ldr	r3, [pc, #8]	@ (80081e4 <USBD_static_malloc+0x14>)
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr
 80081e4:	200009c0 	.word	0x200009c0

080081e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]

}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr

080081fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr

08008210 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	2b03      	cmp	r3, #3
 8008222:	d817      	bhi.n	8008254 <USBD_Get_USB_Status+0x44>
 8008224:	a201      	add	r2, pc, #4	@ (adr r2, 800822c <USBD_Get_USB_Status+0x1c>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	0800823d 	.word	0x0800823d
 8008230:	08008243 	.word	0x08008243
 8008234:	08008249 	.word	0x08008249
 8008238:	0800824f 	.word	0x0800824f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
    break;
 8008240:	e00b      	b.n	800825a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008242:	2302      	movs	r3, #2
 8008244:	73fb      	strb	r3, [r7, #15]
    break;
 8008246:	e008      	b.n	800825a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008248:	2301      	movs	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
    break;
 800824c:	e005      	b.n	800825a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800824e:	2302      	movs	r3, #2
 8008250:	73fb      	strb	r3, [r7, #15]
    break;
 8008252:	e002      	b.n	800825a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008254:	2302      	movs	r3, #2
 8008256:	73fb      	strb	r3, [r7, #15]
    break;
 8008258:	bf00      	nop
  }
  return usb_status;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	bc80      	pop	{r7}
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop

08008268 <memset>:
 8008268:	4603      	mov	r3, r0
 800826a:	4402      	add	r2, r0
 800826c:	4293      	cmp	r3, r2
 800826e:	d100      	bne.n	8008272 <memset+0xa>
 8008270:	4770      	bx	lr
 8008272:	f803 1b01 	strb.w	r1, [r3], #1
 8008276:	e7f9      	b.n	800826c <memset+0x4>

08008278 <__libc_init_array>:
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	2600      	movs	r6, #0
 800827c:	4d0c      	ldr	r5, [pc, #48]	@ (80082b0 <__libc_init_array+0x38>)
 800827e:	4c0d      	ldr	r4, [pc, #52]	@ (80082b4 <__libc_init_array+0x3c>)
 8008280:	1b64      	subs	r4, r4, r5
 8008282:	10a4      	asrs	r4, r4, #2
 8008284:	42a6      	cmp	r6, r4
 8008286:	d109      	bne.n	800829c <__libc_init_array+0x24>
 8008288:	f000 f81a 	bl	80082c0 <_init>
 800828c:	2600      	movs	r6, #0
 800828e:	4d0a      	ldr	r5, [pc, #40]	@ (80082b8 <__libc_init_array+0x40>)
 8008290:	4c0a      	ldr	r4, [pc, #40]	@ (80082bc <__libc_init_array+0x44>)
 8008292:	1b64      	subs	r4, r4, r5
 8008294:	10a4      	asrs	r4, r4, #2
 8008296:	42a6      	cmp	r6, r4
 8008298:	d105      	bne.n	80082a6 <__libc_init_array+0x2e>
 800829a:	bd70      	pop	{r4, r5, r6, pc}
 800829c:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a0:	4798      	blx	r3
 80082a2:	3601      	adds	r6, #1
 80082a4:	e7ee      	b.n	8008284 <__libc_init_array+0xc>
 80082a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082aa:	4798      	blx	r3
 80082ac:	3601      	adds	r6, #1
 80082ae:	e7f2      	b.n	8008296 <__libc_init_array+0x1e>
 80082b0:	08008338 	.word	0x08008338
 80082b4:	08008338 	.word	0x08008338
 80082b8:	08008338 	.word	0x08008338
 80082bc:	0800833c 	.word	0x0800833c

080082c0 <_init>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	bf00      	nop
 80082c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c6:	bc08      	pop	{r3}
 80082c8:	469e      	mov	lr, r3
 80082ca:	4770      	bx	lr

080082cc <_fini>:
 80082cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ce:	bf00      	nop
 80082d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d2:	bc08      	pop	{r3}
 80082d4:	469e      	mov	lr, r3
 80082d6:	4770      	bx	lr
