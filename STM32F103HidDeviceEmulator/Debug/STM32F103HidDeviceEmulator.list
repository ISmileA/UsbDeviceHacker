
STM32F103HidDeviceEmulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009800  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800990c  0800990c  0000a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800998c  0800998c  0000b1f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800998c  0800998c  0000b1f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800998c  0800998c  0000b1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800998c  0800998c  0000a98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009990  08009990  0000a990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08009994  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000157c  200001f0  08009b84  0000b1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000176c  08009b84  0000b76c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011895  00000000  00000000  0000b219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003920  00000000  00000000  0001caae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000203d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a67  00000000  00000000  000211c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a78f  00000000  00000000  00021c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173ef  00000000  00000000  0003c3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b1c  00000000  00000000  000537a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db2c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003918  00000000  00000000  000db304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000dec1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	080098f4 	.word	0x080098f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	080098f4 	.word	0x080098f4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <HAL_UART_RxCpltCallback>:
uint8_t length = 0;
uint8_t parsedData = 0;
uint8_t buffer[1024] = {};
uint32_t timer = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint8_t byte = rxcall;
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <HAL_UART_RxCpltCallback+0xb8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	73fb      	strb	r3, [r7, #15]
	if((HAL_GetTick()-timer) > 2){
 8000a72:	f001 f877 	bl	8001b64 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <HAL_UART_RxCpltCallback+0xbc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d905      	bls.n	8000a8e <HAL_UART_RxCpltCallback+0x2a>
		length = 0;
 8000a82:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
		parsedData = 0;
 8000a88:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
	}
	if(byte == HEADER || parsedData > 0){
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2bc5      	cmp	r3, #197	@ 0xc5
 8000a92:	d003      	beq.n	8000a9c <HAL_UART_RxCpltCallback+0x38>
 8000a94:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d031      	beq.n	8000b00 <HAL_UART_RxCpltCallback+0x9c>
		buffer[parsedData] = byte;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	5453      	strb	r3, [r2, r1]
		if(parsedData == 4)
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d106      	bne.n	8000abe <HAL_UART_RxCpltCallback+0x5a>
			length = (uint16_t)(buffer[parsedData-1]) | (uint16_t)(buffer[parsedData] << 8);
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000ab8:	5cd2      	ldrb	r2, [r2, r3]
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000abc:	701a      	strb	r2, [r3, #0]
		if(parsedData >= length+5){
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000ac6:	7812      	ldrb	r2, [r2, #0]
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	da13      	bge.n	8000af4 <HAL_UART_RxCpltCallback+0x90>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000acc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad0:	4817      	ldr	r0, [pc, #92]	@ (8000b30 <HAL_UART_RxCpltCallback+0xcc>)
 8000ad2:	f001 fbd1 	bl	8002278 <HAL_GPIO_TogglePin>
			ParsingData(buffer, parsedData+1);
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <HAL_UART_RxCpltCallback+0xc8>)
 8000ae2:	f000 ff5d 	bl	80019a0 <ParsingData>
			length = 0;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_UART_RxCpltCallback+0xc0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
			parsedData = 0;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e005      	b.n	8000b00 <HAL_UART_RxCpltCallback+0x9c>
		}else
			parsedData++;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_UART_RxCpltCallback+0xc4>)
 8000afe:	701a      	strb	r2, [r3, #0]
	}
	timer = HAL_GetTick();
 8000b00:	f001 f830 	bl	8001b64 <HAL_GetTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <HAL_UART_RxCpltCallback+0xbc>)
 8000b08:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart,&rxcall,1);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4903      	ldr	r1, [pc, #12]	@ (8000b1c <HAL_UART_RxCpltCallback+0xb8>)
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f003 feb5 	bl	800487e <HAL_UART_Receive_IT>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000065c 	.word	0x2000065c
 8000b20:	20000610 	.word	0x20000610
 8000b24:	2000020c 	.word	0x2000020c
 8000b28:	2000020d 	.word	0x2000020d
 8000b2c:	20000210 	.word	0x20000210
 8000b30:	40011000 	.word	0x40011000

08000b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a23      	ldr	r2, [pc, #140]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b60:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a11      	ldr	r2, [pc, #68]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_GPIO_Init+0xa8>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bae:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_GPIO_Init+0xac>)
 8000bb0:	f001 fb4a 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_GPIO_Init+0xac>)
 8000bce:	f001 f9b7 	bl	8001f40 <HAL_GPIO_Init>

}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40011000 	.word	0x40011000

08000be4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART3_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART3_UART_Init+0x4c>)
 8000c1c:	f003 fd54 	bl	80046c8 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f000 f8b6 	bl	8000d96 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000614 	.word	0x20000614
 8000c34:	40004800 	.word	0x40004800

08000c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <HAL_UART_MspInit+0x9c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d139      	bne.n	8000ccc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c62:	61d3      	str	r3, [r2, #28]
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a18      	ldr	r2, [pc, #96]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480f      	ldr	r0, [pc, #60]	@ (8000cdc <HAL_UART_MspInit+0xa4>)
 8000c9e:	f001 f94f 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ca2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <HAL_UART_MspInit+0xa4>)
 8000cb8:	f001 f942 	bl	8001f40 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2027      	movs	r0, #39	@ 0x27
 8000cc2:	f001 f854 	bl	8001d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cc6:	2027      	movs	r0, #39	@ 0x27
 8000cc8:	f001 f86d 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010c00 	.word	0x40010c00

08000ce0 <SystemClock_Config>:
#define INC_INITS_RCC_H_

#include <main.h>

void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	@ 0x50
 8000ce4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cea:	2228      	movs	r2, #40	@ 0x28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f008 fcd4 	bl	800969c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d10:	2301      	movs	r3, #1
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d22:	2302      	movs	r3, #2
 8000d24:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 f800 	bl	8003d3c <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000d42:	f000 f828 	bl	8000d96 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d56:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2101      	movs	r1, #1
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 fa6c 	bl	8004240 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000d6e:	f000 f812 	bl	8000d96 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d72:	2310      	movs	r3, #16
 8000d74:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d7a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fbec 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000d8a:	f000 f804 	bl	8000d96 <Error_Handler>
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3750      	adds	r7, #80	@ 0x50
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <Error_Handler>:

void Error_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9a:	b672      	cpsid	i
}
 8000d9c:	bf00      	nop
  __disable_irq();
  while (1){}
 8000d9e:	bf00      	nop
 8000da0:	e7fd      	b.n	8000d9e <Error_Handler+0x8>
	...

08000da4 <main>:
Animation animation = {0, 0, {}};

void SystemClock_Config(void);

int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	HAL_Init();
 8000da8:	f000 fe84 	bl	8001ab4 <HAL_Init>
	SystemClock_Config();
 8000dac:	f7ff ff98 	bl	8000ce0 <SystemClock_Config>
	MX_GPIO_Init();
 8000db0:	f7ff fec0 	bl	8000b34 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000db4:	f008 f8ba 	bl	8008f2c <MX_USB_DEVICE_Init>
	MX_USART3_UART_Init();
 8000db8:	f7ff ff14 	bl	8000be4 <MX_USART3_UART_Init>
	HAL_UART_Receive_IT(&huart3,&rxcall,1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4913      	ldr	r1, [pc, #76]	@ (8000e0c <main+0x68>)
 8000dc0:	4813      	ldr	r0, [pc, #76]	@ (8000e10 <main+0x6c>)
 8000dc2:	f003 fd5c 	bl	800487e <HAL_UART_Receive_IT>

	while (1)
	{
		switch(action.device){
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <main+0x70>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d014      	beq.n	8000df8 <main+0x54>
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	dc19      	bgt.n	8000e06 <main+0x62>
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d002      	beq.n	8000ddc <main+0x38>
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d007      	beq.n	8000dea <main+0x46>
 8000dda:	e014      	b.n	8000e06 <main+0x62>
			case(MOUSE):
				MouseCommandSetup(&action);
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <main+0x70>)
 8000dde:	f000 fcf7 	bl	80017d0 <MouseCommandSetup>
				action.device = 0;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <main+0x70>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
				break;
 8000de8:	e00d      	b.n	8000e06 <main+0x62>
			case(KEYBOARD):
				KeyboardSetup(&action);
 8000dea:	480a      	ldr	r0, [pc, #40]	@ (8000e14 <main+0x70>)
 8000dec:	f000 fc58 	bl	80016a0 <KeyboardSetup>
				action.device = 0;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <main+0x70>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
				break;
 8000df6:	e006      	b.n	8000e06 <main+0x62>
			case(ANIMATION):
				AnimationSetup(&action);
 8000df8:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <main+0x70>)
 8000dfa:	f000 f885 	bl	8000f08 <AnimationSetup>
				action.device = 0;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <main+0x70>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
				break;
 8000e04:	bf00      	nop
		}
		Animate();
 8000e06:	f000 f8d9 	bl	8000fbc <Animate>
		switch(action.device){
 8000e0a:	e7dc      	b.n	8000dc6 <main+0x22>
 8000e0c:	2000065c 	.word	0x2000065c
 8000e10:	20000614 	.word	0x20000614
 8000e14:	20000660 	.word	0x20000660

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a14      	ldr	r2, [pc, #80]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <HAL_MspInit+0x5c>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_MspInit+0x60>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_MspInit+0x60>)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010000 	.word	0x40010000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f000 fe38 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000eda:	f001 fb02 	bl	80024e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20001348 	.word	0x20001348

08000ee8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <USART3_IRQHandler+0x10>)
 8000eee:	f003 fceb 	bl	80048c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000614 	.word	0x20000614

08000efc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <AnimationSetup>:
uint8_t f = 0;
uint16_t data_set = 0;

int16_t x = 0, x_pos = 0, y_pos = 0, y = 0;

void AnimationSetup(Action *act){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d002      	beq.n	8000f1e <AnimationSetup+0x16>
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d009      	beq.n	8000f30 <AnimationSetup+0x28>
				break;
		case(REMOVE_COMMAND):
				AnimationRemove();
				break;
	}
}
 8000f1c:	e00b      	b.n	8000f36 <AnimationSetup+0x2e>
				AnimationSet(act->data, act->length);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	1d1a      	adds	r2, r3, #4
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	885b      	ldrh	r3, [r3, #2]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4610      	mov	r0, r2
 8000f2a:	f000 f809 	bl	8000f40 <AnimationSet>
				break;
 8000f2e:	e002      	b.n	8000f36 <AnimationSetup+0x2e>
				AnimationRemove();
 8000f30:	f000 f838 	bl	8000fa4 <AnimationRemove>
				break;
 8000f34:	bf00      	nop
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <AnimationSet>:

void AnimationSet(uint8_t *data, uint16_t len){
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
	flag = 1;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <AnimationSet+0x5c>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
	animation.id = data[0];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <AnimationSet+0x60>)
 8000f58:	701a      	strb	r2, [r3, #0]
	animation.length = len-1;
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <AnimationSet+0x60>)
 8000f62:	805a      	strh	r2, [r3, #2]
	for(uint8_t i=0; i<animation.length; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e00c      	b.n	8000f84 <AnimationSet+0x44>
		animation.data[i] = data[i+1];
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	441a      	add	r2, r3
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	7811      	ldrb	r1, [r2, #0]
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <AnimationSet+0x60>)
 8000f78:	4413      	add	r3, r2
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	711a      	strb	r2, [r3, #4]
	for(uint8_t i=0; i<animation.length; i++)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	3301      	adds	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <AnimationSet+0x60>)
 8000f8a:	885b      	ldrh	r3, [r3, #2]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3ec      	bcc.n	8000f6a <AnimationSet+0x2a>
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	20000a64 	.word	0x20000a64

08000fa4 <AnimationRemove>:

void AnimationRemove(){
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	animation.id = 0;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <AnimationRemove+0x14>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000a64 	.word	0x20000a64

08000fbc <Animate>:

void Animate(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	switch(animation.id){
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <Animate+0x30>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d00c      	beq.n	8000fe2 <Animate+0x26>
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	dc0d      	bgt.n	8000fe8 <Animate+0x2c>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d002      	beq.n	8000fd6 <Animate+0x1a>
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d003      	beq.n	8000fdc <Animate+0x20>
			break;
		case(MOUSE_ROUND_ANIMATION):
			MouseRoundAnimation();
			break;
	}
}
 8000fd4:	e008      	b.n	8000fe8 <Animate+0x2c>
			MouseMoveAnimation();
 8000fd6:	f000 f80b 	bl	8000ff0 <MouseMoveAnimation>
			break;
 8000fda:	e005      	b.n	8000fe8 <Animate+0x2c>
			KeyboardTextAnimation();
 8000fdc:	f000 f882 	bl	80010e4 <KeyboardTextAnimation>
			break;
 8000fe0:	e002      	b.n	8000fe8 <Animate+0x2c>
			MouseRoundAnimation();
 8000fe2:	f000 f989 	bl	80012f8 <MouseRoundAnimation>
			break;
 8000fe6:	bf00      	nop
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000a64 	.word	0x20000a64

08000ff0 <MouseMoveAnimation>:

void MouseMoveAnimation(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	if((HAL_GetTick()-time) >= 5){
 8000ff6:	f000 fdb5 	bl	8001b64 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	4b36      	ldr	r3, [pc, #216]	@ (80010d8 <MouseMoveAnimation+0xe8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b04      	cmp	r3, #4
 8001004:	d963      	bls.n	80010ce <MouseMoveAnimation+0xde>
		uint8_t data_out[5] = {0x01, animation.data[1], 0, 0, 0};
 8001006:	2301      	movs	r3, #1
 8001008:	703b      	strb	r3, [r7, #0]
 800100a:	4b34      	ldr	r3, [pc, #208]	@ (80010dc <MouseMoveAnimation+0xec>)
 800100c:	795b      	ldrb	r3, [r3, #5]
 800100e:	707b      	strb	r3, [r7, #1]
 8001010:	2300      	movs	r3, #0
 8001012:	70bb      	strb	r3, [r7, #2]
 8001014:	2300      	movs	r3, #0
 8001016:	70fb      	strb	r3, [r7, #3]
 8001018:	2300      	movs	r3, #0
 800101a:	713b      	strb	r3, [r7, #4]
		switch((char)animation.data[0]){
 800101c:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <MouseMoveAnimation+0xec>)
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	3b62      	subs	r3, #98	@ 0x62
 8001022:	2b12      	cmp	r3, #18
 8001024:	d848      	bhi.n	80010b8 <MouseMoveAnimation+0xc8>
 8001026:	a201      	add	r2, pc, #4	@ (adr r2, 800102c <MouseMoveAnimation+0x3c>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	08001099 	.word	0x08001099
 8001030:	080010b9 	.word	0x080010b9
 8001034:	080010b9 	.word	0x080010b9
 8001038:	080010b9 	.word	0x080010b9
 800103c:	080010b9 	.word	0x080010b9
 8001040:	080010b9 	.word	0x080010b9
 8001044:	080010b9 	.word	0x080010b9
 8001048:	080010b9 	.word	0x080010b9
 800104c:	080010b9 	.word	0x080010b9
 8001050:	080010b9 	.word	0x080010b9
 8001054:	08001089 	.word	0x08001089
 8001058:	080010b9 	.word	0x080010b9
 800105c:	080010b9 	.word	0x080010b9
 8001060:	080010b9 	.word	0x080010b9
 8001064:	080010b9 	.word	0x080010b9
 8001068:	080010b9 	.word	0x080010b9
 800106c:	08001079 	.word	0x08001079
 8001070:	080010b9 	.word	0x080010b9
 8001074:	080010a9 	.word	0x080010a9
			case('r'):
				data_out[2] = 1+2*animation.data[2];
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MouseMoveAnimation+0xec>)
 800107a:	799b      	ldrb	r3, [r3, #6]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	3301      	adds	r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	70bb      	strb	r3, [r7, #2]
				break;
 8001086:	e017      	b.n	80010b8 <MouseMoveAnimation+0xc8>
			case('l'):
				data_out[2] = 255-2*animation.data[2];
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MouseMoveAnimation+0xec>)
 800108a:	799b      	ldrb	r3, [r3, #6]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	70bb      	strb	r3, [r7, #2]
				break;
 8001096:	e00f      	b.n	80010b8 <MouseMoveAnimation+0xc8>
			case('b'):
				data_out[3] = 1+2*animation.data[2];
 8001098:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <MouseMoveAnimation+0xec>)
 800109a:	799b      	ldrb	r3, [r3, #6]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	70fb      	strb	r3, [r7, #3]
				break;
 80010a6:	e007      	b.n	80010b8 <MouseMoveAnimation+0xc8>
			case('t'):
				data_out[3] = 255-2*animation.data[2];
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <MouseMoveAnimation+0xec>)
 80010aa:	799b      	ldrb	r3, [r3, #6]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	70fb      	strb	r3, [r7, #3]
				break;
 80010b6:	bf00      	nop
		}
		USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80010b8:	463b      	mov	r3, r7
 80010ba:	2205      	movs	r2, #5
 80010bc:	4619      	mov	r1, r3
 80010be:	4808      	ldr	r0, [pc, #32]	@ (80010e0 <MouseMoveAnimation+0xf0>)
 80010c0:	f007 fe5a 	bl	8008d78 <USBD_HID_SendReport>
		time = HAL_GetTick();
 80010c4:	f000 fd4e 	bl	8001b64 <HAL_GetTick>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a03      	ldr	r2, [pc, #12]	@ (80010d8 <MouseMoveAnimation+0xe8>)
 80010cc:	6013      	str	r3, [r2, #0]
	}
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000e68 	.word	0x20000e68
 80010dc:	20000a64 	.word	0x20000a64
 80010e0:	20000e84 	.word	0x20000e84

080010e4 <KeyboardTextAnimation>:
void KeyboardTextAnimation(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
	static uint32_t repeat_timer = 0;
	if((HAL_GetTick()-time) > 5){
 80010ea:	f000 fd3b 	bl	8001b64 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	4b7a      	ldr	r3, [pc, #488]	@ (80012dc <KeyboardTextAnimation+0x1f8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	f240 80eb 	bls.w	80012d2 <KeyboardTextAnimation+0x1ee>
		if(flag){
 80010fc:	4b78      	ldr	r3, [pc, #480]	@ (80012e0 <KeyboardTextAnimation+0x1fc>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80bf 	beq.w	8001284 <KeyboardTextAnimation+0x1a0>
			uint8_t sp = 0, symb = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]
 800110a:	2300      	movs	r3, #0
 800110c:	75bb      	strb	r3, [r7, #22]
			if (animation.data[data_set] >= (uint8_t)'0' && animation.data[data_set] <= (uint8_t)'9'){
 800110e:	4b75      	ldr	r3, [pc, #468]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b74      	ldr	r3, [pc, #464]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001116:	4413      	add	r3, r2
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	2b2f      	cmp	r3, #47	@ 0x2f
 800111c:	d923      	bls.n	8001166 <KeyboardTextAnimation+0x82>
 800111e:	4b71      	ldr	r3, [pc, #452]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b70      	ldr	r3, [pc, #448]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001126:	4413      	add	r3, r2
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	2b39      	cmp	r3, #57	@ 0x39
 800112c:	d81b      	bhi.n	8001166 <KeyboardTextAnimation+0x82>
				if (animation.data[data_set] == 48)
 800112e:	4b6d      	ldr	r3, [pc, #436]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4b6c      	ldr	r3, [pc, #432]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001136:	4413      	add	r3, r2
 8001138:	791b      	ldrb	r3, [r3, #4]
 800113a:	2b30      	cmp	r3, #48	@ 0x30
 800113c:	d108      	bne.n	8001150 <KeyboardTextAnimation+0x6c>
					symb = animation.data[data_set]-9;
 800113e:	4b69      	ldr	r3, [pc, #420]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001146:	4413      	add	r3, r2
 8001148:	791b      	ldrb	r3, [r3, #4]
 800114a:	3b09      	subs	r3, #9
 800114c:	75bb      	strb	r3, [r7, #22]
 800114e:	e007      	b.n	8001160 <KeyboardTextAnimation+0x7c>
				else
					symb = animation.data[data_set]-19;
 8001150:	4b64      	ldr	r3, [pc, #400]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b64      	ldr	r3, [pc, #400]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001158:	4413      	add	r3, r2
 800115a:	791b      	ldrb	r3, [r3, #4]
 800115c:	3b13      	subs	r3, #19
 800115e:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	75fb      	strb	r3, [r7, #23]
 8001164:	e04a      	b.n	80011fc <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] >= (uint8_t)'A' && animation.data[data_set] <= (uint8_t)'Z'){
 8001166:	4b5f      	ldr	r3, [pc, #380]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4b5e      	ldr	r3, [pc, #376]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 800116e:	4413      	add	r3, r2
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	2b40      	cmp	r3, #64	@ 0x40
 8001174:	d912      	bls.n	800119c <KeyboardTextAnimation+0xb8>
 8001176:	4b5b      	ldr	r3, [pc, #364]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b5a      	ldr	r3, [pc, #360]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 800117e:	4413      	add	r3, r2
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	2b5a      	cmp	r3, #90	@ 0x5a
 8001184:	d80a      	bhi.n	800119c <KeyboardTextAnimation+0xb8>
				symb = animation.data[data_set]-61;
 8001186:	4b57      	ldr	r3, [pc, #348]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	4b56      	ldr	r3, [pc, #344]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 800118e:	4413      	add	r3, r2
 8001190:	791b      	ldrb	r3, [r3, #4]
 8001192:	3b3d      	subs	r3, #61	@ 0x3d
 8001194:	75bb      	strb	r3, [r7, #22]
				sp = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	75fb      	strb	r3, [r7, #23]
 800119a:	e02f      	b.n	80011fc <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] >= (uint8_t)'a' && animation.data[data_set] <= (uint8_t)'z'){
 800119c:	4b51      	ldr	r3, [pc, #324]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80011a4:	4413      	add	r3, r2
 80011a6:	791b      	ldrb	r3, [r3, #4]
 80011a8:	2b60      	cmp	r3, #96	@ 0x60
 80011aa:	d912      	bls.n	80011d2 <KeyboardTextAnimation+0xee>
 80011ac:	4b4d      	ldr	r3, [pc, #308]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80011b4:	4413      	add	r3, r2
 80011b6:	791b      	ldrb	r3, [r3, #4]
 80011b8:	2b7a      	cmp	r3, #122	@ 0x7a
 80011ba:	d80a      	bhi.n	80011d2 <KeyboardTextAnimation+0xee>
				symb = animation.data[data_set]-93;
 80011bc:	4b49      	ldr	r3, [pc, #292]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b49      	ldr	r3, [pc, #292]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80011c4:	4413      	add	r3, r2
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	3b5d      	subs	r3, #93	@ 0x5d
 80011ca:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]
 80011d0:	e014      	b.n	80011fc <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] == (uint8_t)' '){
 80011d2:	4b44      	ldr	r3, [pc, #272]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b43      	ldr	r3, [pc, #268]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80011da:	4413      	add	r3, r2
 80011dc:	791b      	ldrb	r3, [r3, #4]
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d10a      	bne.n	80011f8 <KeyboardTextAnimation+0x114>
				symb = animation.data[data_set]+12;
 80011e2:	4b40      	ldr	r3, [pc, #256]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b3f      	ldr	r3, [pc, #252]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80011ea:	4413      	add	r3, r2
 80011ec:	791b      	ldrb	r3, [r3, #4]
 80011ee:	330c      	adds	r3, #12
 80011f0:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	75fb      	strb	r3, [r7, #23]
 80011f6:	e001      	b.n	80011fc <KeyboardTextAnimation+0x118>
			}else
				symb = 85;
 80011f8:	2355      	movs	r3, #85	@ 0x55
 80011fa:	75bb      	strb	r3, [r7, #22]
			uint8_t data_out[9] = {0x02, sp, 0, symb, 0, 0, 0, 0, 0};
 80011fc:	2302      	movs	r3, #2
 80011fe:	733b      	strb	r3, [r7, #12]
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	737b      	strb	r3, [r7, #13]
 8001204:	2300      	movs	r3, #0
 8001206:	73bb      	strb	r3, [r7, #14]
 8001208:	7dbb      	ldrb	r3, [r7, #22]
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	2300      	movs	r3, #0
 800120e:	743b      	strb	r3, [r7, #16]
 8001210:	2300      	movs	r3, #0
 8001212:	747b      	strb	r3, [r7, #17]
 8001214:	2300      	movs	r3, #0
 8001216:	74bb      	strb	r3, [r7, #18]
 8001218:	2300      	movs	r3, #0
 800121a:	74fb      	strb	r3, [r7, #19]
 800121c:	2300      	movs	r3, #0
 800121e:	753b      	strb	r3, [r7, #20]
			data_set++;
 8001220:	4b30      	ldr	r3, [pc, #192]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 800122a:	801a      	strh	r2, [r3, #0]

			USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2209      	movs	r2, #9
 8001232:	4619      	mov	r1, r3
 8001234:	482d      	ldr	r0, [pc, #180]	@ (80012ec <KeyboardTextAnimation+0x208>)
 8001236:	f007 fd9f 	bl	8008d78 <USBD_HID_SendReport>
			HAL_Delay(30);
 800123a:	201e      	movs	r0, #30
 800123c:	f000 fc9c 	bl	8001b78 <HAL_Delay>
			uint8_t data_res[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 8001240:	4a2b      	ldr	r2, [pc, #172]	@ (80012f0 <KeyboardTextAnimation+0x20c>)
 8001242:	463b      	mov	r3, r7
 8001244:	ca07      	ldmia	r2, {r0, r1, r2}
 8001246:	c303      	stmia	r3!, {r0, r1}
 8001248:	701a      	strb	r2, [r3, #0]
			USBD_HID_SendReport(&hUsbDeviceFS, data_res, 9);
 800124a:	463b      	mov	r3, r7
 800124c:	2209      	movs	r2, #9
 800124e:	4619      	mov	r1, r3
 8001250:	4826      	ldr	r0, [pc, #152]	@ (80012ec <KeyboardTextAnimation+0x208>)
 8001252:	f007 fd91 	bl	8008d78 <USBD_HID_SendReport>
			HAL_Delay(30);
 8001256:	201e      	movs	r0, #30
 8001258:	f000 fc8e 	bl	8001b78 <HAL_Delay>

			if(data_set >= animation.length-1){
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001264:	885b      	ldrh	r3, [r3, #2]
 8001266:	3b01      	subs	r3, #1
 8001268:	429a      	cmp	r2, r3
 800126a:	db2d      	blt.n	80012c8 <KeyboardTextAnimation+0x1e4>
				data_set = 0;
 800126c:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <KeyboardTextAnimation+0x200>)
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]
				flag = 0;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <KeyboardTextAnimation+0x1fc>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
				repeat_timer = HAL_GetTick();
 8001278:	f000 fc74 	bl	8001b64 <HAL_GetTick>
 800127c:	4603      	mov	r3, r0
 800127e:	4a1d      	ldr	r2, [pc, #116]	@ (80012f4 <KeyboardTextAnimation+0x210>)
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e021      	b.n	80012c8 <KeyboardTextAnimation+0x1e4>
			}
		}else if (animation.data[animation.length-1] != 0){
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 8001286:	885b      	ldrh	r3, [r3, #2]
 8001288:	3b01      	subs	r3, #1
 800128a:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 800128c:	4413      	add	r3, r2
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d019      	beq.n	80012c8 <KeyboardTextAnimation+0x1e4>
			if((HAL_GetTick()-repeat_timer) >= animation.data[animation.length-1]*100){
 8001294:	f000 fc66 	bl	8001b64 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <KeyboardTextAnimation+0x210>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80012a2:	8852      	ldrh	r2, [r2, #2]
 80012a4:	3a01      	subs	r2, #1
 80012a6:	4910      	ldr	r1, [pc, #64]	@ (80012e8 <KeyboardTextAnimation+0x204>)
 80012a8:	440a      	add	r2, r1
 80012aa:	7912      	ldrb	r2, [r2, #4]
 80012ac:	4611      	mov	r1, r2
 80012ae:	2264      	movs	r2, #100	@ 0x64
 80012b0:	fb01 f202 	mul.w	r2, r1, r2
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d307      	bcc.n	80012c8 <KeyboardTextAnimation+0x1e4>
				flag = 1;
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <KeyboardTextAnimation+0x1fc>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
				repeat_timer = HAL_GetTick();
 80012be:	f000 fc51 	bl	8001b64 <HAL_GetTick>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <KeyboardTextAnimation+0x210>)
 80012c6:	6013      	str	r3, [r2, #0]
			}
		}
		time = HAL_GetTick();
 80012c8:	f000 fc4c 	bl	8001b64 <HAL_GetTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a03      	ldr	r2, [pc, #12]	@ (80012dc <KeyboardTextAnimation+0x1f8>)
 80012d0:	6013      	str	r3, [r2, #0]
	}
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000e68 	.word	0x20000e68
 80012e0:	20000004 	.word	0x20000004
 80012e4:	20000e6e 	.word	0x20000e6e
 80012e8:	20000a64 	.word	0x20000a64
 80012ec:	20000e84 	.word	0x20000e84
 80012f0:	0800990c 	.word	0x0800990c
 80012f4:	20000e78 	.word	0x20000e78

080012f8 <MouseRoundAnimation>:
void MouseRoundAnimation(){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
	uint16_t radius = animation.data[0], speed = animation.data[1], buttons = animation.data[2];
 80012fe:	4b9a      	ldr	r3, [pc, #616]	@ (8001568 <MouseRoundAnimation+0x270>)
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	81fb      	strh	r3, [r7, #14]
 8001304:	4b98      	ldr	r3, [pc, #608]	@ (8001568 <MouseRoundAnimation+0x270>)
 8001306:	795b      	ldrb	r3, [r3, #5]
 8001308:	81bb      	strh	r3, [r7, #12]
 800130a:	4b97      	ldr	r3, [pc, #604]	@ (8001568 <MouseRoundAnimation+0x270>)
 800130c:	799b      	ldrb	r3, [r3, #6]
 800130e:	817b      	strh	r3, [r7, #10]
	if((HAL_GetTick()-time) >= 5){
 8001310:	f000 fc28 	bl	8001b64 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	4b95      	ldr	r3, [pc, #596]	@ (800156c <MouseRoundAnimation+0x274>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b04      	cmp	r3, #4
 800131e:	f240 81ac 	bls.w	800167a <MouseRoundAnimation+0x382>
		switch(f){
 8001322:	4b93      	ldr	r3, [pc, #588]	@ (8001570 <MouseRoundAnimation+0x278>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b03      	cmp	r3, #3
 8001328:	f200 818b 	bhi.w	8001642 <MouseRoundAnimation+0x34a>
 800132c:	a201      	add	r2, pc, #4	@ (adr r2, 8001334 <MouseRoundAnimation+0x3c>)
 800132e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001332:	bf00      	nop
 8001334:	08001345 	.word	0x08001345
 8001338:	08001407 	.word	0x08001407
 800133c:	080014b3 	.word	0x080014b3
 8001340:	08001585 	.word	0x08001585
			case(0):
				x = 1+2*speed;
 8001344:	89bb      	ldrh	r3, [r7, #12]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	b29b      	uxth	r3, r3
 800134a:	3301      	adds	r3, #1
 800134c:	b29b      	uxth	r3, r3
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b88      	ldr	r3, [pc, #544]	@ (8001574 <MouseRoundAnimation+0x27c>)
 8001352:	801a      	strh	r2, [r3, #0]
				if(x_pos == 0)
 8001354:	4b88      	ldr	r3, [pc, #544]	@ (8001578 <MouseRoundAnimation+0x280>)
 8001356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d103      	bne.n	8001366 <MouseRoundAnimation+0x6e>
					y_pos = radius;
 800135e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001362:	4b86      	ldr	r3, [pc, #536]	@ (800157c <MouseRoundAnimation+0x284>)
 8001364:	801a      	strh	r2, [r3, #0]
				x_pos+=x;
 8001366:	4b84      	ldr	r3, [pc, #528]	@ (8001578 <MouseRoundAnimation+0x280>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b81      	ldr	r3, [pc, #516]	@ (8001574 <MouseRoundAnimation+0x27c>)
 8001370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29b      	uxth	r3, r3
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b7e      	ldr	r3, [pc, #504]	@ (8001578 <MouseRoundAnimation+0x280>)
 800137e:	801a      	strh	r2, [r3, #0]
				y = abs(y_pos-(uint16_t)sqrt(radius*radius-x_pos*x_pos));
 8001380:	4b7e      	ldr	r3, [pc, #504]	@ (800157c <MouseRoundAnimation+0x284>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	461c      	mov	r4, r3
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	89fa      	ldrh	r2, [r7, #14]
 800138c:	fb03 f202 	mul.w	r2, r3, r2
 8001390:	4b79      	ldr	r3, [pc, #484]	@ (8001578 <MouseRoundAnimation+0x280>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	4619      	mov	r1, r3
 8001398:	4b77      	ldr	r3, [pc, #476]	@ (8001578 <MouseRoundAnimation+0x280>)
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	fb01 f303 	mul.w	r3, r1, r3
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f823 	bl	80003f0 <__aeabi_i2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f008 f9a5 	bl	8009700 <sqrt>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fb31 	bl	8000a24 <__aeabi_d2uiz>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	1ae3      	subs	r3, r4, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bfb8      	it	lt
 80013cc:	425b      	neglt	r3, r3
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001580 <MouseRoundAnimation+0x288>)
 80013d2:	801a      	strh	r2, [r3, #0]
				y_pos-=y;
 80013d4:	4b69      	ldr	r3, [pc, #420]	@ (800157c <MouseRoundAnimation+0x284>)
 80013d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b68      	ldr	r3, [pc, #416]	@ (8001580 <MouseRoundAnimation+0x288>)
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	4b64      	ldr	r3, [pc, #400]	@ (800157c <MouseRoundAnimation+0x284>)
 80013ec:	801a      	strh	r2, [r3, #0]
				if(x_pos >= radius){
 80013ee:	4b62      	ldr	r3, [pc, #392]	@ (8001578 <MouseRoundAnimation+0x280>)
 80013f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f4:	461a      	mov	r2, r3
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	f2c0 811b 	blt.w	8001634 <MouseRoundAnimation+0x33c>
					f = 1;
 80013fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001570 <MouseRoundAnimation+0x278>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001404:	e116      	b.n	8001634 <MouseRoundAnimation+0x33c>
			case(1):
				x = -(1+2*speed);
 8001406:	89bb      	ldrh	r3, [r7, #12]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	b29b      	uxth	r3, r3
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b58      	ldr	r3, [pc, #352]	@ (8001574 <MouseRoundAnimation+0x27c>)
 8001414:	801a      	strh	r2, [r3, #0]
				x_pos+=x;
 8001416:	4b58      	ldr	r3, [pc, #352]	@ (8001578 <MouseRoundAnimation+0x280>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	b29a      	uxth	r2, r3
 800141e:	4b55      	ldr	r3, [pc, #340]	@ (8001574 <MouseRoundAnimation+0x27c>)
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b29b      	uxth	r3, r3
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b52      	ldr	r3, [pc, #328]	@ (8001578 <MouseRoundAnimation+0x280>)
 800142e:	801a      	strh	r2, [r3, #0]
				y = abs(y_pos-(uint16_t)sqrt(radius*radius-x_pos*x_pos));
 8001430:	4b52      	ldr	r3, [pc, #328]	@ (800157c <MouseRoundAnimation+0x284>)
 8001432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001436:	461c      	mov	r4, r3
 8001438:	89fb      	ldrh	r3, [r7, #14]
 800143a:	89fa      	ldrh	r2, [r7, #14]
 800143c:	fb03 f202 	mul.w	r2, r3, r2
 8001440:	4b4d      	ldr	r3, [pc, #308]	@ (8001578 <MouseRoundAnimation+0x280>)
 8001442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001446:	4619      	mov	r1, r3
 8001448:	4b4b      	ldr	r3, [pc, #300]	@ (8001578 <MouseRoundAnimation+0x280>)
 800144a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144e:	fb01 f303 	mul.w	r3, r1, r3
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffcb 	bl	80003f0 <__aeabi_i2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f008 f94d 	bl	8009700 <sqrt>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fad9 	bl	8000a24 <__aeabi_d2uiz>
 8001472:	4603      	mov	r3, r0
 8001474:	b29b      	uxth	r3, r3
 8001476:	1ae3      	subs	r3, r4, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	bfb8      	it	lt
 800147c:	425b      	neglt	r3, r3
 800147e:	b21a      	sxth	r2, r3
 8001480:	4b3f      	ldr	r3, [pc, #252]	@ (8001580 <MouseRoundAnimation+0x288>)
 8001482:	801a      	strh	r2, [r3, #0]
				y_pos+=y;
 8001484:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <MouseRoundAnimation+0x284>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b3c      	ldr	r3, [pc, #240]	@ (8001580 <MouseRoundAnimation+0x288>)
 800148e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b38      	ldr	r3, [pc, #224]	@ (800157c <MouseRoundAnimation+0x284>)
 800149c:	801a      	strh	r2, [r3, #0]
				if(x_pos <= 0){
 800149e:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <MouseRoundAnimation+0x280>)
 80014a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f300 80c7 	bgt.w	8001638 <MouseRoundAnimation+0x340>
					f = 2;
 80014aa:	4b31      	ldr	r3, [pc, #196]	@ (8001570 <MouseRoundAnimation+0x278>)
 80014ac:	2202      	movs	r2, #2
 80014ae:	701a      	strb	r2, [r3, #0]
				}
				break;
 80014b0:	e0c2      	b.n	8001638 <MouseRoundAnimation+0x340>
			case(2):
				x = -(1+2*speed);
 80014b2:	89bb      	ldrh	r3, [r7, #12]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	b21a      	sxth	r2, r3
 80014be:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <MouseRoundAnimation+0x27c>)
 80014c0:	801a      	strh	r2, [r3, #0]
				x_pos+=x;
 80014c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <MouseRoundAnimation+0x280>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <MouseRoundAnimation+0x27c>)
 80014cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <MouseRoundAnimation+0x280>)
 80014da:	801a      	strh	r2, [r3, #0]
				y = -abs(y_pos-(uint16_t)sqrt(radius*radius-x_pos*x_pos));
 80014dc:	4b27      	ldr	r3, [pc, #156]	@ (800157c <MouseRoundAnimation+0x284>)
 80014de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e2:	461c      	mov	r4, r3
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	89fa      	ldrh	r2, [r7, #14]
 80014e8:	fb03 f202 	mul.w	r2, r3, r2
 80014ec:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <MouseRoundAnimation+0x280>)
 80014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <MouseRoundAnimation+0x280>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe ff75 	bl	80003f0 <__aeabi_i2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f008 f8f7 	bl	8009700 <sqrt>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fa83 	bl	8000a24 <__aeabi_d2uiz>
 800151e:	4603      	mov	r3, r0
 8001520:	b29b      	uxth	r3, r3
 8001522:	1ae3      	subs	r3, r4, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	bfb8      	it	lt
 8001528:	425b      	neglt	r3, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	425b      	negs	r3, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	b21a      	sxth	r2, r3
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <MouseRoundAnimation+0x288>)
 8001534:	801a      	strh	r2, [r3, #0]
				y_pos+=y;
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MouseRoundAnimation+0x284>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <MouseRoundAnimation+0x288>)
 8001540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001544:	b29b      	uxth	r3, r3
 8001546:	4413      	add	r3, r2
 8001548:	b29b      	uxth	r3, r3
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <MouseRoundAnimation+0x284>)
 800154e:	801a      	strh	r2, [r3, #0]
				if(x_pos <= -radius){
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <MouseRoundAnimation+0x280>)
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	461a      	mov	r2, r3
 8001558:	89fb      	ldrh	r3, [r7, #14]
 800155a:	425b      	negs	r3, r3
 800155c:	429a      	cmp	r2, r3
 800155e:	dc6d      	bgt.n	800163c <MouseRoundAnimation+0x344>
					f = 3;
 8001560:	4b03      	ldr	r3, [pc, #12]	@ (8001570 <MouseRoundAnimation+0x278>)
 8001562:	2203      	movs	r2, #3
 8001564:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001566:	e069      	b.n	800163c <MouseRoundAnimation+0x344>
 8001568:	20000a64 	.word	0x20000a64
 800156c:	20000e68 	.word	0x20000e68
 8001570:	20000e6c 	.word	0x20000e6c
 8001574:	20000e70 	.word	0x20000e70
 8001578:	20000e72 	.word	0x20000e72
 800157c:	20000e74 	.word	0x20000e74
 8001580:	20000e76 	.word	0x20000e76
			case(3):
				x = (1+2*speed);
 8001584:	89bb      	ldrh	r3, [r7, #12]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	b29b      	uxth	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	b29b      	uxth	r3, r3
 800158e:	b21a      	sxth	r2, r3
 8001590:	4b3c      	ldr	r3, [pc, #240]	@ (8001684 <MouseRoundAnimation+0x38c>)
 8001592:	801a      	strh	r2, [r3, #0]
				x_pos+=x;
 8001594:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <MouseRoundAnimation+0x390>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <MouseRoundAnimation+0x38c>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	4b37      	ldr	r3, [pc, #220]	@ (8001688 <MouseRoundAnimation+0x390>)
 80015ac:	801a      	strh	r2, [r3, #0]
				y = -abs(y_pos-(uint16_t)sqrt(radius*radius-x_pos*x_pos));
 80015ae:	4b37      	ldr	r3, [pc, #220]	@ (800168c <MouseRoundAnimation+0x394>)
 80015b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b4:	461c      	mov	r4, r3
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	89fa      	ldrh	r2, [r7, #14]
 80015ba:	fb03 f202 	mul.w	r2, r3, r2
 80015be:	4b32      	ldr	r3, [pc, #200]	@ (8001688 <MouseRoundAnimation+0x390>)
 80015c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c4:	4619      	mov	r1, r3
 80015c6:	4b30      	ldr	r3, [pc, #192]	@ (8001688 <MouseRoundAnimation+0x390>)
 80015c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015cc:	fb01 f303 	mul.w	r3, r1, r3
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff0c 	bl	80003f0 <__aeabi_i2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f008 f88e 	bl	8009700 <sqrt>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fa1a 	bl	8000a24 <__aeabi_d2uiz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	1ae3      	subs	r3, r4, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bfb8      	it	lt
 80015fa:	425b      	neglt	r3, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	425b      	negs	r3, r3
 8001600:	b29b      	uxth	r3, r3
 8001602:	b21a      	sxth	r2, r3
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <MouseRoundAnimation+0x398>)
 8001606:	801a      	strh	r2, [r3, #0]
				y_pos-=y;
 8001608:	4b20      	ldr	r3, [pc, #128]	@ (800168c <MouseRoundAnimation+0x394>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <MouseRoundAnimation+0x398>)
 8001612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001616:	b29b      	uxth	r3, r3
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b29b      	uxth	r3, r3
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <MouseRoundAnimation+0x394>)
 8001620:	801a      	strh	r2, [r3, #0]
				if(x_pos >= 0){
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <MouseRoundAnimation+0x390>)
 8001624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db09      	blt.n	8001640 <MouseRoundAnimation+0x348>
					f = 0;
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <MouseRoundAnimation+0x39c>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001632:	e005      	b.n	8001640 <MouseRoundAnimation+0x348>
				break;
 8001634:	bf00      	nop
 8001636:	e004      	b.n	8001642 <MouseRoundAnimation+0x34a>
				break;
 8001638:	bf00      	nop
 800163a:	e002      	b.n	8001642 <MouseRoundAnimation+0x34a>
				break;
 800163c:	bf00      	nop
 800163e:	e000      	b.n	8001642 <MouseRoundAnimation+0x34a>
				break;
 8001640:	bf00      	nop
		}
		uint8_t data_out[5] = {0x01, buttons, (uint8_t)x, (uint8_t)y, 0};
 8001642:	2301      	movs	r3, #1
 8001644:	713b      	strb	r3, [r7, #4]
 8001646:	897b      	ldrh	r3, [r7, #10]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	717b      	strb	r3, [r7, #5]
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <MouseRoundAnimation+0x38c>)
 800164e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	71bb      	strb	r3, [r7, #6]
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <MouseRoundAnimation+0x398>)
 8001658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	2300      	movs	r3, #0
 8001662:	723b      	strb	r3, [r7, #8]
		USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2205      	movs	r2, #5
 8001668:	4619      	mov	r1, r3
 800166a:	480b      	ldr	r0, [pc, #44]	@ (8001698 <MouseRoundAnimation+0x3a0>)
 800166c:	f007 fb84 	bl	8008d78 <USBD_HID_SendReport>
		time = HAL_GetTick();
 8001670:	f000 fa78 	bl	8001b64 <HAL_GetTick>
 8001674:	4603      	mov	r3, r0
 8001676:	4a09      	ldr	r2, [pc, #36]	@ (800169c <MouseRoundAnimation+0x3a4>)
 8001678:	6013      	str	r3, [r2, #0]
	}

}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	20000e70 	.word	0x20000e70
 8001688:	20000e72 	.word	0x20000e72
 800168c:	20000e74 	.word	0x20000e74
 8001690:	20000e76 	.word	0x20000e76
 8001694:	20000e6c 	.word	0x20000e6c
 8001698:	20000e84 	.word	0x20000e84
 800169c:	20000e68 	.word	0x20000e68

080016a0 <KeyboardSetup>:
 */

#include "modules/KeyboardModule.h"
extern USBD_HandleTypeDef hUsbDeviceFS;

void KeyboardSetup(Action *act){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	switch(act->command){
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	785b      	ldrb	r3, [r3, #1]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d00c      	beq.n	80016ca <KeyboardSetup+0x2a>
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	dc13      	bgt.n	80016dc <KeyboardSetup+0x3c>
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d002      	beq.n	80016be <KeyboardSetup+0x1e>
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d00c      	beq.n	80016d6 <KeyboardSetup+0x36>
				break;
		case(REMOVE_COMMAND):
				KeyboardRemove();
				break;
	}
}
 80016bc:	e00e      	b.n	80016dc <KeyboardSetup+0x3c>
				KeyboardSet(act->data);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3304      	adds	r3, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f80e 	bl	80016e4 <KeyboardSet>
				break;
 80016c8:	e008      	b.n	80016dc <KeyboardSetup+0x3c>
				KeyboardClick(act->data);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3304      	adds	r3, #4
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f836 	bl	8001740 <KeyboardClick>
				break;
 80016d4:	e002      	b.n	80016dc <KeyboardSetup+0x3c>
				KeyboardRemove();
 80016d6:	f000 f865 	bl	80017a4 <KeyboardRemove>
				break;
 80016da:	bf00      	nop
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <KeyboardSet>:

void KeyboardSet(uint8_t *data){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 80016fa:	2302      	movs	r3, #2
 80016fc:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]
 8001702:	e00c      	b.n	800171e <KeyboardSet+0x3a>
		data_out[i+1] = data[i];
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	441a      	add	r2, r3
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	3301      	adds	r3, #1
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	3318      	adds	r3, #24
 8001712:	443b      	add	r3, r7
 8001714:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	3301      	adds	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b07      	cmp	r3, #7
 8001722:	d9ef      	bls.n	8001704 <KeyboardSet+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2209      	movs	r2, #9
 800172a:	4619      	mov	r1, r3
 800172c:	4803      	ldr	r0, [pc, #12]	@ (800173c <KeyboardSet+0x58>)
 800172e:	f007 fb23 	bl	8008d78 <USBD_HID_SendReport>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000e84 	.word	0x20000e84

08001740 <KeyboardClick>:

void KeyboardClick(uint8_t *data){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 8001756:	2302      	movs	r3, #2
 8001758:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]
 800175e:	e00c      	b.n	800177a <KeyboardClick+0x3a>
		data_out[i+1] = data[i];
 8001760:	7dfb      	ldrb	r3, [r7, #23]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	441a      	add	r2, r3
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	3301      	adds	r3, #1
 800176a:	7812      	ldrb	r2, [r2, #0]
 800176c:	3318      	adds	r3, #24
 800176e:	443b      	add	r3, r7
 8001770:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	3301      	adds	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	2b07      	cmp	r3, #7
 800177e:	d9ef      	bls.n	8001760 <KeyboardClick+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2209      	movs	r2, #9
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <KeyboardClick+0x60>)
 800178a:	f007 faf5 	bl	8008d78 <USBD_HID_SendReport>
	HAL_Delay(30);
 800178e:	201e      	movs	r0, #30
 8001790:	f000 f9f2 	bl	8001b78 <HAL_Delay>
	KeyboardRemove();
 8001794:	f000 f806 	bl	80017a4 <KeyboardRemove>
}
 8001798:	bf00      	nop
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000e84 	.word	0x20000e84

080017a4 <KeyboardRemove>:

void KeyboardRemove(){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
	uint8_t data_out[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 80017aa:	4a07      	ldr	r2, [pc, #28]	@ (80017c8 <KeyboardRemove+0x24>)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b0:	c303      	stmia	r3!, {r0, r1}
 80017b2:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2209      	movs	r2, #9
 80017b8:	4619      	mov	r1, r3
 80017ba:	4804      	ldr	r0, [pc, #16]	@ (80017cc <KeyboardRemove+0x28>)
 80017bc:	f007 fadc 	bl	8008d78 <USBD_HID_SendReport>
}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	08009918 	.word	0x08009918
 80017cc:	20000e84 	.word	0x20000e84

080017d0 <MouseCommandSetup>:
 */

#include <modules/MouseModule.h>
extern USBD_HandleTypeDef hUsbDeviceFS;

void MouseCommandSetup(Action *act){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	switch(act->command){
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d00c      	beq.n	80017fa <MouseCommandSetup+0x2a>
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	dc13      	bgt.n	800180c <MouseCommandSetup+0x3c>
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d002      	beq.n	80017ee <MouseCommandSetup+0x1e>
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d00c      	beq.n	8001806 <MouseCommandSetup+0x36>
			break;
		case(REMOVE_COMMAND):
			MouseRemove();
			break;
	}
}
 80017ec:	e00e      	b.n	800180c <MouseCommandSetup+0x3c>
			MouseSet(act->data);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3304      	adds	r3, #4
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f80e 	bl	8001814 <MouseSet>
			break;
 80017f8:	e008      	b.n	800180c <MouseCommandSetup+0x3c>
			MouseClick(act->data[0]);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	791b      	ldrb	r3, [r3, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f836 	bl	8001870 <MouseClick>
			break;
 8001804:	e002      	b.n	800180c <MouseCommandSetup+0x3c>
			MouseRemove();
 8001806:	f000 f855 	bl	80018b4 <MouseRemove>
			break;
 800180a:	bf00      	nop
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <MouseSet>:

void MouseSet(uint8_t *data){
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 800181c:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <MouseSet+0x54>)
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001826:	6018      	str	r0, [r3, #0]
 8001828:	3304      	adds	r3, #4
 800182a:	7019      	strb	r1, [r3, #0]
	for(uint8_t i=0; i<4; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e00c      	b.n	800184c <MouseSet+0x38>
		data_out[i+1] = data[i];
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	441a      	add	r2, r3
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	3301      	adds	r3, #1
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	3310      	adds	r3, #16
 8001840:	443b      	add	r3, r7
 8001842:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i=0; i<4; i++)
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	3301      	adds	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d9ef      	bls.n	8001832 <MouseSet+0x1e>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	2205      	movs	r2, #5
 8001858:	4619      	mov	r1, r3
 800185a:	4804      	ldr	r0, [pc, #16]	@ (800186c <MouseSet+0x58>)
 800185c:	f007 fa8c 	bl	8008d78 <USBD_HID_SendReport>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	08009924 	.word	0x08009924
 800186c:	20000e84 	.word	0x20000e84

08001870 <MouseClick>:

void MouseClick(uint8_t buttons){
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[5] = {0x01, buttons, 0, 0, 0};
 800187a:	2301      	movs	r3, #1
 800187c:	723b      	strb	r3, [r7, #8]
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	727b      	strb	r3, [r7, #9]
 8001882:	2300      	movs	r3, #0
 8001884:	72bb      	strb	r3, [r7, #10]
 8001886:	2300      	movs	r3, #0
 8001888:	72fb      	strb	r3, [r7, #11]
 800188a:	2300      	movs	r3, #0
 800188c:	733b      	strb	r3, [r7, #12]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	2205      	movs	r2, #5
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	@ (80018b0 <MouseClick+0x40>)
 8001898:	f007 fa6e 	bl	8008d78 <USBD_HID_SendReport>
	HAL_Delay(30);
 800189c:	201e      	movs	r0, #30
 800189e:	f000 f96b 	bl	8001b78 <HAL_Delay>
	MouseRemove();
 80018a2:	f000 f807 	bl	80018b4 <MouseRemove>
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000e84 	.word	0x20000e84

080018b4 <MouseRemove>:

void MouseRemove(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <MouseRemove+0x28>)
 80018bc:	463b      	mov	r3, r7
 80018be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c2:	6018      	str	r0, [r3, #0]
 80018c4:	3304      	adds	r3, #4
 80018c6:	7019      	strb	r1, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80018c8:	463b      	mov	r3, r7
 80018ca:	2205      	movs	r2, #5
 80018cc:	4619      	mov	r1, r3
 80018ce:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <MouseRemove+0x2c>)
 80018d0:	f007 fa52 	bl	8008d78 <USBD_HID_SendReport>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	08009924 	.word	0x08009924
 80018e0:	20000e84 	.word	0x20000e84

080018e4 <crc8>:
#ifndef INC_CRC8_H_
#define INC_CRC8_H_

#include "main.h"

uint8_t crc8(uint8_t *buffer, uint8_t size) {
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < size; i++) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	73bb      	strb	r3, [r7, #14]
 80018f8:	e027      	b.n	800194a <crc8+0x66>
		uint8_t data = buffer[i];
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8001904:	2308      	movs	r3, #8
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	e019      	b.n	800193e <crc8+0x5a>
		crc = ((crc ^ data) & 1) ? (crc >> 1) ^ 0x8C : (crc >> 1);
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	7b7b      	ldrb	r3, [r7, #13]
 800190e:	4053      	eors	r3, r2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <crc8+0x46>
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001924:	43db      	mvns	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	e002      	b.n	8001930 <crc8+0x4c>
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	73fb      	strb	r3, [r7, #15]
		data >>= 1;
 8001932:	7b7b      	ldrb	r3, [r7, #13]
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	3b01      	subs	r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dce2      	bgt.n	800190a <crc8+0x26>
	for (uint8_t i = 0; i < size; i++) {
 8001944:	7bbb      	ldrb	r3, [r7, #14]
 8001946:	3301      	adds	r3, #1
 8001948:	73bb      	strb	r3, [r7, #14]
 800194a:	7bba      	ldrb	r2, [r7, #14]
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3d3      	bcc.n	80018fa <crc8+0x16>
		}
	}
	return crc;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
	...

08001960 <answer>:
#include "controllers/UsartController.h"
#include "crc8.h"

extern UART_HandleTypeDef huart3;

void answer(uint8_t data){
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[3] = {HEADER, data, 0};
 800196a:	23c5      	movs	r3, #197	@ 0xc5
 800196c:	733b      	strb	r3, [r7, #12]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	737b      	strb	r3, [r7, #13]
 8001972:	2300      	movs	r3, #0
 8001974:	73bb      	strb	r3, [r7, #14]
	data_out[2] = crc8(data_out, 2);
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2102      	movs	r1, #2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ffb1 	bl	80018e4 <crc8>
 8001982:	4603      	mov	r3, r0
 8001984:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, data_out, 3, 100);
 8001986:	f107 010c 	add.w	r1, r7, #12
 800198a:	2364      	movs	r3, #100	@ 0x64
 800198c:	2203      	movs	r2, #3
 800198e:	4803      	ldr	r0, [pc, #12]	@ (800199c <answer+0x3c>)
 8001990:	f002 feea 	bl	8004768 <HAL_UART_Transmit>
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000614 	.word	0x20000614

080019a0 <ParsingData>:

#include <modules/UsartAnswerModule.h>
#include <modules/UsartParserModule.h>
#include "crc8.h"

void ParsingData(uint8_t *buffer, uint16_t len){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
	if(buffer[0] == HEADER){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2bc5      	cmp	r3, #197	@ 0xc5
 80019b2:	d152      	bne.n	8001a5a <ParsingData+0xba>
		uint16_t length_now = (uint16_t)buffer[3] | (uint16_t)(buffer[4] << 8);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3303      	adds	r3, #3
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3304      	adds	r3, #4
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4313      	orrs	r3, r2
 80019c8:	81bb      	strh	r3, [r7, #12]
		if(length_now+6 == len){
 80019ca:	89bb      	ldrh	r3, [r7, #12]
 80019cc:	1d9a      	adds	r2, r3, #6
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d142      	bne.n	8001a5a <ParsingData+0xba>
			if(crc8(buffer, length_now+5) == buffer[length_now+5]){
 80019d4:	89bb      	ldrh	r3, [r7, #12]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3305      	adds	r3, #5
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff80 	bl	80018e4 <crc8>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	89bb      	ldrh	r3, [r7, #12]
 80019ea:	3305      	adds	r3, #5
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4299      	cmp	r1, r3
 80019f4:	d12e      	bne.n	8001a54 <ParsingData+0xb4>
				answer(USART_OK);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff ffb2 	bl	8001960 <answer>
				action.command = buffer[2];
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	789a      	ldrb	r2, [r3, #2]
 8001a00:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <ParsingData+0xc4>)
 8001a02:	705a      	strb	r2, [r3, #1]
				action.length = (uint16_t)buffer[3] | (uint16_t)(buffer[4] << 8);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3303      	adds	r3, #3
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <ParsingData+0xc4>)
 8001a1c:	805a      	strh	r2, [r3, #2]
				for(uint8_t i=0; i<action.length; i++){
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e00c      	b.n	8001a3e <ParsingData+0x9e>
					action.data[i] = buffer[i+5];
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	3305      	adds	r3, #5
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	441a      	add	r2, r3
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	7811      	ldrb	r1, [r2, #0]
 8001a30:	4a0c      	ldr	r2, [pc, #48]	@ (8001a64 <ParsingData+0xc4>)
 8001a32:	4413      	add	r3, r2
 8001a34:	460a      	mov	r2, r1
 8001a36:	711a      	strb	r2, [r3, #4]
				for(uint8_t i=0; i<action.length; i++){
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <ParsingData+0xc4>)
 8001a44:	885b      	ldrh	r3, [r3, #2]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d3ec      	bcc.n	8001a24 <ParsingData+0x84>
				}
				action.device = buffer[1];
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	785a      	ldrb	r2, [r3, #1]
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <ParsingData+0xc4>)
 8001a50:	701a      	strb	r2, [r3, #0]
			}else
				answer(USART_ERROR);
		}
	}
}
 8001a52:	e002      	b.n	8001a5a <ParsingData+0xba>
				answer(USART_ERROR);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff ff83 	bl	8001960 <answer>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000660 	.word	0x20000660

08001a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a68:	f7ff fa48 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a6c:	480b      	ldr	r0, [pc, #44]	@ (8001a9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a6e:	490c      	ldr	r1, [pc, #48]	@ (8001aa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a70:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a09      	ldr	r2, [pc, #36]	@ (8001aa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a84:	4c09      	ldr	r4, [pc, #36]	@ (8001aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a92:	f007 fe11 	bl	80096b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a96:	f7ff f985 	bl	8000da4 <main>
  bx lr
 8001a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001aa4:	08009994 	.word	0x08009994
  ldr r2, =_sbss
 8001aa8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001aac:	2000176c 	.word	0x2000176c

08001ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_2_IRQHandler>
	...

08001ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_Init+0x28>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a07      	ldr	r2, [pc, #28]	@ (8001adc <HAL_Init+0x28>)
 8001abe:	f043 0310 	orr.w	r3, r3, #16
 8001ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	f000 f947 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aca:	200f      	movs	r0, #15
 8001acc:	f000 f808 	bl	8001ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad0:	f7ff f9a2 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40022000 	.word	0x40022000

08001ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_InitTick+0x54>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_InitTick+0x58>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f95f 	bl	8001dc2 <HAL_SYSTICK_Config>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00e      	b.n	8001b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b0f      	cmp	r3, #15
 8001b12:	d80a      	bhi.n	8001b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b14:	2200      	movs	r2, #0
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f000 f927 	bl	8001d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b20:	4a06      	ldr	r2, [pc, #24]	@ (8001b3c <HAL_InitTick+0x5c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000000 	.word	0x20000000
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	20000008 	.word	0x20000008

08001b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_IncTick+0x1c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_IncTick+0x20>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a03      	ldr	r2, [pc, #12]	@ (8001b60 <HAL_IncTick+0x20>)
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	2000000c 	.word	0x2000000c
 8001b60:	20000e7c 	.word	0x20000e7c

08001b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b02      	ldr	r3, [pc, #8]	@ (8001b74 <HAL_GetTick+0x10>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	20000e7c 	.word	0x20000e7c

08001b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff fff0 	bl	8001b64 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_Delay+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b9e:	bf00      	nop
 8001ba0:	f7ff ffe0 	bl	8001b64 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000000c 	.word	0x2000000c

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db0b      	blt.n	8001c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4906      	ldr	r1, [pc, #24]	@ (8001c58 <__NVIC_EnableIRQ+0x34>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	@ (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	@ 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d24:	d301      	bcc.n	8001d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00f      	b.n	8001d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <SysTick_Config+0x40>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d32:	210f      	movs	r1, #15
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f7ff ff90 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <SysTick_Config+0x40>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <SysTick_Config+0x40>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff2d 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d80:	f7ff ff42 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f7ff ff90 	bl	8001cb0 <NVIC_EncodePriority>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff5f 	bl	8001c5c <__NVIC_SetPriority>
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff35 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ffa2 	bl	8001d14 <SysTick_Config>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b085      	sub	sp, #20
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d008      	beq.n	8001e04 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2204      	movs	r2, #4
 8001df6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e020      	b.n	8001e46 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 020e 	bic.w	r2, r2, #14
 8001e12:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e32:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d005      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
 8001e72:	e051      	b.n	8001f18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 020e 	bic.w	r2, r2, #14
 8001e82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a22      	ldr	r2, [pc, #136]	@ (8001f24 <HAL_DMA_Abort_IT+0xd4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d029      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0xa2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a21      	ldr	r2, [pc, #132]	@ (8001f28 <HAL_DMA_Abort_IT+0xd8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d022      	beq.n	8001eee <HAL_DMA_Abort_IT+0x9e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1f      	ldr	r2, [pc, #124]	@ (8001f2c <HAL_DMA_Abort_IT+0xdc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01a      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x98>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f30 <HAL_DMA_Abort_IT+0xe0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d012      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0x92>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f34 <HAL_DMA_Abort_IT+0xe4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00a      	beq.n	8001edc <HAL_DMA_Abort_IT+0x8c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1b      	ldr	r2, [pc, #108]	@ (8001f38 <HAL_DMA_Abort_IT+0xe8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d102      	bne.n	8001ed6 <HAL_DMA_Abort_IT+0x86>
 8001ed0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ed4:	e00e      	b.n	8001ef4 <HAL_DMA_Abort_IT+0xa4>
 8001ed6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001eda:	e00b      	b.n	8001ef4 <HAL_DMA_Abort_IT+0xa4>
 8001edc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ee0:	e008      	b.n	8001ef4 <HAL_DMA_Abort_IT+0xa4>
 8001ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee6:	e005      	b.n	8001ef4 <HAL_DMA_Abort_IT+0xa4>
 8001ee8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eec:	e002      	b.n	8001ef4 <HAL_DMA_Abort_IT+0xa4>
 8001eee:	2310      	movs	r3, #16
 8001ef0:	e000      	b.n	8001ef4 <HAL_DMA_Abort_IT+0xa4>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	4a11      	ldr	r2, [pc, #68]	@ (8001f3c <HAL_DMA_Abort_IT+0xec>)
 8001ef6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
    } 
  }
  return status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40020008 	.word	0x40020008
 8001f28:	4002001c 	.word	0x4002001c
 8001f2c:	40020030 	.word	0x40020030
 8001f30:	40020044 	.word	0x40020044
 8001f34:	40020058 	.word	0x40020058
 8001f38:	4002006c 	.word	0x4002006c
 8001f3c:	40020000 	.word	0x40020000

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b08b      	sub	sp, #44	@ 0x2c
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	e169      	b.n	8002228 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f54:	2201      	movs	r2, #1
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	f040 8158 	bne.w	8002222 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a9a      	ldr	r2, [pc, #616]	@ (80021e0 <HAL_GPIO_Init+0x2a0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d05e      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f7c:	4a98      	ldr	r2, [pc, #608]	@ (80021e0 <HAL_GPIO_Init+0x2a0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d875      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f82:	4a98      	ldr	r2, [pc, #608]	@ (80021e4 <HAL_GPIO_Init+0x2a4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d058      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f88:	4a96      	ldr	r2, [pc, #600]	@ (80021e4 <HAL_GPIO_Init+0x2a4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d86f      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f8e:	4a96      	ldr	r2, [pc, #600]	@ (80021e8 <HAL_GPIO_Init+0x2a8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d052      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f94:	4a94      	ldr	r2, [pc, #592]	@ (80021e8 <HAL_GPIO_Init+0x2a8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d869      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f9a:	4a94      	ldr	r2, [pc, #592]	@ (80021ec <HAL_GPIO_Init+0x2ac>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d04c      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001fa0:	4a92      	ldr	r2, [pc, #584]	@ (80021ec <HAL_GPIO_Init+0x2ac>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d863      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fa6:	4a92      	ldr	r2, [pc, #584]	@ (80021f0 <HAL_GPIO_Init+0x2b0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d046      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001fac:	4a90      	ldr	r2, [pc, #576]	@ (80021f0 <HAL_GPIO_Init+0x2b0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d85d      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d82a      	bhi.n	800200c <HAL_GPIO_Init+0xcc>
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d859      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fba:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc0 <HAL_GPIO_Init+0x80>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	0800203b 	.word	0x0800203b
 8001fc4:	08002015 	.word	0x08002015
 8001fc8:	08002027 	.word	0x08002027
 8001fcc:	08002069 	.word	0x08002069
 8001fd0:	0800206f 	.word	0x0800206f
 8001fd4:	0800206f 	.word	0x0800206f
 8001fd8:	0800206f 	.word	0x0800206f
 8001fdc:	0800206f 	.word	0x0800206f
 8001fe0:	0800206f 	.word	0x0800206f
 8001fe4:	0800206f 	.word	0x0800206f
 8001fe8:	0800206f 	.word	0x0800206f
 8001fec:	0800206f 	.word	0x0800206f
 8001ff0:	0800206f 	.word	0x0800206f
 8001ff4:	0800206f 	.word	0x0800206f
 8001ff8:	0800206f 	.word	0x0800206f
 8001ffc:	0800206f 	.word	0x0800206f
 8002000:	0800206f 	.word	0x0800206f
 8002004:	0800201d 	.word	0x0800201d
 8002008:	08002031 	.word	0x08002031
 800200c:	4a79      	ldr	r2, [pc, #484]	@ (80021f4 <HAL_GPIO_Init+0x2b4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002012:	e02c      	b.n	800206e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e029      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	3304      	adds	r3, #4
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e024      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	3308      	adds	r3, #8
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e01f      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	330c      	adds	r3, #12
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e01a      	b.n	8002070 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002042:	2304      	movs	r3, #4
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e013      	b.n	8002070 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	611a      	str	r2, [r3, #16]
          break;
 800205a:	e009      	b.n	8002070 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800205c:	2308      	movs	r3, #8
 800205e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	615a      	str	r2, [r3, #20]
          break;
 8002066:	e003      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x130>
          break;
 800206e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2bff      	cmp	r3, #255	@ 0xff
 8002074:	d801      	bhi.n	800207a <HAL_GPIO_Init+0x13a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	e001      	b.n	800207e <HAL_GPIO_Init+0x13e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2bff      	cmp	r3, #255	@ 0xff
 8002084:	d802      	bhi.n	800208c <HAL_GPIO_Init+0x14c>
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	e002      	b.n	8002092 <HAL_GPIO_Init+0x152>
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	3b08      	subs	r3, #8
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	210f      	movs	r1, #15
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	6a39      	ldr	r1, [r7, #32]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	431a      	orrs	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80b1 	beq.w	8002222 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c0:	4b4d      	ldr	r3, [pc, #308]	@ (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	@ (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b4a      	ldr	r3, [pc, #296]	@ (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020d8:	4a48      	ldr	r2, [pc, #288]	@ (80021fc <HAL_GPIO_Init+0x2bc>)
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a40      	ldr	r2, [pc, #256]	@ (8002200 <HAL_GPIO_Init+0x2c0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <HAL_GPIO_Init+0x1ec>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3f      	ldr	r2, [pc, #252]	@ (8002204 <HAL_GPIO_Init+0x2c4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00d      	beq.n	8002128 <HAL_GPIO_Init+0x1e8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3e      	ldr	r2, [pc, #248]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <HAL_GPIO_Init+0x1e4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3d      	ldr	r2, [pc, #244]	@ (800220c <HAL_GPIO_Init+0x2cc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_GPIO_Init+0x1e0>
 800211c:	2303      	movs	r3, #3
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002120:	2304      	movs	r3, #4
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 800212c:	2300      	movs	r3, #0
 800212e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800213e:	492f      	ldr	r1, [pc, #188]	@ (80021fc <HAL_GPIO_Init+0x2bc>)
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002158:	4b2d      	ldr	r3, [pc, #180]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	492c      	ldr	r1, [pc, #176]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002166:	4b2a      	ldr	r3, [pc, #168]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	43db      	mvns	r3, r3
 800216e:	4928      	ldr	r1, [pc, #160]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 8002170:	4013      	ands	r3, r2
 8002172:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002180:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	4922      	ldr	r1, [pc, #136]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	60cb      	str	r3, [r1, #12]
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800218e:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	43db      	mvns	r3, r3
 8002196:	491e      	ldr	r1, [pc, #120]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 8002198:	4013      	ands	r3, r2
 800219a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021a8:	4b19      	ldr	r3, [pc, #100]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	4918      	ldr	r1, [pc, #96]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021b6:	4b16      	ldr	r3, [pc, #88]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	43db      	mvns	r3, r3
 80021be:	4914      	ldr	r1, [pc, #80]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d021      	beq.n	8002214 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	490e      	ldr	r1, [pc, #56]	@ (8002210 <HAL_GPIO_Init+0x2d0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e021      	b.n	8002222 <HAL_GPIO_Init+0x2e2>
 80021de:	bf00      	nop
 80021e0:	10320000 	.word	0x10320000
 80021e4:	10310000 	.word	0x10310000
 80021e8:	10220000 	.word	0x10220000
 80021ec:	10210000 	.word	0x10210000
 80021f0:	10120000 	.word	0x10120000
 80021f4:	10110000 	.word	0x10110000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010000 	.word	0x40010000
 8002200:	40010800 	.word	0x40010800
 8002204:	40010c00 	.word	0x40010c00
 8002208:	40011000 	.word	0x40011000
 800220c:	40011400 	.word	0x40011400
 8002210:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002214:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <HAL_GPIO_Init+0x304>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	43db      	mvns	r3, r3
 800221c:	4909      	ldr	r1, [pc, #36]	@ (8002244 <HAL_GPIO_Init+0x304>)
 800221e:	4013      	ands	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	3301      	adds	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f47f ae8e 	bne.w	8001f54 <HAL_GPIO_Init+0x14>
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	372c      	adds	r7, #44	@ 0x2c
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002264:	e003      	b.n	800226e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	43d9      	mvns	r1, r3
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	400b      	ands	r3, r1
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	611a      	str	r2, [r3, #16]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0e8      	b.n	800248e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d106      	bne.n	80022d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f006 ff5f 	bl	8009194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2203      	movs	r2, #3
 80022da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 f87a 	bl	80053e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3304      	adds	r3, #4
 80022f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f8:	f003 f850 	bl	800539c <USB_CoreInit>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2202      	movs	r2, #2
 8002306:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0bf      	b.n	800248e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f003 f87e 	bl	8005416 <USB_SetCurrentMode>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b0      	b.n	800248e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	e03e      	b.n	80023b0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	3311      	adds	r3, #17
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	3310      	adds	r3, #16
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	3313      	adds	r3, #19
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	3320      	adds	r3, #32
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	3324      	adds	r3, #36	@ 0x24
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	3301      	adds	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	791b      	ldrb	r3, [r3, #4]
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d3bb      	bcc.n	8002332 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e044      	b.n	800244a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	3301      	adds	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	791b      	ldrb	r3, [r3, #4]
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	429a      	cmp	r2, r3
 8002452:	d3b5      	bcc.n	80023c0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800245e:	f002 ffe6 	bl	800542e <USB_DevInit>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e00c      	b.n	800248e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f005 fa65 	bl	8007956 <USB_DevDisconnect>

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_PCD_Start+0x16>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e016      	b.n	80024da <HAL_PCD_Start+0x44>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 ff7c 	bl	80053b6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80024be:	2101      	movs	r1, #1
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f007 f8b4 	bl	800962e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f005 fa39 	bl	8007942 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b088      	sub	sp, #32
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f005 fa3b 	bl	800796a <USB_ReadInterrupts>
 80024f4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fb03 	bl	8002b0c <PCD_EP_ISR_Handler>

    return;
 8002506:	e119      	b.n	800273c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250e:	2b00      	cmp	r3, #0
 8002510:	d013      	beq.n	800253a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002524:	b292      	uxth	r2, r2
 8002526:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f006 fead 	bl	800928a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002530:	2100      	movs	r1, #0
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f905 	bl	8002742 <HAL_PCD_SetAddress>

    return;
 8002538:	e100      	b.n	800273c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00c      	beq.n	800255e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800254c:	b29a      	uxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002556:	b292      	uxth	r2, r2
 8002558:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800255c:	e0ee      	b.n	800273c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00c      	beq.n	8002582 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800257a:	b292      	uxth	r2, r2
 800257c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002580:	e0dc      	b.n	800273c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d027      	beq.n	80025dc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002594:	b29a      	uxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0204 	bic.w	r2, r2, #4
 800259e:	b292      	uxth	r2, r2
 80025a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0208 	bic.w	r2, r2, #8
 80025b6:	b292      	uxth	r2, r2
 80025b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f006 fe9d 	bl	80092fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025d4:	b292      	uxth	r2, r2
 80025d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025da:	e0af      	b.n	800273c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8083 	beq.w	80026ee <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	77fb      	strb	r3, [r7, #31]
 80025ec:	e010      	b.n	8002610 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	7ffb      	ldrb	r3, [r7, #31]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	441a      	add	r2, r3
 80025fa:	7ffb      	ldrb	r3, [r7, #31]
 80025fc:	8812      	ldrh	r2, [r2, #0]
 80025fe:	b292      	uxth	r2, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	3320      	adds	r3, #32
 8002604:	443b      	add	r3, r7
 8002606:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800260a:	7ffb      	ldrb	r3, [r7, #31]
 800260c:	3301      	adds	r3, #1
 800260e:	77fb      	strb	r3, [r7, #31]
 8002610:	7ffb      	ldrb	r3, [r7, #31]
 8002612:	2b07      	cmp	r3, #7
 8002614:	d9eb      	bls.n	80025ee <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	b292      	uxth	r2, r2
 800262a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002636:	b29a      	uxth	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	b292      	uxth	r2, r2
 8002642:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002646:	bf00      	nop
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002650:	b29b      	uxth	r3, r3
 8002652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f6      	beq.n	8002648 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002662:	b29a      	uxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800266c:	b292      	uxth	r2, r2
 800266e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002672:	2300      	movs	r3, #0
 8002674:	77fb      	strb	r3, [r7, #31]
 8002676:	e00f      	b.n	8002698 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002678:	7ffb      	ldrb	r3, [r7, #31]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	4611      	mov	r1, r2
 8002680:	7ffa      	ldrb	r2, [r7, #31]
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	440a      	add	r2, r1
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	3320      	adds	r3, #32
 800268a:	443b      	add	r3, r7
 800268c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002690:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002692:	7ffb      	ldrb	r3, [r7, #31]
 8002694:	3301      	adds	r3, #1
 8002696:	77fb      	strb	r3, [r7, #31]
 8002698:	7ffb      	ldrb	r3, [r7, #31]
 800269a:	2b07      	cmp	r3, #7
 800269c:	d9ec      	bls.n	8002678 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0208 	orr.w	r2, r2, #8
 80026b0:	b292      	uxth	r2, r2
 80026b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026c8:	b292      	uxth	r2, r2
 80026ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0204 	orr.w	r2, r2, #4
 80026e0:	b292      	uxth	r2, r2
 80026e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f006 fdee 	bl	80092c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026ec:	e026      	b.n	800273c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00f      	beq.n	8002718 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800270a:	b292      	uxth	r2, r2
 800270c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f006 fdac 	bl	800926e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002716:	e011      	b.n	800273c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800272a:	b29a      	uxth	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002734:	b292      	uxth	r2, r2
 8002736:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800273a:	bf00      	nop
  }
}
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_PCD_SetAddress+0x1a>
 8002758:	2302      	movs	r3, #2
 800275a:	e012      	b.n	8002782 <HAL_PCD_SetAddress+0x40>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f005 f8d2 	bl	800791c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	4608      	mov	r0, r1
 8002794:	4611      	mov	r1, r2
 8002796:	461a      	mov	r2, r3
 8002798:	4603      	mov	r3, r0
 800279a:	70fb      	strb	r3, [r7, #3]
 800279c:	460b      	mov	r3, r1
 800279e:	803b      	strh	r3, [r7, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	da0e      	bge.n	80027ce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	f003 0207 	and.w	r2, r3, #7
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	3310      	adds	r3, #16
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	705a      	strb	r2, [r3, #1]
 80027cc:	e00e      	b.n	80027ec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	f003 0207 	and.w	r2, r3, #7
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027f8:	883a      	ldrh	r2, [r7, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	78ba      	ldrb	r2, [r7, #2]
 8002802:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002804:	78bb      	ldrb	r3, [r7, #2]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d102      	bne.n	8002810 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_PCD_EP_Open+0x94>
 800281a:	2302      	movs	r3, #2
 800281c:	e00e      	b.n	800283c <HAL_PCD_EP_Open+0xb2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68f9      	ldr	r1, [r7, #12]
 800282c:	4618      	mov	r0, r3
 800282e:	f002 fe1b 	bl	8005468 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800283a:	7afb      	ldrb	r3, [r7, #11]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002854:	2b00      	cmp	r3, #0
 8002856:	da0e      	bge.n	8002876 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	f003 0207 	and.w	r2, r3, #7
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	3310      	adds	r3, #16
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	705a      	strb	r2, [r3, #1]
 8002874:	e00e      	b.n	8002894 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	f003 0207 	and.w	r2, r3, #7
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	b2da      	uxtb	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_PCD_EP_Close+0x6a>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e00e      	b.n	80028cc <HAL_PCD_EP_Close+0x88>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68f9      	ldr	r1, [r7, #12]
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 f993 	bl	8005be8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	460b      	mov	r3, r1
 80028e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e4:	7afb      	ldrb	r3, [r7, #11]
 80028e6:	f003 0207 	and.w	r2, r3, #7
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4413      	add	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	b2da      	uxtb	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6979      	ldr	r1, [r7, #20]
 8002926:	4618      	mov	r0, r3
 8002928:	f003 fb4a 	bl	8005fc0 <USB_EPStartXfer>

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	460b      	mov	r3, r1
 8002944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002946:	7afb      	ldrb	r3, [r7, #11]
 8002948:	f003 0207 	and.w	r2, r3, #7
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3310      	adds	r3, #16
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2201      	movs	r2, #1
 8002980:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002982:	7afb      	ldrb	r3, [r7, #11]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	b2da      	uxtb	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6979      	ldr	r1, [r7, #20]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fb13 	bl	8005fc0 <USB_EPStartXfer>

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	7912      	ldrb	r2, [r2, #4]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e04c      	b.n	8002a5c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	da0e      	bge.n	80029e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 0207 	and.w	r2, r3, #7
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	3310      	adds	r3, #16
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	705a      	strb	r2, [r3, #1]
 80029e6:	e00c      	b.n	8002a02 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_EP_SetStall+0x7e>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e01c      	b.n	8002a5c <HAL_PCD_EP_SetStall+0xb8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68f9      	ldr	r1, [r7, #12]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f004 fe76 	bl	8007722 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d108      	bne.n	8002a52 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f004 ff9b 	bl	8007988 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	7912      	ldrb	r2, [r2, #4]
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e040      	b.n	8002b04 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da0e      	bge.n	8002aa8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 0207 	and.w	r2, r3, #7
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	3310      	adds	r3, #16
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	705a      	strb	r2, [r3, #1]
 8002aa6:	e00e      	b.n	8002ac6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	f003 0207 	and.w	r2, r3, #7
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_PCD_EP_ClrStall+0x82>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e00e      	b.n	8002b04 <HAL_PCD_EP_ClrStall+0xa0>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68f9      	ldr	r1, [r7, #12]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 fe64 	bl	80077c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b096      	sub	sp, #88	@ 0x58
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b14:	e3bb      	b.n	800328e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b1e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002b30:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f040 8175 	bne.w	8002e24 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d14e      	bne.n	8002be4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b56:	81fb      	strh	r3, [r7, #14]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	89fb      	ldrh	r3, [r7, #14]
 8002b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3310      	adds	r3, #16
 8002b6e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	3302      	adds	r3, #2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	441a      	add	r2, r3
 8002ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002baa:	2100      	movs	r1, #0
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f006 fb44 	bl	800923a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	7b5b      	ldrb	r3, [r3, #13]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8368 	beq.w	800328e <PCD_EP_ISR_Handler+0x782>
 8002bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 8363 	bne.w	800328e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7b5b      	ldrb	r3, [r3, #13]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	735a      	strb	r2, [r3, #13]
 8002be2:	e354      	b.n	800328e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bea:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bf6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d034      	beq.n	8002c6c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	3306      	adds	r3, #6
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f004 fef1 	bl	8007a28 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c52:	4013      	ands	r3, r2
 8002c54:	823b      	strh	r3, [r7, #16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	8a3a      	ldrh	r2, [r7, #16]
 8002c5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c60:	b292      	uxth	r2, r2
 8002c62:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f006 fabb 	bl	80091e0 <HAL_PCD_SetupStageCallback>
 8002c6a:	e310      	b.n	800328e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c6c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f280 830c 	bge.w	800328e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c82:	4013      	ands	r3, r2
 8002c84:	83fb      	strh	r3, [r7, #30]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	8bfa      	ldrh	r2, [r7, #30]
 8002c8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c90:	b292      	uxth	r2, r2
 8002c92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3306      	adds	r3, #6
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cbe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d019      	beq.n	8002cfc <PCD_EP_ISR_Handler+0x1f0>
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd6:	6959      	ldr	r1, [r3, #20]
 8002cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cda:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cde:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	f004 fea1 	bl	8007a28 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	441a      	add	r2, r3
 8002cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f006 fa84 	bl	8009204 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 82bd 	bne.w	800328e <PCD_EP_ISR_Handler+0x782>
 8002d14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d18:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002d1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d20:	f000 82b5 	beq.w	800328e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4413      	add	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d5a:	d91d      	bls.n	8002d98 <PCD_EP_ISR_Handler+0x28c>
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <PCD_EP_ISR_Handler+0x26a>
 8002d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d72:	3b01      	subs	r3, #1
 8002d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	029b      	lsls	r3, r3, #10
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	e026      	b.n	8002de6 <PCD_EP_ISR_Handler+0x2da>
 8002d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <PCD_EP_ISR_Handler+0x2aa>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	801a      	strh	r2, [r3, #0]
 8002db4:	e017      	b.n	8002de6 <PCD_EP_ISR_Handler+0x2da>
 8002db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <PCD_EP_ISR_Handler+0x2c4>
 8002dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dcc:	3301      	adds	r3, #1
 8002dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4313      	orrs	r3, r2
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df6:	827b      	strh	r3, [r7, #18]
 8002df8:	8a7b      	ldrh	r3, [r7, #18]
 8002dfa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002dfe:	827b      	strh	r3, [r7, #18]
 8002e00:	8a7b      	ldrh	r3, [r7, #18]
 8002e02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e06:	827b      	strh	r3, [r7, #18]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	8a7b      	ldrh	r3, [r7, #18]
 8002e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	8013      	strh	r3, [r2, #0]
 8002e22:	e234      	b.n	800328e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e38:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f280 80fc 	bge.w	800303a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e58:	4013      	ands	r3, r2
 8002e5a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002e70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e74:	b292      	uxth	r2, r2
 8002e76:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e78:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e90:	7b1b      	ldrb	r3, [r3, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d125      	bne.n	8002ee2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3306      	adds	r3, #6
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ebe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002ec2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8092 	beq.w	8002ff0 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed2:	6959      	ldr	r1, [r3, #20]
 8002ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed6:	88da      	ldrh	r2, [r3, #6]
 8002ed8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002edc:	f004 fda4 	bl	8007a28 <USB_ReadPMA>
 8002ee0:	e086      	b.n	8002ff0 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee4:	78db      	ldrb	r3, [r3, #3]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d10a      	bne.n	8002f00 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002eea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002eee:	461a      	mov	r2, r3
 8002ef0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f9d9 	bl	80032aa <HAL_PCD_EP_DB_Receive>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002efe:	e077      	b.n	8002ff0 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f1a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	441a      	add	r2, r3
 8002f2c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d024      	beq.n	8002fa8 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	3302      	adds	r3, #2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f86:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d02e      	beq.n	8002ff0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f98:	6959      	ldr	r1, [r3, #20]
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9c:	891a      	ldrh	r2, [r3, #8]
 8002f9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fa2:	f004 fd41 	bl	8007a28 <USB_ReadPMA>
 8002fa6:	e023      	b.n	8002ff0 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3306      	adds	r3, #6
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002fd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d009      	beq.n	8002ff0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe2:	6959      	ldr	r1, [r3, #20]
 8002fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe6:	895a      	ldrh	r2, [r3, #10]
 8002fe8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fec:	f004 fd1c 	bl	8007a28 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ff8:	441a      	add	r2, r3
 8002ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003006:	441a      	add	r2, r3
 8003008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800300c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <PCD_EP_ISR_Handler+0x514>
 8003014:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	429a      	cmp	r2, r3
 800301e:	d206      	bcs.n	800302e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	4619      	mov	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f006 f8ec 	bl	8009204 <HAL_PCD_DataOutStageCallback>
 800302c:	e005      	b.n	800303a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003034:	4618      	mov	r0, r3
 8003036:	f002 ffc3 	bl	8005fc0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800303a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800303e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8123 	beq.w	800328e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003048:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	3310      	adds	r3, #16
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003076:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	441a      	add	r2, r3
 8003088:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800308c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003094:	b29b      	uxth	r3, r3
 8003096:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800309a:	78db      	ldrb	r3, [r3, #3]
 800309c:	2b01      	cmp	r3, #1
 800309e:	f040 80a2 	bne.w	80031e6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80030a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80030a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030aa:	7b1b      	ldrb	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8093 	beq.w	80031d8 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80030b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d046      	beq.n	800314c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c0:	785b      	ldrb	r3, [r3, #1]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d126      	bne.n	8003114 <PCD_EP_ISR_Handler+0x608>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	4413      	add	r3, r2
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	011a      	lsls	r2, r3, #4
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	4413      	add	r3, r2
 80030e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030ec:	623b      	str	r3, [r7, #32]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	801a      	strh	r2, [r3, #0]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800310c:	b29a      	uxth	r2, r3
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	801a      	strh	r2, [r3, #0]
 8003112:	e061      	b.n	80031d8 <PCD_EP_ISR_Handler+0x6cc>
 8003114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d15d      	bne.n	80031d8 <PCD_EP_ISR_Handler+0x6cc>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	4413      	add	r3, r2
 8003132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	011a      	lsls	r2, r3, #4
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	4413      	add	r3, r2
 800313e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003146:	2200      	movs	r2, #0
 8003148:	801a      	strh	r2, [r3, #0]
 800314a:	e045      	b.n	80031d8 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d126      	bne.n	80031a8 <PCD_EP_ISR_Handler+0x69c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003168:	b29b      	uxth	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316e:	4413      	add	r3, r2
 8003170:	637b      	str	r3, [r7, #52]	@ 0x34
 8003172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	011a      	lsls	r2, r3, #4
 8003178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317a:	4413      	add	r3, r2
 800317c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003180:	633b      	str	r3, [r7, #48]	@ 0x30
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318c:	b29a      	uxth	r2, r3
 800318e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	e017      	b.n	80031d8 <PCD_EP_ISR_Handler+0x6cc>
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d113      	bne.n	80031d8 <PCD_EP_ISR_Handler+0x6cc>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031be:	4413      	add	r3, r2
 80031c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	011a      	lsls	r2, r3, #4
 80031c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ca:	4413      	add	r3, r2
 80031cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d4:	2200      	movs	r2, #0
 80031d6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4619      	mov	r1, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f006 f82b 	bl	800923a <HAL_PCD_DataInStageCallback>
 80031e4:	e053      	b.n	800328e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80031e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d146      	bne.n	8003280 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	3302      	adds	r3, #2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800321a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800321e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003226:	429a      	cmp	r2, r3
 8003228:	d907      	bls.n	800323a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800322a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003236:	619a      	str	r2, [r3, #24]
 8003238:	e002      	b.n	8003240 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800323a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d106      	bne.n	8003256 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f005 fff3 	bl	800923a <HAL_PCD_DataInStageCallback>
 8003254:	e01b      	b.n	800328e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800325e:	441a      	add	r2, r3
 8003260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003262:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800326c:	441a      	add	r2, r3
 800326e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003270:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003278:	4618      	mov	r0, r3
 800327a:	f002 fea1 	bl	8005fc0 <USB_EPStartXfer>
 800327e:	e006      	b.n	800328e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003280:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003284:	461a      	mov	r2, r3
 8003286:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f91b 	bl	80034c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003296:	b29b      	uxth	r3, r3
 8003298:	b21b      	sxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	f6ff ac3b 	blt.w	8002b16 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3758      	adds	r7, #88	@ 0x58
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b088      	sub	sp, #32
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	4613      	mov	r3, r2
 80032b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d07e      	beq.n	80033c0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	3302      	adds	r3, #2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	8b7b      	ldrh	r3, [r7, #26]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d306      	bcc.n	8003304 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	8b7b      	ldrh	r3, [r7, #26]
 80032fc:	1ad2      	subs	r2, r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	619a      	str	r2, [r3, #24]
 8003302:	e002      	b.n	800330a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d123      	bne.n	800335a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800332c:	833b      	strh	r3, [r7, #24]
 800332e:	8b3b      	ldrh	r3, [r7, #24]
 8003330:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003334:	833b      	strh	r3, [r7, #24]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	441a      	add	r2, r3
 8003344:	8b3b      	ldrh	r3, [r7, #24]
 8003346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800334a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800334e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003356:	b29b      	uxth	r3, r3
 8003358:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01f      	beq.n	80033a4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800337a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337e:	82fb      	strh	r3, [r7, #22]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	8afb      	ldrh	r3, [r7, #22]
 8003390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800339c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033a4:	8b7b      	ldrh	r3, [r7, #26]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8087 	beq.w	80034ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6959      	ldr	r1, [r3, #20]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	891a      	ldrh	r2, [r3, #8]
 80033b8:	8b7b      	ldrh	r3, [r7, #26]
 80033ba:	f004 fb35 	bl	8007a28 <USB_ReadPMA>
 80033be:	e07c      	b.n	80034ba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	3306      	adds	r3, #6
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	8b7b      	ldrh	r3, [r7, #26]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d306      	bcc.n	8003402 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	8b7b      	ldrh	r3, [r7, #26]
 80033fa:	1ad2      	subs	r2, r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	619a      	str	r2, [r3, #24]
 8003400:	e002      	b.n	8003408 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2200      	movs	r2, #0
 8003406:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d123      	bne.n	8003458 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800342a:	83fb      	strh	r3, [r7, #30]
 800342c:	8bfb      	ldrh	r3, [r7, #30]
 800342e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003432:	83fb      	strh	r3, [r7, #30]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	441a      	add	r2, r3
 8003442:	8bfb      	ldrh	r3, [r7, #30]
 8003444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800344c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003454:	b29b      	uxth	r3, r3
 8003456:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d11f      	bne.n	80034a2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800347c:	83bb      	strh	r3, [r7, #28]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	8bbb      	ldrh	r3, [r7, #28]
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800349a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034a2:	8b7b      	ldrh	r3, [r7, #26]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6959      	ldr	r1, [r3, #20]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	895a      	ldrh	r2, [r3, #10]
 80034b4:	8b7b      	ldrh	r3, [r7, #26]
 80034b6:	f004 fab7 	bl	8007a28 <USB_ReadPMA>
    }
  }

  return count;
 80034ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b0a4      	sub	sp, #144	@ 0x90
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 81dd 	beq.w	8003898 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	3302      	adds	r3, #2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003506:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003512:	429a      	cmp	r2, r3
 8003514:	d907      	bls.n	8003526 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800351e:	1ad2      	subs	r2, r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	619a      	str	r2, [r3, #24]
 8003524:	e002      	b.n	800352c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2200      	movs	r2, #0
 800352a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 80b9 	bne.w	80036a8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	785b      	ldrb	r3, [r3, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d126      	bne.n	800358c <HAL_PCD_EP_DB_Transmit+0xc8>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800354c:	b29b      	uxth	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003552:	4413      	add	r3, r2
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	011a      	lsls	r2, r3, #4
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355e:	4413      	add	r3, r2
 8003560:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003570:	b29a      	uxth	r2, r3
 8003572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003574:	801a      	strh	r2, [r3, #0]
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003584:	b29a      	uxth	r2, r3
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	e01a      	b.n	80035c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d116      	bne.n	80035c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a8:	4413      	add	r3, r2
 80035aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	011a      	lsls	r2, r3, #4
 80035b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b4:	4413      	add	r3, r2
 80035b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80035bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035be:	2200      	movs	r2, #0
 80035c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d126      	bne.n	800361e <HAL_PCD_EP_DB_Transmit+0x15a>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035de:	b29b      	uxth	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	011a      	lsls	r2, r3, #4
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003602:	b29a      	uxth	r2, r3
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	801a      	strh	r2, [r3, #0]
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003616:	b29a      	uxth	r2, r3
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	801a      	strh	r2, [r3, #0]
 800361c:	e017      	b.n	800364e <HAL_PCD_EP_DB_Transmit+0x18a>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d113      	bne.n	800364e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800362e:	b29b      	uxth	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	4413      	add	r3, r2
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	011a      	lsls	r2, r3, #4
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	4413      	add	r3, r2
 8003642:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003646:	623b      	str	r3, [r7, #32]
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	2200      	movs	r2, #0
 800364c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	4619      	mov	r1, r3
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f005 fdf0 	bl	800923a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 82fc 	beq.w	8003c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800367c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003680:	82fb      	strh	r3, [r7, #22]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	441a      	add	r2, r3
 8003690:	8afb      	ldrh	r3, [r7, #22]
 8003692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800369a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800369e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	8013      	strh	r3, [r2, #0]
 80036a6:	e2da      	b.n	8003c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d021      	beq.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	441a      	add	r2, r3
 80036de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80036e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	f040 82ae 	bne.w	8003c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800370a:	441a      	add	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003718:	441a      	add	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	6a1a      	ldr	r2, [r3, #32]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	429a      	cmp	r2, r3
 8003728:	d30b      	bcc.n	8003742 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800373a:	1ad2      	subs	r2, r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	621a      	str	r2, [r3, #32]
 8003740:	e017      	b.n	8003772 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800374a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800374e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800375a:	e00a      	b.n	8003772 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2200      	movs	r2, #0
 8003770:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	785b      	ldrb	r3, [r3, #1]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d165      	bne.n	8003846 <HAL_PCD_EP_DB_Transmit+0x382>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003788:	b29b      	uxth	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800378e:	4413      	add	r3, r2
 8003790:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	011a      	lsls	r2, r3, #4
 8003798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800379a:	4413      	add	r3, r2
 800379c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b0:	801a      	strh	r2, [r3, #0]
 80037b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80037b8:	d91d      	bls.n	80037f6 <HAL_PCD_EP_DB_Transmit+0x332>
 80037ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x310>
 80037ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037d0:	3b01      	subs	r3, #1
 80037d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29a      	uxth	r2, r3
 80037da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037dc:	b29b      	uxth	r3, r3
 80037de:	029b      	lsls	r3, r3, #10
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	4313      	orrs	r3, r2
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	e044      	b.n	8003880 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <HAL_PCD_EP_DB_Transmit+0x350>
 80037fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800380c:	b29a      	uxth	r2, r3
 800380e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003810:	801a      	strh	r2, [r3, #0]
 8003812:	e035      	b.n	8003880 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003814:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800381c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800382a:	3301      	adds	r3, #1
 800382c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	b29a      	uxth	r2, r3
 8003834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003836:	b29b      	uxth	r3, r3
 8003838:	029b      	lsls	r3, r3, #10
 800383a:	b29b      	uxth	r3, r3
 800383c:	4313      	orrs	r3, r2
 800383e:	b29a      	uxth	r2, r3
 8003840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003842:	801a      	strh	r2, [r3, #0]
 8003844:	e01c      	b.n	8003880 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d118      	bne.n	8003880 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	647b      	str	r3, [r7, #68]	@ 0x44
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800385c:	b29b      	uxth	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003862:	4413      	add	r3, r2
 8003864:	647b      	str	r3, [r7, #68]	@ 0x44
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	011a      	lsls	r2, r3, #4
 800386c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800386e:	4413      	add	r3, r2
 8003870:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003874:	643b      	str	r3, [r7, #64]	@ 0x40
 8003876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800387a:	b29a      	uxth	r2, r3
 800387c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800387e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	6959      	ldr	r1, [r3, #20]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	891a      	ldrh	r2, [r3, #8]
 800388c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003890:	b29b      	uxth	r3, r3
 8003892:	f004 f884 	bl	800799e <USB_WritePMA>
 8003896:	e1e2      	b.n	8003c5e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	3306      	adds	r3, #6
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d307      	bcc.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038d8:	1ad2      	subs	r2, r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	619a      	str	r2, [r3, #24]
 80038de:	e002      	b.n	80038e6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2200      	movs	r2, #0
 80038e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 80c0 	bne.w	8003a70 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d126      	bne.n	8003946 <HAL_PCD_EP_DB_Transmit+0x482>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800390c:	4413      	add	r3, r2
 800390e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	011a      	lsls	r2, r3, #4
 8003916:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003918:	4413      	add	r3, r2
 800391a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800391e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	b29b      	uxth	r3, r3
 8003926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800392a:	b29a      	uxth	r2, r3
 800392c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800393a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800393e:	b29a      	uxth	r2, r3
 8003940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003942:	801a      	strh	r2, [r3, #0]
 8003944:	e01a      	b.n	800397c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	785b      	ldrb	r3, [r3, #1]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d116      	bne.n	800397c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	667b      	str	r3, [r7, #100]	@ 0x64
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800395c:	b29b      	uxth	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003962:	4413      	add	r3, r2
 8003964:	667b      	str	r3, [r7, #100]	@ 0x64
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	011a      	lsls	r2, r3, #4
 800396c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800396e:	4413      	add	r3, r2
 8003970:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003974:	663b      	str	r3, [r7, #96]	@ 0x60
 8003976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003978:	2200      	movs	r2, #0
 800397a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	677b      	str	r3, [r7, #116]	@ 0x74
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d12b      	bne.n	80039e2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800399e:	4413      	add	r3, r2
 80039a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	011a      	lsls	r2, r3, #4
 80039a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039aa:	4413      	add	r3, r2
 80039ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039c6:	801a      	strh	r2, [r3, #0]
 80039c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d8:	b29a      	uxth	r2, r3
 80039da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	e017      	b.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x54e>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	785b      	ldrb	r3, [r3, #1]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d113      	bne.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x54e>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f8:	4413      	add	r3, r2
 80039fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	011a      	lsls	r2, r3, #4
 8003a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a04:	4413      	add	r3, r2
 8003a06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a0e:	2200      	movs	r2, #0
 8003a10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	4619      	mov	r1, r3
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f005 fc0e 	bl	800923a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f040 811a 	bne.w	8003c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a44:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	8013      	strh	r3, [r2, #0]
 8003a6e:	e0f6      	b.n	8003c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d121      	bne.n	8003abe <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a94:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	f040 80ca 	bne.w	8003c5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ad2:	441a      	add	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d30b      	bcc.n	8003b0a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	6a1a      	ldr	r2, [r3, #32]
 8003afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b02:	1ad2      	subs	r2, r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	621a      	str	r2, [r3, #32]
 8003b08:	e017      	b.n	8003b3a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d108      	bne.n	8003b24 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003b12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b22:	e00a      	b.n	8003b3a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	785b      	ldrb	r3, [r3, #1]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d165      	bne.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x750>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b5c:	4413      	add	r3, r2
 8003b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	011a      	lsls	r2, r3, #4
 8003b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b68:	4413      	add	r3, r2
 8003b6a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b7e:	801a      	strh	r2, [r3, #0]
 8003b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b84:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b86:	d91d      	bls.n	8003bc4 <HAL_PCD_EP_DB_Transmit+0x700>
 8003b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003b9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	029b      	lsls	r3, r3, #10
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	e041      	b.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x784>
 8003bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bde:	801a      	strh	r2, [r3, #0]
 8003be0:	e032      	b.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x784>
 8003be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x738>
 8003bf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	029b      	lsls	r3, r3, #10
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c10:	801a      	strh	r2, [r3, #0]
 8003c12:	e019      	b.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x784>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	785b      	ldrb	r3, [r3, #1]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d115      	bne.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x784>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2a:	4413      	add	r3, r2
 8003c2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	011a      	lsls	r2, r3, #4
 8003c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c36:	4413      	add	r3, r2
 8003c38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c46:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6959      	ldr	r1, [r3, #20]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	895a      	ldrh	r2, [r3, #10]
 8003c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f003 fea0 	bl	800799e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c78:	82bb      	strh	r3, [r7, #20]
 8003c7a:	8abb      	ldrh	r3, [r7, #20]
 8003c7c:	f083 0310 	eor.w	r3, r3, #16
 8003c80:	82bb      	strh	r3, [r7, #20]
 8003c82:	8abb      	ldrh	r3, [r7, #20]
 8003c84:	f083 0320 	eor.w	r3, r3, #32
 8003c88:	82bb      	strh	r3, [r7, #20]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	441a      	add	r2, r3
 8003c98:	8abb      	ldrh	r3, [r7, #20]
 8003c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3790      	adds	r7, #144	@ 0x90
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	817b      	strh	r3, [r7, #10]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cca:	897b      	ldrh	r3, [r7, #10]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	f003 0207 	and.w	r2, r3, #7
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e009      	b.n	8003d02 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cee:	897a      	ldrh	r2, [r7, #10]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d107      	bne.n	8003d18 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	80da      	strh	r2, [r3, #6]
 8003d16:	e00b      	b.n	8003d30 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e272      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8087 	beq.w	8003e6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d5c:	4b92      	ldr	r3, [pc, #584]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d00c      	beq.n	8003d82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d68:	4b8f      	ldr	r3, [pc, #572]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 030c 	and.w	r3, r3, #12
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d112      	bne.n	8003d9a <HAL_RCC_OscConfig+0x5e>
 8003d74:	4b8c      	ldr	r3, [pc, #560]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d80:	d10b      	bne.n	8003d9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d82:	4b89      	ldr	r3, [pc, #548]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d06c      	beq.n	8003e68 <HAL_RCC_OscConfig+0x12c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d168      	bne.n	8003e68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e24c      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x76>
 8003da4:	4b80      	ldr	r3, [pc, #512]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a7f      	ldr	r2, [pc, #508]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	e02e      	b.n	8003e10 <HAL_RCC_OscConfig+0xd4>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x98>
 8003dba:	4b7b      	ldr	r3, [pc, #492]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a7a      	ldr	r2, [pc, #488]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b78      	ldr	r3, [pc, #480]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a77      	ldr	r2, [pc, #476]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e01d      	b.n	8003e10 <HAL_RCC_OscConfig+0xd4>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0xbc>
 8003dde:	4b72      	ldr	r3, [pc, #456]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a71      	ldr	r2, [pc, #452]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b6f      	ldr	r3, [pc, #444]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e00b      	b.n	8003e10 <HAL_RCC_OscConfig+0xd4>
 8003df8:	4b6b      	ldr	r3, [pc, #428]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b68      	ldr	r3, [pc, #416]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a67      	ldr	r2, [pc, #412]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d013      	beq.n	8003e40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fd fea4 	bl	8001b64 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fd fea0 	bl	8001b64 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	@ 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e200      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b5d      	ldr	r3, [pc, #372]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0xe4>
 8003e3e:	e014      	b.n	8003e6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fd fe90 	bl	8001b64 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e48:	f7fd fe8c 	bl	8001b64 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	@ 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e1ec      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5a:	4b53      	ldr	r3, [pc, #332]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x10c>
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d063      	beq.n	8003f3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e76:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e82:	4b49      	ldr	r3, [pc, #292]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d11c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x18c>
 8003e8e:	4b46      	ldr	r3, [pc, #280]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d116      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9a:	4b43      	ldr	r3, [pc, #268]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x176>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e1c0      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4939      	ldr	r1, [pc, #228]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec6:	e03a      	b.n	8003f3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d020      	beq.n	8003f12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed0:	4b36      	ldr	r3, [pc, #216]	@ (8003fac <HAL_RCC_OscConfig+0x270>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fd fe45 	bl	8001b64 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ede:	f7fd fe41 	bl	8001b64 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e1a1      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efc:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4927      	ldr	r1, [pc, #156]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]
 8003f10:	e015      	b.n	8003f3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f12:	4b26      	ldr	r3, [pc, #152]	@ (8003fac <HAL_RCC_OscConfig+0x270>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fd fe24 	bl	8001b64 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f20:	f7fd fe20 	bl	8001b64 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e180      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f32:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03a      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d019      	beq.n	8003f86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f52:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f58:	f7fd fe04 	bl	8001b64 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f60:	f7fd fe00 	bl	8001b64 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e160      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f72:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa8 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f7e:	2001      	movs	r0, #1
 8003f80:	f000 face 	bl	8004520 <RCC_Delay>
 8003f84:	e01c      	b.n	8003fc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f86:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <HAL_RCC_OscConfig+0x274>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8c:	f7fd fdea 	bl	8001b64 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f92:	e00f      	b.n	8003fb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f94:	f7fd fde6 	bl	8001b64 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d908      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e146      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	42420000 	.word	0x42420000
 8003fb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb4:	4b92      	ldr	r3, [pc, #584]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e9      	bne.n	8003f94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a6 	beq.w	800411a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd2:	4b8b      	ldr	r3, [pc, #556]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	4b88      	ldr	r3, [pc, #544]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4a87      	ldr	r2, [pc, #540]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe8:	61d3      	str	r3, [r2, #28]
 8003fea:	4b85      	ldr	r3, [pc, #532]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b82      	ldr	r3, [pc, #520]	@ (8004204 <HAL_RCC_OscConfig+0x4c8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d118      	bne.n	8004038 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004006:	4b7f      	ldr	r3, [pc, #508]	@ (8004204 <HAL_RCC_OscConfig+0x4c8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a7e      	ldr	r2, [pc, #504]	@ (8004204 <HAL_RCC_OscConfig+0x4c8>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004012:	f7fd fda7 	bl	8001b64 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7fd fda3 	bl	8001b64 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b64      	cmp	r3, #100	@ 0x64
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e103      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	4b75      	ldr	r3, [pc, #468]	@ (8004204 <HAL_RCC_OscConfig+0x4c8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x312>
 8004040:	4b6f      	ldr	r3, [pc, #444]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4a6e      	ldr	r2, [pc, #440]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6213      	str	r3, [r2, #32]
 800404c:	e02d      	b.n	80040aa <HAL_RCC_OscConfig+0x36e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0x334>
 8004056:	4b6a      	ldr	r3, [pc, #424]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4a69      	ldr	r2, [pc, #420]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	6213      	str	r3, [r2, #32]
 8004062:	4b67      	ldr	r3, [pc, #412]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4a66      	ldr	r2, [pc, #408]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	6213      	str	r3, [r2, #32]
 800406e:	e01c      	b.n	80040aa <HAL_RCC_OscConfig+0x36e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b05      	cmp	r3, #5
 8004076:	d10c      	bne.n	8004092 <HAL_RCC_OscConfig+0x356>
 8004078:	4b61      	ldr	r3, [pc, #388]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	4a60      	ldr	r2, [pc, #384]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 800407e:	f043 0304 	orr.w	r3, r3, #4
 8004082:	6213      	str	r3, [r2, #32]
 8004084:	4b5e      	ldr	r3, [pc, #376]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	4a5d      	ldr	r2, [pc, #372]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	6213      	str	r3, [r2, #32]
 8004090:	e00b      	b.n	80040aa <HAL_RCC_OscConfig+0x36e>
 8004092:	4b5b      	ldr	r3, [pc, #364]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	4a5a      	ldr	r2, [pc, #360]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	6213      	str	r3, [r2, #32]
 800409e:	4b58      	ldr	r3, [pc, #352]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4a57      	ldr	r2, [pc, #348]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d015      	beq.n	80040de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b2:	f7fd fd57 	bl	8001b64 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b8:	e00a      	b.n	80040d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ba:	f7fd fd53 	bl	8001b64 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e0b1      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ee      	beq.n	80040ba <HAL_RCC_OscConfig+0x37e>
 80040dc:	e014      	b.n	8004108 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040de:	f7fd fd41 	bl	8001b64 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e4:	e00a      	b.n	80040fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fd fd3d 	bl	8001b64 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e09b      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fc:	4b40      	ldr	r3, [pc, #256]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1ee      	bne.n	80040e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d105      	bne.n	800411a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410e:	4b3c      	ldr	r3, [pc, #240]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	4a3b      	ldr	r2, [pc, #236]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004118:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8087 	beq.w	8004232 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004124:	4b36      	ldr	r3, [pc, #216]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b08      	cmp	r3, #8
 800412e:	d061      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d146      	bne.n	80041c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004138:	4b33      	ldr	r3, [pc, #204]	@ (8004208 <HAL_RCC_OscConfig+0x4cc>)
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413e:	f7fd fd11 	bl	8001b64 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004146:	f7fd fd0d 	bl	8001b64 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e06d      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004158:	4b29      	ldr	r3, [pc, #164]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f0      	bne.n	8004146 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416c:	d108      	bne.n	8004180 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800416e:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	4921      	ldr	r1, [pc, #132]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 800417c:	4313      	orrs	r3, r2
 800417e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004180:	4b1f      	ldr	r3, [pc, #124]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a19      	ldr	r1, [r3, #32]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	430b      	orrs	r3, r1
 8004192:	491b      	ldr	r1, [pc, #108]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004198:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <HAL_RCC_OscConfig+0x4cc>)
 800419a:	2201      	movs	r2, #1
 800419c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419e:	f7fd fce1 	bl	8001b64 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a6:	f7fd fcdd 	bl	8001b64 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e03d      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b8:	4b11      	ldr	r3, [pc, #68]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x46a>
 80041c4:	e035      	b.n	8004232 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c6:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <HAL_RCC_OscConfig+0x4cc>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fd fcca 	bl	8001b64 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fd fcc6 	bl	8001b64 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e026      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e6:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <HAL_RCC_OscConfig+0x4c4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x498>
 80041f2:	e01e      	b.n	8004232 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d107      	bne.n	800420c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e019      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
 8004200:	40021000 	.word	0x40021000
 8004204:	40007000 	.word	0x40007000
 8004208:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800420c:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <HAL_RCC_OscConfig+0x500>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	429a      	cmp	r2, r3
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d001      	beq.n	8004232 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000

08004240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0d0      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b6a      	ldr	r3, [pc, #424]	@ (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d910      	bls.n	8004284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b67      	ldr	r3, [pc, #412]	@ (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	4965      	ldr	r1, [pc, #404]	@ (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b63      	ldr	r3, [pc, #396]	@ (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0b8      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800429c:	4b59      	ldr	r3, [pc, #356]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4a58      	ldr	r2, [pc, #352]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b4:	4b53      	ldr	r3, [pc, #332]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a52      	ldr	r2, [pc, #328]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80042be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c0:	4b50      	ldr	r3, [pc, #320]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	494d      	ldr	r1, [pc, #308]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d040      	beq.n	8004360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d107      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d115      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e07f      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fe:	4b41      	ldr	r3, [pc, #260]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e073      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430e:	4b3d      	ldr	r3, [pc, #244]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e06b      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431e:	4b39      	ldr	r3, [pc, #228]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f023 0203 	bic.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4936      	ldr	r1, [pc, #216]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004330:	f7fd fc18 	bl	8001b64 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	e00a      	b.n	800434e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7fd fc14 	bl	8001b64 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e053      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	4b2d      	ldr	r3, [pc, #180]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 020c 	and.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	429a      	cmp	r2, r3
 800435e:	d1eb      	bne.n	8004338 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004360:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d210      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b24      	ldr	r3, [pc, #144]	@ (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 0207 	bic.w	r2, r3, #7
 8004376:	4922      	ldr	r1, [pc, #136]	@ (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b20      	ldr	r3, [pc, #128]	@ (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e032      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800439c:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4916      	ldr	r1, [pc, #88]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ba:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	490e      	ldr	r1, [pc, #56]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ce:	f000 f821 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	490a      	ldr	r1, [pc, #40]	@ (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80043e0:	5ccb      	ldrb	r3, [r1, r3]
 80043e2:	fa22 f303 	lsr.w	r3, r2, r3
 80043e6:	4a09      	ldr	r2, [pc, #36]	@ (800440c <HAL_RCC_ClockConfig+0x1cc>)
 80043e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ea:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <HAL_RCC_ClockConfig+0x1d0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd fb76 	bl	8001ae0 <HAL_InitTick>

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40022000 	.word	0x40022000
 8004404:	40021000 	.word	0x40021000
 8004408:	08009960 	.word	0x08009960
 800440c:	20000000 	.word	0x20000000
 8004410:	20000008 	.word	0x20000008

08004414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	2300      	movs	r3, #0
 8004428:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800442e:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b04      	cmp	r3, #4
 800443c:	d002      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x30>
 800443e:	2b08      	cmp	r3, #8
 8004440:	d003      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x36>
 8004442:	e027      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004444:	4b19      	ldr	r3, [pc, #100]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004446:	613b      	str	r3, [r7, #16]
      break;
 8004448:	e027      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	0c9b      	lsrs	r3, r3, #18
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	4a17      	ldr	r2, [pc, #92]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004454:	5cd3      	ldrb	r3, [r2, r3]
 8004456:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d010      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004462:	4b11      	ldr	r3, [pc, #68]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	0c5b      	lsrs	r3, r3, #17
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	4a11      	ldr	r2, [pc, #68]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a0d      	ldr	r2, [pc, #52]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004476:	fb03 f202 	mul.w	r2, r3, r2
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e004      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a0c      	ldr	r2, [pc, #48]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004488:	fb02 f303 	mul.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	613b      	str	r3, [r7, #16]
      break;
 8004492:	e002      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004494:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004496:	613b      	str	r3, [r7, #16]
      break;
 8004498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800449a:	693b      	ldr	r3, [r7, #16]
}
 800449c:	4618      	mov	r0, r3
 800449e:	371c      	adds	r7, #28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	007a1200 	.word	0x007a1200
 80044b0:	08009978 	.word	0x08009978
 80044b4:	08009988 	.word	0x08009988
 80044b8:	003d0900 	.word	0x003d0900

080044bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c0:	4b02      	ldr	r3, [pc, #8]	@ (80044cc <HAL_RCC_GetHCLKFreq+0x10>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	20000000 	.word	0x20000000

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d4:	f7ff fff2 	bl	80044bc <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	@ (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40021000 	.word	0x40021000
 80044f4:	08009970 	.word	0x08009970

080044f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044fc:	f7ff ffde 	bl	80044bc <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	0adb      	lsrs	r3, r3, #11
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4903      	ldr	r1, [pc, #12]	@ (800451c <HAL_RCC_GetPCLK2Freq+0x24>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000
 800451c:	08009970 	.word	0x08009970

08004520 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004528:	4b0a      	ldr	r3, [pc, #40]	@ (8004554 <RCC_Delay+0x34>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0a      	ldr	r2, [pc, #40]	@ (8004558 <RCC_Delay+0x38>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	0a5b      	lsrs	r3, r3, #9
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800453c:	bf00      	nop
  }
  while (Delay --);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1e5a      	subs	r2, r3, #1
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f9      	bne.n	800453c <RCC_Delay+0x1c>
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	20000000 	.word	0x20000000
 8004558:	10624dd3 	.word	0x10624dd3

0800455c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d07d      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004578:	2300      	movs	r3, #0
 800457a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457c:	4b4f      	ldr	r3, [pc, #316]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10d      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004588:	4b4c      	ldr	r3, [pc, #304]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	4a4b      	ldr	r2, [pc, #300]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004592:	61d3      	str	r3, [r2, #28]
 8004594:	4b49      	ldr	r3, [pc, #292]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a0:	2301      	movs	r3, #1
 80045a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	4b46      	ldr	r3, [pc, #280]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d118      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b0:	4b43      	ldr	r3, [pc, #268]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a42      	ldr	r2, [pc, #264]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045bc:	f7fd fad2 	bl	8001b64 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	e008      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c4:	f7fd face 	bl	8001b64 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	@ 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e06d      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d6:	4b3a      	ldr	r3, [pc, #232]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045e2:	4b36      	ldr	r3, [pc, #216]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d02e      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d027      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004600:	4b2e      	ldr	r3, [pc, #184]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004608:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800460a:	4b2e      	ldr	r3, [pc, #184]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004610:	4b2c      	ldr	r3, [pc, #176]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004616:	4a29      	ldr	r2, [pc, #164]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d014      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004626:	f7fd fa9d 	bl	8001b64 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	e00a      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fd fa99 	bl	8001b64 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e036      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004644:	4b1d      	ldr	r3, [pc, #116]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0ee      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004650:	4b1a      	ldr	r3, [pc, #104]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	4917      	ldr	r1, [pc, #92]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465e:	4313      	orrs	r3, r2
 8004660:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d105      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004668:	4b14      	ldr	r3, [pc, #80]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	4a13      	ldr	r2, [pc, #76]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004672:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004680:	4b0e      	ldr	r3, [pc, #56]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	490b      	ldr	r1, [pc, #44]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800469e:	4b07      	ldr	r3, [pc, #28]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4904      	ldr	r1, [pc, #16]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40007000 	.word	0x40007000
 80046c4:	42420440 	.word	0x42420440

080046c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e042      	b.n	8004760 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fc faa2 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	@ 0x24
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800470a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fdb7 	bl	8005280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695a      	ldr	r2, [r3, #20]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	@ 0x28
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b20      	cmp	r3, #32
 8004786:	d175      	bne.n	8004874 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_UART_Transmit+0x2c>
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e06e      	b.n	8004876 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2221      	movs	r2, #33	@ 0x21
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047a6:	f7fd f9dd 	bl	8001b64 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	88fa      	ldrh	r2, [r7, #6]
 80047b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c0:	d108      	bne.n	80047d4 <HAL_UART_Transmit+0x6c>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d104      	bne.n	80047d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	e003      	b.n	80047dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047dc:	e02e      	b.n	800483c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2180      	movs	r1, #128	@ 0x80
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fb1c 	bl	8004e26 <UART_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e03a      	b.n	8004876 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004814:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	3302      	adds	r3, #2
 800481a:	61bb      	str	r3, [r7, #24]
 800481c:	e007      	b.n	800482e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1cb      	bne.n	80047de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	2140      	movs	r1, #64	@ 0x40
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fae8 	bl	8004e26 <UART_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e006      	b.n	8004876 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	4613      	mov	r3, r2
 800488a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b20      	cmp	r3, #32
 8004896:	d112      	bne.n	80048be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_UART_Receive_IT+0x26>
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e00b      	b.n	80048c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	461a      	mov	r2, r3
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fb0f 	bl	8004ed8 <UART_Start_Receive_IT>
 80048ba:	4603      	mov	r3, r0
 80048bc:	e000      	b.n	80048c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
  }
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b0ba      	sub	sp, #232	@ 0xe8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800490e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_UART_IRQHandler+0x66>
 800491a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fbec 	bl	8005104 <UART_Receive_IT>
      return;
 800492c:	e25b      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800492e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80de 	beq.w	8004af4 <HAL_UART_IRQHandler+0x22c>
 8004938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004948:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80d1 	beq.w	8004af4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_UART_IRQHandler+0xae>
 800495e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	f043 0201 	orr.w	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_UART_IRQHandler+0xd2>
 8004982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <HAL_UART_IRQHandler+0xf6>
 80049a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b6:	f043 0204 	orr.w	r2, r3, #4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d011      	beq.n	80049ee <HAL_UART_IRQHandler+0x126>
 80049ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	f043 0208 	orr.w	r2, r3, #8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 81f2 	beq.w	8004ddc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_UART_IRQHandler+0x14e>
 8004a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fb77 	bl	8005104 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <HAL_UART_IRQHandler+0x17a>
 8004a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04f      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fa81 	bl	8004f4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d041      	beq.n	8004ada <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3314      	adds	r3, #20
 8004a5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1d9      	bne.n	8004a56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d013      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aae:	4a7e      	ldr	r2, [pc, #504]	@ (8004ca8 <HAL_UART_IRQHandler+0x3e0>)
 8004ab0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fd f9ca 	bl	8001e50 <HAL_DMA_Abort_IT>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004acc:	4610      	mov	r0, r2
 8004ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	e00e      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f993 	bl	8004dfe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	e00a      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f98f 	bl	8004dfe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e006      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f98b 	bl	8004dfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004aee:	e175      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	bf00      	nop
    return;
 8004af2:	e173      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	f040 814f 	bne.w	8004d9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8148 	beq.w	8004d9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8141 	beq.w	8004d9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80b6 	beq.w	8004cac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8145 	beq.w	8004de0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	f080 813e 	bcs.w	8004de0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	f000 8088 	beq.w	8004c88 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ba4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ba8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1d9      	bne.n	8004b78 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3314      	adds	r3, #20
 8004bca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3314      	adds	r3, #20
 8004be4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004be8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004bec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004bf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e1      	bne.n	8004bc4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3314      	adds	r3, #20
 8004c20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c24:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e3      	bne.n	8004c00 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c58:	f023 0310 	bic.w	r3, r3, #16
 8004c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c6a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c6c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e3      	bne.n	8004c46 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fd f8a9 	bl	8001dda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f8b6 	bl	8004e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ca4:	e09c      	b.n	8004de0 <HAL_UART_IRQHandler+0x518>
 8004ca6:	bf00      	nop
 8004ca8:	0800500f 	.word	0x0800500f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 808e 	beq.w	8004de4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8089 	beq.w	8004de4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004cf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e3      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	623b      	str	r3, [r7, #32]
   return(result);
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e3      	bne.n	8004d0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d74:	61fa      	str	r2, [r7, #28]
 8004d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	69b9      	ldr	r1, [r7, #24]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	617b      	str	r3, [r7, #20]
   return(result);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e3      	bne.n	8004d50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f83b 	bl	8004e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d9a:	e023      	b.n	8004de4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <HAL_UART_IRQHandler+0x4f4>
 8004da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f93e 	bl	8005036 <UART_Transmit_IT>
    return;
 8004dba:	e014      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00e      	beq.n	8004de6 <HAL_UART_IRQHandler+0x51e>
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f97d 	bl	80050d4 <UART_EndTransmit_IT>
    return;
 8004dda:	e004      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ddc:	bf00      	nop
 8004dde:	e002      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004de0:	bf00      	nop
 8004de2:	e000      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004de4:	bf00      	nop
  }
}
 8004de6:	37e8      	adds	r7, #232	@ 0xe8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr

08004dfe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b086      	sub	sp, #24
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	4613      	mov	r3, r2
 8004e34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e36:	e03b      	b.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	d037      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e40:	f7fc fe90 	bl	8001b64 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d302      	bcc.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e03a      	b.n	8004ed0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d023      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b80      	cmp	r3, #128	@ 0x80
 8004e6c:	d020      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b40      	cmp	r3, #64	@ 0x40
 8004e72:	d01d      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d116      	bne.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f856 	bl	8004f4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e00f      	b.n	8004ed0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2301      	moveq	r3, #1
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d0b4      	beq.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	88fa      	ldrh	r2, [r7, #6]
 8004ef0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	88fa      	ldrh	r2, [r7, #6]
 8004ef6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2222      	movs	r2, #34	@ 0x22
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0220 	orr.w	r2, r2, #32
 8004f3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b095      	sub	sp, #84	@ 0x54
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	330c      	adds	r3, #12
 8004f70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f72:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e5      	bne.n	8004f52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3314      	adds	r3, #20
 8004f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3314      	adds	r3, #20
 8004fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e5      	bne.n	8004f86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d119      	bne.n	8004ff6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f023 0310 	bic.w	r3, r3, #16
 8004fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe2:	61ba      	str	r2, [r7, #24]
 8004fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6979      	ldr	r1, [r7, #20]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e5      	bne.n	8004fc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005004:	bf00      	nop
 8005006:	3754      	adds	r7, #84	@ 0x54
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff fee8 	bl	8004dfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b21      	cmp	r3, #33	@ 0x21
 8005048:	d13e      	bne.n	80050c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005052:	d114      	bne.n	800507e <UART_Transmit_IT+0x48>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d110      	bne.n	800507e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005070:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	1c9a      	adds	r2, r3, #2
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	621a      	str	r2, [r3, #32]
 800507c:	e008      	b.n	8005090 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6211      	str	r1, [r2, #32]
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29b      	uxth	r3, r3
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4619      	mov	r1, r3
 800509e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10f      	bne.n	80050c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff fe79 	bl	8004dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08c      	sub	sp, #48	@ 0x30
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b22      	cmp	r3, #34	@ 0x22
 8005116:	f040 80ae 	bne.w	8005276 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005122:	d117      	bne.n	8005154 <UART_Receive_IT+0x50>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d113      	bne.n	8005154 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005142:	b29a      	uxth	r2, r3
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	629a      	str	r2, [r3, #40]	@ 0x28
 8005152:	e026      	b.n	80051a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005166:	d007      	beq.n	8005178 <UART_Receive_IT+0x74>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <UART_Receive_IT+0x82>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	b2da      	uxtb	r2, r3
 8005180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e008      	b.n	8005198 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005192:	b2da      	uxtb	r2, r3
 8005194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005196:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4619      	mov	r1, r3
 80051b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d15d      	bne.n	8005272 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0220 	bic.w	r2, r2, #32
 80051c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695a      	ldr	r2, [r3, #20]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d135      	bne.n	8005268 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	613b      	str	r3, [r7, #16]
   return(result);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f023 0310 	bic.w	r3, r3, #16
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005222:	623a      	str	r2, [r7, #32]
 8005224:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	69f9      	ldr	r1, [r7, #28]
 8005228:	6a3a      	ldr	r2, [r7, #32]
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e5      	bne.n	8005202 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b10      	cmp	r3, #16
 8005242:	d10a      	bne.n	800525a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff fdd5 	bl	8004e10 <HAL_UARTEx_RxEventCallback>
 8005266:	e002      	b.n	800526e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fb fbfb 	bl	8000a64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e002      	b.n	8005278 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e000      	b.n	8005278 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005276:	2302      	movs	r3, #2
  }
}
 8005278:	4618      	mov	r0, r3
 800527a:	3730      	adds	r7, #48	@ 0x30
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80052ba:	f023 030c 	bic.w	r3, r3, #12
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	430b      	orrs	r3, r1
 80052c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005394 <UART_SetConfig+0x114>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d103      	bne.n	80052f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052e8:	f7ff f906 	bl	80044f8 <HAL_RCC_GetPCLK2Freq>
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	e002      	b.n	80052f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052f0:	f7ff f8ee 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 80052f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009a      	lsls	r2, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	4a22      	ldr	r2, [pc, #136]	@ (8005398 <UART_SetConfig+0x118>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	0119      	lsls	r1, r3, #4
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009a      	lsls	r2, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	fbb2 f2f3 	udiv	r2, r2, r3
 800532c:	4b1a      	ldr	r3, [pc, #104]	@ (8005398 <UART_SetConfig+0x118>)
 800532e:	fba3 0302 	umull	r0, r3, r3, r2
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2064      	movs	r0, #100	@ 0x64
 8005336:	fb00 f303 	mul.w	r3, r0, r3
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	3332      	adds	r3, #50	@ 0x32
 8005340:	4a15      	ldr	r2, [pc, #84]	@ (8005398 <UART_SetConfig+0x118>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800534c:	4419      	add	r1, r3
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009a      	lsls	r2, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	fbb2 f2f3 	udiv	r2, r2, r3
 8005364:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <UART_SetConfig+0x118>)
 8005366:	fba3 0302 	umull	r0, r3, r3, r2
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	2064      	movs	r0, #100	@ 0x64
 800536e:	fb00 f303 	mul.w	r3, r0, r3
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	3332      	adds	r3, #50	@ 0x32
 8005378:	4a07      	ldr	r2, [pc, #28]	@ (8005398 <UART_SetConfig+0x118>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	f003 020f 	and.w	r2, r3, #15
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	440a      	add	r2, r1
 800538a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40013800 	.word	0x40013800
 8005398:	51eb851f 	.word	0x51eb851f

0800539c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	4638      	mov	r0, r7
 80053a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053c6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80053ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053ea:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80053ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	b29b      	uxth	r3, r3
 8005400:	4013      	ands	r3, r2
 8005402:	b29a      	uxth	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr

08005416 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	4638      	mov	r0, r7
 8005438:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005468:	b480      	push	{r7}
 800546a:	b09d      	sub	sp, #116	@ 0x74
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800548a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	78db      	ldrb	r3, [r3, #3]
 8005496:	2b03      	cmp	r3, #3
 8005498:	d81f      	bhi.n	80054da <USB_ActivateEndpoint+0x72>
 800549a:	a201      	add	r2, pc, #4	@ (adr r2, 80054a0 <USB_ActivateEndpoint+0x38>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054b1 	.word	0x080054b1
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054e3 	.word	0x080054e3
 80054ac:	080054bf 	.word	0x080054bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054bc:	e012      	b.n	80054e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054c2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80054c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054ca:	e00b      	b.n	80054e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054d8:	e004      	b.n	80054e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80054e0:	e000      	b.n	80054e4 <USB_ActivateEndpoint+0x7c>
      break;
 80054e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005502:	b29b      	uxth	r3, r3
 8005504:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551c:	b29b      	uxth	r3, r3
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	7812      	ldrb	r2, [r2, #0]
 8005522:	4313      	orrs	r3, r2
 8005524:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	441a      	add	r2, r3
 8005532:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800553a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800553e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005546:	b29b      	uxth	r3, r3
 8005548:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	7b1b      	ldrb	r3, [r3, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f040 8178 	bne.w	8005844 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8084 	beq.w	8005666 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005568:	b29b      	uxth	r3, r3
 800556a:	461a      	mov	r2, r3
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	4413      	add	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	011a      	lsls	r2, r3, #4
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	88db      	ldrh	r3, [r3, #6]
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	b29b      	uxth	r3, r3
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	827b      	strh	r3, [r7, #18]
 80055a0:	8a7b      	ldrh	r3, [r7, #18]
 80055a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01b      	beq.n	80055e2 <USB_ActivateEndpoint+0x17a>
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c0:	823b      	strh	r3, [r7, #16]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	8a3b      	ldrh	r3, [r7, #16]
 80055ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	78db      	ldrb	r3, [r3, #3]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d020      	beq.n	800562c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005600:	81bb      	strh	r3, [r7, #12]
 8005602:	89bb      	ldrh	r3, [r7, #12]
 8005604:	f083 0320 	eor.w	r3, r3, #32
 8005608:	81bb      	strh	r3, [r7, #12]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	441a      	add	r2, r3
 8005614:	89bb      	ldrh	r3, [r7, #12]
 8005616:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800561a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005626:	b29b      	uxth	r3, r3
 8005628:	8013      	strh	r3, [r2, #0]
 800562a:	e2d5      	b.n	8005bd8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800563e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005642:	81fb      	strh	r3, [r7, #14]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
 8005664:	e2b8      	b.n	8005bd8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	633b      	str	r3, [r7, #48]	@ 0x30
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005670:	b29b      	uxth	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	4413      	add	r3, r2
 8005678:	633b      	str	r3, [r7, #48]	@ 0x30
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	011a      	lsls	r2, r3, #4
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	4413      	add	r3, r2
 8005684:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	88db      	ldrh	r3, [r3, #6]
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	b29b      	uxth	r3, r3
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005698:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056aa:	4413      	add	r3, r2
 80056ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	011a      	lsls	r2, r3, #4
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b6:	4413      	add	r3, r2
 80056b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80056d4:	d91d      	bls.n	8005712 <USB_ActivateEndpoint+0x2aa>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <USB_ActivateEndpoint+0x288>
 80056ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056ec:	3b01      	subs	r3, #1
 80056ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	029b      	lsls	r3, r3, #10
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	4313      	orrs	r3, r2
 8005700:	b29b      	uxth	r3, r3
 8005702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570a:	b29a      	uxth	r2, r3
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e026      	b.n	8005760 <USB_ActivateEndpoint+0x2f8>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <USB_ActivateEndpoint+0x2c8>
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005728:	b29a      	uxth	r2, r3
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e017      	b.n	8005760 <USB_ActivateEndpoint+0x2f8>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <USB_ActivateEndpoint+0x2e2>
 8005744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005746:	3301      	adds	r3, #1
 8005748:	66bb      	str	r3, [r7, #104]	@ 0x68
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29a      	uxth	r2, r3
 8005750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005752:	b29b      	uxth	r3, r3
 8005754:	029b      	lsls	r3, r3, #10
 8005756:	b29b      	uxth	r3, r3
 8005758:	4313      	orrs	r3, r2
 800575a:	b29a      	uxth	r2, r3
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800576e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01b      	beq.n	80057b0 <USB_ActivateEndpoint+0x348>
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800578a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578e:	843b      	strh	r3, [r7, #32]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	8c3b      	ldrh	r3, [r7, #32]
 800579c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d124      	bne.n	8005802 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ce:	83bb      	strh	r3, [r7, #28]
 80057d0:	8bbb      	ldrh	r3, [r7, #28]
 80057d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057d6:	83bb      	strh	r3, [r7, #28]
 80057d8:	8bbb      	ldrh	r3, [r7, #28]
 80057da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057de:	83bb      	strh	r3, [r7, #28]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	8bbb      	ldrh	r3, [r7, #28]
 80057ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	8013      	strh	r3, [r2, #0]
 8005800:	e1ea      	b.n	8005bd8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005818:	83fb      	strh	r3, [r7, #30]
 800581a:	8bfb      	ldrh	r3, [r7, #30]
 800581c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005820:	83fb      	strh	r3, [r7, #30]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	441a      	add	r2, r3
 800582c:	8bfb      	ldrh	r3, [r7, #30]
 800582e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800583a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583e:	b29b      	uxth	r3, r3
 8005840:	8013      	strh	r3, [r2, #0]
 8005842:	e1c9      	b.n	8005bd8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	78db      	ldrb	r3, [r3, #3]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d11e      	bne.n	800588a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800585e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005862:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800587c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]
 8005888:	e01d      	b.n	80058c6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800589c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	441a      	add	r2, r3
 80058ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80058b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058d6:	4413      	add	r3, r2
 80058d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	011a      	lsls	r2, r3, #4
 80058e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	891b      	ldrh	r3, [r3, #8]
 80058ee:	085b      	lsrs	r3, r3, #1
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005904:	b29b      	uxth	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590a:	4413      	add	r3, r2
 800590c:	657b      	str	r3, [r7, #84]	@ 0x54
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	011a      	lsls	r2, r3, #4
 8005914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005916:	4413      	add	r3, r2
 8005918:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800591c:	653b      	str	r3, [r7, #80]	@ 0x50
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	895b      	ldrh	r3, [r3, #10]
 8005922:	085b      	lsrs	r3, r3, #1
 8005924:	b29b      	uxth	r3, r3
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800592c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 8093 	bne.w	8005a5e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005948:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800594c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01b      	beq.n	800598c <USB_ActivateEndpoint+0x524>
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800596a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800597c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005980:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005988:	b29b      	uxth	r3, r3
 800598a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800599a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800599c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <USB_ActivateEndpoint+0x574>
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ba:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80059c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059d8:	b29b      	uxth	r3, r3
 80059da:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80059f4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80059f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80059fa:	873b      	strh	r3, [r7, #56]	@ 0x38
 80059fc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80059fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a02:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	8013      	strh	r3, [r2, #0]
 8005a5c:	e0bc      	b.n	8005bd8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01d      	beq.n	8005ab6 <USB_ActivateEndpoint+0x64e>
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a90:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aaa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005ac6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01d      	beq.n	8005b0e <USB_ActivateEndpoint+0x6a6>
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	441a      	add	r2, r3
 8005af6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	78db      	ldrb	r3, [r3, #3]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d024      	beq.n	8005b60 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b2c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005b30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b34:	f083 0320 	eor.w	r3, r3, #32
 8005b38:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	441a      	add	r2, r3
 8005b46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	8013      	strh	r3, [r2, #0]
 8005b5e:	e01d      	b.n	8005b9c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	441a      	add	r2, r3
 8005b84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	441a      	add	r2, r3
 8005bc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3774      	adds	r7, #116	@ 0x74
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop

08005be8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b08d      	sub	sp, #52	@ 0x34
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	7b1b      	ldrb	r3, [r3, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f040 808e 	bne.w	8005d18 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d044      	beq.n	8005c8e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	81bb      	strh	r3, [r7, #12]
 8005c12:	89bb      	ldrh	r3, [r7, #12]
 8005c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01b      	beq.n	8005c54 <USB_DeactivateEndpoint+0x6c>
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c32:	817b      	strh	r3, [r7, #10]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	441a      	add	r2, r3
 8005c3e:	897b      	ldrh	r3, [r7, #10]
 8005c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c6a:	813b      	strh	r3, [r7, #8]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	441a      	add	r2, r3
 8005c76:	893b      	ldrh	r3, [r7, #8]
 8005c78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	8013      	strh	r3, [r2, #0]
 8005c8c:	e192      	b.n	8005fb4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	827b      	strh	r3, [r7, #18]
 8005c9c:	8a7b      	ldrh	r3, [r7, #18]
 8005c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01b      	beq.n	8005cde <USB_DeactivateEndpoint+0xf6>
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cbc:	823b      	strh	r3, [r7, #16]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	8a3b      	ldrh	r3, [r7, #16]
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf4:	81fb      	strh	r3, [r7, #14]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	441a      	add	r2, r3
 8005d00:	89fb      	ldrh	r3, [r7, #14]
 8005d02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	8013      	strh	r3, [r2, #0]
 8005d16:	e14d      	b.n	8005fb4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 80a5 	bne.w	8005e6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	843b      	strh	r3, [r7, #32]
 8005d30:	8c3b      	ldrh	r3, [r7, #32]
 8005d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01b      	beq.n	8005d72 <USB_DeactivateEndpoint+0x18a>
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d50:	83fb      	strh	r3, [r7, #30]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	441a      	add	r2, r3
 8005d5c:	8bfb      	ldrh	r3, [r7, #30]
 8005d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	83bb      	strh	r3, [r7, #28]
 8005d80:	8bbb      	ldrh	r3, [r7, #28]
 8005d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01b      	beq.n	8005dc2 <USB_DeactivateEndpoint+0x1da>
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da0:	837b      	strh	r3, [r7, #26]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	441a      	add	r2, r3
 8005dac:	8b7b      	ldrh	r3, [r7, #26]
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd8:	833b      	strh	r3, [r7, #24]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	441a      	add	r2, r3
 8005de4:	8b3b      	ldrh	r3, [r7, #24]
 8005de6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005df2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e10:	82fb      	strh	r3, [r7, #22]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	8afb      	ldrh	r3, [r7, #22]
 8005e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e48:	82bb      	strh	r3, [r7, #20]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	441a      	add	r2, r3
 8005e54:	8abb      	ldrh	r3, [r7, #20]
 8005e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	8013      	strh	r3, [r2, #0]
 8005e6a:	e0a3      	b.n	8005fb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005e7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01b      	beq.n	8005ebc <USB_DeactivateEndpoint+0x2d4>
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005eca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <USB_DeactivateEndpoint+0x324>
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eea:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	441a      	add	r2, r3
 8005ef6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f22:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f92:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3734      	adds	r7, #52	@ 0x34
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr

08005fc0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b0c2      	sub	sp, #264	@ 0x108
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fce:	6018      	str	r0, [r3, #0]
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	f040 86b7 	bne.w	8006d5a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	429a      	cmp	r2, r3
 8006006:	d908      	bls.n	800601a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006018:	e007      	b.n	800602a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800601a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800602a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	7b1b      	ldrb	r3, [r3, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d13a      	bne.n	80060b0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6959      	ldr	r1, [r3, #20]
 8006046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	88da      	ldrh	r2, [r3, #6]
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006056:	b29b      	uxth	r3, r3
 8006058:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800605c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006060:	6800      	ldr	r0, [r0, #0]
 8006062:	f001 fc9c 	bl	800799e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006080:	b29b      	uxth	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	011a      	lsls	r2, r3, #4
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	f000 be1f 	b.w	8006cee <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80060b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	78db      	ldrb	r3, [r3, #3]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	f040 8462 	bne.w	8006986 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80060c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6a1a      	ldr	r2, [r3, #32]
 80060ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	429a      	cmp	r2, r3
 80060dc:	f240 83df 	bls.w	800689e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006106:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800610a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800612c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006130:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006138:	b29b      	uxth	r3, r3
 800613a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800613c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6a1a      	ldr	r2, [r3, #32]
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614c:	1ad2      	subs	r2, r2, r3
 800614e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800615a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 81c7 	beq.w	8006510 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	633b      	str	r3, [r7, #48]	@ 0x30
 800618e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d177      	bne.n	800628e <USB_EPStartXfer+0x2ce>
 800619e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061be:	4413      	add	r3, r2
 80061c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	011a      	lsls	r2, r3, #4
 80061d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d2:	4413      	add	r3, r2
 80061d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80061f0:	d921      	bls.n	8006236 <USB_EPStartXfer+0x276>
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <USB_EPStartXfer+0x252>
 8006208:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800620c:	3b01      	subs	r3, #1
 800620e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29a      	uxth	r2, r3
 8006218:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800621c:	b29b      	uxth	r3, r3
 800621e:	029b      	lsls	r3, r3, #10
 8006220:	b29b      	uxth	r3, r3
 8006222:	4313      	orrs	r3, r2
 8006224:	b29b      	uxth	r3, r3
 8006226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622e:	b29a      	uxth	r2, r3
 8006230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	e050      	b.n	80062d8 <USB_EPStartXfer+0x318>
 8006236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <USB_EPStartXfer+0x294>
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624c:	b29a      	uxth	r2, r3
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e041      	b.n	80062d8 <USB_EPStartXfer+0x318>
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <USB_EPStartXfer+0x2b4>
 800626a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800626e:	3301      	adds	r3, #1
 8006270:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800627e:	b29b      	uxth	r3, r3
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	b29b      	uxth	r3, r3
 8006284:	4313      	orrs	r3, r2
 8006286:	b29a      	uxth	r2, r3
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	e024      	b.n	80062d8 <USB_EPStartXfer+0x318>
 800628e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	785b      	ldrb	r3, [r3, #1]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d11c      	bne.n	80062d8 <USB_EPStartXfer+0x318>
 800629e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	4413      	add	r3, r2
 80062b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80062b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	011a      	lsls	r2, r3, #4
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	4413      	add	r3, r2
 80062c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	895b      	ldrh	r3, [r3, #10]
 80062e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6959      	ldr	r1, [r3, #20]
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062fe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006302:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006306:	6800      	ldr	r0, [r0, #0]
 8006308:	f001 fb49 	bl	800799e <USB_WritePMA>
            ep->xfer_buff += len;
 800630c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631c:	441a      	add	r2, r3
 800631e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	429a      	cmp	r2, r3
 8006344:	d90f      	bls.n	8006366 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6a1a      	ldr	r2, [r3, #32]
 8006352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006356:	1ad2      	subs	r2, r2, r3
 8006358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	621a      	str	r2, [r3, #32]
 8006364:	e00e      	b.n	8006384 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2200      	movs	r2, #0
 8006382:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	785b      	ldrb	r3, [r3, #1]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d177      	bne.n	8006484 <USB_EPStartXfer+0x4c4>
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	4413      	add	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	011a      	lsls	r2, r3, #4
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	4413      	add	r3, r2
 80063ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063da:	b29a      	uxth	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80063e6:	d921      	bls.n	800642c <USB_EPStartXfer+0x46c>
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <USB_EPStartXfer+0x448>
 80063fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006402:	3b01      	subs	r3, #1
 8006404:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29a      	uxth	r2, r3
 800640e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006412:	b29b      	uxth	r3, r3
 8006414:	029b      	lsls	r3, r3, #10
 8006416:	b29b      	uxth	r3, r3
 8006418:	4313      	orrs	r3, r2
 800641a:	b29b      	uxth	r3, r3
 800641c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006424:	b29a      	uxth	r2, r3
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	801a      	strh	r2, [r3, #0]
 800642a:	e056      	b.n	80064da <USB_EPStartXfer+0x51a>
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <USB_EPStartXfer+0x48a>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006442:	b29a      	uxth	r2, r3
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	e047      	b.n	80064da <USB_EPStartXfer+0x51a>
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <USB_EPStartXfer+0x4aa>
 8006460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006464:	3301      	adds	r3, #1
 8006466:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29a      	uxth	r2, r3
 8006470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006474:	b29b      	uxth	r3, r3
 8006476:	029b      	lsls	r3, r3, #10
 8006478:	b29b      	uxth	r3, r3
 800647a:	4313      	orrs	r3, r2
 800647c:	b29a      	uxth	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	e02a      	b.n	80064da <USB_EPStartXfer+0x51a>
 8006484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d122      	bne.n	80064da <USB_EPStartXfer+0x51a>
 8006494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	623b      	str	r3, [r7, #32]
 80064a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	4413      	add	r3, r2
 80064b6:	623b      	str	r3, [r7, #32]
 80064b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	011a      	lsls	r2, r3, #4
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	4413      	add	r3, r2
 80064ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	891b      	ldrh	r3, [r3, #8]
 80064e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6959      	ldr	r1, [r3, #20]
 80064f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006500:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006504:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006508:	6800      	ldr	r0, [r0, #0]
 800650a:	f001 fa48 	bl	800799e <USB_WritePMA>
 800650e:	e3ee      	b.n	8006cee <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d177      	bne.n	8006610 <USB_EPStartXfer+0x650>
 8006520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800652c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800653a:	b29b      	uxth	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006540:	4413      	add	r3, r2
 8006542:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	011a      	lsls	r2, r3, #4
 8006552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006554:	4413      	add	r3, r2
 8006556:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800655a:	647b      	str	r3, [r7, #68]	@ 0x44
 800655c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006566:	b29a      	uxth	r2, r3
 8006568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006570:	2b3e      	cmp	r3, #62	@ 0x3e
 8006572:	d921      	bls.n	80065b8 <USB_EPStartXfer+0x5f8>
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <USB_EPStartXfer+0x5d4>
 800658a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800658e:	3b01      	subs	r3, #1
 8006590:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29a      	uxth	r2, r3
 800659a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800659e:	b29b      	uxth	r3, r3
 80065a0:	029b      	lsls	r3, r3, #10
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	4313      	orrs	r3, r2
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	e056      	b.n	8006666 <USB_EPStartXfer+0x6a6>
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <USB_EPStartXfer+0x616>
 80065c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d2:	801a      	strh	r2, [r3, #0]
 80065d4:	e047      	b.n	8006666 <USB_EPStartXfer+0x6a6>
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <USB_EPStartXfer+0x636>
 80065ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065f0:	3301      	adds	r3, #1
 80065f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006600:	b29b      	uxth	r3, r3
 8006602:	029b      	lsls	r3, r3, #10
 8006604:	b29b      	uxth	r3, r3
 8006606:	4313      	orrs	r3, r2
 8006608:	b29a      	uxth	r2, r3
 800660a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	e02a      	b.n	8006666 <USB_EPStartXfer+0x6a6>
 8006610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d122      	bne.n	8006666 <USB_EPStartXfer+0x6a6>
 8006620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006624:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	653b      	str	r3, [r7, #80]	@ 0x50
 800662c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800663a:	b29b      	uxth	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006640:	4413      	add	r3, r2
 8006642:	653b      	str	r3, [r7, #80]	@ 0x50
 8006644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	011a      	lsls	r2, r3, #4
 8006652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006654:	4413      	add	r3, r2
 8006656:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800665a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006660:	b29a      	uxth	r2, r3
 8006662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006664:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	891b      	ldrh	r3, [r3, #8]
 8006672:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6959      	ldr	r1, [r3, #20]
 8006682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006686:	b29b      	uxth	r3, r3
 8006688:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800668c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006690:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006694:	6800      	ldr	r0, [r0, #0]
 8006696:	f001 f982 	bl	800799e <USB_WritePMA>
            ep->xfer_buff += len;
 800669a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066aa:	441a      	add	r2, r3
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6a1a      	ldr	r2, [r3, #32]
 80066c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d90f      	bls.n	80066f4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80066d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6a1a      	ldr	r2, [r3, #32]
 80066e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e4:	1ad2      	subs	r2, r2, r3
 80066e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	621a      	str	r2, [r3, #32]
 80066f2:	e00e      	b.n	8006712 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80066f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2200      	movs	r2, #0
 8006710:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	643b      	str	r3, [r7, #64]	@ 0x40
 800671e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d177      	bne.n	800681e <USB_EPStartXfer+0x85e>
 800672e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	63bb      	str	r3, [r7, #56]	@ 0x38
 800673a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006748:	b29b      	uxth	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674e:	4413      	add	r3, r2
 8006750:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	011a      	lsls	r2, r3, #4
 8006760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006762:	4413      	add	r3, r2
 8006764:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
 800676a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006774:	b29a      	uxth	r2, r3
 8006776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006780:	d921      	bls.n	80067c6 <USB_EPStartXfer+0x806>
 8006782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <USB_EPStartXfer+0x7e2>
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679c:	3b01      	subs	r3, #1
 800679e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	029b      	lsls	r3, r3, #10
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067be:	b29a      	uxth	r2, r3
 80067c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e050      	b.n	8006868 <USB_EPStartXfer+0x8a8>
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <USB_EPStartXfer+0x824>
 80067ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	e041      	b.n	8006868 <USB_EPStartXfer+0x8a8>
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e8:	085b      	lsrs	r3, r3, #1
 80067ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <USB_EPStartXfer+0x844>
 80067fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fe:	3301      	adds	r3, #1
 8006800:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29a      	uxth	r2, r3
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680e:	b29b      	uxth	r3, r3
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	b29b      	uxth	r3, r3
 8006814:	4313      	orrs	r3, r2
 8006816:	b29a      	uxth	r2, r3
 8006818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800681a:	801a      	strh	r2, [r3, #0]
 800681c:	e024      	b.n	8006868 <USB_EPStartXfer+0x8a8>
 800681e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	785b      	ldrb	r3, [r3, #1]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d11c      	bne.n	8006868 <USB_EPStartXfer+0x8a8>
 800682e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800683c:	b29b      	uxth	r3, r3
 800683e:	461a      	mov	r2, r3
 8006840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006842:	4413      	add	r3, r2
 8006844:	643b      	str	r3, [r7, #64]	@ 0x40
 8006846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	011a      	lsls	r2, r3, #4
 8006854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006856:	4413      	add	r3, r2
 8006858:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800685c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800685e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006862:	b29a      	uxth	r2, r3
 8006864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006866:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	895b      	ldrh	r3, [r3, #10]
 8006874:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6959      	ldr	r1, [r3, #20]
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006888:	b29b      	uxth	r3, r3
 800688a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800688e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006892:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006896:	6800      	ldr	r0, [r0, #0]
 8006898:	f001 f881 	bl	800799e <USB_WritePMA>
 800689c:	e227      	b.n	8006cee <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800689e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80068ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80068d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	441a      	add	r2, r3
 80068f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006924:	b29b      	uxth	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800692a:	4413      	add	r3, r2
 800692c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800692e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	011a      	lsls	r2, r3, #4
 800693c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800693e:	4413      	add	r3, r2
 8006940:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006944:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694a:	b29a      	uxth	r2, r3
 800694c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800694e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	891b      	ldrh	r3, [r3, #8]
 800695c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6959      	ldr	r1, [r3, #20]
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006970:	b29b      	uxth	r3, r3
 8006972:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006976:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800697a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800697e:	6800      	ldr	r0, [r0, #0]
 8006980:	f001 f80d 	bl	800799e <USB_WritePMA>
 8006984:	e1b3      	b.n	8006cee <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a1a      	ldr	r2, [r3, #32]
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006996:	1ad2      	subs	r2, r2, r3
 8006998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80c6 	beq.w	8006b58 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80069d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	785b      	ldrb	r3, [r3, #1]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d177      	bne.n	8006ad8 <USB_EPStartXfer+0xb18>
 80069e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a08:	4413      	add	r3, r2
 8006a0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	011a      	lsls	r2, r3, #4
 8006a1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a22:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a32:	801a      	strh	r2, [r3, #0]
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a38:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a3a:	d921      	bls.n	8006a80 <USB_EPStartXfer+0xac0>
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	095b      	lsrs	r3, r3, #5
 8006a42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d104      	bne.n	8006a5c <USB_EPStartXfer+0xa9c>
 8006a52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a56:	3b01      	subs	r3, #1
 8006a58:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	029b      	lsls	r3, r3, #10
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a7c:	801a      	strh	r2, [r3, #0]
 8006a7e:	e050      	b.n	8006b22 <USB_EPStartXfer+0xb62>
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <USB_EPStartXfer+0xade>
 8006a88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	e041      	b.n	8006b22 <USB_EPStartXfer+0xb62>
 8006a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d004      	beq.n	8006abe <USB_EPStartXfer+0xafe>
 8006ab4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ab8:	3301      	adds	r3, #1
 8006aba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006abe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	029b      	lsls	r3, r3, #10
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ad4:	801a      	strh	r2, [r3, #0]
 8006ad6:	e024      	b.n	8006b22 <USB_EPStartXfer+0xb62>
 8006ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	785b      	ldrb	r3, [r3, #1]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d11c      	bne.n	8006b22 <USB_EPStartXfer+0xb62>
 8006ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006afc:	4413      	add	r3, r2
 8006afe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	011a      	lsls	r2, r3, #4
 8006b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b10:	4413      	add	r3, r2
 8006b12:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	895b      	ldrh	r3, [r3, #10]
 8006b2e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6959      	ldr	r1, [r3, #20]
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b48:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b4c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b50:	6800      	ldr	r0, [r0, #0]
 8006b52:	f000 ff24 	bl	800799e <USB_WritePMA>
 8006b56:	e0ca      	b.n	8006cee <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d177      	bne.n	8006c58 <USB_EPStartXfer+0xc98>
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b88:	4413      	add	r3, r2
 8006b8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	011a      	lsls	r2, r3, #4
 8006b9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bb2:	801a      	strh	r2, [r3, #0]
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bba:	d921      	bls.n	8006c00 <USB_EPStartXfer+0xc40>
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc0:	095b      	lsrs	r3, r3, #5
 8006bc2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d104      	bne.n	8006bdc <USB_EPStartXfer+0xc1c>
 8006bd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	4313      	orrs	r3, r2
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bfc:	801a      	strh	r2, [r3, #0]
 8006bfe:	e05c      	b.n	8006cba <USB_EPStartXfer+0xcfa>
 8006c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <USB_EPStartXfer+0xc5e>
 8006c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c1a:	801a      	strh	r2, [r3, #0]
 8006c1c:	e04d      	b.n	8006cba <USB_EPStartXfer+0xcfa>
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d004      	beq.n	8006c3e <USB_EPStartXfer+0xc7e>
 8006c34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c38:	3301      	adds	r3, #1
 8006c3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	029b      	lsls	r3, r3, #10
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c54:	801a      	strh	r2, [r3, #0]
 8006c56:	e030      	b.n	8006cba <USB_EPStartXfer+0xcfa>
 8006c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d128      	bne.n	8006cba <USB_EPStartXfer+0xcfa>
 8006c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	011a      	lsls	r2, r3, #4
 8006ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006caa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cb8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	891b      	ldrh	r3, [r3, #8]
 8006cc6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6959      	ldr	r1, [r3, #20]
 8006cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ce0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ce4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ce8:	6800      	ldr	r0, [r0, #0]
 8006cea:	f000 fe58 	bl	800799e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d14:	817b      	strh	r3, [r7, #10]
 8006d16:	897b      	ldrh	r3, [r7, #10]
 8006d18:	f083 0310 	eor.w	r3, r3, #16
 8006d1c:	817b      	strh	r3, [r7, #10]
 8006d1e:	897b      	ldrh	r3, [r7, #10]
 8006d20:	f083 0320 	eor.w	r3, r3, #32
 8006d24:	817b      	strh	r3, [r7, #10]
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	897b      	ldrh	r3, [r7, #10]
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]
 8006d56:	f000 bcde 	b.w	8007716 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	7b1b      	ldrb	r3, [r3, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 80bb 	bne.w	8006ee2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699a      	ldr	r2, [r3, #24]
 8006d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d917      	bls.n	8006db8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	699a      	ldr	r2, [r3, #24]
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da8:	1ad2      	subs	r2, r2, r3
 8006daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	619a      	str	r2, [r3, #24]
 8006db6:	e00e      	b.n	8006dd6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	011a      	lsls	r2, r3, #4
 8006e0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e12:	4413      	add	r3, r2
 8006e14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e2e:	801a      	strh	r2, [r3, #0]
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e34:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e36:	d924      	bls.n	8006e82 <USB_EPStartXfer+0xec2>
 8006e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d104      	bne.n	8006e58 <USB_EPStartXfer+0xe98>
 8006e4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e52:	3b01      	subs	r3, #1
 8006e54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	029b      	lsls	r3, r3, #10
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	f000 bc10 	b.w	80076a2 <USB_EPStartXfer+0x16e2>
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10c      	bne.n	8006ea4 <USB_EPStartXfer+0xee4>
 8006e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	e3fe      	b.n	80076a2 <USB_EPStartXfer+0x16e2>
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <USB_EPStartXfer+0xf04>
 8006eba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	029b      	lsls	r3, r3, #10
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ede:	801a      	strh	r2, [r3, #0]
 8006ee0:	e3df      	b.n	80076a2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	78db      	ldrb	r3, [r3, #3]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	f040 8218 	bne.w	8007324 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	785b      	ldrb	r3, [r3, #1]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f040 809d 	bne.w	8007040 <USB_EPStartXfer+0x1080>
 8006f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	011a      	lsls	r2, r3, #4
 8006f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f42:	4413      	add	r3, r2
 8006f44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f5e:	801a      	strh	r2, [r3, #0]
 8006f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f6e:	d92b      	bls.n	8006fc8 <USB_EPStartXfer+0x1008>
 8006f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f003 031f 	and.w	r3, r3, #31
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d104      	bne.n	8006fa0 <USB_EPStartXfer+0xfe0>
 8006f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	029b      	lsls	r3, r3, #10
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	e070      	b.n	80070aa <USB_EPStartXfer+0x10ea>
 8006fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10c      	bne.n	8006ff2 <USB_EPStartXfer+0x1032>
 8006fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fee:	801a      	strh	r2, [r3, #0]
 8006ff0:	e05b      	b.n	80070aa <USB_EPStartXfer+0x10ea>
 8006ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	085b      	lsrs	r3, r3, #1
 8007000:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <USB_EPStartXfer+0x1062>
 8007018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800701c:	3301      	adds	r3, #1
 800701e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	b29a      	uxth	r2, r3
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702e:	b29b      	uxth	r3, r3
 8007030:	029b      	lsls	r3, r3, #10
 8007032:	b29b      	uxth	r3, r3
 8007034:	4313      	orrs	r3, r2
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e034      	b.n	80070aa <USB_EPStartXfer+0x10ea>
 8007040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d12c      	bne.n	80070aa <USB_EPStartXfer+0x10ea>
 8007050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007054:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800706c:	b29b      	uxth	r3, r3
 800706e:	461a      	mov	r2, r3
 8007070:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007074:	4413      	add	r3, r2
 8007076:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800707a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	011a      	lsls	r2, r3, #4
 8007088:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800708c:	4413      	add	r3, r2
 800708e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007092:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80070a8:	801a      	strh	r2, [r3, #0]
 80070aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f040 809d 	bne.w	8007204 <USB_EPStartXfer+0x1244>
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070ee:	4413      	add	r3, r2
 80070f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	011a      	lsls	r2, r3, #4
 8007102:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007106:	4413      	add	r3, r2
 8007108:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800710c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800711c:	b29a      	uxth	r2, r3
 800711e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b3e      	cmp	r3, #62	@ 0x3e
 8007132:	d92b      	bls.n	800718c <USB_EPStartXfer+0x11cc>
 8007134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <USB_EPStartXfer+0x11a4>
 800715a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800715e:	3b01      	subs	r3, #1
 8007160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29a      	uxth	r2, r3
 800716c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007170:	b29b      	uxth	r3, r3
 8007172:	029b      	lsls	r3, r3, #10
 8007174:	b29b      	uxth	r3, r3
 8007176:	4313      	orrs	r3, r2
 8007178:	b29b      	uxth	r3, r3
 800717a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800717e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007182:	b29a      	uxth	r2, r3
 8007184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	e069      	b.n	8007260 <USB_EPStartXfer+0x12a0>
 800718c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10c      	bne.n	80071b6 <USB_EPStartXfer+0x11f6>
 800719c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	e054      	b.n	8007260 <USB_EPStartXfer+0x12a0>
 80071b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	085b      	lsrs	r3, r3, #1
 80071c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <USB_EPStartXfer+0x1226>
 80071dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e0:	3301      	adds	r3, #1
 80071e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4313      	orrs	r3, r2
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007200:	801a      	strh	r2, [r3, #0]
 8007202:	e02d      	b.n	8007260 <USB_EPStartXfer+0x12a0>
 8007204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d125      	bne.n	8007260 <USB_EPStartXfer+0x12a0>
 8007214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800722a:	4413      	add	r3, r2
 800722c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	011a      	lsls	r2, r3, #4
 800723e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007242:	4413      	add	r3, r2
 8007244:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007248:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800724c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	b29a      	uxth	r2, r3
 800725a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800725e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 8218 	beq.w	80076a2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007292:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <USB_EPStartXfer+0x12ea>
 800729e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10d      	bne.n	80072c6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f040 81f5 	bne.w	80076a2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 81ee 	bne.w	80076a2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80072c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80072f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800730e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007312:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800731a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800731e:	b29b      	uxth	r3, r3
 8007320:	8013      	strh	r3, [r2, #0]
 8007322:	e1be      	b.n	80076a2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	78db      	ldrb	r3, [r3, #3]
 8007330:	2b01      	cmp	r3, #1
 8007332:	f040 81b4 	bne.w	800769e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	429a      	cmp	r2, r3
 8007350:	d917      	bls.n	8007382 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007372:	1ad2      	subs	r2, r2, r3
 8007374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	619a      	str	r2, [r3, #24]
 8007380:	e00e      	b.n	80073a0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2200      	movs	r2, #0
 800739e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80073a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f040 8085 	bne.w	80074bc <USB_EPStartXfer+0x14fc>
 80073b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073d6:	4413      	add	r3, r2
 80073d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	011a      	lsls	r2, r3, #4
 80073ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073ee:	4413      	add	r3, r2
 80073f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007410:	2b3e      	cmp	r3, #62	@ 0x3e
 8007412:	d923      	bls.n	800745c <USB_EPStartXfer+0x149c>
 8007414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800741e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <USB_EPStartXfer+0x1474>
 800742a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800742e:	3b01      	subs	r3, #1
 8007430:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007434:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29a      	uxth	r2, r3
 800743c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007440:	b29b      	uxth	r3, r3
 8007442:	029b      	lsls	r3, r3, #10
 8007444:	b29b      	uxth	r3, r3
 8007446:	4313      	orrs	r3, r2
 8007448:	b29b      	uxth	r3, r3
 800744a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007452:	b29a      	uxth	r2, r3
 8007454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007458:	801a      	strh	r2, [r3, #0]
 800745a:	e060      	b.n	800751e <USB_EPStartXfer+0x155e>
 800745c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10c      	bne.n	800747e <USB_EPStartXfer+0x14be>
 8007464:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29b      	uxth	r3, r3
 800746c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007474:	b29a      	uxth	r2, r3
 8007476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800747a:	801a      	strh	r2, [r3, #0]
 800747c:	e04f      	b.n	800751e <USB_EPStartXfer+0x155e>
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007482:	085b      	lsrs	r3, r3, #1
 8007484:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <USB_EPStartXfer+0x14de>
 8007494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007498:	3301      	adds	r3, #1
 800749a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800749e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	029b      	lsls	r3, r3, #10
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	4313      	orrs	r3, r2
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	e030      	b.n	800751e <USB_EPStartXfer+0x155e>
 80074bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d128      	bne.n	800751e <USB_EPStartXfer+0x155e>
 80074cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074f0:	4413      	add	r3, r2
 80074f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	011a      	lsls	r2, r3, #4
 8007504:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007508:	4413      	add	r3, r2
 800750a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800750e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007516:	b29a      	uxth	r2, r3
 8007518:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800751c:	801a      	strh	r2, [r3, #0]
 800751e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800752c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f040 8085 	bne.w	8007648 <USB_EPStartXfer+0x1688>
 800753e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800754c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007562:	4413      	add	r3, r2
 8007564:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	011a      	lsls	r2, r3, #4
 8007576:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800757a:	4413      	add	r3, r2
 800757c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007584:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007590:	b29a      	uxth	r2, r3
 8007592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759c:	2b3e      	cmp	r3, #62	@ 0x3e
 800759e:	d923      	bls.n	80075e8 <USB_EPStartXfer+0x1628>
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a4:	095b      	lsrs	r3, r3, #5
 80075a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d104      	bne.n	80075c0 <USB_EPStartXfer+0x1600>
 80075b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075ba:	3b01      	subs	r3, #1
 80075bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	029b      	lsls	r3, r3, #10
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	4313      	orrs	r3, r2
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075de:	b29a      	uxth	r2, r3
 80075e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	e05c      	b.n	80076a2 <USB_EPStartXfer+0x16e2>
 80075e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10c      	bne.n	800760a <USB_EPStartXfer+0x164a>
 80075f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007600:	b29a      	uxth	r2, r3
 8007602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007606:	801a      	strh	r2, [r3, #0]
 8007608:	e04b      	b.n	80076a2 <USB_EPStartXfer+0x16e2>
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	085b      	lsrs	r3, r3, #1
 8007610:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d004      	beq.n	800762a <USB_EPStartXfer+0x166a>
 8007620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007624:	3301      	adds	r3, #1
 8007626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800762a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	b29a      	uxth	r2, r3
 8007632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007636:	b29b      	uxth	r3, r3
 8007638:	029b      	lsls	r3, r3, #10
 800763a:	b29b      	uxth	r3, r3
 800763c:	4313      	orrs	r3, r2
 800763e:	b29a      	uxth	r2, r3
 8007640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	e02c      	b.n	80076a2 <USB_EPStartXfer+0x16e2>
 8007648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d124      	bne.n	80076a2 <USB_EPStartXfer+0x16e2>
 8007658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007666:	b29b      	uxth	r3, r3
 8007668:	461a      	mov	r2, r3
 800766a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800766e:	4413      	add	r3, r2
 8007670:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	011a      	lsls	r2, r3, #4
 8007682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007686:	4413      	add	r3, r2
 8007688:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800768c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007694:	b29a      	uxth	r2, r3
 8007696:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	e001      	b.n	80076a2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e03a      	b.n	8007718 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	441a      	add	r2, r3
 80076fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800770a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800770e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007712:	b29b      	uxth	r3, r3
 8007714:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d020      	beq.n	8007776 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800774a:	81bb      	strh	r3, [r7, #12]
 800774c:	89bb      	ldrh	r3, [r7, #12]
 800774e:	f083 0310 	eor.w	r3, r3, #16
 8007752:	81bb      	strh	r3, [r7, #12]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	441a      	add	r2, r3
 800775e:	89bb      	ldrh	r3, [r7, #12]
 8007760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800776c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007770:	b29b      	uxth	r3, r3
 8007772:	8013      	strh	r3, [r2, #0]
 8007774:	e01f      	b.n	80077b6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800778c:	81fb      	strh	r3, [r7, #14]
 800778e:	89fb      	ldrh	r3, [r7, #14]
 8007790:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007794:	81fb      	strh	r3, [r7, #14]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	441a      	add	r2, r3
 80077a0:	89fb      	ldrh	r3, [r7, #14]
 80077a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr

080077c2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b087      	sub	sp, #28
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	7b1b      	ldrb	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 809d 	bne.w	8007910 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d04c      	beq.n	8007878 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	823b      	strh	r3, [r7, #16]
 80077ec:	8a3b      	ldrh	r3, [r7, #16]
 80077ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d01b      	beq.n	800782e <USB_EPClearStall+0x6c>
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780c:	81fb      	strh	r3, [r7, #14]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	441a      	add	r2, r3
 8007818:	89fb      	ldrh	r3, [r7, #14]
 800781a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800781e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007826:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800782a:	b29b      	uxth	r3, r3
 800782c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	78db      	ldrb	r3, [r3, #3]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d06c      	beq.n	8007910 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
 8007844:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007848:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800784c:	81bb      	strh	r3, [r7, #12]
 800784e:	89bb      	ldrh	r3, [r7, #12]
 8007850:	f083 0320 	eor.w	r3, r3, #32
 8007854:	81bb      	strh	r3, [r7, #12]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	441a      	add	r2, r3
 8007860:	89bb      	ldrh	r3, [r7, #12]
 8007862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800786a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800786e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007872:	b29b      	uxth	r3, r3
 8007874:	8013      	strh	r3, [r2, #0]
 8007876:	e04b      	b.n	8007910 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	82fb      	strh	r3, [r7, #22]
 8007886:	8afb      	ldrh	r3, [r7, #22]
 8007888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01b      	beq.n	80078c8 <USB_EPClearStall+0x106>
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a6:	82bb      	strh	r3, [r7, #20]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	441a      	add	r2, r3
 80078b2:	8abb      	ldrh	r3, [r7, #20]
 80078b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078de:	827b      	strh	r3, [r7, #18]
 80078e0:	8a7b      	ldrh	r3, [r7, #18]
 80078e2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078e6:	827b      	strh	r3, [r7, #18]
 80078e8:	8a7b      	ldrh	r3, [r7, #18]
 80078ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078ee:	827b      	strh	r3, [r7, #18]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	441a      	add	r2, r3
 80078fa:	8a7b      	ldrh	r3, [r7, #18]
 80078fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800790c:	b29b      	uxth	r3, r3
 800790e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr

0800791c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d103      	bne.n	8007936 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2280      	movs	r2, #128	@ 0x80
 8007932:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr

08007942 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	bc80      	pop	{r7}
 8007954:	4770      	bx	lr

08007956 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr

0800796a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007978:	b29b      	uxth	r3, r3
 800797a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800797c:	68fb      	ldr	r3, [r7, #12]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr

08007988 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr

0800799e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800799e:	b480      	push	{r7}
 80079a0:	b08b      	sub	sp, #44	@ 0x2c
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	4611      	mov	r1, r2
 80079aa:	461a      	mov	r2, r3
 80079ac:	460b      	mov	r3, r1
 80079ae:	80fb      	strh	r3, [r7, #6]
 80079b0:	4613      	mov	r3, r2
 80079b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80079b4:	88bb      	ldrh	r3, [r7, #4]
 80079b6:	3301      	adds	r3, #1
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079c4:	88fb      	ldrh	r3, [r7, #6]
 80079c6:	005a      	lsls	r2, r3, #1
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079d6:	e01e      	b.n	8007a16 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	3301      	adds	r3, #1
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	b21a      	sxth	r2, r3
 80079e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	b21b      	sxth	r3, r3
 80079f0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	8a7a      	ldrh	r2, [r7, #18]
 80079f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	3302      	adds	r3, #2
 80079fc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	3302      	adds	r3, #2
 8007a02:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	3301      	adds	r3, #1
 8007a08:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	3b01      	subs	r3, #1
 8007a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1dd      	bne.n	80079d8 <USB_WritePMA+0x3a>
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	bf00      	nop
 8007a20:	372c      	adds	r7, #44	@ 0x2c
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bc80      	pop	{r7}
 8007a26:	4770      	bx	lr

08007a28 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b08b      	sub	sp, #44	@ 0x2c
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4611      	mov	r1, r2
 8007a34:	461a      	mov	r2, r3
 8007a36:	460b      	mov	r3, r1
 8007a38:	80fb      	strh	r3, [r7, #6]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a3e:	88bb      	ldrh	r3, [r7, #4]
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	005a      	lsls	r2, r3, #1
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a5a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a60:	e01b      	b.n	8007a9a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	0a1b      	lsrs	r3, r3, #8
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	3302      	adds	r3, #2
 8007a92:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a96:	3b01      	subs	r3, #1
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e0      	bne.n	8007a62 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007aa0:	88bb      	ldrh	r3, [r7, #4]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d007      	beq.n	8007abc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	701a      	strb	r2, [r3, #0]
  }
}
 8007abc:	bf00      	nop
 8007abe:	372c      	adds	r7, #44	@ 0x2c
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr

08007ac6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ada:	2302      	movs	r3, #2
 8007adc:	e01a      	b.n	8007b14 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	79fa      	ldrb	r2, [r7, #7]
 8007b0a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f001 fc03 	bl	8009318 <USBD_LL_Init>

  return USBD_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d006      	beq.n	8007b3e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]
 8007b3c:	e001      	b.n	8007b42 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007b3e:	2302      	movs	r3, #2
 8007b40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bc80      	pop	{r7}
 8007b4c:	4770      	bx	lr

08007b4e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fc26 	bl	80093a8 <USBD_LL_Start>

  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr

08007b7a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b86:	2302      	movs	r3, #2
 8007b88:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00c      	beq.n	8007bae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	4798      	blx	r3
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	4798      	blx	r3

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fed8 	bl	80089a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c04:	461a      	mov	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007c12:	f003 031f 	and.w	r3, r3, #31
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d016      	beq.n	8007c48 <USBD_LL_SetupStage+0x6a>
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d81c      	bhi.n	8007c58 <USBD_LL_SetupStage+0x7a>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <USBD_LL_SetupStage+0x4a>
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d008      	beq.n	8007c38 <USBD_LL_SetupStage+0x5a>
 8007c26:	e017      	b.n	8007c58 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f9cb 	bl	8007fcc <USBD_StdDevReq>
      break;
 8007c36:	e01a      	b.n	8007c6e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fa2d 	bl	80080a0 <USBD_StdItfReq>
      break;
 8007c46:	e012      	b.n	8007c6e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fa6d 	bl	8008130 <USBD_StdEPReq>
      break;
 8007c56:	e00a      	b.n	8007c6e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007c5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 fbfe 	bl	8009468 <USBD_LL_StallEP>
      break;
 8007c6c:	bf00      	nop
  }

  return USBD_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	460b      	mov	r3, r1
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d14b      	bne.n	8007d24 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007c92:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d134      	bne.n	8007d08 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d919      	bls.n	8007cde <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	1ad2      	subs	r2, r2, r3
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d203      	bcs.n	8007ccc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	e002      	b.n	8007cd2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f001 f8f0 	bl	8008ebc <USBD_CtlContinueRx>
 8007cdc:	e038      	b.n	8007d50 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d105      	bne.n	8007d00 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f001 f8ed 	bl	8008ee0 <USBD_CtlSendStatus>
 8007d06:	e023      	b.n	8007d50 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	d11e      	bne.n	8007d50 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f001 fba3 	bl	8009468 <USBD_LL_StallEP>
 8007d22:	e015      	b.n	8007d50 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00d      	beq.n	8007d4c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d108      	bne.n	8007d4c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	7afa      	ldrb	r2, [r7, #11]
 8007d44:	4611      	mov	r1, r2
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	4798      	blx	r3
 8007d4a:	e001      	b.n	8007d50 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e000      	b.n	8007d52 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	460b      	mov	r3, r1
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d17f      	bne.n	8007e6e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3314      	adds	r3, #20
 8007d72:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d15c      	bne.n	8007e38 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d915      	bls.n	8007db6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	1ad2      	subs	r2, r2, r3
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f001 f878 	bl	8008e98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007da8:	2300      	movs	r3, #0
 8007daa:	2200      	movs	r2, #0
 8007dac:	2100      	movs	r1, #0
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f001 fc05 	bl	80095be <USBD_LL_PrepareReceive>
 8007db4:	e04e      	b.n	8007e54 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	6912      	ldr	r2, [r2, #16]
 8007dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dc2:	fb01 f202 	mul.w	r2, r1, r2
 8007dc6:	1a9b      	subs	r3, r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11c      	bne.n	8007e06 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d316      	bcc.n	8007e06 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d20f      	bcs.n	8007e06 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007de6:	2200      	movs	r2, #0
 8007de8:	2100      	movs	r1, #0
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f001 f854 	bl	8008e98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f001 fbdd 	bl	80095be <USBD_LL_PrepareReceive>
 8007e04:	e026      	b.n	8007e54 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d105      	bne.n	8007e28 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007e28:	2180      	movs	r1, #128	@ 0x80
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f001 fb1c 	bl	8009468 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f001 f868 	bl	8008f06 <USBD_CtlReceiveStatus>
 8007e36:	e00d      	b.n	8007e54 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d004      	beq.n	8007e4c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007e4c:	2180      	movs	r1, #128	@ 0x80
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f001 fb0a 	bl	8009468 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d11d      	bne.n	8007e9a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f7ff fe81 	bl	8007b66 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007e6c:	e015      	b.n	8007e9a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00d      	beq.n	8007e96 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d108      	bne.n	8007e96 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	7afa      	ldrb	r2, [r7, #11]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	4798      	blx	r3
 8007e94:	e001      	b.n	8007e9a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e96:	2302      	movs	r3, #2
 8007e98:	e000      	b.n	8007e9c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eac:	2340      	movs	r3, #64	@ 0x40
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 fa93 	bl	80093de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2240      	movs	r2, #64	@ 0x40
 8007ec4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ec8:	2340      	movs	r3, #64	@ 0x40
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2180      	movs	r1, #128	@ 0x80
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 fa85 	bl	80093de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2240      	movs	r2, #64	@ 0x40
 8007ede:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d009      	beq.n	8007f1c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	6852      	ldr	r2, [r2, #4]
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	4611      	mov	r1, r2
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	4798      	blx	r3
  }

  return USBD_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d105      	bne.n	8007f8a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr

08007f96 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d10b      	bne.n	8007fc0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fe2:	2b40      	cmp	r3, #64	@ 0x40
 8007fe4:	d005      	beq.n	8007ff2 <USBD_StdDevReq+0x26>
 8007fe6:	2b40      	cmp	r3, #64	@ 0x40
 8007fe8:	d84f      	bhi.n	800808a <USBD_StdDevReq+0xbe>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d009      	beq.n	8008002 <USBD_StdDevReq+0x36>
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	d14b      	bne.n	800808a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
      break;
 8008000:	e048      	b.n	8008094 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	785b      	ldrb	r3, [r3, #1]
 8008006:	2b09      	cmp	r3, #9
 8008008:	d839      	bhi.n	800807e <USBD_StdDevReq+0xb2>
 800800a:	a201      	add	r2, pc, #4	@ (adr r2, 8008010 <USBD_StdDevReq+0x44>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008061 	.word	0x08008061
 8008014:	08008075 	.word	0x08008075
 8008018:	0800807f 	.word	0x0800807f
 800801c:	0800806b 	.word	0x0800806b
 8008020:	0800807f 	.word	0x0800807f
 8008024:	08008043 	.word	0x08008043
 8008028:	08008039 	.word	0x08008039
 800802c:	0800807f 	.word	0x0800807f
 8008030:	08008057 	.word	0x08008057
 8008034:	0800804d 	.word	0x0800804d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f9dc 	bl	80083f8 <USBD_GetDescriptor>
          break;
 8008040:	e022      	b.n	8008088 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fb3f 	bl	80086c8 <USBD_SetAddress>
          break;
 800804a:	e01d      	b.n	8008088 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fb7e 	bl	8008750 <USBD_SetConfig>
          break;
 8008054:	e018      	b.n	8008088 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fc07 	bl	800886c <USBD_GetConfig>
          break;
 800805e:	e013      	b.n	8008088 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fc37 	bl	80088d6 <USBD_GetStatus>
          break;
 8008068:	e00e      	b.n	8008088 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fc65 	bl	800893c <USBD_SetFeature>
          break;
 8008072:	e009      	b.n	8008088 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fc74 	bl	8008964 <USBD_ClrFeature>
          break;
 800807c:	e004      	b.n	8008088 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fcc9 	bl	8008a18 <USBD_CtlError>
          break;
 8008086:	bf00      	nop
      }
      break;
 8008088:	e004      	b.n	8008094 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fcc3 	bl	8008a18 <USBD_CtlError>
      break;
 8008092:	bf00      	nop
  }

  return ret;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop

080080a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080b6:	2b40      	cmp	r3, #64	@ 0x40
 80080b8:	d005      	beq.n	80080c6 <USBD_StdItfReq+0x26>
 80080ba:	2b40      	cmp	r3, #64	@ 0x40
 80080bc:	d82e      	bhi.n	800811c <USBD_StdItfReq+0x7c>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <USBD_StdItfReq+0x26>
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d12a      	bne.n	800811c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080cc:	3b01      	subs	r3, #1
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d81d      	bhi.n	800810e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	889b      	ldrh	r3, [r3, #4]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d813      	bhi.n	8008104 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	4798      	blx	r3
 80080ea:	4603      	mov	r3, r0
 80080ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	88db      	ldrh	r3, [r3, #6]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d110      	bne.n	8008118 <USBD_StdItfReq+0x78>
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10d      	bne.n	8008118 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 feef 	bl	8008ee0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008102:	e009      	b.n	8008118 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fc86 	bl	8008a18 <USBD_CtlError>
          break;
 800810c:	e004      	b.n	8008118 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fc81 	bl	8008a18 <USBD_CtlError>
          break;
 8008116:	e000      	b.n	800811a <USBD_StdItfReq+0x7a>
          break;
 8008118:	bf00      	nop
      }
      break;
 800811a:	e004      	b.n	8008126 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fc7a 	bl	8008a18 <USBD_CtlError>
      break;
 8008124:	bf00      	nop
  }

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	889b      	ldrh	r3, [r3, #4]
 8008142:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800814c:	2b40      	cmp	r3, #64	@ 0x40
 800814e:	d007      	beq.n	8008160 <USBD_StdEPReq+0x30>
 8008150:	2b40      	cmp	r3, #64	@ 0x40
 8008152:	f200 8146 	bhi.w	80083e2 <USBD_StdEPReq+0x2b2>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <USBD_StdEPReq+0x40>
 800815a:	2b20      	cmp	r3, #32
 800815c:	f040 8141 	bne.w	80083e2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
      break;
 800816e:	e13d      	b.n	80083ec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008178:	2b20      	cmp	r3, #32
 800817a:	d10a      	bne.n	8008192 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	4798      	blx	r3
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	e12d      	b.n	80083ee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	2b03      	cmp	r3, #3
 8008198:	d007      	beq.n	80081aa <USBD_StdEPReq+0x7a>
 800819a:	2b03      	cmp	r3, #3
 800819c:	f300 811b 	bgt.w	80083d6 <USBD_StdEPReq+0x2a6>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d072      	beq.n	800828a <USBD_StdEPReq+0x15a>
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d03a      	beq.n	800821e <USBD_StdEPReq+0xee>
 80081a8:	e115      	b.n	80083d6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d002      	beq.n	80081ba <USBD_StdEPReq+0x8a>
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d015      	beq.n	80081e4 <USBD_StdEPReq+0xb4>
 80081b8:	e02b      	b.n	8008212 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00c      	beq.n	80081da <USBD_StdEPReq+0xaa>
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b80      	cmp	r3, #128	@ 0x80
 80081c4:	d009      	beq.n	80081da <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f94c 	bl	8009468 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80081d0:	2180      	movs	r1, #128	@ 0x80
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 f948 	bl	8009468 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081d8:	e020      	b.n	800821c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fc1b 	bl	8008a18 <USBD_CtlError>
              break;
 80081e2:	e01b      	b.n	800821c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	885b      	ldrh	r3, [r3, #2]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10e      	bne.n	800820a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00b      	beq.n	800820a <USBD_StdEPReq+0xda>
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b80      	cmp	r3, #128	@ 0x80
 80081f6:	d008      	beq.n	800820a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	88db      	ldrh	r3, [r3, #6]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 f92f 	bl	8009468 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fe68 	bl	8008ee0 <USBD_CtlSendStatus>

              break;
 8008210:	e004      	b.n	800821c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fbff 	bl	8008a18 <USBD_CtlError>
              break;
 800821a:	bf00      	nop
          }
          break;
 800821c:	e0e0      	b.n	80083e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008224:	2b02      	cmp	r3, #2
 8008226:	d002      	beq.n	800822e <USBD_StdEPReq+0xfe>
 8008228:	2b03      	cmp	r3, #3
 800822a:	d015      	beq.n	8008258 <USBD_StdEPReq+0x128>
 800822c:	e026      	b.n	800827c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00c      	beq.n	800824e <USBD_StdEPReq+0x11e>
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	2b80      	cmp	r3, #128	@ 0x80
 8008238:	d009      	beq.n	800824e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 f912 	bl	8009468 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008244:	2180      	movs	r1, #128	@ 0x80
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 f90e 	bl	8009468 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800824c:	e01c      	b.n	8008288 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fbe1 	bl	8008a18 <USBD_CtlError>
              break;
 8008256:	e017      	b.n	8008288 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	885b      	ldrh	r3, [r3, #2]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d112      	bne.n	8008286 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 f919 	bl	80094a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fe33 	bl	8008ee0 <USBD_CtlSendStatus>
              }
              break;
 800827a:	e004      	b.n	8008286 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fbca 	bl	8008a18 <USBD_CtlError>
              break;
 8008284:	e000      	b.n	8008288 <USBD_StdEPReq+0x158>
              break;
 8008286:	bf00      	nop
          }
          break;
 8008288:	e0aa      	b.n	80083e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008290:	2b02      	cmp	r3, #2
 8008292:	d002      	beq.n	800829a <USBD_StdEPReq+0x16a>
 8008294:	2b03      	cmp	r3, #3
 8008296:	d032      	beq.n	80082fe <USBD_StdEPReq+0x1ce>
 8008298:	e097      	b.n	80083ca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d007      	beq.n	80082b0 <USBD_StdEPReq+0x180>
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	2b80      	cmp	r3, #128	@ 0x80
 80082a4:	d004      	beq.n	80082b0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fbb5 	bl	8008a18 <USBD_CtlError>
                break;
 80082ae:	e091      	b.n	80083d4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	da0b      	bge.n	80082d0 <USBD_StdEPReq+0x1a0>
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	3310      	adds	r3, #16
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4413      	add	r3, r2
 80082cc:	3304      	adds	r3, #4
 80082ce:	e00b      	b.n	80082e8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082d6:	4613      	mov	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	4413      	add	r3, r2
 80082e6:	3304      	adds	r3, #4
 80082e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2202      	movs	r2, #2
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fdb2 	bl	8008e60 <USBD_CtlSendData>
              break;
 80082fc:	e06a      	b.n	80083d4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008302:	2b00      	cmp	r3, #0
 8008304:	da11      	bge.n	800832a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	f003 020f 	and.w	r2, r3, #15
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	440b      	add	r3, r1
 8008318:	3318      	adds	r3, #24
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d117      	bne.n	8008350 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fb78 	bl	8008a18 <USBD_CtlError>
                  break;
 8008328:	e054      	b.n	80083d4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	f003 020f 	and.w	r2, r3, #15
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	440b      	add	r3, r1
 800833c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fb65 	bl	8008a18 <USBD_CtlError>
                  break;
 800834e:	e041      	b.n	80083d4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008354:	2b00      	cmp	r3, #0
 8008356:	da0b      	bge.n	8008370 <USBD_StdEPReq+0x240>
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	3310      	adds	r3, #16
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	4413      	add	r3, r2
 800836c:	3304      	adds	r3, #4
 800836e:	e00b      	b.n	8008388 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008376:	4613      	mov	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	4413      	add	r3, r2
 8008386:	3304      	adds	r3, #4
 8008388:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <USBD_StdEPReq+0x266>
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	2b80      	cmp	r3, #128	@ 0x80
 8008394:	d103      	bne.n	800839e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	e00e      	b.n	80083bc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 f89e 	bl	80094e4 <USBD_LL_IsStallEP>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2201      	movs	r2, #1
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	e002      	b.n	80083bc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2202      	movs	r2, #2
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fd4c 	bl	8008e60 <USBD_CtlSendData>
              break;
 80083c8:	e004      	b.n	80083d4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fb23 	bl	8008a18 <USBD_CtlError>
              break;
 80083d2:	bf00      	nop
          }
          break;
 80083d4:	e004      	b.n	80083e0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fb1d 	bl	8008a18 <USBD_CtlError>
          break;
 80083de:	bf00      	nop
      }
      break;
 80083e0:	e004      	b.n	80083ec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fb17 	bl	8008a18 <USBD_CtlError>
      break;
 80083ea:	bf00      	nop
  }

  return ret;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	885b      	ldrh	r3, [r3, #2]
 8008412:	0a1b      	lsrs	r3, r3, #8
 8008414:	b29b      	uxth	r3, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	2b06      	cmp	r3, #6
 800841a:	f200 8128 	bhi.w	800866e <USBD_GetDescriptor+0x276>
 800841e:	a201      	add	r2, pc, #4	@ (adr r2, 8008424 <USBD_GetDescriptor+0x2c>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008441 	.word	0x08008441
 8008428:	08008459 	.word	0x08008459
 800842c:	08008499 	.word	0x08008499
 8008430:	0800866f 	.word	0x0800866f
 8008434:	0800866f 	.word	0x0800866f
 8008438:	0800860f 	.word	0x0800860f
 800843c:	0800863b 	.word	0x0800863b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	7c12      	ldrb	r2, [r2, #16]
 800844c:	f107 0108 	add.w	r1, r7, #8
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
 8008454:	60f8      	str	r0, [r7, #12]
      break;
 8008456:	e112      	b.n	800867e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	7c1b      	ldrb	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10d      	bne.n	800847c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008468:	f107 0208 	add.w	r2, r7, #8
 800846c:	4610      	mov	r0, r2
 800846e:	4798      	blx	r3
 8008470:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3301      	adds	r3, #1
 8008476:	2202      	movs	r2, #2
 8008478:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800847a:	e100      	b.n	800867e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008484:	f107 0208 	add.w	r2, r7, #8
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
 800848c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3301      	adds	r3, #1
 8008492:	2202      	movs	r2, #2
 8008494:	701a      	strb	r2, [r3, #0]
      break;
 8008496:	e0f2      	b.n	800867e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	885b      	ldrh	r3, [r3, #2]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b05      	cmp	r3, #5
 80084a0:	f200 80ac 	bhi.w	80085fc <USBD_GetDescriptor+0x204>
 80084a4:	a201      	add	r2, pc, #4	@ (adr r2, 80084ac <USBD_GetDescriptor+0xb4>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	080084c5 	.word	0x080084c5
 80084b0:	080084f9 	.word	0x080084f9
 80084b4:	0800852d 	.word	0x0800852d
 80084b8:	08008561 	.word	0x08008561
 80084bc:	08008595 	.word	0x08008595
 80084c0:	080085c9 	.word	0x080085c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	7c12      	ldrb	r2, [r2, #16]
 80084dc:	f107 0108 	add.w	r1, r7, #8
 80084e0:	4610      	mov	r0, r2
 80084e2:	4798      	blx	r3
 80084e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084e6:	e091      	b.n	800860c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa94 	bl	8008a18 <USBD_CtlError>
            err++;
 80084f0:	7afb      	ldrb	r3, [r7, #11]
 80084f2:	3301      	adds	r3, #1
 80084f4:	72fb      	strb	r3, [r7, #11]
          break;
 80084f6:	e089      	b.n	800860c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00b      	beq.n	800851c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	7c12      	ldrb	r2, [r2, #16]
 8008510:	f107 0108 	add.w	r1, r7, #8
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851a:	e077      	b.n	800860c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa7a 	bl	8008a18 <USBD_CtlError>
            err++;
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	3301      	adds	r3, #1
 8008528:	72fb      	strb	r3, [r7, #11]
          break;
 800852a:	e06f      	b.n	800860c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	7c12      	ldrb	r2, [r2, #16]
 8008544:	f107 0108 	add.w	r1, r7, #8
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800854e:	e05d      	b.n	800860c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa60 	bl	8008a18 <USBD_CtlError>
            err++;
 8008558:	7afb      	ldrb	r3, [r7, #11]
 800855a:	3301      	adds	r3, #1
 800855c:	72fb      	strb	r3, [r7, #11]
          break;
 800855e:	e055      	b.n	800860c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00b      	beq.n	8008584 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	7c12      	ldrb	r2, [r2, #16]
 8008578:	f107 0108 	add.w	r1, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008582:	e043      	b.n	800860c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa46 	bl	8008a18 <USBD_CtlError>
            err++;
 800858c:	7afb      	ldrb	r3, [r7, #11]
 800858e:	3301      	adds	r3, #1
 8008590:	72fb      	strb	r3, [r7, #11]
          break;
 8008592:	e03b      	b.n	800860c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085a6:	695b      	ldr	r3, [r3, #20]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	7c12      	ldrb	r2, [r2, #16]
 80085ac:	f107 0108 	add.w	r1, r7, #8
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085b6:	e029      	b.n	800860c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fa2c 	bl	8008a18 <USBD_CtlError>
            err++;
 80085c0:	7afb      	ldrb	r3, [r7, #11]
 80085c2:	3301      	adds	r3, #1
 80085c4:	72fb      	strb	r3, [r7, #11]
          break;
 80085c6:	e021      	b.n	800860c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	7c12      	ldrb	r2, [r2, #16]
 80085e0:	f107 0108 	add.w	r1, r7, #8
 80085e4:	4610      	mov	r0, r2
 80085e6:	4798      	blx	r3
 80085e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ea:	e00f      	b.n	800860c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fa12 	bl	8008a18 <USBD_CtlError>
            err++;
 80085f4:	7afb      	ldrb	r3, [r7, #11]
 80085f6:	3301      	adds	r3, #1
 80085f8:	72fb      	strb	r3, [r7, #11]
          break;
 80085fa:	e007      	b.n	800860c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa0a 	bl	8008a18 <USBD_CtlError>
          err++;
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	3301      	adds	r3, #1
 8008608:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800860a:	e038      	b.n	800867e <USBD_GetDescriptor+0x286>
 800860c:	e037      	b.n	800867e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7c1b      	ldrb	r3, [r3, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d109      	bne.n	800862a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800861c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800861e:	f107 0208 	add.w	r2, r7, #8
 8008622:	4610      	mov	r0, r2
 8008624:	4798      	blx	r3
 8008626:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008628:	e029      	b.n	800867e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f9f3 	bl	8008a18 <USBD_CtlError>
        err++;
 8008632:	7afb      	ldrb	r3, [r7, #11]
 8008634:	3301      	adds	r3, #1
 8008636:	72fb      	strb	r3, [r7, #11]
      break;
 8008638:	e021      	b.n	800867e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	7c1b      	ldrb	r3, [r3, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10d      	bne.n	800865e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864a:	f107 0208 	add.w	r2, r7, #8
 800864e:	4610      	mov	r0, r2
 8008650:	4798      	blx	r3
 8008652:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3301      	adds	r3, #1
 8008658:	2207      	movs	r2, #7
 800865a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800865c:	e00f      	b.n	800867e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f9d9 	bl	8008a18 <USBD_CtlError>
        err++;
 8008666:	7afb      	ldrb	r3, [r7, #11]
 8008668:	3301      	adds	r3, #1
 800866a:	72fb      	strb	r3, [r7, #11]
      break;
 800866c:	e007      	b.n	800867e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f9d1 	bl	8008a18 <USBD_CtlError>
      err++;
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	3301      	adds	r3, #1
 800867a:	72fb      	strb	r3, [r7, #11]
      break;
 800867c:	bf00      	nop
  }

  if (err != 0U)
 800867e:	7afb      	ldrb	r3, [r7, #11]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d11c      	bne.n	80086be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008684:	893b      	ldrh	r3, [r7, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d011      	beq.n	80086ae <USBD_GetDescriptor+0x2b6>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	88db      	ldrh	r3, [r3, #6]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00d      	beq.n	80086ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	88da      	ldrh	r2, [r3, #6]
 8008696:	893b      	ldrh	r3, [r7, #8]
 8008698:	4293      	cmp	r3, r2
 800869a:	bf28      	it	cs
 800869c:	4613      	movcs	r3, r2
 800869e:	b29b      	uxth	r3, r3
 80086a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086a2:	893b      	ldrh	r3, [r7, #8]
 80086a4:	461a      	mov	r2, r3
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fbd9 	bl	8008e60 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	88db      	ldrh	r3, [r3, #6]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d104      	bne.n	80086c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fc12 	bl	8008ee0 <USBD_CtlSendStatus>
 80086bc:	e000      	b.n	80086c0 <USBD_GetDescriptor+0x2c8>
    return;
 80086be:	bf00      	nop
    }
  }
}
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop

080086c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	889b      	ldrh	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d130      	bne.n	800873c <USBD_SetAddress+0x74>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	88db      	ldrh	r3, [r3, #6]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d12c      	bne.n	800873c <USBD_SetAddress+0x74>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	885b      	ldrh	r3, [r3, #2]
 80086e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80086e8:	d828      	bhi.n	800873c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	885b      	ldrh	r3, [r3, #2]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d104      	bne.n	800870a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f988 	bl	8008a18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008708:	e01d      	b.n	8008746 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7bfa      	ldrb	r2, [r7, #15]
 800870e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 ff0f 	bl	800953a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fbdf 	bl	8008ee0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d004      	beq.n	8008732 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008730:	e009      	b.n	8008746 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873a:	e004      	b.n	8008746 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f96a 	bl	8008a18 <USBD_CtlError>
  }
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	885b      	ldrh	r3, [r3, #2]
 800875e:	b2da      	uxtb	r2, r3
 8008760:	4b41      	ldr	r3, [pc, #260]	@ (8008868 <USBD_SetConfig+0x118>)
 8008762:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008764:	4b40      	ldr	r3, [pc, #256]	@ (8008868 <USBD_SetConfig+0x118>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d904      	bls.n	8008776 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f952 	bl	8008a18 <USBD_CtlError>
 8008774:	e075      	b.n	8008862 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800877c:	2b02      	cmp	r3, #2
 800877e:	d002      	beq.n	8008786 <USBD_SetConfig+0x36>
 8008780:	2b03      	cmp	r3, #3
 8008782:	d023      	beq.n	80087cc <USBD_SetConfig+0x7c>
 8008784:	e062      	b.n	800884c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008786:	4b38      	ldr	r3, [pc, #224]	@ (8008868 <USBD_SetConfig+0x118>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d01a      	beq.n	80087c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800878e:	4b36      	ldr	r3, [pc, #216]	@ (8008868 <USBD_SetConfig+0x118>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2203      	movs	r2, #3
 800879c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087a0:	4b31      	ldr	r3, [pc, #196]	@ (8008868 <USBD_SetConfig+0x118>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff f9e7 	bl	8007b7a <USBD_SetClassConfig>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d104      	bne.n	80087bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f92f 	bl	8008a18 <USBD_CtlError>
            return;
 80087ba:	e052      	b.n	8008862 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fb8f 	bl	8008ee0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087c2:	e04e      	b.n	8008862 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fb8b 	bl	8008ee0 <USBD_CtlSendStatus>
        break;
 80087ca:	e04a      	b.n	8008862 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80087cc:	4b26      	ldr	r3, [pc, #152]	@ (8008868 <USBD_SetConfig+0x118>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d112      	bne.n	80087fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80087dc:	4b22      	ldr	r3, [pc, #136]	@ (8008868 <USBD_SetConfig+0x118>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80087e6:	4b20      	ldr	r3, [pc, #128]	@ (8008868 <USBD_SetConfig+0x118>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff f9e3 	bl	8007bb8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fb74 	bl	8008ee0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087f8:	e033      	b.n	8008862 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80087fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008868 <USBD_SetConfig+0x118>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d01d      	beq.n	8008844 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff f9d1 	bl	8007bb8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008816:	4b14      	ldr	r3, [pc, #80]	@ (8008868 <USBD_SetConfig+0x118>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008820:	4b11      	ldr	r3, [pc, #68]	@ (8008868 <USBD_SetConfig+0x118>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff f9a7 	bl	8007b7a <USBD_SetClassConfig>
 800882c:	4603      	mov	r3, r0
 800882e:	2b02      	cmp	r3, #2
 8008830:	d104      	bne.n	800883c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f8ef 	bl	8008a18 <USBD_CtlError>
            return;
 800883a:	e012      	b.n	8008862 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fb4f 	bl	8008ee0 <USBD_CtlSendStatus>
        break;
 8008842:	e00e      	b.n	8008862 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fb4b 	bl	8008ee0 <USBD_CtlSendStatus>
        break;
 800884a:	e00a      	b.n	8008862 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f8e2 	bl	8008a18 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008854:	4b04      	ldr	r3, [pc, #16]	@ (8008868 <USBD_SetConfig+0x118>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff f9ac 	bl	8007bb8 <USBD_ClrClassConfig>
        break;
 8008860:	bf00      	nop
    }
  }
}
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20000e80 	.word	0x20000e80

0800886c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	88db      	ldrh	r3, [r3, #6]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d004      	beq.n	8008888 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f8c9 	bl	8008a18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008886:	e022      	b.n	80088ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800888e:	2b02      	cmp	r3, #2
 8008890:	dc02      	bgt.n	8008898 <USBD_GetConfig+0x2c>
 8008892:	2b00      	cmp	r3, #0
 8008894:	dc03      	bgt.n	800889e <USBD_GetConfig+0x32>
 8008896:	e015      	b.n	80088c4 <USBD_GetConfig+0x58>
 8008898:	2b03      	cmp	r3, #3
 800889a:	d00b      	beq.n	80088b4 <USBD_GetConfig+0x48>
 800889c:	e012      	b.n	80088c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3308      	adds	r3, #8
 80088a8:	2201      	movs	r2, #1
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fad7 	bl	8008e60 <USBD_CtlSendData>
        break;
 80088b2:	e00c      	b.n	80088ce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3304      	adds	r3, #4
 80088b8:	2201      	movs	r2, #1
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 facf 	bl	8008e60 <USBD_CtlSendData>
        break;
 80088c2:	e004      	b.n	80088ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f8a6 	bl	8008a18 <USBD_CtlError>
        break;
 80088cc:	bf00      	nop
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088e6:	3b01      	subs	r3, #1
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d81e      	bhi.n	800892a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	88db      	ldrh	r3, [r3, #6]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d004      	beq.n	80088fe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f88e 	bl	8008a18 <USBD_CtlError>
        break;
 80088fc:	e01a      	b.n	8008934 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800890a:	2b00      	cmp	r3, #0
 800890c:	d005      	beq.n	800891a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f043 0202 	orr.w	r2, r3, #2
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	330c      	adds	r3, #12
 800891e:	2202      	movs	r2, #2
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa9c 	bl	8008e60 <USBD_CtlSendData>
      break;
 8008928:	e004      	b.n	8008934 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f873 	bl	8008a18 <USBD_CtlError>
      break;
 8008932:	bf00      	nop
  }
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	885b      	ldrh	r3, [r3, #2]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d106      	bne.n	800895c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fac2 	bl	8008ee0 <USBD_CtlSendStatus>
  }
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008974:	3b01      	subs	r3, #1
 8008976:	2b02      	cmp	r3, #2
 8008978:	d80b      	bhi.n	8008992 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	885b      	ldrh	r3, [r3, #2]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d10c      	bne.n	800899c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 faa8 	bl	8008ee0 <USBD_CtlSendStatus>
      }
      break;
 8008990:	e004      	b.n	800899c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f83f 	bl	8008a18 <USBD_CtlError>
      break;
 800899a:	e000      	b.n	800899e <USBD_ClrFeature+0x3a>
      break;
 800899c:	bf00      	nop
  }
}
 800899e:	bf00      	nop
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781a      	ldrb	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	785a      	ldrb	r2, [r3, #1]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	3302      	adds	r3, #2
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	3303      	adds	r3, #3
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	021b      	lsls	r3, r3, #8
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	4413      	add	r3, r2
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	3304      	adds	r3, #4
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	461a      	mov	r2, r3
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	3305      	adds	r3, #5
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	4413      	add	r3, r2
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	3306      	adds	r3, #6
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	3307      	adds	r3, #7
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	021b      	lsls	r3, r3, #8
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	4413      	add	r3, r2
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	80da      	strh	r2, [r3, #6]

}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr

08008a18 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008a22:	2180      	movs	r1, #128	@ 0x80
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fd1f 	bl	8009468 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fd1b 	bl	8009468 <USBD_LL_StallEP>
}
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b086      	sub	sp, #24
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	60f8      	str	r0, [r7, #12]
 8008a42:	60b9      	str	r1, [r7, #8]
 8008a44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d032      	beq.n	8008ab6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 f834 	bl	8008abe <USBD_GetLen>
 8008a56:	4603      	mov	r3, r0
 8008a58:	3301      	adds	r3, #1
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	75fa      	strb	r2, [r7, #23]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	4413      	add	r3, r2
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	7812      	ldrb	r2, [r2, #0]
 8008a74:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	75fa      	strb	r2, [r7, #23]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4413      	add	r3, r2
 8008a82:	2203      	movs	r2, #3
 8008a84:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a86:	e012      	b.n	8008aae <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	60fa      	str	r2, [r7, #12]
 8008a8e:	7dfa      	ldrb	r2, [r7, #23]
 8008a90:	1c51      	adds	r1, r2, #1
 8008a92:	75f9      	strb	r1, [r7, #23]
 8008a94:	4611      	mov	r1, r2
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	440a      	add	r2, r1
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	75fa      	strb	r2, [r7, #23]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	2200      	movs	r2, #0
 8008aac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e8      	bne.n	8008a88 <USBD_GetString+0x4e>
    }
  }
}
 8008ab6:	bf00      	nop
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008aca:	e005      	b.n	8008ad8 <USBD_GetLen+0x1a>
  {
    len++;
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1f5      	bne.n	8008acc <USBD_GetLen+0xe>
  }

  return len;
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr

08008aec <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008af8:	2304      	movs	r3, #4
 8008afa:	2203      	movs	r2, #3
 8008afc:	2181      	movs	r1, #129	@ 0x81
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fc6d 	bl	80093de <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008b0a:	2010      	movs	r0, #16
 8008b0c:	f000 fd7a 	bl	8009604 <USBD_static_malloc>
 8008b10:	4602      	mov	r2, r0
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8008b22:	2302      	movs	r3, #2
 8008b24:	e005      	b.n	8008b32 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008b46:	2181      	movs	r1, #129	@ 0x81
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fc6e 	bl	800942a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d009      	beq.n	8008b72 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 fd59 	bl	800961c <USBD_static_free>
    pdev->pClassData = NULL;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_HID_Setup>:
  * @retval status
  */

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b8c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d045      	beq.n	8008c36 <USBD_HID_Setup+0xba>
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	f040 80d3 	bne.w	8008d56 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	785b      	ldrb	r3, [r3, #1]
 8008bb4:	3b02      	subs	r3, #2
 8008bb6:	2b09      	cmp	r3, #9
 8008bb8:	d835      	bhi.n	8008c26 <USBD_HID_Setup+0xaa>
 8008bba:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc0 <USBD_HID_Setup+0x44>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008c17 	.word	0x08008c17
 8008bc4:	08008bf7 	.word	0x08008bf7
 8008bc8:	08008c27 	.word	0x08008c27
 8008bcc:	08008c27 	.word	0x08008c27
 8008bd0:	08008c27 	.word	0x08008c27
 8008bd4:	08008c27 	.word	0x08008c27
 8008bd8:	08008c27 	.word	0x08008c27
 8008bdc:	08008c27 	.word	0x08008c27
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008be9 	.word	0x08008be9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	885b      	ldrh	r3, [r3, #2]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	461a      	mov	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	601a      	str	r2, [r3, #0]
          break;
 8008bf4:	e01e      	b.n	8008c34 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f92f 	bl	8008e60 <USBD_CtlSendData>
          break;
 8008c02:	e017      	b.n	8008c34 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	885b      	ldrh	r3, [r3, #2]
 8008c08:	0a1b      	lsrs	r3, r3, #8
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	461a      	mov	r2, r3
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	605a      	str	r2, [r3, #4]
          break;
 8008c14:	e00e      	b.n	8008c34 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	3304      	adds	r3, #4
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f91e 	bl	8008e60 <USBD_CtlSendData>
          break;
 8008c24:	e006      	b.n	8008c34 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff fef5 	bl	8008a18 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c2e:	2302      	movs	r3, #2
 8008c30:	75fb      	strb	r3, [r7, #23]
          break;
 8008c32:	bf00      	nop
      }
      break;
 8008c34:	e096      	b.n	8008d64 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	2b0b      	cmp	r3, #11
 8008c3c:	f200 8083 	bhi.w	8008d46 <USBD_HID_Setup+0x1ca>
 8008c40:	a201      	add	r2, pc, #4	@ (adr r2, 8008c48 <USBD_HID_Setup+0xcc>)
 8008c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c46:	bf00      	nop
 8008c48:	08008c79 	.word	0x08008c79
 8008c4c:	08008d47 	.word	0x08008d47
 8008c50:	08008d47 	.word	0x08008d47
 8008c54:	08008d47 	.word	0x08008d47
 8008c58:	08008d47 	.word	0x08008d47
 8008c5c:	08008d47 	.word	0x08008d47
 8008c60:	08008ca1 	.word	0x08008ca1
 8008c64:	08008d47 	.word	0x08008d47
 8008c68:	08008d47 	.word	0x08008d47
 8008c6c:	08008d47 	.word	0x08008d47
 8008c70:	08008cf9 	.word	0x08008cf9
 8008c74:	08008d21 	.word	0x08008d21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d107      	bne.n	8008c92 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c82:	f107 030e 	add.w	r3, r7, #14
 8008c86:	2202      	movs	r2, #2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f8e8 	bl	8008e60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c90:	e060      	b.n	8008d54 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff febf 	bl	8008a18 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c9e:	e059      	b.n	8008d54 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	885b      	ldrh	r3, [r3, #2]
 8008ca4:	0a1b      	lsrs	r3, r3, #8
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	2b22      	cmp	r3, #34	@ 0x22
 8008caa:	d108      	bne.n	8008cbe <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	88db      	ldrh	r3, [r3, #6]
 8008cb0:	2b73      	cmp	r3, #115	@ 0x73
 8008cb2:	bf28      	it	cs
 8008cb4:	2373      	movcs	r3, #115	@ 0x73
 8008cb6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8008cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8008d70 <USBD_HID_Setup+0x1f4>)
 8008cba:	61bb      	str	r3, [r7, #24]
 8008cbc:	e015      	b.n	8008cea <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	885b      	ldrh	r3, [r3, #2]
 8008cc2:	0a1b      	lsrs	r3, r3, #8
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2b21      	cmp	r3, #33	@ 0x21
 8008cc8:	d108      	bne.n	8008cdc <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008cca:	4b2a      	ldr	r3, [pc, #168]	@ (8008d74 <USBD_HID_Setup+0x1f8>)
 8008ccc:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	88db      	ldrh	r3, [r3, #6]
 8008cd2:	2b09      	cmp	r3, #9
 8008cd4:	bf28      	it	cs
 8008cd6:	2309      	movcs	r3, #9
 8008cd8:	83fb      	strh	r3, [r7, #30]
 8008cda:	e006      	b.n	8008cea <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff fe9a 	bl	8008a18 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	75fb      	strb	r3, [r7, #23]
            break;
 8008ce8:	e034      	b.n	8008d54 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008cea:	8bfb      	ldrh	r3, [r7, #30]
 8008cec:	461a      	mov	r2, r3
 8008cee:	69b9      	ldr	r1, [r7, #24]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f8b5 	bl	8008e60 <USBD_CtlSendData>
          break;
 8008cf6:	e02d      	b.n	8008d54 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d107      	bne.n	8008d12 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	3308      	adds	r3, #8
 8008d06:	2201      	movs	r2, #1
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f8a8 	bl	8008e60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d10:	e020      	b.n	8008d54 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff fe7f 	bl	8008a18 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d1e:	e019      	b.n	8008d54 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d106      	bne.n	8008d38 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	885b      	ldrh	r3, [r3, #2]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	461a      	mov	r2, r3
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d36:	e00d      	b.n	8008d54 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7ff fe6c 	bl	8008a18 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d40:	2302      	movs	r3, #2
 8008d42:	75fb      	strb	r3, [r7, #23]
          break;
 8008d44:	e006      	b.n	8008d54 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff fe65 	bl	8008a18 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	75fb      	strb	r3, [r7, #23]
          break;
 8008d52:	bf00      	nop
      }
      break;
 8008d54:	e006      	b.n	8008d64 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff fe5d 	bl	8008a18 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	75fb      	strb	r3, [r7, #23]
      break;
 8008d62:	bf00      	nop
  }

  return ret;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3720      	adds	r7, #32
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200000cc 	.word	0x200000cc
 8008d74:	200000b4 	.word	0x200000b4

08008d78 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4613      	mov	r3, r2
 8008d84:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d8c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d10c      	bne.n	8008db2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	7b1b      	ldrb	r3, [r3, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d108      	bne.n	8008db2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2201      	movs	r2, #1
 8008da4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8008da6:	88fb      	ldrh	r3, [r7, #6]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	2181      	movs	r1, #129	@ 0x81
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 fbe3 	bl	8009578 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2222      	movs	r2, #34	@ 0x22
 8008dc8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008dca:	4b03      	ldr	r3, [pc, #12]	@ (8008dd8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000048 	.word	0x20000048

08008ddc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2222      	movs	r2, #34	@ 0x22
 8008de8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8008dea:	4b03      	ldr	r3, [pc, #12]	@ (8008df8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bc80      	pop	{r7}
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	2000006c 	.word	0x2000006c

08008dfc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2222      	movs	r2, #34	@ 0x22
 8008e08:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008e0a:	4b03      	ldr	r3, [pc, #12]	@ (8008e18 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bc80      	pop	{r7}
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20000090 	.word	0x20000090

08008e1c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e2e:	2200      	movs	r2, #0
 8008e30:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bc80      	pop	{r7}
 8008e3c:	4770      	bx	lr
	...

08008e40 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	220a      	movs	r2, #10
 8008e4c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008e4e:	4b03      	ldr	r3, [pc, #12]	@ (8008e5c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	200000c0 	.word	0x200000c0

08008e60 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2202      	movs	r2, #2
 8008e72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008e76:	88fa      	ldrh	r2, [r7, #6]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008e7c:	88fa      	ldrh	r2, [r7, #6]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e82:	88fb      	ldrh	r3, [r7, #6]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	2100      	movs	r1, #0
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 fb75 	bl	8009578 <USBD_LL_Transmit>

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	2100      	movs	r1, #0
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 fb63 	bl	8009578 <USBD_LL_Transmit>

  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eca:	88fb      	ldrh	r3, [r7, #6]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	2100      	movs	r1, #0
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fb74 	bl	80095be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2204      	movs	r2, #4
 8008eec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fb3e 	bl	8009578 <USBD_LL_Transmit>

  return USBD_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2205      	movs	r2, #5
 8008f12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f16:	2300      	movs	r3, #0
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fb4e 	bl	80095be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f30:	2200      	movs	r2, #0
 8008f32:	490e      	ldr	r1, [pc, #56]	@ (8008f6c <MX_USB_DEVICE_Init+0x40>)
 8008f34:	480e      	ldr	r0, [pc, #56]	@ (8008f70 <MX_USB_DEVICE_Init+0x44>)
 8008f36:	f7fe fdc6 	bl	8007ac6 <USBD_Init>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f40:	f7f7 ff29 	bl	8000d96 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008f44:	490b      	ldr	r1, [pc, #44]	@ (8008f74 <MX_USB_DEVICE_Init+0x48>)
 8008f46:	480a      	ldr	r0, [pc, #40]	@ (8008f70 <MX_USB_DEVICE_Init+0x44>)
 8008f48:	f7fe fde8 	bl	8007b1c <USBD_RegisterClass>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f52:	f7f7 ff20 	bl	8000d96 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f56:	4806      	ldr	r0, [pc, #24]	@ (8008f70 <MX_USB_DEVICE_Init+0x44>)
 8008f58:	f7fe fdf9 	bl	8007b4e <USBD_Start>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008f62:	f7f7 ff18 	bl	8000d96 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f66:	bf00      	nop
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000140 	.word	0x20000140
 8008f70:	20000e84 	.word	0x20000e84
 8008f74:	20000010 	.word	0x20000010

08008f78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	6039      	str	r1, [r7, #0]
 8008f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	2212      	movs	r2, #18
 8008f88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f8a:	4b03      	ldr	r3, [pc, #12]	@ (8008f98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	2000015c 	.word	0x2000015c

08008f9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	6039      	str	r1, [r7, #0]
 8008fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2204      	movs	r2, #4
 8008fac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fae:	4b03      	ldr	r3, [pc, #12]	@ (8008fbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	20000170 	.word	0x20000170

08008fc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	6039      	str	r1, [r7, #0]
 8008fca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fcc:	79fb      	ldrb	r3, [r7, #7]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	4907      	ldr	r1, [pc, #28]	@ (8008ff4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fd6:	4808      	ldr	r0, [pc, #32]	@ (8008ff8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fd8:	f7ff fd2f 	bl	8008a3a <USBD_GetString>
 8008fdc:	e004      	b.n	8008fe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	4904      	ldr	r1, [pc, #16]	@ (8008ff4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fe2:	4805      	ldr	r0, [pc, #20]	@ (8008ff8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fe4:	f7ff fd29 	bl	8008a3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe8:	4b02      	ldr	r3, [pc, #8]	@ (8008ff4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20001148 	.word	0x20001148
 8008ff8:	0800992c 	.word	0x0800992c

08008ffc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	6039      	str	r1, [r7, #0]
 8009006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	4904      	ldr	r1, [pc, #16]	@ (800901c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800900c:	4804      	ldr	r0, [pc, #16]	@ (8009020 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800900e:	f7ff fd14 	bl	8008a3a <USBD_GetString>
  return USBD_StrDesc;
 8009012:	4b02      	ldr	r3, [pc, #8]	@ (800901c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20001148 	.word	0x20001148
 8009020:	0800993c 	.word	0x0800993c

08009024 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	6039      	str	r1, [r7, #0]
 800902e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	221a      	movs	r2, #26
 8009034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009036:	f000 f843 	bl	80090c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800903a:	4b02      	ldr	r3, [pc, #8]	@ (8009044 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20000174 	.word	0x20000174

08009048 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	6039      	str	r1, [r7, #0]
 8009052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d105      	bne.n	8009066 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	4907      	ldr	r1, [pc, #28]	@ (800907c <USBD_FS_ConfigStrDescriptor+0x34>)
 800905e:	4808      	ldr	r0, [pc, #32]	@ (8009080 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009060:	f7ff fceb 	bl	8008a3a <USBD_GetString>
 8009064:	e004      	b.n	8009070 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	4904      	ldr	r1, [pc, #16]	@ (800907c <USBD_FS_ConfigStrDescriptor+0x34>)
 800906a:	4805      	ldr	r0, [pc, #20]	@ (8009080 <USBD_FS_ConfigStrDescriptor+0x38>)
 800906c:	f7ff fce5 	bl	8008a3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009070:	4b02      	ldr	r3, [pc, #8]	@ (800907c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20001148 	.word	0x20001148
 8009080:	08009944 	.word	0x08009944

08009084 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	4603      	mov	r3, r0
 800908c:	6039      	str	r1, [r7, #0]
 800908e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009090:	79fb      	ldrb	r3, [r7, #7]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d105      	bne.n	80090a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	4907      	ldr	r1, [pc, #28]	@ (80090b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800909a:	4808      	ldr	r0, [pc, #32]	@ (80090bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800909c:	f7ff fccd 	bl	8008a3a <USBD_GetString>
 80090a0:	e004      	b.n	80090ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	4904      	ldr	r1, [pc, #16]	@ (80090b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090a6:	4805      	ldr	r0, [pc, #20]	@ (80090bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090a8:	f7ff fcc7 	bl	8008a3a <USBD_GetString>
  }
  return USBD_StrDesc;
 80090ac:	4b02      	ldr	r3, [pc, #8]	@ (80090b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20001148 	.word	0x20001148
 80090bc:	08009950 	.word	0x08009950

080090c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009104 <Get_SerialNum+0x44>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009108 <Get_SerialNum+0x48>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090d2:	4b0e      	ldr	r3, [pc, #56]	@ (800910c <Get_SerialNum+0x4c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d009      	beq.n	80090fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090e6:	2208      	movs	r2, #8
 80090e8:	4909      	ldr	r1, [pc, #36]	@ (8009110 <Get_SerialNum+0x50>)
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 f814 	bl	8009118 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090f0:	2204      	movs	r2, #4
 80090f2:	4908      	ldr	r1, [pc, #32]	@ (8009114 <Get_SerialNum+0x54>)
 80090f4:	68b8      	ldr	r0, [r7, #8]
 80090f6:	f000 f80f 	bl	8009118 <IntToUnicode>
  }
}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	1ffff7e8 	.word	0x1ffff7e8
 8009108:	1ffff7ec 	.word	0x1ffff7ec
 800910c:	1ffff7f0 	.word	0x1ffff7f0
 8009110:	20000176 	.word	0x20000176
 8009114:	20000186 	.word	0x20000186

08009118 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800912a:	2300      	movs	r3, #0
 800912c:	75fb      	strb	r3, [r7, #23]
 800912e:	e027      	b.n	8009180 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	0f1b      	lsrs	r3, r3, #28
 8009134:	2b09      	cmp	r3, #9
 8009136:	d80b      	bhi.n	8009150 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	0f1b      	lsrs	r3, r3, #28
 800913c:	b2da      	uxtb	r2, r3
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	4619      	mov	r1, r3
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	440b      	add	r3, r1
 8009148:	3230      	adds	r2, #48	@ 0x30
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	e00a      	b.n	8009166 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	0f1b      	lsrs	r3, r3, #28
 8009154:	b2da      	uxtb	r2, r3
 8009156:	7dfb      	ldrb	r3, [r7, #23]
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	4619      	mov	r1, r3
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	440b      	add	r3, r1
 8009160:	3237      	adds	r2, #55	@ 0x37
 8009162:	b2d2      	uxtb	r2, r2
 8009164:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	011b      	lsls	r3, r3, #4
 800916a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800916c:	7dfb      	ldrb	r3, [r7, #23]
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	3301      	adds	r3, #1
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	4413      	add	r3, r2
 8009176:	2200      	movs	r2, #0
 8009178:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	3301      	adds	r3, #1
 800917e:	75fb      	strb	r3, [r7, #23]
 8009180:	7dfa      	ldrb	r2, [r7, #23]
 8009182:	79fb      	ldrb	r3, [r7, #7]
 8009184:	429a      	cmp	r2, r3
 8009186:	d3d3      	bcc.n	8009130 <IntToUnicode+0x18>
  }
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	bc80      	pop	{r7}
 8009192:	4770      	bx	lr

08009194 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a0d      	ldr	r2, [pc, #52]	@ (80091d8 <HAL_PCD_MspInit+0x44>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d113      	bne.n	80091ce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80091a6:	4b0d      	ldr	r3, [pc, #52]	@ (80091dc <HAL_PCD_MspInit+0x48>)
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	4a0c      	ldr	r2, [pc, #48]	@ (80091dc <HAL_PCD_MspInit+0x48>)
 80091ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80091b0:	61d3      	str	r3, [r2, #28]
 80091b2:	4b0a      	ldr	r3, [pc, #40]	@ (80091dc <HAL_PCD_MspInit+0x48>)
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80091be:	2200      	movs	r2, #0
 80091c0:	2100      	movs	r1, #0
 80091c2:	2014      	movs	r0, #20
 80091c4:	f7f8 fdd3 	bl	8001d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80091c8:	2014      	movs	r0, #20
 80091ca:	f7f8 fdec 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	40005c00 	.word	0x40005c00
 80091dc:	40021000 	.word	0x40021000

080091e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f7fe fcf1 	bl	8007bde <USBD_LL_SetupStage>
}
 80091fc:	bf00      	nop
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009216:	78fa      	ldrb	r2, [r7, #3]
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	4613      	mov	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	440b      	add	r3, r1
 8009224:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	78fb      	ldrb	r3, [r7, #3]
 800922c:	4619      	mov	r1, r3
 800922e:	f7fe fd23 	bl	8007c78 <USBD_LL_DataOutStage>
}
 8009232:	bf00      	nop
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	460b      	mov	r3, r1
 8009244:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800924c:	78fa      	ldrb	r2, [r7, #3]
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	4613      	mov	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	440b      	add	r3, r1
 800925a:	3324      	adds	r3, #36	@ 0x24
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	78fb      	ldrb	r3, [r7, #3]
 8009260:	4619      	mov	r1, r3
 8009262:	f7fe fd7a 	bl	8007d5a <USBD_LL_DataInStage>
}
 8009266:	bf00      	nop
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fe8a 	bl	8007f96 <USBD_LL_SOF>
}
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009292:	2301      	movs	r3, #1
 8009294:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	799b      	ldrb	r3, [r3, #6]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d001      	beq.n	80092a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800929e:	f7f7 fd7a 	bl	8000d96 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092a8:	7bfa      	ldrb	r2, [r7, #15]
 80092aa:	4611      	mov	r1, r2
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fe3a 	bl	8007f26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fe fdf3 	bl	8007ea4 <USBD_LL_Reset>
}
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe fe34 	bl	8007f44 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7a9b      	ldrb	r3, [r3, #10]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092e4:	4b04      	ldr	r3, [pc, #16]	@ (80092f8 <HAL_PCD_SuspendCallback+0x30>)
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	4a03      	ldr	r2, [pc, #12]	@ (80092f8 <HAL_PCD_SuspendCallback+0x30>)
 80092ea:	f043 0306 	orr.w	r3, r3, #6
 80092ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	e000ed00 	.word	0xe000ed00

080092fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe fe2e 	bl	8007f6c <USBD_LL_Resume>
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009320:	4a1f      	ldr	r2, [pc, #124]	@ (80093a0 <USBD_LL_Init+0x88>)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a1d      	ldr	r2, [pc, #116]	@ (80093a0 <USBD_LL_Init+0x88>)
 800932c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009330:	4b1b      	ldr	r3, [pc, #108]	@ (80093a0 <USBD_LL_Init+0x88>)
 8009332:	4a1c      	ldr	r2, [pc, #112]	@ (80093a4 <USBD_LL_Init+0x8c>)
 8009334:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009336:	4b1a      	ldr	r3, [pc, #104]	@ (80093a0 <USBD_LL_Init+0x88>)
 8009338:	2208      	movs	r2, #8
 800933a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800933c:	4b18      	ldr	r3, [pc, #96]	@ (80093a0 <USBD_LL_Init+0x88>)
 800933e:	2202      	movs	r2, #2
 8009340:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009342:	4b17      	ldr	r3, [pc, #92]	@ (80093a0 <USBD_LL_Init+0x88>)
 8009344:	2200      	movs	r2, #0
 8009346:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009348:	4b15      	ldr	r3, [pc, #84]	@ (80093a0 <USBD_LL_Init+0x88>)
 800934a:	2200      	movs	r2, #0
 800934c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800934e:	4b14      	ldr	r3, [pc, #80]	@ (80093a0 <USBD_LL_Init+0x88>)
 8009350:	2200      	movs	r2, #0
 8009352:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009354:	4812      	ldr	r0, [pc, #72]	@ (80093a0 <USBD_LL_Init+0x88>)
 8009356:	f7f8 ffa8 	bl	80022aa <HAL_PCD_Init>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009360:	f7f7 fd19 	bl	8000d96 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800936a:	2318      	movs	r3, #24
 800936c:	2200      	movs	r2, #0
 800936e:	2100      	movs	r1, #0
 8009370:	f7fa fca2 	bl	8003cb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800937a:	2358      	movs	r3, #88	@ 0x58
 800937c:	2200      	movs	r2, #0
 800937e:	2180      	movs	r1, #128	@ 0x80
 8009380:	f7fa fc9a 	bl	8003cb8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800938a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800938e:	2200      	movs	r2, #0
 8009390:	2181      	movs	r1, #129	@ 0x81
 8009392:	f7fa fc91 	bl	8003cb8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	20001348 	.word	0x20001348
 80093a4:	40005c00 	.word	0x40005c00

080093a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093be:	4618      	mov	r0, r3
 80093c0:	f7f9 f869 	bl	8002496 <HAL_PCD_Start>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 f93a 	bl	8009644 <USBD_Get_USB_Status>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	4608      	mov	r0, r1
 80093e8:	4611      	mov	r1, r2
 80093ea:	461a      	mov	r2, r3
 80093ec:	4603      	mov	r3, r0
 80093ee:	70fb      	strb	r3, [r7, #3]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70bb      	strb	r3, [r7, #2]
 80093f4:	4613      	mov	r3, r2
 80093f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009406:	78bb      	ldrb	r3, [r7, #2]
 8009408:	883a      	ldrh	r2, [r7, #0]
 800940a:	78f9      	ldrb	r1, [r7, #3]
 800940c:	f7f9 f9bd 	bl	800278a <HAL_PCD_EP_Open>
 8009410:	4603      	mov	r3, r0
 8009412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	4618      	mov	r0, r3
 8009418:	f000 f914 	bl	8009644 <USBD_Get_USB_Status>
 800941c:	4603      	mov	r3, r0
 800941e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009420:	7bbb      	ldrb	r3, [r7, #14]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b084      	sub	sp, #16
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	460b      	mov	r3, r1
 8009434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009444:	78fa      	ldrb	r2, [r7, #3]
 8009446:	4611      	mov	r1, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f7f9 f9fb 	bl	8002844 <HAL_PCD_EP_Close>
 800944e:	4603      	mov	r3, r0
 8009450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	4618      	mov	r0, r3
 8009456:	f000 f8f5 	bl	8009644 <USBD_Get_USB_Status>
 800945a:	4603      	mov	r3, r0
 800945c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800945e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009482:	78fa      	ldrb	r2, [r7, #3]
 8009484:	4611      	mov	r1, r2
 8009486:	4618      	mov	r0, r3
 8009488:	f7f9 fa8c 	bl	80029a4 <HAL_PCD_EP_SetStall>
 800948c:	4603      	mov	r3, r0
 800948e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 f8d6 	bl	8009644 <USBD_Get_USB_Status>
 8009498:	4603      	mov	r3, r0
 800949a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800949c:	7bbb      	ldrb	r3, [r7, #14]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	460b      	mov	r3, r1
 80094b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094c0:	78fa      	ldrb	r2, [r7, #3]
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7f9 facd 	bl	8002a64 <HAL_PCD_EP_ClrStall>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 f8b7 	bl	8009644 <USBD_Get_USB_Status>
 80094d6:	4603      	mov	r3, r0
 80094d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094da:	7bbb      	ldrb	r3, [r7, #14]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	da0b      	bge.n	8009518 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009506:	68f9      	ldr	r1, [r7, #12]
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	440b      	add	r3, r1
 8009512:	3312      	adds	r3, #18
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	e00b      	b.n	8009530 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800951e:	68f9      	ldr	r1, [r7, #12]
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	440b      	add	r3, r1
 800952a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800952e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr

0800953a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	460b      	mov	r3, r1
 8009544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f7f9 f8f2 	bl	8002742 <HAL_PCD_SetAddress>
 800955e:	4603      	mov	r3, r0
 8009560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	4618      	mov	r0, r3
 8009566:	f000 f86d 	bl	8009644 <USBD_Get_USB_Status>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	607a      	str	r2, [r7, #4]
 8009582:	461a      	mov	r2, r3
 8009584:	460b      	mov	r3, r1
 8009586:	72fb      	strb	r3, [r7, #11]
 8009588:	4613      	mov	r3, r2
 800958a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800959a:	893b      	ldrh	r3, [r7, #8]
 800959c:	7af9      	ldrb	r1, [r7, #11]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	f7f9 f9c9 	bl	8002936 <HAL_PCD_EP_Transmit>
 80095a4:	4603      	mov	r3, r0
 80095a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 f84a 	bl	8009644 <USBD_Get_USB_Status>
 80095b0:	4603      	mov	r3, r0
 80095b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b086      	sub	sp, #24
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	607a      	str	r2, [r7, #4]
 80095c8:	461a      	mov	r2, r3
 80095ca:	460b      	mov	r3, r1
 80095cc:	72fb      	strb	r3, [r7, #11]
 80095ce:	4613      	mov	r3, r2
 80095d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80095e0:	893b      	ldrh	r3, [r7, #8]
 80095e2:	7af9      	ldrb	r1, [r7, #11]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	f7f9 f975 	bl	80028d4 <HAL_PCD_EP_Receive>
 80095ea:	4603      	mov	r3, r0
 80095ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 f827 	bl	8009644 <USBD_Get_USB_Status>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800960c:	4b02      	ldr	r3, [pc, #8]	@ (8009618 <USBD_static_malloc+0x14>)
}
 800960e:	4618      	mov	r0, r3
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	bc80      	pop	{r7}
 8009616:	4770      	bx	lr
 8009618:	20001620 	.word	0x20001620

0800961c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]

}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	bc80      	pop	{r7}
 800962c:	4770      	bx	lr

0800962e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	460b      	mov	r3, r1
 8009638:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	bc80      	pop	{r7}
 8009642:	4770      	bx	lr

08009644 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	2b03      	cmp	r3, #3
 8009656:	d817      	bhi.n	8009688 <USBD_Get_USB_Status+0x44>
 8009658:	a201      	add	r2, pc, #4	@ (adr r2, 8009660 <USBD_Get_USB_Status+0x1c>)
 800965a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965e:	bf00      	nop
 8009660:	08009671 	.word	0x08009671
 8009664:	08009677 	.word	0x08009677
 8009668:	0800967d 	.word	0x0800967d
 800966c:	08009683 	.word	0x08009683
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
    break;
 8009674:	e00b      	b.n	800968e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009676:	2302      	movs	r3, #2
 8009678:	73fb      	strb	r3, [r7, #15]
    break;
 800967a:	e008      	b.n	800968e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800967c:	2301      	movs	r3, #1
 800967e:	73fb      	strb	r3, [r7, #15]
    break;
 8009680:	e005      	b.n	800968e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009682:	2302      	movs	r3, #2
 8009684:	73fb      	strb	r3, [r7, #15]
    break;
 8009686:	e002      	b.n	800968e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009688:	2302      	movs	r3, #2
 800968a:	73fb      	strb	r3, [r7, #15]
    break;
 800968c:	bf00      	nop
  }
  return usb_status;
 800968e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop

0800969c <memset>:
 800969c:	4603      	mov	r3, r0
 800969e:	4402      	add	r2, r0
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d100      	bne.n	80096a6 <memset+0xa>
 80096a4:	4770      	bx	lr
 80096a6:	f803 1b01 	strb.w	r1, [r3], #1
 80096aa:	e7f9      	b.n	80096a0 <memset+0x4>

080096ac <__errno>:
 80096ac:	4b01      	ldr	r3, [pc, #4]	@ (80096b4 <__errno+0x8>)
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000190 	.word	0x20000190

080096b8 <__libc_init_array>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	2600      	movs	r6, #0
 80096bc:	4d0c      	ldr	r5, [pc, #48]	@ (80096f0 <__libc_init_array+0x38>)
 80096be:	4c0d      	ldr	r4, [pc, #52]	@ (80096f4 <__libc_init_array+0x3c>)
 80096c0:	1b64      	subs	r4, r4, r5
 80096c2:	10a4      	asrs	r4, r4, #2
 80096c4:	42a6      	cmp	r6, r4
 80096c6:	d109      	bne.n	80096dc <__libc_init_array+0x24>
 80096c8:	f000 f914 	bl	80098f4 <_init>
 80096cc:	2600      	movs	r6, #0
 80096ce:	4d0a      	ldr	r5, [pc, #40]	@ (80096f8 <__libc_init_array+0x40>)
 80096d0:	4c0a      	ldr	r4, [pc, #40]	@ (80096fc <__libc_init_array+0x44>)
 80096d2:	1b64      	subs	r4, r4, r5
 80096d4:	10a4      	asrs	r4, r4, #2
 80096d6:	42a6      	cmp	r6, r4
 80096d8:	d105      	bne.n	80096e6 <__libc_init_array+0x2e>
 80096da:	bd70      	pop	{r4, r5, r6, pc}
 80096dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e0:	4798      	blx	r3
 80096e2:	3601      	adds	r6, #1
 80096e4:	e7ee      	b.n	80096c4 <__libc_init_array+0xc>
 80096e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ea:	4798      	blx	r3
 80096ec:	3601      	adds	r6, #1
 80096ee:	e7f2      	b.n	80096d6 <__libc_init_array+0x1e>
 80096f0:	0800998c 	.word	0x0800998c
 80096f4:	0800998c 	.word	0x0800998c
 80096f8:	0800998c 	.word	0x0800998c
 80096fc:	08009990 	.word	0x08009990

08009700 <sqrt>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	4606      	mov	r6, r0
 8009704:	460f      	mov	r7, r1
 8009706:	f000 f81f 	bl	8009748 <__ieee754_sqrt>
 800970a:	4632      	mov	r2, r6
 800970c:	4604      	mov	r4, r0
 800970e:	460d      	mov	r5, r1
 8009710:	463b      	mov	r3, r7
 8009712:	4630      	mov	r0, r6
 8009714:	4639      	mov	r1, r7
 8009716:	f7f7 f96f 	bl	80009f8 <__aeabi_dcmpun>
 800971a:	b990      	cbnz	r0, 8009742 <sqrt+0x42>
 800971c:	2200      	movs	r2, #0
 800971e:	2300      	movs	r3, #0
 8009720:	4630      	mov	r0, r6
 8009722:	4639      	mov	r1, r7
 8009724:	f7f7 f940 	bl	80009a8 <__aeabi_dcmplt>
 8009728:	b158      	cbz	r0, 8009742 <sqrt+0x42>
 800972a:	f7ff ffbf 	bl	80096ac <__errno>
 800972e:	2321      	movs	r3, #33	@ 0x21
 8009730:	2200      	movs	r2, #0
 8009732:	6003      	str	r3, [r0, #0]
 8009734:	2300      	movs	r3, #0
 8009736:	4610      	mov	r0, r2
 8009738:	4619      	mov	r1, r3
 800973a:	f7f6 ffed 	bl	8000718 <__aeabi_ddiv>
 800973e:	4604      	mov	r4, r0
 8009740:	460d      	mov	r5, r1
 8009742:	4620      	mov	r0, r4
 8009744:	4629      	mov	r1, r5
 8009746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009748 <__ieee754_sqrt>:
 8009748:	4a67      	ldr	r2, [pc, #412]	@ (80098e8 <__ieee754_sqrt+0x1a0>)
 800974a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974e:	438a      	bics	r2, r1
 8009750:	4606      	mov	r6, r0
 8009752:	460f      	mov	r7, r1
 8009754:	460b      	mov	r3, r1
 8009756:	4604      	mov	r4, r0
 8009758:	d10e      	bne.n	8009778 <__ieee754_sqrt+0x30>
 800975a:	4602      	mov	r2, r0
 800975c:	f7f6 feb2 	bl	80004c4 <__aeabi_dmul>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4630      	mov	r0, r6
 8009766:	4639      	mov	r1, r7
 8009768:	f7f6 fcf6 	bl	8000158 <__adddf3>
 800976c:	4606      	mov	r6, r0
 800976e:	460f      	mov	r7, r1
 8009770:	4630      	mov	r0, r6
 8009772:	4639      	mov	r1, r7
 8009774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009778:	2900      	cmp	r1, #0
 800977a:	dc0c      	bgt.n	8009796 <__ieee754_sqrt+0x4e>
 800977c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009780:	4302      	orrs	r2, r0
 8009782:	d0f5      	beq.n	8009770 <__ieee754_sqrt+0x28>
 8009784:	b189      	cbz	r1, 80097aa <__ieee754_sqrt+0x62>
 8009786:	4602      	mov	r2, r0
 8009788:	f7f6 fce4 	bl	8000154 <__aeabi_dsub>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	f7f6 ffc2 	bl	8000718 <__aeabi_ddiv>
 8009794:	e7ea      	b.n	800976c <__ieee754_sqrt+0x24>
 8009796:	150a      	asrs	r2, r1, #20
 8009798:	d115      	bne.n	80097c6 <__ieee754_sqrt+0x7e>
 800979a:	2100      	movs	r1, #0
 800979c:	e009      	b.n	80097b2 <__ieee754_sqrt+0x6a>
 800979e:	0ae3      	lsrs	r3, r4, #11
 80097a0:	3a15      	subs	r2, #21
 80097a2:	0564      	lsls	r4, r4, #21
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0fa      	beq.n	800979e <__ieee754_sqrt+0x56>
 80097a8:	e7f7      	b.n	800979a <__ieee754_sqrt+0x52>
 80097aa:	460a      	mov	r2, r1
 80097ac:	e7fa      	b.n	80097a4 <__ieee754_sqrt+0x5c>
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	3101      	adds	r1, #1
 80097b2:	02d8      	lsls	r0, r3, #11
 80097b4:	d5fb      	bpl.n	80097ae <__ieee754_sqrt+0x66>
 80097b6:	1e48      	subs	r0, r1, #1
 80097b8:	1a12      	subs	r2, r2, r0
 80097ba:	f1c1 0020 	rsb	r0, r1, #32
 80097be:	fa24 f000 	lsr.w	r0, r4, r0
 80097c2:	4303      	orrs	r3, r0
 80097c4:	408c      	lsls	r4, r1
 80097c6:	2600      	movs	r6, #0
 80097c8:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80097cc:	2116      	movs	r1, #22
 80097ce:	07d2      	lsls	r2, r2, #31
 80097d0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80097d4:	4632      	mov	r2, r6
 80097d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097de:	bf5c      	itt	pl
 80097e0:	005b      	lslpl	r3, r3, #1
 80097e2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80097e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097ea:	bf58      	it	pl
 80097ec:	0064      	lslpl	r4, r4, #1
 80097ee:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80097f2:	107f      	asrs	r7, r7, #1
 80097f4:	0064      	lsls	r4, r4, #1
 80097f6:	1815      	adds	r5, r2, r0
 80097f8:	429d      	cmp	r5, r3
 80097fa:	bfde      	ittt	le
 80097fc:	182a      	addle	r2, r5, r0
 80097fe:	1b5b      	suble	r3, r3, r5
 8009800:	1836      	addle	r6, r6, r0
 8009802:	0fe5      	lsrs	r5, r4, #31
 8009804:	3901      	subs	r1, #1
 8009806:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800980a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800980e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009812:	d1f0      	bne.n	80097f6 <__ieee754_sqrt+0xae>
 8009814:	460d      	mov	r5, r1
 8009816:	f04f 0a20 	mov.w	sl, #32
 800981a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800981e:	429a      	cmp	r2, r3
 8009820:	eb01 0c00 	add.w	ip, r1, r0
 8009824:	db02      	blt.n	800982c <__ieee754_sqrt+0xe4>
 8009826:	d113      	bne.n	8009850 <__ieee754_sqrt+0x108>
 8009828:	45a4      	cmp	ip, r4
 800982a:	d811      	bhi.n	8009850 <__ieee754_sqrt+0x108>
 800982c:	f1bc 0f00 	cmp.w	ip, #0
 8009830:	eb0c 0100 	add.w	r1, ip, r0
 8009834:	da42      	bge.n	80098bc <__ieee754_sqrt+0x174>
 8009836:	2900      	cmp	r1, #0
 8009838:	db40      	blt.n	80098bc <__ieee754_sqrt+0x174>
 800983a:	f102 0e01 	add.w	lr, r2, #1
 800983e:	1a9b      	subs	r3, r3, r2
 8009840:	4672      	mov	r2, lr
 8009842:	45a4      	cmp	ip, r4
 8009844:	bf88      	it	hi
 8009846:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800984a:	eba4 040c 	sub.w	r4, r4, ip
 800984e:	4405      	add	r5, r0
 8009850:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009854:	f1ba 0a01 	subs.w	sl, sl, #1
 8009858:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800985c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009860:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009864:	d1db      	bne.n	800981e <__ieee754_sqrt+0xd6>
 8009866:	431c      	orrs	r4, r3
 8009868:	d01a      	beq.n	80098a0 <__ieee754_sqrt+0x158>
 800986a:	4c20      	ldr	r4, [pc, #128]	@ (80098ec <__ieee754_sqrt+0x1a4>)
 800986c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80098f0 <__ieee754_sqrt+0x1a8>
 8009870:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009874:	e9db 2300 	ldrd	r2, r3, [fp]
 8009878:	f7f6 fc6c 	bl	8000154 <__aeabi_dsub>
 800987c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	4640      	mov	r0, r8
 8009886:	4649      	mov	r1, r9
 8009888:	f7f7 f898 	bl	80009bc <__aeabi_dcmple>
 800988c:	b140      	cbz	r0, 80098a0 <__ieee754_sqrt+0x158>
 800988e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009892:	e9db 2300 	ldrd	r2, r3, [fp]
 8009896:	f1b5 3fff 	cmp.w	r5, #4294967295
 800989a:	d111      	bne.n	80098c0 <__ieee754_sqrt+0x178>
 800989c:	4655      	mov	r5, sl
 800989e:	3601      	adds	r6, #1
 80098a0:	1072      	asrs	r2, r6, #1
 80098a2:	086b      	lsrs	r3, r5, #1
 80098a4:	07f1      	lsls	r1, r6, #31
 80098a6:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80098aa:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80098ae:	bf48      	it	mi
 80098b0:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80098b4:	4618      	mov	r0, r3
 80098b6:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80098ba:	e757      	b.n	800976c <__ieee754_sqrt+0x24>
 80098bc:	4696      	mov	lr, r2
 80098be:	e7be      	b.n	800983e <__ieee754_sqrt+0xf6>
 80098c0:	f7f6 fc4a 	bl	8000158 <__adddf3>
 80098c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4640      	mov	r0, r8
 80098ce:	4649      	mov	r1, r9
 80098d0:	f7f7 f86a 	bl	80009a8 <__aeabi_dcmplt>
 80098d4:	b120      	cbz	r0, 80098e0 <__ieee754_sqrt+0x198>
 80098d6:	1ca8      	adds	r0, r5, #2
 80098d8:	bf08      	it	eq
 80098da:	3601      	addeq	r6, #1
 80098dc:	3502      	adds	r5, #2
 80098de:	e7df      	b.n	80098a0 <__ieee754_sqrt+0x158>
 80098e0:	1c6b      	adds	r3, r5, #1
 80098e2:	f023 0501 	bic.w	r5, r3, #1
 80098e6:	e7db      	b.n	80098a0 <__ieee754_sqrt+0x158>
 80098e8:	7ff00000 	.word	0x7ff00000
 80098ec:	200001e8 	.word	0x200001e8
 80098f0:	200001e0 	.word	0x200001e0

080098f4 <_init>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	bf00      	nop
 80098f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fa:	bc08      	pop	{r3}
 80098fc:	469e      	mov	lr, r3
 80098fe:	4770      	bx	lr

08009900 <_fini>:
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	bf00      	nop
 8009904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009906:	bc08      	pop	{r3}
 8009908:	469e      	mov	lr, r3
 800990a:	4770      	bx	lr
