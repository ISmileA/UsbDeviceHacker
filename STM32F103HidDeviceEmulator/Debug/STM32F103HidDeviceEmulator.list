
STM32F103HidDeviceEmulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080084dc  080084dc  000094dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008544  08008544  0000a18c  2**0
                  CONTENTS
  4 .ARM          00000000  08008544  08008544  0000a18c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008544  08008544  0000a18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008544  08008544  00009544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008548  08008548  00009548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  0800854c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  2000018c  080086d8  0000a18c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  080086d8  0000a9f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a18c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109b6  00000000  00000000  0000a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003446  00000000  00000000  0001ab6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0001dfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f9  00000000  00000000  0001ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ed1  00000000  00000000  0001f719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015778  00000000  00000000  000395ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087119  00000000  00000000  0004ed62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a0  00000000  00000000  000d5ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d9260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000018c 	.word	0x2000018c
 8000128:	00000000 	.word	0x00000000
 800012c:	080084c4 	.word	0x080084c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000190 	.word	0x20000190
 8000148:	080084c4 	.word	0x080084c4

0800014c <MouseCommandSetup>:
 */

#include "MouseController.h"
extern USBD_HandleTypeDef hUsbDeviceFS;

void MouseCommandSetup(Action *act){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	785b      	ldrb	r3, [r3, #1]
 8000158:	2b03      	cmp	r3, #3
 800015a:	d00c      	beq.n	8000176 <MouseCommandSetup+0x2a>
 800015c:	2b03      	cmp	r3, #3
 800015e:	dc13      	bgt.n	8000188 <MouseCommandSetup+0x3c>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d002      	beq.n	800016a <MouseCommandSetup+0x1e>
 8000164:	2b02      	cmp	r3, #2
 8000166:	d00c      	beq.n	8000182 <MouseCommandSetup+0x36>
			break;
		case(REMOVE_COMMAND):
			MouseRemove();
			break;
	}
}
 8000168:	e00e      	b.n	8000188 <MouseCommandSetup+0x3c>
			MouseSet(act->data);
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	3302      	adds	r3, #2
 800016e:	4618      	mov	r0, r3
 8000170:	f000 f80e 	bl	8000190 <MouseSet>
			break;
 8000174:	e008      	b.n	8000188 <MouseCommandSetup+0x3c>
			MouseClick(act->data[0]);
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	789b      	ldrb	r3, [r3, #2]
 800017a:	4618      	mov	r0, r3
 800017c:	f000 f836 	bl	80001ec <MouseClick>
			break;
 8000180:	e002      	b.n	8000188 <MouseCommandSetup+0x3c>
			MouseRemove();
 8000182:	f000 f855 	bl	8000230 <MouseRemove>
			break;
 8000186:	bf00      	nop
}
 8000188:	bf00      	nop
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}

08000190 <MouseSet>:

void MouseSet(uint8_t *data){
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8000198:	4a12      	ldr	r2, [pc, #72]	@ (80001e4 <MouseSet+0x54>)
 800019a:	f107 0308 	add.w	r3, r7, #8
 800019e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001a2:	6018      	str	r0, [r3, #0]
 80001a4:	3304      	adds	r3, #4
 80001a6:	7019      	strb	r1, [r3, #0]
	for(uint8_t i=0; i<4; i++)
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
 80001ac:	e00c      	b.n	80001c8 <MouseSet+0x38>
		data_out[i+1] = data[i];
 80001ae:	7bfb      	ldrb	r3, [r7, #15]
 80001b0:	687a      	ldr	r2, [r7, #4]
 80001b2:	441a      	add	r2, r3
 80001b4:	7bfb      	ldrb	r3, [r7, #15]
 80001b6:	3301      	adds	r3, #1
 80001b8:	7812      	ldrb	r2, [r2, #0]
 80001ba:	3310      	adds	r3, #16
 80001bc:	443b      	add	r3, r7
 80001be:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i=0; i<4; i++)
 80001c2:	7bfb      	ldrb	r3, [r7, #15]
 80001c4:	3301      	adds	r3, #1
 80001c6:	73fb      	strb	r3, [r7, #15]
 80001c8:	7bfb      	ldrb	r3, [r7, #15]
 80001ca:	2b03      	cmp	r3, #3
 80001cc:	d9ef      	bls.n	80001ae <MouseSet+0x1e>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80001ce:	f107 0308 	add.w	r3, r7, #8
 80001d2:	2205      	movs	r2, #5
 80001d4:	4619      	mov	r1, r3
 80001d6:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <MouseSet+0x58>)
 80001d8:	f007 fcb6 	bl	8007b48 <USBD_HID_SendReport>
}
 80001dc:	bf00      	nop
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	080084dc 	.word	0x080084dc
 80001e8:	20000248 	.word	0x20000248

080001ec <MouseClick>:

void MouseClick(uint8_t buttons){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[5] = {0x01, buttons, 0, 0, 0};
 80001f6:	2301      	movs	r3, #1
 80001f8:	723b      	strb	r3, [r7, #8]
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	727b      	strb	r3, [r7, #9]
 80001fe:	2300      	movs	r3, #0
 8000200:	72bb      	strb	r3, [r7, #10]
 8000202:	2300      	movs	r3, #0
 8000204:	72fb      	strb	r3, [r7, #11]
 8000206:	2300      	movs	r3, #0
 8000208:	733b      	strb	r3, [r7, #12]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 800020a:	f107 0308 	add.w	r3, r7, #8
 800020e:	2205      	movs	r2, #5
 8000210:	4619      	mov	r1, r3
 8000212:	4806      	ldr	r0, [pc, #24]	@ (800022c <MouseClick+0x40>)
 8000214:	f007 fc98 	bl	8007b48 <USBD_HID_SendReport>
	HAL_Delay(30);
 8000218:	201e      	movs	r0, #30
 800021a:	f000 fb95 	bl	8000948 <HAL_Delay>
	MouseRemove();
 800021e:	f000 f807 	bl	8000230 <MouseRemove>
}
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000248 	.word	0x20000248

08000230 <MouseRemove>:

void MouseRemove(){
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8000236:	4a08      	ldr	r2, [pc, #32]	@ (8000258 <MouseRemove+0x28>)
 8000238:	463b      	mov	r3, r7
 800023a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800023e:	6018      	str	r0, [r3, #0]
 8000240:	3304      	adds	r3, #4
 8000242:	7019      	strb	r1, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8000244:	463b      	mov	r3, r7
 8000246:	2205      	movs	r2, #5
 8000248:	4619      	mov	r1, r3
 800024a:	4804      	ldr	r0, [pc, #16]	@ (800025c <MouseRemove+0x2c>)
 800024c:	f007 fc7c 	bl	8007b48 <USBD_HID_SendReport>
}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	080084dc 	.word	0x080084dc
 800025c:	20000248 	.word	0x20000248

08000260 <HAL_UART_RxCpltCallback>:
uint8_t length = 0;
uint8_t parsedData = 0;
uint8_t buffer[32] = {};
uint32_t timer = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	uint8_t byte = rxcall;
 8000268:	4b29      	ldr	r3, [pc, #164]	@ (8000310 <HAL_UART_RxCpltCallback+0xb0>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	73fb      	strb	r3, [r7, #15]
	if((HAL_GetTick()-timer) > 2){
 800026e:	f000 fb61 	bl	8000934 <HAL_GetTick>
 8000272:	4602      	mov	r2, r0
 8000274:	4b27      	ldr	r3, [pc, #156]	@ (8000314 <HAL_UART_RxCpltCallback+0xb4>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	2b02      	cmp	r3, #2
 800027c:	d905      	bls.n	800028a <HAL_UART_RxCpltCallback+0x2a>
		length = 0;
 800027e:	4b26      	ldr	r3, [pc, #152]	@ (8000318 <HAL_UART_RxCpltCallback+0xb8>)
 8000280:	2200      	movs	r2, #0
 8000282:	701a      	strb	r2, [r3, #0]
		parsedData = 0;
 8000284:	4b25      	ldr	r3, [pc, #148]	@ (800031c <HAL_UART_RxCpltCallback+0xbc>)
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
	}
	if(byte == HEADER || parsedData > 0){
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	2bc5      	cmp	r3, #197	@ 0xc5
 800028e:	d003      	beq.n	8000298 <HAL_UART_RxCpltCallback+0x38>
 8000290:	4b22      	ldr	r3, [pc, #136]	@ (800031c <HAL_UART_RxCpltCallback+0xbc>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d02d      	beq.n	80002f4 <HAL_UART_RxCpltCallback+0x94>
		buffer[parsedData] = byte;
 8000298:	4b20      	ldr	r3, [pc, #128]	@ (800031c <HAL_UART_RxCpltCallback+0xbc>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	4619      	mov	r1, r3
 800029e:	4a20      	ldr	r2, [pc, #128]	@ (8000320 <HAL_UART_RxCpltCallback+0xc0>)
 80002a0:	7bfb      	ldrb	r3, [r7, #15]
 80002a2:	5453      	strb	r3, [r2, r1]
		if(parsedData == 3)
 80002a4:	4b1d      	ldr	r3, [pc, #116]	@ (800031c <HAL_UART_RxCpltCallback+0xbc>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d102      	bne.n	80002b2 <HAL_UART_RxCpltCallback+0x52>
			length = byte;
 80002ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000318 <HAL_UART_RxCpltCallback+0xb8>)
 80002ae:	7bfb      	ldrb	r3, [r7, #15]
 80002b0:	7013      	strb	r3, [r2, #0]
		if(parsedData >= length+4){
 80002b2:	4b19      	ldr	r3, [pc, #100]	@ (8000318 <HAL_UART_RxCpltCallback+0xb8>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	3303      	adds	r3, #3
 80002b8:	4a18      	ldr	r2, [pc, #96]	@ (800031c <HAL_UART_RxCpltCallback+0xbc>)
 80002ba:	7812      	ldrb	r2, [r2, #0]
 80002bc:	4293      	cmp	r3, r2
 80002be:	da13      	bge.n	80002e8 <HAL_UART_RxCpltCallback+0x88>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002c4:	4817      	ldr	r0, [pc, #92]	@ (8000324 <HAL_UART_RxCpltCallback+0xc4>)
 80002c6:	f000 febf 	bl	8001048 <HAL_GPIO_TogglePin>
			ParsingData(buffer, parsedData+1);
 80002ca:	4b14      	ldr	r3, [pc, #80]	@ (800031c <HAL_UART_RxCpltCallback+0xbc>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	4619      	mov	r1, r3
 80002d4:	4812      	ldr	r0, [pc, #72]	@ (8000320 <HAL_UART_RxCpltCallback+0xc0>)
 80002d6:	f000 f885 	bl	80003e4 <ParsingData>
			length = 0;
 80002da:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <HAL_UART_RxCpltCallback+0xb8>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
			parsedData = 0;
 80002e0:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <HAL_UART_RxCpltCallback+0xbc>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
 80002e6:	e005      	b.n	80002f4 <HAL_UART_RxCpltCallback+0x94>
		}else
			parsedData++;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <HAL_UART_RxCpltCallback+0xbc>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <HAL_UART_RxCpltCallback+0xbc>)
 80002f2:	701a      	strb	r2, [r3, #0]
	}
	timer = HAL_GetTick();
 80002f4:	f000 fb1e 	bl	8000934 <HAL_GetTick>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4a06      	ldr	r2, [pc, #24]	@ (8000314 <HAL_UART_RxCpltCallback+0xb4>)
 80002fc:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart,&rxcall,1);
 80002fe:	2201      	movs	r2, #1
 8000300:	4903      	ldr	r1, [pc, #12]	@ (8000310 <HAL_UART_RxCpltCallback+0xb0>)
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f003 f9a3 	bl	800364e <HAL_UART_Receive_IT>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	200001d0 	.word	0x200001d0
 8000314:	200001cc 	.word	0x200001cc
 8000318:	200001a8 	.word	0x200001a8
 800031c:	200001a9 	.word	0x200001a9
 8000320:	200001ac 	.word	0x200001ac
 8000324:	40011000 	.word	0x40011000

08000328 <crc8>:
#ifndef INC_CRC8_H_
#define INC_CRC8_H_

#include "main.h"

uint8_t crc8(uint8_t *buffer, uint8_t size) {
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < size; i++) {
 8000338:	2300      	movs	r3, #0
 800033a:	73bb      	strb	r3, [r7, #14]
 800033c:	e027      	b.n	800038e <crc8+0x66>
		uint8_t data = buffer[i];
 800033e:	7bbb      	ldrb	r3, [r7, #14]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8000348:	2308      	movs	r3, #8
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	e019      	b.n	8000382 <crc8+0x5a>
		crc = ((crc ^ data) & 1) ? (crc >> 1) ^ 0x8C : (crc >> 1);
 800034e:	7bfa      	ldrb	r2, [r7, #15]
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	4053      	eors	r3, r2
 8000354:	b2db      	uxtb	r3, r3
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d007      	beq.n	800036e <crc8+0x46>
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	085b      	lsrs	r3, r3, #1
 8000362:	b2db      	uxtb	r3, r3
 8000364:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8000368:	43db      	mvns	r3, r3
 800036a:	b2db      	uxtb	r3, r3
 800036c:	e002      	b.n	8000374 <crc8+0x4c>
 800036e:	7bfb      	ldrb	r3, [r7, #15]
 8000370:	085b      	lsrs	r3, r3, #1
 8000372:	b2db      	uxtb	r3, r3
 8000374:	73fb      	strb	r3, [r7, #15]
		data >>= 1;
 8000376:	7b7b      	ldrb	r3, [r7, #13]
 8000378:	085b      	lsrs	r3, r3, #1
 800037a:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	3b01      	subs	r3, #1
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	2b00      	cmp	r3, #0
 8000386:	dce2      	bgt.n	800034e <crc8+0x26>
	for (uint8_t i = 0; i < size; i++) {
 8000388:	7bbb      	ldrb	r3, [r7, #14]
 800038a:	3301      	adds	r3, #1
 800038c:	73bb      	strb	r3, [r7, #14]
 800038e:	7bba      	ldrb	r2, [r7, #14]
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	429a      	cmp	r2, r3
 8000394:	d3d3      	bcc.n	800033e <crc8+0x16>
		}
	}
	return crc;
 8000396:	7bfb      	ldrb	r3, [r7, #15]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
	...

080003a4 <answer>:
#include "UsartController.h"
#include "crc8.h"

extern UART_HandleTypeDef huart3;

void answer(uint8_t data){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[3] = {HEADER, data, 0};
 80003ae:	23c5      	movs	r3, #197	@ 0xc5
 80003b0:	733b      	strb	r3, [r7, #12]
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	737b      	strb	r3, [r7, #13]
 80003b6:	2300      	movs	r3, #0
 80003b8:	73bb      	strb	r3, [r7, #14]
	data_out[2] = crc8(data_out, 2);
 80003ba:	f107 030c 	add.w	r3, r7, #12
 80003be:	2102      	movs	r1, #2
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ffb1 	bl	8000328 <crc8>
 80003c6:	4603      	mov	r3, r0
 80003c8:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, data_out, 3, 100);
 80003ca:	f107 010c 	add.w	r1, r7, #12
 80003ce:	2364      	movs	r3, #100	@ 0x64
 80003d0:	2203      	movs	r2, #3
 80003d2:	4803      	ldr	r0, [pc, #12]	@ (80003e0 <answer+0x3c>)
 80003d4:	f003 f8b0 	bl	8003538 <HAL_UART_Transmit>
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	200001f8 	.word	0x200001f8

080003e4 <ParsingData>:

#include "UsartRouter.h"
#include "crc8.h"
#include "UsartAnswerModule.h"

void ParsingData(uint8_t *buffer, uint8_t len){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]
	if(buffer[0] == HEADER){
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2bc5      	cmp	r3, #197	@ 0xc5
 80003f6:	d13f      	bne.n	8000478 <ParsingData+0x94>
		if(buffer[3]+5 == len){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3303      	adds	r3, #3
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	1d5a      	adds	r2, r3, #5
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	429a      	cmp	r2, r3
 8000404:	d138      	bne.n	8000478 <ParsingData+0x94>
			if(crc8(buffer, buffer[3]+4) == buffer[buffer[3]+4]){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	3303      	adds	r3, #3
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	3304      	adds	r3, #4
 800040e:	b2db      	uxtb	r3, r3
 8000410:	4619      	mov	r1, r3
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ff88 	bl	8000328 <crc8>
 8000418:	4603      	mov	r3, r0
 800041a:	4619      	mov	r1, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3303      	adds	r3, #3
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	3304      	adds	r3, #4
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	4413      	add	r3, r2
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	4299      	cmp	r1, r3
 800042c:	d121      	bne.n	8000472 <ParsingData+0x8e>
				answer(USART_OK);
 800042e:	2001      	movs	r0, #1
 8000430:	f7ff ffb8 	bl	80003a4 <answer>
				action.command = buffer[2];
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	789a      	ldrb	r2, [r3, #2]
 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <ParsingData+0x9c>)
 800043a:	705a      	strb	r2, [r3, #1]
				for(uint8_t i=0; i<buffer[3]; i++){
 800043c:	2300      	movs	r3, #0
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e00c      	b.n	800045c <ParsingData+0x78>
					action.data[i] = buffer[i+4];
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	3304      	adds	r3, #4
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	441a      	add	r2, r3
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	7811      	ldrb	r1, [r2, #0]
 800044e:	4a0c      	ldr	r2, [pc, #48]	@ (8000480 <ParsingData+0x9c>)
 8000450:	4413      	add	r3, r2
 8000452:	460a      	mov	r2, r1
 8000454:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<buffer[3]; i++){
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	3301      	adds	r3, #1
 800045a:	73fb      	strb	r3, [r7, #15]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3303      	adds	r3, #3
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	7bfa      	ldrb	r2, [r7, #15]
 8000464:	429a      	cmp	r2, r3
 8000466:	d3ec      	bcc.n	8000442 <ParsingData+0x5e>
				}
				action.device = buffer[1];
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	785a      	ldrb	r2, [r3, #1]
 800046c:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <ParsingData+0x9c>)
 800046e:	701a      	strb	r2, [r3, #0]
			}else
				answer(USART_ERROR);
		}
	}
}
 8000470:	e002      	b.n	8000478 <ParsingData+0x94>
				answer(USART_ERROR);
 8000472:	2000      	movs	r0, #0
 8000474:	f7ff ff96 	bl	80003a4 <answer>
}
 8000478:	bf00      	nop
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200001d4 	.word	0x200001d4

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000498:	4b24      	ldr	r3, [pc, #144]	@ (800052c <MX_GPIO_Init+0xa8>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a23      	ldr	r2, [pc, #140]	@ (800052c <MX_GPIO_Init+0xa8>)
 800049e:	f043 0310 	orr.w	r3, r3, #16
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b21      	ldr	r3, [pc, #132]	@ (800052c <MX_GPIO_Init+0xa8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0310 	and.w	r3, r3, #16
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b0:	4b1e      	ldr	r3, [pc, #120]	@ (800052c <MX_GPIO_Init+0xa8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a1d      	ldr	r2, [pc, #116]	@ (800052c <MX_GPIO_Init+0xa8>)
 80004b6:	f043 0320 	orr.w	r3, r3, #32
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b1b      	ldr	r3, [pc, #108]	@ (800052c <MX_GPIO_Init+0xa8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0320 	and.w	r3, r3, #32
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b18      	ldr	r3, [pc, #96]	@ (800052c <MX_GPIO_Init+0xa8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a17      	ldr	r2, [pc, #92]	@ (800052c <MX_GPIO_Init+0xa8>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b15      	ldr	r3, [pc, #84]	@ (800052c <MX_GPIO_Init+0xa8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b12      	ldr	r3, [pc, #72]	@ (800052c <MX_GPIO_Init+0xa8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a11      	ldr	r2, [pc, #68]	@ (800052c <MX_GPIO_Init+0xa8>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <MX_GPIO_Init+0xa8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0308 	and.w	r3, r3, #8
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004fe:	480c      	ldr	r0, [pc, #48]	@ (8000530 <MX_GPIO_Init+0xac>)
 8000500:	f000 fd8a 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2302      	movs	r3, #2
 8000514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	4804      	ldr	r0, [pc, #16]	@ (8000530 <MX_GPIO_Init+0xac>)
 800051e:	f000 fbf7 	bl	8000d10 <HAL_GPIO_Init>

}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000
 8000530:	40011000 	.word	0x40011000

08000534 <main>:
Action action = {0, 0, {}};

void SystemClock_Config(void);

int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	HAL_Init();
 8000538:	f000 f9a4 	bl	8000884 <HAL_Init>
	SystemClock_Config();
 800053c:	f000 f824 	bl	8000588 <SystemClock_Config>
	MX_GPIO_Init();
 8000540:	f7ff ffa0 	bl	8000484 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000544:	f007 fbda 	bl	8007cfc <MX_USB_DEVICE_Init>
	MX_USART3_UART_Init();
 8000548:	f000 f8f8 	bl	800073c <MX_USART3_UART_Init>
	HAL_UART_Receive_IT(&huart3,&rxcall,1);
 800054c:	2201      	movs	r2, #1
 800054e:	490b      	ldr	r1, [pc, #44]	@ (800057c <main+0x48>)
 8000550:	480b      	ldr	r0, [pc, #44]	@ (8000580 <main+0x4c>)
 8000552:	f003 f87c 	bl	800364e <HAL_UART_Receive_IT>

	while (1)
	{
		switch(action.device){
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <main+0x50>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b03      	cmp	r3, #3
 800055c:	d00c      	beq.n	8000578 <main+0x44>
 800055e:	2b03      	cmp	r3, #3
 8000560:	dcf9      	bgt.n	8000556 <main+0x22>
 8000562:	2b01      	cmp	r3, #1
 8000564:	d001      	beq.n	800056a <main+0x36>
 8000566:	2b02      	cmp	r3, #2
			case(MOUSE):
				MouseCommandSetup(&action);
				action.device = 0;
				break;
			case(KEYBOARD):
				break;
 8000568:	e007      	b.n	800057a <main+0x46>
				MouseCommandSetup(&action);
 800056a:	4806      	ldr	r0, [pc, #24]	@ (8000584 <main+0x50>)
 800056c:	f7ff fdee 	bl	800014c <MouseCommandSetup>
				action.device = 0;
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <main+0x50>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
				break;
 8000576:	e000      	b.n	800057a <main+0x46>
			case(ANIMATION):
				break;
 8000578:	bf00      	nop
		switch(action.device){
 800057a:	e7ec      	b.n	8000556 <main+0x22>
 800057c:	200001d0 	.word	0x200001d0
 8000580:	200001f8 	.word	0x200001f8
 8000584:	200001d4 	.word	0x200001d4

08000588 <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	@ 0x50
 800058c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000592:	2228      	movs	r2, #40	@ 0x28
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f007 ff68 	bl	800846c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80005d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fa94 	bl	8002b0c <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x66>
	{
		Error_Handler();
 80005ea:	f000 f828 	bl	800063e <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005fe:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fd00 	bl	8003010 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000616:	f000 f812 	bl	800063e <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800061a:	2310      	movs	r3, #16
 800061c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800061e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000622:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fe80 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000632:	f000 f804 	bl	800063e <Error_Handler>
	}
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	@ 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <Error_Handler>:

void Error_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000642:	b672      	cpsid	i
}
 8000644:	bf00      	nop
  __disable_irq();
  while (1){}
 8000646:	bf00      	nop
 8000648:	e7fd      	b.n	8000646 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a14      	ldr	r2, [pc, #80]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <HAL_MspInit+0x60>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <HAL_MspInit+0x60>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010000 	.word	0x40010000

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <NMI_Handler+0x4>

080006b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <MemManage_Handler+0x4>

080006c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 f906 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800070e:	f000 fdd0 	bl	80012b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000070c 	.word	0x2000070c

0800071c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000720:	4802      	ldr	r0, [pc, #8]	@ (800072c <USART3_IRQHandler+0x10>)
 8000722:	f002 ffb9 	bl	8003698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200001f8 	.word	0x200001f8

08000730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	@ (800078c <MX_USART3_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000774:	f002 fe90 	bl	8003498 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f7ff ff5e 	bl	800063e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200001f8 	.word	0x200001f8
 800078c:	40004800 	.word	0x40004800

08000790 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a20      	ldr	r2, [pc, #128]	@ (800082c <HAL_UART_MspInit+0x9c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d139      	bne.n	8000824 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <HAL_UART_MspInit+0xa0>)
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000830 <HAL_UART_MspInit+0xa0>)
 80007b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007ba:	61d3      	str	r3, [r2, #28]
 80007bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <HAL_UART_MspInit+0xa0>)
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <HAL_UART_MspInit+0xa0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a18      	ldr	r2, [pc, #96]	@ (8000830 <HAL_UART_MspInit+0xa0>)
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <HAL_UART_MspInit+0xa0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0308 	and.w	r3, r3, #8
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4619      	mov	r1, r3
 80007f4:	480f      	ldr	r0, [pc, #60]	@ (8000834 <HAL_UART_MspInit+0xa4>)
 80007f6:	f000 fa8b 	bl	8000d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	4809      	ldr	r0, [pc, #36]	@ (8000834 <HAL_UART_MspInit+0xa4>)
 8000810:	f000 fa7e 	bl	8000d10 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2101      	movs	r1, #1
 8000818:	2027      	movs	r0, #39	@ 0x27
 800081a:	f000 f990 	bl	8000b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800081e:	2027      	movs	r0, #39	@ 0x27
 8000820:	f000 f9a9 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40004800 	.word	0x40004800
 8000830:	40021000 	.word	0x40021000
 8000834:	40010c00 	.word	0x40010c00

08000838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000838:	f7ff ff7a 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480b      	ldr	r0, [pc, #44]	@ (800086c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800083e:	490c      	ldr	r1, [pc, #48]	@ (8000870 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000840:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000854:	4c09      	ldr	r4, [pc, #36]	@ (800087c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000862:	f007 fe0b 	bl	800847c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000866:	f7ff fe65 	bl	8000534 <main>
  bx lr
 800086a:	4770      	bx	lr
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000874:	0800854c 	.word	0x0800854c
  ldr r2, =_sbss
 8000878:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 800087c:	200009f8 	.word	0x200009f8

08000880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_2_IRQHandler>
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_Init+0x28>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_Init+0x28>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f947 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	200f      	movs	r0, #15
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff fed4 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f95f 	bl	8000b92 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f000 f927 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	@ (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <HAL_IncTick+0x1c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <HAL_IncTick+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a03      	ldr	r2, [pc, #12]	@ (8000930 <HAL_IncTick+0x20>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000008 	.word	0x20000008
 8000930:	20000240 	.word	0x20000240

08000934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b02      	ldr	r3, [pc, #8]	@ (8000944 <HAL_GetTick+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000240 	.word	0x20000240

08000948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff fff0 	bl	8000934 <HAL_GetTick>
 8000954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096e:	bf00      	nop
 8000970:	f7ff ffe0 	bl	8000934 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db0b      	blt.n	8000a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	4906      	ldr	r1, [pc, #24]	@ (8000a28 <__NVIC_EnableIRQ+0x34>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	@ (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	@ (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	@ 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	@ 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff90 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff2d 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff42 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff35 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa2 	bl	8000ae4 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b085      	sub	sp, #20
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d008      	beq.n	8000bd4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e020      	b.n	8000c16 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 020e 	bic.w	r2, r2, #14
 8000be2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f022 0201 	bic.w	r2, r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000c02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d005      	beq.n	8000c44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	e051      	b.n	8000ce8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 020e 	bic.w	r2, r2, #14
 8000c52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0201 	bic.w	r2, r2, #1
 8000c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a22      	ldr	r2, [pc, #136]	@ (8000cf4 <HAL_DMA_Abort_IT+0xd4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d029      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0xa2>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <HAL_DMA_Abort_IT+0xd8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d022      	beq.n	8000cbe <HAL_DMA_Abort_IT+0x9e>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000cfc <HAL_DMA_Abort_IT+0xdc>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d01a      	beq.n	8000cb8 <HAL_DMA_Abort_IT+0x98>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1e      	ldr	r2, [pc, #120]	@ (8000d00 <HAL_DMA_Abort_IT+0xe0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d012      	beq.n	8000cb2 <HAL_DMA_Abort_IT+0x92>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1c      	ldr	r2, [pc, #112]	@ (8000d04 <HAL_DMA_Abort_IT+0xe4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d00a      	beq.n	8000cac <HAL_DMA_Abort_IT+0x8c>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000d08 <HAL_DMA_Abort_IT+0xe8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d102      	bne.n	8000ca6 <HAL_DMA_Abort_IT+0x86>
 8000ca0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ca4:	e00e      	b.n	8000cc4 <HAL_DMA_Abort_IT+0xa4>
 8000ca6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000caa:	e00b      	b.n	8000cc4 <HAL_DMA_Abort_IT+0xa4>
 8000cac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cb0:	e008      	b.n	8000cc4 <HAL_DMA_Abort_IT+0xa4>
 8000cb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb6:	e005      	b.n	8000cc4 <HAL_DMA_Abort_IT+0xa4>
 8000cb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cbc:	e002      	b.n	8000cc4 <HAL_DMA_Abort_IT+0xa4>
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	e000      	b.n	8000cc4 <HAL_DMA_Abort_IT+0xa4>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4a11      	ldr	r2, [pc, #68]	@ (8000d0c <HAL_DMA_Abort_IT+0xec>)
 8000cc6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	4798      	blx	r3
    } 
  }
  return status;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020008 	.word	0x40020008
 8000cf8:	4002001c 	.word	0x4002001c
 8000cfc:	40020030 	.word	0x40020030
 8000d00:	40020044 	.word	0x40020044
 8000d04:	40020058 	.word	0x40020058
 8000d08:	4002006c 	.word	0x4002006c
 8000d0c:	40020000 	.word	0x40020000

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b08b      	sub	sp, #44	@ 0x2c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d22:	e169      	b.n	8000ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d24:	2201      	movs	r2, #1
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f040 8158 	bne.w	8000ff2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	4a9a      	ldr	r2, [pc, #616]	@ (8000fb0 <HAL_GPIO_Init+0x2a0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d05e      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
 8000d4c:	4a98      	ldr	r2, [pc, #608]	@ (8000fb0 <HAL_GPIO_Init+0x2a0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d875      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d52:	4a98      	ldr	r2, [pc, #608]	@ (8000fb4 <HAL_GPIO_Init+0x2a4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d058      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
 8000d58:	4a96      	ldr	r2, [pc, #600]	@ (8000fb4 <HAL_GPIO_Init+0x2a4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d86f      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d5e:	4a96      	ldr	r2, [pc, #600]	@ (8000fb8 <HAL_GPIO_Init+0x2a8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d052      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
 8000d64:	4a94      	ldr	r2, [pc, #592]	@ (8000fb8 <HAL_GPIO_Init+0x2a8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d869      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d6a:	4a94      	ldr	r2, [pc, #592]	@ (8000fbc <HAL_GPIO_Init+0x2ac>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d04c      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
 8000d70:	4a92      	ldr	r2, [pc, #584]	@ (8000fbc <HAL_GPIO_Init+0x2ac>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d863      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d76:	4a92      	ldr	r2, [pc, #584]	@ (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d046      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
 8000d7c:	4a90      	ldr	r2, [pc, #576]	@ (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d85d      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d82a      	bhi.n	8000ddc <HAL_GPIO_Init+0xcc>
 8000d86:	2b12      	cmp	r3, #18
 8000d88:	d859      	bhi.n	8000e3e <HAL_GPIO_Init+0x12e>
 8000d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d90 <HAL_GPIO_Init+0x80>)
 8000d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d90:	08000e0b 	.word	0x08000e0b
 8000d94:	08000de5 	.word	0x08000de5
 8000d98:	08000df7 	.word	0x08000df7
 8000d9c:	08000e39 	.word	0x08000e39
 8000da0:	08000e3f 	.word	0x08000e3f
 8000da4:	08000e3f 	.word	0x08000e3f
 8000da8:	08000e3f 	.word	0x08000e3f
 8000dac:	08000e3f 	.word	0x08000e3f
 8000db0:	08000e3f 	.word	0x08000e3f
 8000db4:	08000e3f 	.word	0x08000e3f
 8000db8:	08000e3f 	.word	0x08000e3f
 8000dbc:	08000e3f 	.word	0x08000e3f
 8000dc0:	08000e3f 	.word	0x08000e3f
 8000dc4:	08000e3f 	.word	0x08000e3f
 8000dc8:	08000e3f 	.word	0x08000e3f
 8000dcc:	08000e3f 	.word	0x08000e3f
 8000dd0:	08000e3f 	.word	0x08000e3f
 8000dd4:	08000ded 	.word	0x08000ded
 8000dd8:	08000e01 	.word	0x08000e01
 8000ddc:	4a79      	ldr	r2, [pc, #484]	@ (8000fc4 <HAL_GPIO_Init+0x2b4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d013      	beq.n	8000e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000de2:	e02c      	b.n	8000e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	623b      	str	r3, [r7, #32]
          break;
 8000dea:	e029      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	3304      	adds	r3, #4
 8000df2:	623b      	str	r3, [r7, #32]
          break;
 8000df4:	e024      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	623b      	str	r3, [r7, #32]
          break;
 8000dfe:	e01f      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	330c      	adds	r3, #12
 8000e06:	623b      	str	r3, [r7, #32]
          break;
 8000e08:	e01a      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e12:	2304      	movs	r3, #4
 8000e14:	623b      	str	r3, [r7, #32]
          break;
 8000e16:	e013      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d105      	bne.n	8000e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e20:	2308      	movs	r3, #8
 8000e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	611a      	str	r2, [r3, #16]
          break;
 8000e2a:	e009      	b.n	8000e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	615a      	str	r2, [r3, #20]
          break;
 8000e36:	e003      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
          break;
 8000e3c:	e000      	b.n	8000e40 <HAL_GPIO_Init+0x130>
          break;
 8000e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2bff      	cmp	r3, #255	@ 0xff
 8000e44:	d801      	bhi.n	8000e4a <HAL_GPIO_Init+0x13a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	e001      	b.n	8000e4e <HAL_GPIO_Init+0x13e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2bff      	cmp	r3, #255	@ 0xff
 8000e54:	d802      	bhi.n	8000e5c <HAL_GPIO_Init+0x14c>
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	e002      	b.n	8000e62 <HAL_GPIO_Init+0x152>
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5e:	3b08      	subs	r3, #8
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	210f      	movs	r1, #15
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	401a      	ands	r2, r3
 8000e74:	6a39      	ldr	r1, [r7, #32]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80b1 	beq.w	8000ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e90:	4b4d      	ldr	r3, [pc, #308]	@ (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ea8:	4a48      	ldr	r2, [pc, #288]	@ (8000fcc <HAL_GPIO_Init+0x2bc>)
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a40      	ldr	r2, [pc, #256]	@ (8000fd0 <HAL_GPIO_Init+0x2c0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d013      	beq.n	8000efc <HAL_GPIO_Init+0x1ec>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8000fd4 <HAL_GPIO_Init+0x2c4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d00d      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e8>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a3e      	ldr	r2, [pc, #248]	@ (8000fd8 <HAL_GPIO_Init+0x2c8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d007      	beq.n	8000ef4 <HAL_GPIO_Init+0x1e4>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fdc <HAL_GPIO_Init+0x2cc>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d101      	bne.n	8000ef0 <HAL_GPIO_Init+0x1e0>
 8000eec:	2303      	movs	r3, #3
 8000eee:	e006      	b.n	8000efe <HAL_GPIO_Init+0x1ee>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	e004      	b.n	8000efe <HAL_GPIO_Init+0x1ee>
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	e002      	b.n	8000efe <HAL_GPIO_Init+0x1ee>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e000      	b.n	8000efe <HAL_GPIO_Init+0x1ee>
 8000efc:	2300      	movs	r3, #0
 8000efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f00:	f002 0203 	and.w	r2, r2, #3
 8000f04:	0092      	lsls	r2, r2, #2
 8000f06:	4093      	lsls	r3, r2
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f0e:	492f      	ldr	r1, [pc, #188]	@ (8000fcc <HAL_GPIO_Init+0x2bc>)
 8000f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3302      	adds	r3, #2
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d006      	beq.n	8000f36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f28:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	492c      	ldr	r1, [pc, #176]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	608b      	str	r3, [r1, #8]
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f36:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4928      	ldr	r1, [pc, #160]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f50:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	4922      	ldr	r1, [pc, #136]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60cb      	str	r3, [r1, #12]
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	491e      	ldr	r1, [pc, #120]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4918      	ldr	r1, [pc, #96]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	604b      	str	r3, [r1, #4]
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4914      	ldr	r1, [pc, #80]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d021      	beq.n	8000fe4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	490e      	ldr	r1, [pc, #56]	@ (8000fe0 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
 8000fac:	e021      	b.n	8000ff2 <HAL_GPIO_Init+0x2e2>
 8000fae:	bf00      	nop
 8000fb0:	10320000 	.word	0x10320000
 8000fb4:	10310000 	.word	0x10310000
 8000fb8:	10220000 	.word	0x10220000
 8000fbc:	10210000 	.word	0x10210000
 8000fc0:	10120000 	.word	0x10120000
 8000fc4:	10110000 	.word	0x10110000
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	40010800 	.word	0x40010800
 8000fd4:	40010c00 	.word	0x40010c00
 8000fd8:	40011000 	.word	0x40011000
 8000fdc:	40011400 	.word	0x40011400
 8000fe0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	4909      	ldr	r1, [pc, #36]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	f47f ae8e 	bne.w	8000d24 <HAL_GPIO_Init+0x14>
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	372c      	adds	r7, #44	@ 0x2c
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	041a      	lsls	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	611a      	str	r2, [r3, #16]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4013      	ands	r3, r2
 8001060:	041a      	lsls	r2, r3, #16
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43d9      	mvns	r1, r3
 8001066:	887b      	ldrh	r3, [r7, #2]
 8001068:	400b      	ands	r3, r1
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	611a      	str	r2, [r3, #16]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e0e8      	b.n	800125e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d106      	bne.n	80010a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f006 ff5f 	bl	8007f64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f87a 	bl	80041b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3304      	adds	r3, #4
 80010c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c8:	f003 f850 	bl	800416c <USB_CoreInit>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2202      	movs	r2, #2
 80010d6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e0bf      	b.n	800125e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 f87e 	bl	80041e6 <USB_SetCurrentMode>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2202      	movs	r2, #2
 80010f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0b0      	b.n	800125e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e03e      	b.n	8001180 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	3311      	adds	r3, #17
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	3310      	adds	r3, #16
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	3313      	adds	r3, #19
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3320      	adds	r3, #32
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	3324      	adds	r3, #36	@ 0x24
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	440b      	add	r3, r1
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	3301      	adds	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	429a      	cmp	r2, r3
 8001188:	d3bb      	bcc.n	8001102 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e044      	b.n	800121a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	440b      	add	r3, r1
 80011b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	3301      	adds	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	791b      	ldrb	r3, [r3, #4]
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	429a      	cmp	r2, r3
 8001222:	d3b5      	bcc.n	8001190 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3304      	adds	r3, #4
 800122c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800122e:	f002 ffe6 	bl	80041fe <USB_DevInit>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2202      	movs	r2, #2
 800123c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e00c      	b.n	800125e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f005 fa65 	bl	8006726 <USB_DevDisconnect>

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <HAL_PCD_Start+0x16>
 8001278:	2302      	movs	r3, #2
 800127a:	e016      	b.n	80012aa <HAL_PCD_Start+0x44>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f002 ff7c 	bl	8004186 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800128e:	2101      	movs	r1, #1
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f007 f8b4 	bl	80083fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f005 fa39 	bl	8006712 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b088      	sub	sp, #32
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f005 fa3b 	bl	800673a <USB_ReadInterrupts>
 80012c4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fb03 	bl	80018dc <PCD_EP_ISR_Handler>

    return;
 80012d6:	e119      	b.n	800150c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d013      	beq.n	800130a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012f4:	b292      	uxth	r2, r2
 80012f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f006 fead 	bl	800805a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001300:	2100      	movs	r1, #0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f905 	bl	8001512 <HAL_PCD_SetAddress>

    return;
 8001308:	e100      	b.n	800150c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00c      	beq.n	800132e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001326:	b292      	uxth	r2, r2
 8001328:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800132c:	e0ee      	b.n	800150c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00c      	beq.n	8001352 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001340:	b29a      	uxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800134a:	b292      	uxth	r2, r2
 800134c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001350:	e0dc      	b.n	800150c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d027      	beq.n	80013ac <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0204 	bic.w	r2, r2, #4
 800136e:	b292      	uxth	r2, r2
 8001370:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0208 	bic.w	r2, r2, #8
 8001386:	b292      	uxth	r2, r2
 8001388:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f006 fe9d 	bl	80080cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800139a:	b29a      	uxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80013a4:	b292      	uxth	r2, r2
 80013a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80013aa:	e0af      	b.n	800150c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8083 	beq.w	80014be <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	77fb      	strb	r3, [r7, #31]
 80013bc:	e010      	b.n	80013e0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	7ffb      	ldrb	r3, [r7, #31]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	441a      	add	r2, r3
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	8812      	ldrh	r2, [r2, #0]
 80013ce:	b292      	uxth	r2, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	3320      	adds	r3, #32
 80013d4:	443b      	add	r3, r7
 80013d6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80013da:	7ffb      	ldrb	r3, [r7, #31]
 80013dc:	3301      	adds	r3, #1
 80013de:	77fb      	strb	r3, [r7, #31]
 80013e0:	7ffb      	ldrb	r3, [r7, #31]
 80013e2:	2b07      	cmp	r3, #7
 80013e4:	d9eb      	bls.n	80013be <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0201 	orr.w	r2, r2, #1
 80013f8:	b292      	uxth	r2, r2
 80013fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	b292      	uxth	r2, r2
 8001412:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001416:	bf00      	nop
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001420:	b29b      	uxth	r3, r3
 8001422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f6      	beq.n	8001418 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001432:	b29a      	uxth	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800143c:	b292      	uxth	r2, r2
 800143e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	77fb      	strb	r3, [r7, #31]
 8001446:	e00f      	b.n	8001468 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001448:	7ffb      	ldrb	r3, [r7, #31]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	4611      	mov	r1, r2
 8001450:	7ffa      	ldrb	r2, [r7, #31]
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	440a      	add	r2, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	3320      	adds	r3, #32
 800145a:	443b      	add	r3, r7
 800145c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001460:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001462:	7ffb      	ldrb	r3, [r7, #31]
 8001464:	3301      	adds	r3, #1
 8001466:	77fb      	strb	r3, [r7, #31]
 8001468:	7ffb      	ldrb	r3, [r7, #31]
 800146a:	2b07      	cmp	r3, #7
 800146c:	d9ec      	bls.n	8001448 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001476:	b29a      	uxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0208 	orr.w	r2, r2, #8
 8001480:	b292      	uxth	r2, r2
 8001482:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800148e:	b29a      	uxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001498:	b292      	uxth	r2, r2
 800149a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0204 	orr.w	r2, r2, #4
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f006 fdee 	bl	8008098 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014bc:	e026      	b.n	800150c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00f      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014da:	b292      	uxth	r2, r2
 80014dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f006 fdac 	bl	800803e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014e6:	e011      	b.n	800150c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00c      	beq.n	800150c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001504:	b292      	uxth	r2, r2
 8001506:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800150a:	bf00      	nop
  }
}
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_PCD_SetAddress+0x1a>
 8001528:	2302      	movs	r3, #2
 800152a:	e012      	b.n	8001552 <HAL_PCD_SetAddress+0x40>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	78fa      	ldrb	r2, [r7, #3]
 8001538:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f005 f8d2 	bl	80066ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	4608      	mov	r0, r1
 8001564:	4611      	mov	r1, r2
 8001566:	461a      	mov	r2, r3
 8001568:	4603      	mov	r3, r0
 800156a:	70fb      	strb	r3, [r7, #3]
 800156c:	460b      	mov	r3, r1
 800156e:	803b      	strh	r3, [r7, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800157c:	2b00      	cmp	r3, #0
 800157e:	da0e      	bge.n	800159e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	f003 0207 	and.w	r2, r3, #7
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	3310      	adds	r3, #16
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2201      	movs	r2, #1
 800159a:	705a      	strb	r2, [r3, #1]
 800159c:	e00e      	b.n	80015bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	f003 0207 	and.w	r2, r3, #7
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015c8:	883a      	ldrh	r2, [r7, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	78ba      	ldrb	r2, [r7, #2]
 80015d2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015d4:	78bb      	ldrb	r3, [r7, #2]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d102      	bne.n	80015e0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_PCD_EP_Open+0x94>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e00e      	b.n	800160c <HAL_PCD_EP_Open+0xb2>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68f9      	ldr	r1, [r7, #12]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fe1b 	bl	8004238 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800160a:	7afb      	ldrb	r3, [r7, #11]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001624:	2b00      	cmp	r3, #0
 8001626:	da0e      	bge.n	8001646 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	f003 0207 	and.w	r2, r3, #7
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	3310      	adds	r3, #16
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	705a      	strb	r2, [r3, #1]
 8001644:	e00e      	b.n	8001664 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	f003 0207 	and.w	r2, r3, #7
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	b2da      	uxtb	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_PCD_EP_Close+0x6a>
 800167a:	2302      	movs	r3, #2
 800167c:	e00e      	b.n	800169c <HAL_PCD_EP_Close+0x88>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	4618      	mov	r0, r3
 800168e:	f003 f993 	bl	80049b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	460b      	mov	r3, r1
 80016b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016b4:	7afb      	ldrb	r3, [r7, #11]
 80016b6:	f003 0207 	and.w	r2, r3, #7
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4413      	add	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2200      	movs	r2, #0
 80016e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e4:	7afb      	ldrb	r3, [r7, #11]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6979      	ldr	r1, [r7, #20]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fb4a 	bl	8004d90 <USB_EPStartXfer>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	460b      	mov	r3, r1
 8001714:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001716:	7afb      	ldrb	r3, [r7, #11]
 8001718:	f003 0207 	and.w	r2, r3, #7
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	3310      	adds	r3, #16
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4413      	add	r3, r2
 800172a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2201      	movs	r2, #1
 8001750:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001752:	7afb      	ldrb	r3, [r7, #11]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	b2da      	uxtb	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6979      	ldr	r1, [r7, #20]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fb13 	bl	8004d90 <USB_EPStartXfer>

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	7912      	ldrb	r2, [r2, #4]
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e04c      	b.n	800182c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001796:	2b00      	cmp	r3, #0
 8001798:	da0e      	bge.n	80017b8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	f003 0207 	and.w	r2, r3, #7
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	3310      	adds	r3, #16
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2201      	movs	r2, #1
 80017b4:	705a      	strb	r2, [r3, #1]
 80017b6:	e00c      	b.n	80017d2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017b8:	78fa      	ldrb	r2, [r7, #3]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_PCD_EP_SetStall+0x7e>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e01c      	b.n	800182c <HAL_PCD_EP_SetStall+0xb8>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68f9      	ldr	r1, [r7, #12]
 8001800:	4618      	mov	r0, r3
 8001802:	f004 fe76 	bl	80064f2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	2b00      	cmp	r3, #0
 800180e:	d108      	bne.n	8001822 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800181a:	4619      	mov	r1, r3
 800181c:	4610      	mov	r0, r2
 800181e:	f004 ff9b 	bl	8006758 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	7912      	ldrb	r2, [r2, #4]
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e040      	b.n	80018d4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da0e      	bge.n	8001878 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	f003 0207 	and.w	r2, r3, #7
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	3310      	adds	r3, #16
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	705a      	strb	r2, [r3, #1]
 8001876:	e00e      	b.n	8001896 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	f003 0207 	and.w	r2, r3, #7
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_PCD_EP_ClrStall+0x82>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e00e      	b.n	80018d4 <HAL_PCD_EP_ClrStall+0xa0>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68f9      	ldr	r1, [r7, #12]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fe64 	bl	8006592 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b096      	sub	sp, #88	@ 0x58
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018e4:	e3bb      	b.n	800205e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001900:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001904:	2b00      	cmp	r3, #0
 8001906:	f040 8175 	bne.w	8001bf4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800190a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b00      	cmp	r3, #0
 8001914:	d14e      	bne.n	80019b4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001926:	81fb      	strh	r3, [r7, #14]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001936:	b29b      	uxth	r3, r3
 8001938:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3310      	adds	r3, #16
 800193e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001948:	b29b      	uxth	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4413      	add	r3, r2
 8001954:	3302      	adds	r3, #2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	4413      	add	r3, r2
 800195e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800196c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	441a      	add	r2, r3
 8001976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001978:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800197a:	2100      	movs	r1, #0
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f006 fb44 	bl	800800a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7b5b      	ldrb	r3, [r3, #13]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 8368 	beq.w	800205e <PCD_EP_ISR_Handler+0x782>
 800198e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 8363 	bne.w	800205e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7b5b      	ldrb	r3, [r3, #13]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	735a      	strb	r2, [r3, #13]
 80019b2:	e354      	b.n	800205e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019ba:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d034      	beq.n	8001a3c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019da:	b29b      	uxth	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	3306      	adds	r3, #6
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	f004 fef1 	bl	80067f8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a22:	4013      	ands	r3, r2
 8001a24:	823b      	strh	r3, [r7, #16]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	8a3a      	ldrh	r2, [r7, #16]
 8001a2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a30:	b292      	uxth	r2, r2
 8001a32:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f006 fabb 	bl	8007fb0 <HAL_PCD_SetupStageCallback>
 8001a3a:	e310      	b.n	800205e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a3c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f280 830c 	bge.w	800205e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a52:	4013      	ands	r3, r2
 8001a54:	83fb      	strh	r3, [r7, #30]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	8bfa      	ldrh	r2, [r7, #30]
 8001a5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a60:	b292      	uxth	r2, r2
 8001a62:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	3306      	adds	r3, #6
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d019      	beq.n	8001acc <PCD_EP_ISR_Handler+0x1f0>
 8001a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d015      	beq.n	8001acc <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa6:	6959      	ldr	r1, [r3, #20]
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aaa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	f004 fea1 	bl	80067f8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	441a      	add	r2, r3
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f006 fa84 	bl	8007fd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ad6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 82bd 	bne.w	800205e <PCD_EP_ISR_Handler+0x782>
 8001ae4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ae8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001aec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001af0:	f000 82b5 	beq.w	800205e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4413      	add	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	801a      	strh	r2, [r3, #0]
 8001b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b2a:	d91d      	bls.n	8001b68 <PCD_EP_ISR_Handler+0x28c>
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	095b      	lsrs	r3, r3, #5
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <PCD_EP_ISR_Handler+0x26a>
 8001b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b42:	3b01      	subs	r3, #1
 8001b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	029b      	lsls	r3, r3, #10
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4313      	orrs	r3, r2
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	e026      	b.n	8001bb6 <PCD_EP_ISR_Handler+0x2da>
 8001b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10a      	bne.n	8001b86 <PCD_EP_ISR_Handler+0x2aa>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	801a      	strh	r2, [r3, #0]
 8001b84:	e017      	b.n	8001bb6 <PCD_EP_ISR_Handler+0x2da>
 8001b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	085b      	lsrs	r3, r3, #1
 8001b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <PCD_EP_ISR_Handler+0x2c4>
 8001b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	029b      	lsls	r3, r3, #10
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bc6:	827b      	strh	r3, [r7, #18]
 8001bc8:	8a7b      	ldrh	r3, [r7, #18]
 8001bca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001bce:	827b      	strh	r3, [r7, #18]
 8001bd0:	8a7b      	ldrh	r3, [r7, #18]
 8001bd2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001bd6:	827b      	strh	r3, [r7, #18]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	8a7b      	ldrh	r3, [r7, #18]
 8001bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	8013      	strh	r3, [r2, #0]
 8001bf2:	e234      	b.n	800205e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c08:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f280 80fc 	bge.w	8001e0a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c28:	4013      	ands	r3, r2
 8001c2a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001c40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c44:	b292      	uxth	r2, r2
 8001c46:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c48:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c60:	7b1b      	ldrb	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d125      	bne.n	8001cb2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	3306      	adds	r3, #6
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c8e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001c92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8092 	beq.w	8001dc0 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca2:	6959      	ldr	r1, [r3, #20]
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca6:	88da      	ldrh	r2, [r3, #6]
 8001ca8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cac:	f004 fda4 	bl	80067f8 <USB_ReadPMA>
 8001cb0:	e086      	b.n	8001dc0 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb4:	78db      	ldrb	r3, [r3, #3]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d10a      	bne.n	8001cd0 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001cba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f9d9 	bl	800207a <HAL_PCD_EP_DB_Receive>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001cce:	e077      	b.n	8001dc0 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cea:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	441a      	add	r2, r3
 8001cfc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d024      	beq.n	8001d78 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4413      	add	r3, r2
 8001d42:	3302      	adds	r3, #2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d56:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d02e      	beq.n	8001dc0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d68:	6959      	ldr	r1, [r3, #20]
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6c:	891a      	ldrh	r2, [r3, #8]
 8001d6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d72:	f004 fd41 	bl	80067f8 <USB_ReadPMA>
 8001d76:	e023      	b.n	8001dc0 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3306      	adds	r3, #6
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001da4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d009      	beq.n	8001dc0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db2:	6959      	ldr	r1, [r3, #20]
 8001db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db6:	895a      	ldrh	r2, [r3, #10]
 8001db8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dbc:	f004 fd1c 	bl	80067f8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc2:	69da      	ldr	r2, [r3, #28]
 8001dc4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dc8:	441a      	add	r2, r3
 8001dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dcc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dd6:	441a      	add	r2, r3
 8001dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dda:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <PCD_EP_ISR_Handler+0x514>
 8001de4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d206      	bcs.n	8001dfe <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f006 f8ec 	bl	8007fd4 <HAL_PCD_DataOutStageCallback>
 8001dfc:	e005      	b.n	8001e0a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 ffc3 	bl	8004d90 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8123 	beq.w	800205e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e18:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	3310      	adds	r3, #16
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	441a      	add	r2, r3
 8001e58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6a:	78db      	ldrb	r3, [r3, #3]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f040 80a2 	bne.w	8001fb6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e7a:	7b1b      	ldrb	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8093 	beq.w	8001fa8 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d046      	beq.n	8001f1c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e90:	785b      	ldrb	r3, [r3, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d126      	bne.n	8001ee4 <PCD_EP_ISR_Handler+0x608>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	4413      	add	r3, r2
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	011a      	lsls	r2, r3, #4
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ebc:	623b      	str	r3, [r7, #32]
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	801a      	strh	r2, [r3, #0]
 8001ee2:	e061      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x6cc>
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee6:	785b      	ldrb	r3, [r3, #1]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d15d      	bne.n	8001fa8 <PCD_EP_ISR_Handler+0x6cc>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f00:	4413      	add	r3, r2
 8001f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	011a      	lsls	r2, r3, #4
 8001f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f16:	2200      	movs	r2, #0
 8001f18:	801a      	strh	r2, [r3, #0]
 8001f1a:	e045      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d126      	bne.n	8001f78 <PCD_EP_ISR_Handler+0x69c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f3e:	4413      	add	r3, r2
 8001f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	011a      	lsls	r2, r3, #4
 8001f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f60:	801a      	strh	r2, [r3, #0]
 8001f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	e017      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x6cc>
 8001f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d113      	bne.n	8001fa8 <PCD_EP_ISR_Handler+0x6cc>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f8e:	4413      	add	r3, r2
 8001f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	011a      	lsls	r2, r3, #4
 8001f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f006 f82b 	bl	800800a <HAL_PCD_DataInStageCallback>
 8001fb4:	e053      	b.n	800205e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001fb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d146      	bne.n	8002050 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d907      	bls.n	800200a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002002:	1ad2      	subs	r2, r2, r3
 8002004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002006:	619a      	str	r2, [r3, #24]
 8002008:	e002      	b.n	8002010 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800200a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f005 fff3 	bl	800800a <HAL_PCD_DataInStageCallback>
 8002024:	e01b      	b.n	800205e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800202e:	441a      	add	r2, r3
 8002030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002032:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800203c:	441a      	add	r2, r3
 800203e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002040:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fea1 	bl	8004d90 <USB_EPStartXfer>
 800204e:	e006      	b.n	800205e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002050:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002054:	461a      	mov	r2, r3
 8002056:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f91b 	bl	8002294 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002066:	b29b      	uxth	r3, r3
 8002068:	b21b      	sxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	f6ff ac3b 	blt.w	80018e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3758      	adds	r7, #88	@ 0x58
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b088      	sub	sp, #32
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	4613      	mov	r3, r2
 8002086:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d07e      	beq.n	8002190 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800209a:	b29b      	uxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	3302      	adds	r3, #2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	8b7b      	ldrh	r3, [r7, #26]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d306      	bcc.n	80020d4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	8b7b      	ldrh	r3, [r7, #26]
 80020cc:	1ad2      	subs	r2, r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	619a      	str	r2, [r3, #24]
 80020d2:	e002      	b.n	80020da <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d123      	bne.n	800212a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020fc:	833b      	strh	r3, [r7, #24]
 80020fe:	8b3b      	ldrh	r3, [r7, #24]
 8002100:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002104:	833b      	strh	r3, [r7, #24]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	441a      	add	r2, r3
 8002114:	8b3b      	ldrh	r3, [r7, #24]
 8002116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800211a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800211e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002126:	b29b      	uxth	r3, r3
 8002128:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01f      	beq.n	8002174 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800214a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800214e:	82fb      	strh	r3, [r7, #22]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	441a      	add	r2, r3
 800215e:	8afb      	ldrh	r3, [r7, #22]
 8002160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800216c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002170:	b29b      	uxth	r3, r3
 8002172:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002174:	8b7b      	ldrh	r3, [r7, #26]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8087 	beq.w	800228a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	6959      	ldr	r1, [r3, #20]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	891a      	ldrh	r2, [r3, #8]
 8002188:	8b7b      	ldrh	r3, [r7, #26]
 800218a:	f004 fb35 	bl	80067f8 <USB_ReadPMA>
 800218e:	e07c      	b.n	800228a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002198:	b29b      	uxth	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	3306      	adds	r3, #6
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	8b7b      	ldrh	r3, [r7, #26]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d306      	bcc.n	80021d2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	8b7b      	ldrh	r3, [r7, #26]
 80021ca:	1ad2      	subs	r2, r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	619a      	str	r2, [r3, #24]
 80021d0:	e002      	b.n	80021d8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d123      	bne.n	8002228 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021fa:	83fb      	strh	r3, [r7, #30]
 80021fc:	8bfb      	ldrh	r3, [r7, #30]
 80021fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002202:	83fb      	strh	r3, [r7, #30]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	441a      	add	r2, r3
 8002212:	8bfb      	ldrh	r3, [r7, #30]
 8002214:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002218:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800221c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002224:	b29b      	uxth	r3, r3
 8002226:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d11f      	bne.n	8002272 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800224c:	83bb      	strh	r3, [r7, #28]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	441a      	add	r2, r3
 800225c:	8bbb      	ldrh	r3, [r7, #28]
 800225e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800226a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800226e:	b29b      	uxth	r3, r3
 8002270:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002272:	8b7b      	ldrh	r3, [r7, #26]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	6959      	ldr	r1, [r3, #20]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	895a      	ldrh	r2, [r3, #10]
 8002284:	8b7b      	ldrh	r3, [r7, #26]
 8002286:	f004 fab7 	bl	80067f8 <USB_ReadPMA>
    }
  }

  return count;
 800228a:	8b7b      	ldrh	r3, [r7, #26]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b0a4      	sub	sp, #144	@ 0x90
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 81dd 	beq.w	8002668 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	3302      	adds	r3, #2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d907      	bls.n	80022f6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022ee:	1ad2      	subs	r2, r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	619a      	str	r2, [r3, #24]
 80022f4:	e002      	b.n	80022fc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 80b9 	bne.w	8002478 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	785b      	ldrb	r3, [r3, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d126      	bne.n	800235c <HAL_PCD_EP_DB_Transmit+0xc8>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800231c:	b29b      	uxth	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002322:	4413      	add	r3, r2
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	011a      	lsls	r2, r3, #4
 800232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232e:	4413      	add	r3, r2
 8002330:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002340:	b29a      	uxth	r2, r3
 8002342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002344:	801a      	strh	r2, [r3, #0]
 8002346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002354:	b29a      	uxth	r2, r3
 8002356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002358:	801a      	strh	r2, [r3, #0]
 800235a:	e01a      	b.n	8002392 <HAL_PCD_EP_DB_Transmit+0xfe>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	785b      	ldrb	r3, [r3, #1]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d116      	bne.n	8002392 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	637b      	str	r3, [r7, #52]	@ 0x34
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002378:	4413      	add	r3, r2
 800237a:	637b      	str	r3, [r7, #52]	@ 0x34
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	011a      	lsls	r2, r3, #4
 8002382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002384:	4413      	add	r3, r2
 8002386:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800238a:	633b      	str	r3, [r7, #48]	@ 0x30
 800238c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238e:	2200      	movs	r2, #0
 8002390:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	785b      	ldrb	r3, [r3, #1]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d126      	bne.n	80023ee <HAL_PCD_EP_DB_Transmit+0x15a>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	011a      	lsls	r2, r3, #4
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	801a      	strh	r2, [r3, #0]
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	801a      	strh	r2, [r3, #0]
 80023ec:	e017      	b.n	800241e <HAL_PCD_EP_DB_Transmit+0x18a>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	785b      	ldrb	r3, [r3, #1]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d113      	bne.n	800241e <HAL_PCD_EP_DB_Transmit+0x18a>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023fe:	b29b      	uxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	4413      	add	r3, r2
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	011a      	lsls	r2, r3, #4
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	4413      	add	r3, r2
 8002412:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2200      	movs	r2, #0
 800241c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f005 fdf0 	bl	800800a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 82fc 	beq.w	8002a2e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800244c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002450:	82fb      	strh	r3, [r7, #22]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	441a      	add	r2, r3
 8002460:	8afb      	ldrh	r3, [r7, #22]
 8002462:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002466:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800246a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800246e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002472:	b29b      	uxth	r3, r3
 8002474:	8013      	strh	r3, [r2, #0]
 8002476:	e2da      	b.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d021      	beq.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800249c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	441a      	add	r2, r3
 80024ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80024b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	f040 82ae 	bne.w	8002a2e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024da:	441a      	add	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024e8:	441a      	add	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d30b      	bcc.n	8002512 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6a1a      	ldr	r2, [r3, #32]
 8002506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800250a:	1ad2      	subs	r2, r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	621a      	str	r2, [r3, #32]
 8002510:	e017      	b.n	8002542 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d108      	bne.n	800252c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800251a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800251e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800252a:	e00a      	b.n	8002542 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2200      	movs	r2, #0
 8002540:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d165      	bne.n	8002616 <HAL_PCD_EP_DB_Transmit+0x382>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255e:	4413      	add	r3, r2
 8002560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	011a      	lsls	r2, r3, #4
 8002568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256a:	4413      	add	r3, r2
 800256c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002570:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257c:	b29a      	uxth	r2, r3
 800257e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002586:	2b3e      	cmp	r3, #62	@ 0x3e
 8002588:	d91d      	bls.n	80025c6 <HAL_PCD_EP_DB_Transmit+0x332>
 800258a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <HAL_PCD_EP_DB_Transmit+0x310>
 800259e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025a0:	3b01      	subs	r3, #1
 80025a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	029b      	lsls	r3, r3, #10
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4313      	orrs	r3, r2
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025be:	b29a      	uxth	r2, r3
 80025c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c2:	801a      	strh	r2, [r3, #0]
 80025c4:	e044      	b.n	8002650 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x350>
 80025ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025dc:	b29a      	uxth	r2, r3
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	e035      	b.n	8002650 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_PCD_EP_DB_Transmit+0x36a>
 80025f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025fa:	3301      	adds	r3, #1
 80025fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29a      	uxth	r2, r3
 8002604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002606:	b29b      	uxth	r3, r3
 8002608:	029b      	lsls	r3, r3, #10
 800260a:	b29b      	uxth	r3, r3
 800260c:	4313      	orrs	r3, r2
 800260e:	b29a      	uxth	r2, r3
 8002610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002612:	801a      	strh	r2, [r3, #0]
 8002614:	e01c      	b.n	8002650 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	785b      	ldrb	r3, [r3, #1]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d118      	bne.n	8002650 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	647b      	str	r3, [r7, #68]	@ 0x44
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800262c:	b29b      	uxth	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002632:	4413      	add	r3, r2
 8002634:	647b      	str	r3, [r7, #68]	@ 0x44
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	011a      	lsls	r2, r3, #4
 800263c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800263e:	4413      	add	r3, r2
 8002640:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002644:	643b      	str	r3, [r7, #64]	@ 0x40
 8002646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800264a:	b29a      	uxth	r2, r3
 800264c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800264e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	6959      	ldr	r1, [r3, #20]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	891a      	ldrh	r2, [r3, #8]
 800265c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002660:	b29b      	uxth	r3, r3
 8002662:	f004 f884 	bl	800676e <USB_WritePMA>
 8002666:	e1e2      	b.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002670:	b29b      	uxth	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	3306      	adds	r3, #6
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002690:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800269c:	429a      	cmp	r2, r3
 800269e:	d307      	bcc.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	699a      	ldr	r2, [r3, #24]
 80026a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026a8:	1ad2      	subs	r2, r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	619a      	str	r2, [r3, #24]
 80026ae:	e002      	b.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 80c0 	bne.w	8002840 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d126      	bne.n	8002716 <HAL_PCD_EP_DB_Transmit+0x482>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026dc:	4413      	add	r3, r2
 80026de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	011a      	lsls	r2, r3, #4
 80026e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026e8:	4413      	add	r3, r2
 80026ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800270a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800270e:	b29a      	uxth	r2, r3
 8002710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	e01a      	b.n	800274c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	785b      	ldrb	r3, [r3, #1]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d116      	bne.n	800274c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	667b      	str	r3, [r7, #100]	@ 0x64
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800272c:	b29b      	uxth	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002732:	4413      	add	r3, r2
 8002734:	667b      	str	r3, [r7, #100]	@ 0x64
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	011a      	lsls	r2, r3, #4
 800273c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800273e:	4413      	add	r3, r2
 8002740:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002744:	663b      	str	r3, [r7, #96]	@ 0x60
 8002746:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002748:	2200      	movs	r2, #0
 800274a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	677b      	str	r3, [r7, #116]	@ 0x74
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	785b      	ldrb	r3, [r3, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d12b      	bne.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002768:	b29b      	uxth	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800276e:	4413      	add	r3, r2
 8002770:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	011a      	lsls	r2, r3, #4
 8002778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800277a:	4413      	add	r3, r2
 800277c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002780:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002784:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002790:	b29a      	uxth	r2, r3
 8002792:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002796:	801a      	strh	r2, [r3, #0]
 8002798:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027ae:	801a      	strh	r2, [r3, #0]
 80027b0:	e017      	b.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d113      	bne.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c8:	4413      	add	r3, r2
 80027ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	011a      	lsls	r2, r3, #4
 80027d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027d4:	4413      	add	r3, r2
 80027d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027da:	673b      	str	r3, [r7, #112]	@ 0x70
 80027dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027de:	2200      	movs	r2, #0
 80027e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f005 fc0e 	bl	800800a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 811a 	bne.w	8002a2e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002814:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800282a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800282e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002832:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800283a:	b29b      	uxth	r3, r3
 800283c:	8013      	strh	r3, [r2, #0]
 800283e:	e0f6      	b.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d121      	bne.n	800288e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002864:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800287a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800287e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002882:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800288a:	b29b      	uxth	r3, r3
 800288c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002894:	2b01      	cmp	r3, #1
 8002896:	f040 80ca 	bne.w	8002a2e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028a2:	441a      	add	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028b0:	441a      	add	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	6a1a      	ldr	r2, [r3, #32]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d30b      	bcc.n	80028da <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d2:	1ad2      	subs	r2, r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	621a      	str	r2, [r3, #32]
 80028d8:	e017      	b.n	800290a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d108      	bne.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80028e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028f2:	e00a      	b.n	800290a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	785b      	ldrb	r3, [r3, #1]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d165      	bne.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x750>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002926:	b29b      	uxth	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800292c:	4413      	add	r3, r2
 800292e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	011a      	lsls	r2, r3, #4
 8002936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002938:	4413      	add	r3, r2
 800293a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800293e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294a:	b29a      	uxth	r2, r3
 800294c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800294e:	801a      	strh	r2, [r3, #0]
 8002950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002954:	2b3e      	cmp	r3, #62	@ 0x3e
 8002956:	d91d      	bls.n	8002994 <HAL_PCD_EP_DB_Transmit+0x700>
 8002958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <HAL_PCD_EP_DB_Transmit+0x6de>
 800296c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800296e:	3b01      	subs	r3, #1
 8002970:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29a      	uxth	r2, r3
 8002978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800297a:	b29b      	uxth	r3, r3
 800297c:	029b      	lsls	r3, r3, #10
 800297e:	b29b      	uxth	r3, r3
 8002980:	4313      	orrs	r3, r2
 8002982:	b29b      	uxth	r3, r3
 8002984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298c:	b29a      	uxth	r2, r3
 800298e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	e041      	b.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x784>
 8002994:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800299c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ae:	801a      	strh	r2, [r3, #0]
 80029b0:	e032      	b.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x784>
 80029b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_PCD_EP_DB_Transmit+0x738>
 80029c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029c8:	3301      	adds	r3, #1
 80029ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	029b      	lsls	r3, r3, #10
 80029d8:	b29b      	uxth	r3, r3
 80029da:	4313      	orrs	r3, r2
 80029dc:	b29a      	uxth	r2, r3
 80029de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	e019      	b.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x784>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d115      	bne.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x784>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fa:	4413      	add	r3, r2
 80029fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	011a      	lsls	r2, r3, #4
 8002a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a06:	4413      	add	r3, r2
 8002a08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a16:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	6959      	ldr	r1, [r3, #20]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	895a      	ldrh	r2, [r3, #10]
 8002a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f003 fea0 	bl	800676e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a48:	82bb      	strh	r3, [r7, #20]
 8002a4a:	8abb      	ldrh	r3, [r7, #20]
 8002a4c:	f083 0310 	eor.w	r3, r3, #16
 8002a50:	82bb      	strh	r3, [r7, #20]
 8002a52:	8abb      	ldrh	r3, [r7, #20]
 8002a54:	f083 0320 	eor.w	r3, r3, #32
 8002a58:	82bb      	strh	r3, [r7, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	441a      	add	r2, r3
 8002a68:	8abb      	ldrh	r3, [r7, #20]
 8002a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3790      	adds	r7, #144	@ 0x90
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	817b      	strh	r3, [r7, #10]
 8002a96:	4613      	mov	r3, r2
 8002a98:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	f003 0207 	and.w	r2, r3, #7
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	3310      	adds	r3, #16
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e009      	b.n	8002ad2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002abe:	897a      	ldrh	r2, [r7, #10]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ad2:	893b      	ldrh	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2200      	movs	r2, #0
 8002adc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	80da      	strh	r2, [r3, #6]
 8002ae6:	e00b      	b.n	8002b00 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2201      	movs	r2, #1
 8002aec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e272      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8087 	beq.w	8002c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b2c:	4b92      	ldr	r3, [pc, #584]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d00c      	beq.n	8002b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b38:	4b8f      	ldr	r3, [pc, #572]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d112      	bne.n	8002b6a <HAL_RCC_OscConfig+0x5e>
 8002b44:	4b8c      	ldr	r3, [pc, #560]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b50:	d10b      	bne.n	8002b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b52:	4b89      	ldr	r3, [pc, #548]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d06c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x12c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d168      	bne.n	8002c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e24c      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x76>
 8002b74:	4b80      	ldr	r3, [pc, #512]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a7f      	ldr	r2, [pc, #508]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	e02e      	b.n	8002be0 <HAL_RCC_OscConfig+0xd4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x98>
 8002b8a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a7a      	ldr	r2, [pc, #488]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b78      	ldr	r3, [pc, #480]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a77      	ldr	r2, [pc, #476]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e01d      	b.n	8002be0 <HAL_RCC_OscConfig+0xd4>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xbc>
 8002bae:	4b72      	ldr	r3, [pc, #456]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a71      	ldr	r2, [pc, #452]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b6f      	ldr	r3, [pc, #444]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a6e      	ldr	r2, [pc, #440]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0xd4>
 8002bc8:	4b6b      	ldr	r3, [pc, #428]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b68      	ldr	r3, [pc, #416]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a67      	ldr	r2, [pc, #412]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fd fea4 	bl	8000934 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fd fea0 	bl	8000934 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	@ 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e200      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b5d      	ldr	r3, [pc, #372]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xe4>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fd fe90 	bl	8000934 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fd fe8c 	bl	8000934 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	@ 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1ec      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	4b53      	ldr	r3, [pc, #332]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x10c>
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d063      	beq.n	8002d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c46:	4b4c      	ldr	r3, [pc, #304]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c52:	4b49      	ldr	r3, [pc, #292]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d11c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x18c>
 8002c5e:	4b46      	ldr	r3, [pc, #280]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x176>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e1c0      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b3d      	ldr	r3, [pc, #244]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4939      	ldr	r1, [pc, #228]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	e03a      	b.n	8002d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca0:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fd fe45 	bl	8000934 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fd fe41 	bl	8000934 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1a1      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4927      	ldr	r1, [pc, #156]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]
 8002ce0:	e015      	b.n	8002d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b26      	ldr	r3, [pc, #152]	@ (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fd fe24 	bl	8000934 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fd fe20 	bl	8000934 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e180      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d03a      	beq.n	8002d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d019      	beq.n	8002d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d22:	4b17      	ldr	r3, [pc, #92]	@ (8002d80 <HAL_RCC_OscConfig+0x274>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d28:	f7fd fe04 	bl	8000934 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d30:	f7fd fe00 	bl	8000934 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e160      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f000 face 	bl	80032f0 <RCC_Delay>
 8002d54:	e01c      	b.n	8002d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d56:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <HAL_RCC_OscConfig+0x274>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7fd fdea 	bl	8000934 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d62:	e00f      	b.n	8002d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fd fde6 	bl	8000934 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d908      	bls.n	8002d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e146      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	42420000 	.word	0x42420000
 8002d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	4b92      	ldr	r3, [pc, #584]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e9      	bne.n	8002d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80a6 	beq.w	8002eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da2:	4b8b      	ldr	r3, [pc, #556]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10d      	bne.n	8002dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	4b88      	ldr	r3, [pc, #544]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	4a87      	ldr	r2, [pc, #540]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	61d3      	str	r3, [r2, #28]
 8002dba:	4b85      	ldr	r3, [pc, #532]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b82      	ldr	r3, [pc, #520]	@ (8002fd4 <HAL_RCC_OscConfig+0x4c8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d118      	bne.n	8002e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fd4 <HAL_RCC_OscConfig+0x4c8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7e      	ldr	r2, [pc, #504]	@ (8002fd4 <HAL_RCC_OscConfig+0x4c8>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de2:	f7fd fda7 	bl	8000934 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dea:	f7fd fda3 	bl	8000934 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b64      	cmp	r3, #100	@ 0x64
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e103      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	4b75      	ldr	r3, [pc, #468]	@ (8002fd4 <HAL_RCC_OscConfig+0x4c8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x312>
 8002e10:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e02d      	b.n	8002e7a <HAL_RCC_OscConfig+0x36e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x334>
 8002e26:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a69      	ldr	r2, [pc, #420]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6213      	str	r3, [r2, #32]
 8002e32:	4b67      	ldr	r3, [pc, #412]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4a66      	ldr	r2, [pc, #408]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6213      	str	r3, [r2, #32]
 8002e3e:	e01c      	b.n	8002e7a <HAL_RCC_OscConfig+0x36e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d10c      	bne.n	8002e62 <HAL_RCC_OscConfig+0x356>
 8002e48:	4b61      	ldr	r3, [pc, #388]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4a60      	ldr	r2, [pc, #384]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	f043 0304 	orr.w	r3, r3, #4
 8002e52:	6213      	str	r3, [r2, #32]
 8002e54:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	e00b      	b.n	8002e7a <HAL_RCC_OscConfig+0x36e>
 8002e62:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	6213      	str	r3, [r2, #32]
 8002e6e:	4b58      	ldr	r3, [pc, #352]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4a57      	ldr	r2, [pc, #348]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d015      	beq.n	8002eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fd fd57 	bl	8000934 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fd fd53 	bl	8000934 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0b1      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ee      	beq.n	8002e8a <HAL_RCC_OscConfig+0x37e>
 8002eac:	e014      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fd fd41 	bl	8000934 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fd fd3d 	bl	8000934 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e09b      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	4b40      	ldr	r3, [pc, #256]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ee      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d105      	bne.n	8002eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ede:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4a3b      	ldr	r2, [pc, #236]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8087 	beq.w	8003002 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef4:	4b36      	ldr	r3, [pc, #216]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d061      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d146      	bne.n	8002f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f08:	4b33      	ldr	r3, [pc, #204]	@ (8002fd8 <HAL_RCC_OscConfig+0x4cc>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fd fd11 	bl	8000934 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fd fd0d 	bl	8000934 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e06d      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f28:	4b29      	ldr	r3, [pc, #164]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f3c:	d108      	bne.n	8002f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f3e:	4b24      	ldr	r3, [pc, #144]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	4921      	ldr	r1, [pc, #132]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f50:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a19      	ldr	r1, [r3, #32]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	430b      	orrs	r3, r1
 8002f62:	491b      	ldr	r1, [pc, #108]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f68:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd8 <HAL_RCC_OscConfig+0x4cc>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fd fce1 	bl	8000934 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fd fcdd 	bl	8000934 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e03d      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f88:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x46a>
 8002f94:	e035      	b.n	8003002 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <HAL_RCC_OscConfig+0x4cc>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fd fcca 	bl	8000934 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fd fcc6 	bl	8000934 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e026      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb6:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x498>
 8002fc2:	e01e      	b.n	8003002 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e019      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <HAL_RCC_OscConfig+0x500>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000

08003010 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0d0      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b6a      	ldr	r3, [pc, #424]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d910      	bls.n	8003054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b67      	ldr	r3, [pc, #412]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 0207 	bic.w	r2, r3, #7
 800303a:	4965      	ldr	r1, [pc, #404]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b63      	ldr	r3, [pc, #396]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0b8      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800306c:	4b59      	ldr	r3, [pc, #356]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a58      	ldr	r2, [pc, #352]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003076:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003084:	4b53      	ldr	r3, [pc, #332]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a52      	ldr	r2, [pc, #328]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800308e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003090:	4b50      	ldr	r3, [pc, #320]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	494d      	ldr	r1, [pc, #308]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d040      	beq.n	8003130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b47      	ldr	r3, [pc, #284]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d115      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e07f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ce:	4b41      	ldr	r3, [pc, #260]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e073      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030de:	4b3d      	ldr	r3, [pc, #244]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06b      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ee:	4b39      	ldr	r3, [pc, #228]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f023 0203 	bic.w	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4936      	ldr	r1, [pc, #216]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003100:	f7fd fc18 	bl	8000934 <HAL_GetTick>
 8003104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	e00a      	b.n	800311e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003108:	f7fd fc14 	bl	8000934 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e053      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 020c 	and.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	429a      	cmp	r2, r3
 800312e:	d1eb      	bne.n	8003108 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003130:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d210      	bcs.n	8003160 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b24      	ldr	r3, [pc, #144]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 0207 	bic.w	r2, r3, #7
 8003146:	4922      	ldr	r1, [pc, #136]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b20      	ldr	r3, [pc, #128]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e032      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316c:	4b19      	ldr	r3, [pc, #100]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4916      	ldr	r1, [pc, #88]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800318a:	4b12      	ldr	r3, [pc, #72]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	490e      	ldr	r1, [pc, #56]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800319e:	f000 f821 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	490a      	ldr	r1, [pc, #40]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b0:	5ccb      	ldrb	r3, [r1, r3]
 80031b2:	fa22 f303 	lsr.w	r3, r2, r3
 80031b6:	4a09      	ldr	r2, [pc, #36]	@ (80031dc <HAL_RCC_ClockConfig+0x1cc>)
 80031b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ba:	4b09      	ldr	r3, [pc, #36]	@ (80031e0 <HAL_RCC_ClockConfig+0x1d0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fb76 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40022000 	.word	0x40022000
 80031d4:	40021000 	.word	0x40021000
 80031d8:	08008518 	.word	0x08008518
 80031dc:	20000000 	.word	0x20000000
 80031e0:	20000004 	.word	0x20000004

080031e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x94>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b04      	cmp	r3, #4
 800320c:	d002      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x30>
 800320e:	2b08      	cmp	r3, #8
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x36>
 8003212:	e027      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003214:	4b19      	ldr	r3, [pc, #100]	@ (800327c <HAL_RCC_GetSysClockFreq+0x98>)
 8003216:	613b      	str	r3, [r7, #16]
      break;
 8003218:	e027      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	0c9b      	lsrs	r3, r3, #18
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4a17      	ldr	r2, [pc, #92]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003232:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x94>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	0c5b      	lsrs	r3, r3, #17
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	4a11      	ldr	r2, [pc, #68]	@ (8003284 <HAL_RCC_GetSysClockFreq+0xa0>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a0d      	ldr	r2, [pc, #52]	@ (800327c <HAL_RCC_GetSysClockFreq+0x98>)
 8003246:	fb03 f202 	mul.w	r2, r3, r2
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e004      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a0c      	ldr	r2, [pc, #48]	@ (8003288 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	613b      	str	r3, [r7, #16]
      break;
 8003262:	e002      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <HAL_RCC_GetSysClockFreq+0x98>)
 8003266:	613b      	str	r3, [r7, #16]
      break;
 8003268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326a:	693b      	ldr	r3, [r7, #16]
}
 800326c:	4618      	mov	r0, r3
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000
 800327c:	007a1200 	.word	0x007a1200
 8003280:	08008530 	.word	0x08008530
 8003284:	08008540 	.word	0x08008540
 8003288:	003d0900 	.word	0x003d0900

0800328c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003290:	4b02      	ldr	r3, [pc, #8]	@ (800329c <HAL_RCC_GetHCLKFreq+0x10>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000000 	.word	0x20000000

080032a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032a4:	f7ff fff2 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	@ (80032c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08008528 	.word	0x08008528

080032c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032cc:	f7ff ffde 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	0adb      	lsrs	r3, r3, #11
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	4903      	ldr	r1, [pc, #12]	@ (80032ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08008528 	.word	0x08008528

080032f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <RCC_Delay+0x34>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003328 <RCC_Delay+0x38>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0a5b      	lsrs	r3, r3, #9
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800330c:	bf00      	nop
  }
  while (Delay --);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	60fa      	str	r2, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f9      	bne.n	800330c <RCC_Delay+0x1c>
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	20000000 	.word	0x20000000
 8003328:	10624dd3 	.word	0x10624dd3

0800332c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d07d      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003348:	2300      	movs	r3, #0
 800334a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334c:	4b4f      	ldr	r3, [pc, #316]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	4b4c      	ldr	r3, [pc, #304]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	4a4b      	ldr	r2, [pc, #300]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003362:	61d3      	str	r3, [r2, #28]
 8003364:	4b49      	ldr	r3, [pc, #292]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003370:	2301      	movs	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b46      	ldr	r3, [pc, #280]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d118      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003380:	4b43      	ldr	r3, [pc, #268]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a42      	ldr	r2, [pc, #264]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338c:	f7fd fad2 	bl	8000934 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003392:	e008      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003394:	f7fd face 	bl	8000934 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	@ 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e06d      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033b2:	4b36      	ldr	r3, [pc, #216]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d02e      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d027      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d0:	4b2e      	ldr	r3, [pc, #184]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033da:	4b2e      	ldr	r3, [pc, #184]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033e6:	4a29      	ldr	r2, [pc, #164]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d014      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fd fa9d 	bl	8000934 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fd fa99 	bl	8000934 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e036      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003414:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ee      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003420:	4b1a      	ldr	r3, [pc, #104]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4917      	ldr	r1, [pc, #92]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	4313      	orrs	r3, r2
 8003430:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b14      	ldr	r3, [pc, #80]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	4a13      	ldr	r2, [pc, #76]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003442:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003450:	4b0e      	ldr	r3, [pc, #56]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	490b      	ldr	r1, [pc, #44]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800346e:	4b07      	ldr	r3, [pc, #28]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4904      	ldr	r1, [pc, #16]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	40007000 	.word	0x40007000
 8003494:	42420440 	.word	0x42420440

08003498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e042      	b.n	8003530 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd f966 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	@ 0x24
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fdb7 	bl	8004050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	@ 0x28
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b20      	cmp	r3, #32
 8003556:	d175      	bne.n	8003644 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_UART_Transmit+0x2c>
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e06e      	b.n	8003646 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2221      	movs	r2, #33	@ 0x21
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003576:	f7fd f9dd 	bl	8000934 <HAL_GetTick>
 800357a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	88fa      	ldrh	r2, [r7, #6]
 8003586:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003590:	d108      	bne.n	80035a4 <HAL_UART_Transmit+0x6c>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d104      	bne.n	80035a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	e003      	b.n	80035ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035ac:	e02e      	b.n	800360c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2200      	movs	r2, #0
 80035b6:	2180      	movs	r1, #128	@ 0x80
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fb1c 	bl	8003bf6 <UART_WaitOnFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e03a      	b.n	8003646 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	3302      	adds	r3, #2
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e007      	b.n	80035fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1cb      	bne.n	80035ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	2140      	movs	r1, #64	@ 0x40
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fae8 	bl	8003bf6 <UART_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e006      	b.n	8003646 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e000      	b.n	8003646 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	4613      	mov	r3, r2
 800365a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b20      	cmp	r3, #32
 8003666:	d112      	bne.n	800368e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_UART_Receive_IT+0x26>
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e00b      	b.n	8003690 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	461a      	mov	r2, r3
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fb0f 	bl	8003ca8 <UART_Start_Receive_IT>
 800368a:	4603      	mov	r3, r0
 800368c:	e000      	b.n	8003690 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b0ba      	sub	sp, #232	@ 0xe8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_UART_IRQHandler+0x66>
 80036ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fbec 	bl	8003ed4 <UART_Receive_IT>
      return;
 80036fc:	e25b      	b.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80de 	beq.w	80038c4 <HAL_UART_IRQHandler+0x22c>
 8003708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003718:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80d1 	beq.w	80038c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_UART_IRQHandler+0xae>
 800372e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_UART_IRQHandler+0xd2>
 8003752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	f043 0202 	orr.w	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_UART_IRQHandler+0xf6>
 8003776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	f043 0204 	orr.w	r2, r3, #4
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800378e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d011      	beq.n	80037be <HAL_UART_IRQHandler+0x126>
 800379a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	f043 0208 	orr.w	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 81f2 	beq.w	8003bac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_UART_IRQHandler+0x14e>
 80037d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fb77 	bl	8003ed4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <HAL_UART_IRQHandler+0x17a>
 800380a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d04f      	beq.n	80038b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa81 	bl	8003d1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d041      	beq.n	80038aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800383c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3314      	adds	r3, #20
 800384e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003852:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800385e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800386a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1d9      	bne.n	8003826 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d013      	beq.n	80038a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a78 <HAL_UART_IRQHandler+0x3e0>)
 8003880:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd f9ca 	bl	8000c20 <HAL_DMA_Abort_IT>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d016      	beq.n	80038c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800389c:	4610      	mov	r0, r2
 800389e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	e00e      	b.n	80038c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f993 	bl	8003bce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a8:	e00a      	b.n	80038c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f98f 	bl	8003bce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	e006      	b.n	80038c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f98b 	bl	8003bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038be:	e175      	b.n	8003bac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	bf00      	nop
    return;
 80038c2:	e173      	b.n	8003bac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	f040 814f 	bne.w	8003b6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8148 	beq.w	8003b6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8141 	beq.w	8003b6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80b6 	beq.w	8003a7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800391c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8145 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800392a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800392e:	429a      	cmp	r2, r3
 8003930:	f080 813e 	bcs.w	8003bb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800393a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b20      	cmp	r3, #32
 8003944:	f000 8088 	beq.w	8003a58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800395e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003962:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003966:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003974:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003978:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003980:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800398c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1d9      	bne.n	8003948 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3314      	adds	r3, #20
 800399a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e1      	bne.n	8003994 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3314      	adds	r3, #20
 80039d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e3      	bne.n	80039d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a28:	f023 0310 	bic.w	r3, r3, #16
 8003a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a3a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a3c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd f8a9 	bl	8000baa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8b6 	bl	8003be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a74:	e09c      	b.n	8003bb0 <HAL_UART_IRQHandler+0x518>
 8003a76:	bf00      	nop
 8003a78:	08003ddf 	.word	0x08003ddf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 808e 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8089 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ac6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ac8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003acc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e3      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3314      	adds	r3, #20
 8003afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003afe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e3      	bne.n	8003ada <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0310 	bic.w	r3, r3, #16
 8003b36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b44:	61fa      	str	r2, [r7, #28]
 8003b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	69b9      	ldr	r1, [r7, #24]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	617b      	str	r3, [r7, #20]
   return(result);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e3      	bne.n	8003b20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f83b 	bl	8003be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b6a:	e023      	b.n	8003bb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d009      	beq.n	8003b8c <HAL_UART_IRQHandler+0x4f4>
 8003b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f93e 	bl	8003e06 <UART_Transmit_IT>
    return;
 8003b8a:	e014      	b.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00e      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
 8003b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f97d 	bl	8003ea4 <UART_EndTransmit_IT>
    return;
 8003baa:	e004      	b.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003bac:	bf00      	nop
 8003bae:	e002      	b.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bb0:	bf00      	nop
 8003bb2:	e000      	b.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bb4:	bf00      	nop
  }
}
 8003bb6:	37e8      	adds	r7, #232	@ 0xe8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	603b      	str	r3, [r7, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c06:	e03b      	b.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d037      	beq.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c10:	f7fc fe90 	bl	8000934 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d302      	bcc.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e03a      	b.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d023      	beq.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b80      	cmp	r3, #128	@ 0x80
 8003c3c:	d020      	beq.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b40      	cmp	r3, #64	@ 0x40
 8003c42:	d01d      	beq.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d116      	bne.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f856 	bl	8003d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2208      	movs	r2, #8
 8003c72:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e00f      	b.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d0b4      	beq.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	88fa      	ldrh	r2, [r7, #6]
 8003cc0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	88fa      	ldrh	r2, [r7, #6]
 8003cc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2222      	movs	r2, #34	@ 0x22
 8003cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0220 	orr.w	r2, r2, #32
 8003d0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b095      	sub	sp, #84	@ 0x54
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d42:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e5      	bne.n	8003d22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3314      	adds	r3, #20
 8003d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e5      	bne.n	8003d56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d119      	bne.n	8003dc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f023 0310 	bic.w	r3, r3, #16
 8003da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db2:	61ba      	str	r2, [r7, #24]
 8003db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6979      	ldr	r1, [r7, #20]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dd4:	bf00      	nop
 8003dd6:	3754      	adds	r7, #84	@ 0x54
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr

08003dde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff fee8 	bl	8003bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b21      	cmp	r3, #33	@ 0x21
 8003e18:	d13e      	bne.n	8003e98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e22:	d114      	bne.n	8003e4e <UART_Transmit_IT+0x48>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d110      	bne.n	8003e4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	1c9a      	adds	r2, r3, #2
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	621a      	str	r2, [r3, #32]
 8003e4c:	e008      	b.n	8003e60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	1c59      	adds	r1, r3, #1
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6211      	str	r1, [r2, #32]
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10f      	bne.n	8003e94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e000      	b.n	8003e9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e98:	2302      	movs	r3, #2
  }
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff fe79 	bl	8003bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	@ 0x30
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b22      	cmp	r3, #34	@ 0x22
 8003ee6:	f040 80ae 	bne.w	8004046 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef2:	d117      	bne.n	8003f24 <UART_Receive_IT+0x50>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d113      	bne.n	8003f24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	1c9a      	adds	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f22:	e026      	b.n	8003f72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f36:	d007      	beq.n	8003f48 <UART_Receive_IT+0x74>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <UART_Receive_IT+0x82>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f52:	701a      	strb	r2, [r3, #0]
 8003f54:	e008      	b.n	8003f68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d15d      	bne.n	8004042 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0220 	bic.w	r2, r2, #32
 8003f94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d135      	bne.n	8004038 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f023 0310 	bic.w	r3, r3, #16
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff2:	623a      	str	r2, [r7, #32]
 8003ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	69f9      	ldr	r1, [r7, #28]
 8003ff8:	6a3a      	ldr	r2, [r7, #32]
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e5      	bne.n	8003fd2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b10      	cmp	r3, #16
 8004012:	d10a      	bne.n	800402a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800402e:	4619      	mov	r1, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fdd5 	bl	8003be0 <HAL_UARTEx_RxEventCallback>
 8004036:	e002      	b.n	800403e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fc f911 	bl	8000260 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e002      	b.n	8004048 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e000      	b.n	8004048 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004046:	2302      	movs	r3, #2
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3730      	adds	r7, #48	@ 0x30
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800408a:	f023 030c 	bic.w	r3, r3, #12
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	430b      	orrs	r3, r1
 8004096:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004164 <UART_SetConfig+0x114>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d103      	bne.n	80040c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040b8:	f7ff f906 	bl	80032c8 <HAL_RCC_GetPCLK2Freq>
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	e002      	b.n	80040c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7ff f8ee 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 80040c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009a      	lsls	r2, r3, #2
 80040d0:	441a      	add	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	4a22      	ldr	r2, [pc, #136]	@ (8004168 <UART_SetConfig+0x118>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	0119      	lsls	r1, r3, #4
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	009a      	lsls	r2, r3, #2
 80040f0:	441a      	add	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <UART_SetConfig+0x118>)
 80040fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	2064      	movs	r0, #100	@ 0x64
 8004106:	fb00 f303 	mul.w	r3, r0, r3
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	3332      	adds	r3, #50	@ 0x32
 8004110:	4a15      	ldr	r2, [pc, #84]	@ (8004168 <UART_SetConfig+0x118>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800411c:	4419      	add	r1, r3
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009a      	lsls	r2, r3, #2
 8004128:	441a      	add	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	fbb2 f2f3 	udiv	r2, r2, r3
 8004134:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <UART_SetConfig+0x118>)
 8004136:	fba3 0302 	umull	r0, r3, r3, r2
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2064      	movs	r0, #100	@ 0x64
 800413e:	fb00 f303 	mul.w	r3, r0, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	3332      	adds	r3, #50	@ 0x32
 8004148:	4a07      	ldr	r2, [pc, #28]	@ (8004168 <UART_SetConfig+0x118>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	f003 020f 	and.w	r2, r3, #15
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	440a      	add	r2, r1
 800415a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40013800 	.word	0x40013800
 8004168:	51eb851f 	.word	0x51eb851f

0800416c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	4638      	mov	r0, r7
 8004176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004196:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800419a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	b29a      	uxth	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041ba:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80041be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	4013      	ands	r3, r2
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	4638      	mov	r0, r7
 8004208:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004238:	b480      	push	{r7}
 800423a:	b09d      	sub	sp, #116	@ 0x74
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800425a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	78db      	ldrb	r3, [r3, #3]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d81f      	bhi.n	80042aa <USB_ActivateEndpoint+0x72>
 800426a:	a201      	add	r2, pc, #4	@ (adr r2, 8004270 <USB_ActivateEndpoint+0x38>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004281 	.word	0x08004281
 8004274:	0800429d 	.word	0x0800429d
 8004278:	080042b3 	.word	0x080042b3
 800427c:	0800428f 	.word	0x0800428f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004280:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004284:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004288:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800428c:	e012      	b.n	80042b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800428e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004292:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004296:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800429a:	e00b      	b.n	80042b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800429c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80042a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80042a8:	e004      	b.n	80042b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80042b0:	e000      	b.n	80042b4 <USB_ActivateEndpoint+0x7c>
      break;
 80042b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	441a      	add	r2, r3
 80042be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80042c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800430a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800430e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004316:	b29b      	uxth	r3, r3
 8004318:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	7b1b      	ldrb	r3, [r3, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f040 8178 	bne.w	8004614 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	785b      	ldrb	r3, [r3, #1]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8084 	beq.w	8004436 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004338:	b29b      	uxth	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	4413      	add	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	011a      	lsls	r2, r3, #4
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	88db      	ldrh	r3, [r3, #6]
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	b29b      	uxth	r3, r3
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	827b      	strh	r3, [r7, #18]
 8004370:	8a7b      	ldrh	r3, [r7, #18]
 8004372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01b      	beq.n	80043b2 <USB_ActivateEndpoint+0x17a>
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800438c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004390:	823b      	strh	r3, [r7, #16]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	441a      	add	r2, r3
 800439c:	8a3b      	ldrh	r3, [r7, #16]
 800439e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	78db      	ldrb	r3, [r3, #3]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d020      	beq.n	80043fc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043d0:	81bb      	strh	r3, [r7, #12]
 80043d2:	89bb      	ldrh	r3, [r7, #12]
 80043d4:	f083 0320 	eor.w	r3, r3, #32
 80043d8:	81bb      	strh	r3, [r7, #12]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	441a      	add	r2, r3
 80043e4:	89bb      	ldrh	r3, [r7, #12]
 80043e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	8013      	strh	r3, [r2, #0]
 80043fa:	e2d5      	b.n	80049a8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004412:	81fb      	strh	r3, [r7, #14]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	441a      	add	r2, r3
 800441e:	89fb      	ldrh	r3, [r7, #14]
 8004420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800442c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004430:	b29b      	uxth	r3, r3
 8004432:	8013      	strh	r3, [r2, #0]
 8004434:	e2b8      	b.n	80049a8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	633b      	str	r3, [r7, #48]	@ 0x30
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004440:	b29b      	uxth	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004446:	4413      	add	r3, r2
 8004448:	633b      	str	r3, [r7, #48]	@ 0x30
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	011a      	lsls	r2, r3, #4
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	4413      	add	r3, r2
 8004454:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	88db      	ldrh	r3, [r3, #6]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	b29b      	uxth	r3, r3
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004468:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004474:	b29b      	uxth	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	4413      	add	r3, r2
 800447c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	011a      	lsls	r2, r3, #4
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	4413      	add	r3, r2
 8004488:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004498:	b29a      	uxth	r2, r3
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80044a4:	d91d      	bls.n	80044e2 <USB_ActivateEndpoint+0x2aa>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <USB_ActivateEndpoint+0x288>
 80044ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044bc:	3b01      	subs	r3, #1
 80044be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	029b      	lsls	r3, r3, #10
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	4313      	orrs	r3, r2
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044da:	b29a      	uxth	r2, r3
 80044dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044de:	801a      	strh	r2, [r3, #0]
 80044e0:	e026      	b.n	8004530 <USB_ActivateEndpoint+0x2f8>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <USB_ActivateEndpoint+0x2c8>
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	801a      	strh	r2, [r3, #0]
 80044fe:	e017      	b.n	8004530 <USB_ActivateEndpoint+0x2f8>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <USB_ActivateEndpoint+0x2e2>
 8004514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004516:	3301      	adds	r3, #1
 8004518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29a      	uxth	r2, r3
 8004520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004522:	b29b      	uxth	r3, r3
 8004524:	029b      	lsls	r3, r3, #10
 8004526:	b29b      	uxth	r3, r3
 8004528:	4313      	orrs	r3, r2
 800452a:	b29a      	uxth	r2, r3
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800453e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01b      	beq.n	8004580 <USB_ActivateEndpoint+0x348>
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800455a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455e:	843b      	strh	r3, [r7, #32]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	441a      	add	r2, r3
 800456a:	8c3b      	ldrh	r3, [r7, #32]
 800456c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004570:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800457c:	b29b      	uxth	r3, r3
 800457e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d124      	bne.n	80045d2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800459a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459e:	83bb      	strh	r3, [r7, #28]
 80045a0:	8bbb      	ldrh	r3, [r7, #28]
 80045a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80045a6:	83bb      	strh	r3, [r7, #28]
 80045a8:	8bbb      	ldrh	r3, [r7, #28]
 80045aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045ae:	83bb      	strh	r3, [r7, #28]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	8bbb      	ldrh	r3, [r7, #28]
 80045bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	8013      	strh	r3, [r2, #0]
 80045d0:	e1ea      	b.n	80049a8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e8:	83fb      	strh	r3, [r7, #30]
 80045ea:	8bfb      	ldrh	r3, [r7, #30]
 80045ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045f0:	83fb      	strh	r3, [r7, #30]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	8bfb      	ldrh	r3, [r7, #30]
 80045fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004602:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800460e:	b29b      	uxth	r3, r3
 8004610:	8013      	strh	r3, [r2, #0]
 8004612:	e1c9      	b.n	80049a8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	78db      	ldrb	r3, [r3, #3]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d11e      	bne.n	800465a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800462e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004632:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	441a      	add	r2, r3
 8004640:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800464c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004654:	b29b      	uxth	r3, r3
 8004656:	8013      	strh	r3, [r2, #0]
 8004658:	e01d      	b.n	8004696 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800466c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004670:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	441a      	add	r2, r3
 800467e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004682:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004686:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800468a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800468e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046a6:	4413      	add	r3, r2
 80046a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	011a      	lsls	r2, r3, #4
 80046b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	891b      	ldrh	r3, [r3, #8]
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046c8:	801a      	strh	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046da:	4413      	add	r3, r2
 80046dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	011a      	lsls	r2, r3, #4
 80046e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80046ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	895b      	ldrh	r3, [r3, #10]
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046fc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	785b      	ldrb	r3, [r3, #1]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f040 8093 	bne.w	800482e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004718:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800471c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01b      	beq.n	800475c <USB_ActivateEndpoint+0x524>
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	441a      	add	r2, r3
 8004746:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800474c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004750:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004758:	b29b      	uxth	r3, r3
 800475a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800476a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800476c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01b      	beq.n	80047ac <USB_ActivateEndpoint+0x574>
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	b29b      	uxth	r3, r3
 8004782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	441a      	add	r2, r3
 8004796:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800479c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80047c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80047c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80047ca:	873b      	strh	r3, [r7, #56]	@ 0x38
 80047cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80047ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80047d2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80047e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800480a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800481c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004828:	b29b      	uxth	r3, r3
 800482a:	8013      	strh	r3, [r2, #0]
 800482c:	e0bc      	b.n	80049a8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800483e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01d      	beq.n	8004886 <USB_ActivateEndpoint+0x64e>
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	b29b      	uxth	r3, r3
 8004858:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800485c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004860:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	441a      	add	r2, r3
 800486e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800487a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800487e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004882:	b29b      	uxth	r3, r3
 8004884:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004896:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800489a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01d      	beq.n	80048de <USB_ActivateEndpoint+0x6a6>
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80048ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	78db      	ldrb	r3, [r3, #3]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d024      	beq.n	8004930 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048fc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004900:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004904:	f083 0320 	eor.w	r3, r3, #32
 8004908:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800491a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800491e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]
 800492e:	e01d      	b.n	800496c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004946:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800495c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800497e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004982:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	441a      	add	r2, r3
 8004990:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800499c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80049a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3774      	adds	r7, #116	@ 0x74
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop

080049b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b08d      	sub	sp, #52	@ 0x34
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	7b1b      	ldrb	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f040 808e 	bne.w	8004ae8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d044      	beq.n	8004a5e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	81bb      	strh	r3, [r7, #12]
 80049e2:	89bb      	ldrh	r3, [r7, #12]
 80049e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01b      	beq.n	8004a24 <USB_DeactivateEndpoint+0x6c>
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a02:	817b      	strh	r3, [r7, #10]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	897b      	ldrh	r3, [r7, #10]
 8004a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a3a:	813b      	strh	r3, [r7, #8]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	441a      	add	r2, r3
 8004a46:	893b      	ldrh	r3, [r7, #8]
 8004a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	8013      	strh	r3, [r2, #0]
 8004a5c:	e192      	b.n	8004d84 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	827b      	strh	r3, [r7, #18]
 8004a6c:	8a7b      	ldrh	r3, [r7, #18]
 8004a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01b      	beq.n	8004aae <USB_DeactivateEndpoint+0xf6>
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8c:	823b      	strh	r3, [r7, #16]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	441a      	add	r2, r3
 8004a98:	8a3b      	ldrh	r3, [r7, #16]
 8004a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac4:	81fb      	strh	r3, [r7, #14]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	441a      	add	r2, r3
 8004ad0:	89fb      	ldrh	r3, [r7, #14]
 8004ad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	8013      	strh	r3, [r2, #0]
 8004ae6:	e14d      	b.n	8004d84 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	785b      	ldrb	r3, [r3, #1]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 80a5 	bne.w	8004c3c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	843b      	strh	r3, [r7, #32]
 8004b00:	8c3b      	ldrh	r3, [r7, #32]
 8004b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01b      	beq.n	8004b42 <USB_DeactivateEndpoint+0x18a>
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b20:	83fb      	strh	r3, [r7, #30]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	8bfb      	ldrh	r3, [r7, #30]
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	83bb      	strh	r3, [r7, #28]
 8004b50:	8bbb      	ldrh	r3, [r7, #28]
 8004b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01b      	beq.n	8004b92 <USB_DeactivateEndpoint+0x1da>
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b70:	837b      	strh	r3, [r7, #26]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	441a      	add	r2, r3
 8004b7c:	8b7b      	ldrh	r3, [r7, #26]
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba8:	833b      	strh	r3, [r7, #24]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	8b3b      	ldrh	r3, [r7, #24]
 8004bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be0:	82fb      	strh	r3, [r7, #22]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	8afb      	ldrh	r3, [r7, #22]
 8004bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c18:	82bb      	strh	r3, [r7, #20]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	8abb      	ldrh	r3, [r7, #20]
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]
 8004c3a:	e0a3      	b.n	8004d84 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004c4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004c4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <USB_DeactivateEndpoint+0x2d4>
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004c9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01b      	beq.n	8004cdc <USB_DeactivateEndpoint+0x324>
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cba:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d62:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3734      	adds	r7, #52	@ 0x34
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b0c2      	sub	sp, #264	@ 0x108
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d9e:	6018      	str	r0, [r3, #0]
 8004da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	f040 86b7 	bne.w	8005b2a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699a      	ldr	r2, [r3, #24]
 8004dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d908      	bls.n	8004dea <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004de8:	e007      	b.n	8004dfa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	7b1b      	ldrb	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d13a      	bne.n	8004e80 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6959      	ldr	r1, [r3, #20]
 8004e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	88da      	ldrh	r2, [r3, #6]
 8004e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004e2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004e30:	6800      	ldr	r0, [r0, #0]
 8004e32:	f001 fc9c 	bl	800676e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	011a      	lsls	r2, r3, #4
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	f000 be1f 	b.w	8005abe <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	78db      	ldrb	r3, [r3, #3]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	f040 8462 	bne.w	8005756 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6a1a      	ldr	r2, [r3, #32]
 8004e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	f240 83df 	bls.w	800566e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	441a      	add	r2, r3
 8004ef4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f00:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1a      	ldr	r2, [r3, #32]
 8004f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1c:	1ad2      	subs	r2, r2, r3
 8004f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 81c7 	beq.w	80052e0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d177      	bne.n	800505e <USB_EPStartXfer+0x2ce>
 8004f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8e:	4413      	add	r3, r2
 8004f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	011a      	lsls	r2, r3, #4
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fc0:	d921      	bls.n	8005006 <USB_EPStartXfer+0x276>
 8004fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d104      	bne.n	8004fe2 <USB_EPStartXfer+0x252>
 8004fd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	029b      	lsls	r3, r3, #10
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	e050      	b.n	80050a8 <USB_EPStartXfer+0x318>
 8005006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <USB_EPStartXfer+0x294>
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501c:	b29a      	uxth	r2, r3
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	801a      	strh	r2, [r3, #0]
 8005022:	e041      	b.n	80050a8 <USB_EPStartXfer+0x318>
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	085b      	lsrs	r3, r3, #1
 800502a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800502e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <USB_EPStartXfer+0x2b4>
 800503a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800503e:	3301      	adds	r3, #1
 8005040:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29a      	uxth	r2, r3
 800504a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800504e:	b29b      	uxth	r3, r3
 8005050:	029b      	lsls	r3, r3, #10
 8005052:	b29b      	uxth	r3, r3
 8005054:	4313      	orrs	r3, r2
 8005056:	b29a      	uxth	r2, r3
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	801a      	strh	r2, [r3, #0]
 800505c:	e024      	b.n	80050a8 <USB_EPStartXfer+0x318>
 800505e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	785b      	ldrb	r3, [r3, #1]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d11c      	bne.n	80050a8 <USB_EPStartXfer+0x318>
 800506e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005072:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800507c:	b29b      	uxth	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005082:	4413      	add	r3, r2
 8005084:	633b      	str	r3, [r7, #48]	@ 0x30
 8005086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	011a      	lsls	r2, r3, #4
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	4413      	add	r3, r2
 8005098:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800509c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800509e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	895b      	ldrh	r3, [r3, #10]
 80050b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6959      	ldr	r1, [r3, #20]
 80050c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80050ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80050d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80050d6:	6800      	ldr	r0, [r0, #0]
 80050d8:	f001 fb49 	bl	800676e <USB_WritePMA>
            ep->xfer_buff += len;
 80050dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ec:	441a      	add	r2, r3
 80050ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6a1a      	ldr	r2, [r3, #32]
 8005106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d90f      	bls.n	8005136 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005126:	1ad2      	subs	r2, r2, r3
 8005128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	621a      	str	r2, [r3, #32]
 8005134:	e00e      	b.n	8005154 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2200      	movs	r2, #0
 8005152:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d177      	bne.n	8005254 <USB_EPStartXfer+0x4c4>
 8005164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005168:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800517e:	b29b      	uxth	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	4413      	add	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	011a      	lsls	r2, r3, #4
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	4413      	add	r3, r2
 800519a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	801a      	strh	r2, [r3, #0]
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80051b6:	d921      	bls.n	80051fc <USB_EPStartXfer+0x46c>
 80051b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <USB_EPStartXfer+0x448>
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d2:	3b01      	subs	r3, #1
 80051d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29a      	uxth	r2, r3
 80051de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	029b      	lsls	r3, r3, #10
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	4313      	orrs	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	801a      	strh	r2, [r3, #0]
 80051fa:	e056      	b.n	80052aa <USB_EPStartXfer+0x51a>
 80051fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <USB_EPStartXfer+0x48a>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005212:	b29a      	uxth	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	e047      	b.n	80052aa <USB_EPStartXfer+0x51a>
 800521a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	d004      	beq.n	800523a <USB_EPStartXfer+0x4aa>
 8005230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005234:	3301      	adds	r3, #1
 8005236:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29a      	uxth	r2, r3
 8005240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005244:	b29b      	uxth	r3, r3
 8005246:	029b      	lsls	r3, r3, #10
 8005248:	b29b      	uxth	r3, r3
 800524a:	4313      	orrs	r3, r2
 800524c:	b29a      	uxth	r2, r3
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	e02a      	b.n	80052aa <USB_EPStartXfer+0x51a>
 8005254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d122      	bne.n	80052aa <USB_EPStartXfer+0x51a>
 8005264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	623b      	str	r3, [r7, #32]
 8005270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800527e:	b29b      	uxth	r3, r3
 8005280:	461a      	mov	r2, r3
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	4413      	add	r3, r2
 8005286:	623b      	str	r3, [r7, #32]
 8005288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	4413      	add	r3, r2
 800529a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	891b      	ldrh	r3, [r3, #8]
 80052b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6959      	ldr	r1, [r3, #20]
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052d8:	6800      	ldr	r0, [r0, #0]
 80052da:	f001 fa48 	bl	800676e <USB_WritePMA>
 80052de:	e3ee      	b.n	8005abe <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d177      	bne.n	80053e0 <USB_EPStartXfer+0x650>
 80052f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800530a:	b29b      	uxth	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005310:	4413      	add	r3, r2
 8005312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	011a      	lsls	r2, r3, #4
 8005322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005324:	4413      	add	r3, r2
 8005326:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800532a:	647b      	str	r3, [r7, #68]	@ 0x44
 800532c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005336:	b29a      	uxth	r2, r3
 8005338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005340:	2b3e      	cmp	r3, #62	@ 0x3e
 8005342:	d921      	bls.n	8005388 <USB_EPStartXfer+0x5f8>
 8005344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800534e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <USB_EPStartXfer+0x5d4>
 800535a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800535e:	3b01      	subs	r3, #1
 8005360:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29a      	uxth	r2, r3
 800536a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800536e:	b29b      	uxth	r3, r3
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	b29b      	uxth	r3, r3
 8005374:	4313      	orrs	r3, r2
 8005376:	b29b      	uxth	r3, r3
 8005378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005380:	b29a      	uxth	r2, r3
 8005382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	e056      	b.n	8005436 <USB_EPStartXfer+0x6a6>
 8005388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <USB_EPStartXfer+0x616>
 8005390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e047      	b.n	8005436 <USB_EPStartXfer+0x6a6>
 80053a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d004      	beq.n	80053c6 <USB_EPStartXfer+0x636>
 80053bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053c0:	3301      	adds	r3, #1
 80053c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	029b      	lsls	r3, r3, #10
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	b29a      	uxth	r2, r3
 80053da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053dc:	801a      	strh	r2, [r3, #0]
 80053de:	e02a      	b.n	8005436 <USB_EPStartXfer+0x6a6>
 80053e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d122      	bne.n	8005436 <USB_EPStartXfer+0x6a6>
 80053f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80053fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800540a:	b29b      	uxth	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005410:	4413      	add	r3, r2
 8005412:	653b      	str	r3, [r7, #80]	@ 0x50
 8005414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	011a      	lsls	r2, r3, #4
 8005422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005424:	4413      	add	r3, r2
 8005426:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800542a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800542c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005430:	b29a      	uxth	r2, r3
 8005432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005434:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	891b      	ldrh	r3, [r3, #8]
 8005442:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6959      	ldr	r1, [r3, #20]
 8005452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005456:	b29b      	uxth	r3, r3
 8005458:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800545c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005460:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005464:	6800      	ldr	r0, [r0, #0]
 8005466:	f001 f982 	bl	800676e <USB_WritePMA>
            ep->xfer_buff += len;
 800546a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547a:	441a      	add	r2, r3
 800547c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d90f      	bls.n	80054c4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80054a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6a1a      	ldr	r2, [r3, #32]
 80054b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	621a      	str	r2, [r3, #32]
 80054c2:	e00e      	b.n	80054e2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80054c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80054d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2200      	movs	r2, #0
 80054e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80054ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d177      	bne.n	80055ee <USB_EPStartXfer+0x85e>
 80054fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005502:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800550a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005518:	b29b      	uxth	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551e:	4413      	add	r3, r2
 8005520:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	011a      	lsls	r2, r3, #4
 8005530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005532:	4413      	add	r3, r2
 8005534:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005538:	637b      	str	r3, [r7, #52]	@ 0x34
 800553a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005544:	b29a      	uxth	r2, r3
 8005546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005548:	801a      	strh	r2, [r3, #0]
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005550:	d921      	bls.n	8005596 <USB_EPStartXfer+0x806>
 8005552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800555c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2b00      	cmp	r3, #0
 8005566:	d104      	bne.n	8005572 <USB_EPStartXfer+0x7e2>
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556c:	3b01      	subs	r3, #1
 800556e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29a      	uxth	r2, r3
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557c:	b29b      	uxth	r3, r3
 800557e:	029b      	lsls	r3, r3, #10
 8005580:	b29b      	uxth	r3, r3
 8005582:	4313      	orrs	r3, r2
 8005584:	b29b      	uxth	r3, r3
 8005586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558e:	b29a      	uxth	r2, r3
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	e050      	b.n	8005638 <USB_EPStartXfer+0x8a8>
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <USB_EPStartXfer+0x824>
 800559e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	e041      	b.n	8005638 <USB_EPStartXfer+0x8a8>
 80055b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <USB_EPStartXfer+0x844>
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ce:	3301      	adds	r3, #1
 80055d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80055d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29a      	uxth	r2, r3
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055de:	b29b      	uxth	r3, r3
 80055e0:	029b      	lsls	r3, r3, #10
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	4313      	orrs	r3, r2
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	e024      	b.n	8005638 <USB_EPStartXfer+0x8a8>
 80055ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d11c      	bne.n	8005638 <USB_EPStartXfer+0x8a8>
 80055fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800560c:	b29b      	uxth	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005612:	4413      	add	r3, r2
 8005614:	643b      	str	r3, [r7, #64]	@ 0x40
 8005616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	011a      	lsls	r2, r3, #4
 8005624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005626:	4413      	add	r3, r2
 8005628:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800562c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800562e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005632:	b29a      	uxth	r2, r3
 8005634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005636:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	895b      	ldrh	r3, [r3, #10]
 8005644:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800564c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6959      	ldr	r1, [r3, #20]
 8005654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005658:	b29b      	uxth	r3, r3
 800565a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800565e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005662:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005666:	6800      	ldr	r0, [r0, #0]
 8005668:	f001 f881 	bl	800676e <USB_WritePMA>
 800566c:	e227      	b.n	8005abe <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800566e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800567e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80056a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80056a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	441a      	add	r2, r3
 80056c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80056c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056fa:	4413      	add	r3, r2
 80056fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	011a      	lsls	r2, r3, #4
 800570c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800570e:	4413      	add	r3, r2
 8005710:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005714:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571a:	b29a      	uxth	r2, r3
 800571c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800571e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	891b      	ldrh	r3, [r3, #8]
 800572c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6959      	ldr	r1, [r3, #20]
 800573c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005740:	b29b      	uxth	r3, r3
 8005742:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005746:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800574a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800574e:	6800      	ldr	r0, [r0, #0]
 8005750:	f001 f80d 	bl	800676e <USB_WritePMA>
 8005754:	e1b3      	b.n	8005abe <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a1a      	ldr	r2, [r3, #32]
 8005762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005766:	1ad2      	subs	r2, r2, r3
 8005768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80c6 	beq.w	8005928 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800579c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80057a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d177      	bne.n	80058a8 <USB_EPStartXfer+0xb18>
 80057b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057d8:	4413      	add	r3, r2
 80057da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	011a      	lsls	r2, r3, #4
 80057ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ec:	4413      	add	r3, r2
 80057ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80057f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005808:	2b3e      	cmp	r3, #62	@ 0x3e
 800580a:	d921      	bls.n	8005850 <USB_EPStartXfer+0xac0>
 800580c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	2b00      	cmp	r3, #0
 8005820:	d104      	bne.n	800582c <USB_EPStartXfer+0xa9c>
 8005822:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005826:	3b01      	subs	r3, #1
 8005828:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800582c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29a      	uxth	r2, r3
 8005832:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005836:	b29b      	uxth	r3, r3
 8005838:	029b      	lsls	r3, r3, #10
 800583a:	b29b      	uxth	r3, r3
 800583c:	4313      	orrs	r3, r2
 800583e:	b29b      	uxth	r3, r3
 8005840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005848:	b29a      	uxth	r2, r3
 800584a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	e050      	b.n	80058f2 <USB_EPStartXfer+0xb62>
 8005850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <USB_EPStartXfer+0xade>
 8005858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005866:	b29a      	uxth	r2, r3
 8005868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	e041      	b.n	80058f2 <USB_EPStartXfer+0xb62>
 800586e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <USB_EPStartXfer+0xafe>
 8005884:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005888:	3301      	adds	r3, #1
 800588a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800588e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29a      	uxth	r2, r3
 8005894:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005898:	b29b      	uxth	r3, r3
 800589a:	029b      	lsls	r3, r3, #10
 800589c:	b29b      	uxth	r3, r3
 800589e:	4313      	orrs	r3, r2
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	e024      	b.n	80058f2 <USB_EPStartXfer+0xb62>
 80058a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d11c      	bne.n	80058f2 <USB_EPStartXfer+0xb62>
 80058b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058cc:	4413      	add	r3, r2
 80058ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80058d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	011a      	lsls	r2, r3, #4
 80058de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058e0:	4413      	add	r3, r2
 80058e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	895b      	ldrh	r3, [r3, #10]
 80058fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6959      	ldr	r1, [r3, #20]
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005912:	b29b      	uxth	r3, r3
 8005914:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005918:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800591c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005920:	6800      	ldr	r0, [r0, #0]
 8005922:	f000 ff24 	bl	800676e <USB_WritePMA>
 8005926:	e0ca      	b.n	8005abe <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d177      	bne.n	8005a28 <USB_EPStartXfer+0xc98>
 8005938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005952:	b29b      	uxth	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005958:	4413      	add	r3, r2
 800595a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800595c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	011a      	lsls	r2, r3, #4
 800596a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800596c:	4413      	add	r3, r2
 800596e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005972:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597e:	b29a      	uxth	r2, r3
 8005980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005988:	2b3e      	cmp	r3, #62	@ 0x3e
 800598a:	d921      	bls.n	80059d0 <USB_EPStartXfer+0xc40>
 800598c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d104      	bne.n	80059ac <USB_EPStartXfer+0xc1c>
 80059a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059a6:	3b01      	subs	r3, #1
 80059a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	029b      	lsls	r3, r3, #10
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	4313      	orrs	r3, r2
 80059be:	b29b      	uxth	r3, r3
 80059c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059cc:	801a      	strh	r2, [r3, #0]
 80059ce:	e05c      	b.n	8005a8a <USB_EPStartXfer+0xcfa>
 80059d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <USB_EPStartXfer+0xc5e>
 80059d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	e04d      	b.n	8005a8a <USB_EPStartXfer+0xcfa>
 80059ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <USB_EPStartXfer+0xc7e>
 8005a04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a08:	3301      	adds	r3, #1
 8005a0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	029b      	lsls	r3, r3, #10
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	e030      	b.n	8005a8a <USB_EPStartXfer+0xcfa>
 8005a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d128      	bne.n	8005a8a <USB_EPStartXfer+0xcfa>
 8005a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	011a      	lsls	r2, r3, #4
 8005a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a74:	4413      	add	r3, r2
 8005a76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	891b      	ldrh	r3, [r3, #8]
 8005a96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6959      	ldr	r1, [r3, #20]
 8005aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005ab0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ab4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ab8:	6800      	ldr	r0, [r0, #0]
 8005aba:	f000 fe58 	bl	800676e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae4:	817b      	strh	r3, [r7, #10]
 8005ae6:	897b      	ldrh	r3, [r7, #10]
 8005ae8:	f083 0310 	eor.w	r3, r3, #16
 8005aec:	817b      	strh	r3, [r7, #10]
 8005aee:	897b      	ldrh	r3, [r7, #10]
 8005af0:	f083 0320 	eor.w	r3, r3, #32
 8005af4:	817b      	strh	r3, [r7, #10]
 8005af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	441a      	add	r2, r3
 8005b10:	897b      	ldrh	r3, [r7, #10]
 8005b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	8013      	strh	r3, [r2, #0]
 8005b26:	f000 bcde 	b.w	80064e6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	7b1b      	ldrb	r3, [r3, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 80bb 	bne.w	8005cb2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d917      	bls.n	8005b88 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699a      	ldr	r2, [r3, #24]
 8005b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b78:	1ad2      	subs	r2, r2, r3
 8005b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	619a      	str	r2, [r3, #24]
 8005b86:	e00e      	b.n	8005ba6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005bca:	4413      	add	r3, r2
 8005bcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	011a      	lsls	r2, r3, #4
 8005bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005be2:	4413      	add	r3, r2
 8005be4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c06:	d924      	bls.n	8005c52 <USB_EPStartXfer+0xec2>
 8005c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d104      	bne.n	8005c28 <USB_EPStartXfer+0xe98>
 8005c1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c22:	3b01      	subs	r3, #1
 8005c24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	029b      	lsls	r3, r3, #10
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	f000 bc10 	b.w	8006472 <USB_EPStartXfer+0x16e2>
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10c      	bne.n	8005c74 <USB_EPStartXfer+0xee4>
 8005c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	e3fe      	b.n	8006472 <USB_EPStartXfer+0x16e2>
 8005c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <USB_EPStartXfer+0xf04>
 8005c8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c8e:	3301      	adds	r3, #1
 8005c90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	029b      	lsls	r3, r3, #10
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	e3df      	b.n	8006472 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	78db      	ldrb	r3, [r3, #3]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	f040 8218 	bne.w	80060f4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f040 809d 	bne.w	8005e10 <USB_EPStartXfer+0x1080>
 8005cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	011a      	lsls	r2, r3, #4
 8005d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d12:	4413      	add	r3, r2
 8005d14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d2e:	801a      	strh	r2, [r3, #0]
 8005d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d3e:	d92b      	bls.n	8005d98 <USB_EPStartXfer+0x1008>
 8005d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <USB_EPStartXfer+0xfe0>
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	029b      	lsls	r3, r3, #10
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	4313      	orrs	r3, r2
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	e070      	b.n	8005e7a <USB_EPStartXfer+0x10ea>
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10c      	bne.n	8005dc2 <USB_EPStartXfer+0x1032>
 8005da8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	e05b      	b.n	8005e7a <USB_EPStartXfer+0x10ea>
 8005dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <USB_EPStartXfer+0x1062>
 8005de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dec:	3301      	adds	r3, #1
 8005dee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005df2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	029b      	lsls	r3, r3, #10
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e034      	b.n	8005e7a <USB_EPStartXfer+0x10ea>
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d12c      	bne.n	8005e7a <USB_EPStartXfer+0x10ea>
 8005e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e44:	4413      	add	r3, r2
 8005e46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	011a      	lsls	r2, r3, #4
 8005e58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e78:	801a      	strh	r2, [r3, #0]
 8005e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f040 809d 	bne.w	8005fd4 <USB_EPStartXfer+0x1244>
 8005e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	011a      	lsls	r2, r3, #4
 8005ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f02:	d92b      	bls.n	8005f5c <USB_EPStartXfer+0x11cc>
 8005f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d104      	bne.n	8005f34 <USB_EPStartXfer+0x11a4>
 8005f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	029b      	lsls	r3, r3, #10
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	4313      	orrs	r3, r2
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	e069      	b.n	8006030 <USB_EPStartXfer+0x12a0>
 8005f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10c      	bne.n	8005f86 <USB_EPStartXfer+0x11f6>
 8005f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e054      	b.n	8006030 <USB_EPStartXfer+0x12a0>
 8005f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	085b      	lsrs	r3, r3, #1
 8005f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d004      	beq.n	8005fb6 <USB_EPStartXfer+0x1226>
 8005fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	029b      	lsls	r3, r3, #10
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	e02d      	b.n	8006030 <USB_EPStartXfer+0x12a0>
 8005fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d125      	bne.n	8006030 <USB_EPStartXfer+0x12a0>
 8005fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	011a      	lsls	r2, r3, #4
 800600e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006012:	4413      	add	r3, r2
 8006014:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006018:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800601c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	b29a      	uxth	r2, r3
 800602a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800602e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8218 	beq.w	8006472 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006062:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <USB_EPStartXfer+0x12ea>
 800606e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10d      	bne.n	8006096 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800607a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800607e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006082:	2b00      	cmp	r3, #0
 8006084:	f040 81f5 	bne.w	8006472 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006088:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800608c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	f040 81ee 	bne.w	8006472 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060bc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80060de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	8013      	strh	r3, [r2, #0]
 80060f2:	e1be      	b.n	8006472 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80060f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	78db      	ldrb	r3, [r3, #3]
 8006100:	2b01      	cmp	r3, #1
 8006102:	f040 81b4 	bne.w	800646e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	429a      	cmp	r2, r3
 8006120:	d917      	bls.n	8006152 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	619a      	str	r2, [r3, #24]
 8006150:	e00e      	b.n	8006170 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2200      	movs	r2, #0
 800616e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f040 8085 	bne.w	800628c <USB_EPStartXfer+0x14fc>
 8006182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006194:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800619e:	b29b      	uxth	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061a6:	4413      	add	r3, r2
 80061a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	011a      	lsls	r2, r3, #4
 80061ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061be:	4413      	add	r3, r2
 80061c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80061e2:	d923      	bls.n	800622c <USB_EPStartXfer+0x149c>
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e8:	095b      	lsrs	r3, r3, #5
 80061ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	f003 031f 	and.w	r3, r3, #31
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <USB_EPStartXfer+0x1474>
 80061fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061fe:	3b01      	subs	r3, #1
 8006200:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29a      	uxth	r2, r3
 800620c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006210:	b29b      	uxth	r3, r3
 8006212:	029b      	lsls	r3, r3, #10
 8006214:	b29b      	uxth	r3, r3
 8006216:	4313      	orrs	r3, r2
 8006218:	b29b      	uxth	r3, r3
 800621a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006222:	b29a      	uxth	r2, r3
 8006224:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	e060      	b.n	80062ee <USB_EPStartXfer+0x155e>
 800622c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10c      	bne.n	800624e <USB_EPStartXfer+0x14be>
 8006234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006244:	b29a      	uxth	r2, r3
 8006246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	e04f      	b.n	80062ee <USB_EPStartXfer+0x155e>
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <USB_EPStartXfer+0x14de>
 8006264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006268:	3301      	adds	r3, #1
 800626a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800626e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29a      	uxth	r2, r3
 8006276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800627a:	b29b      	uxth	r3, r3
 800627c:	029b      	lsls	r3, r3, #10
 800627e:	b29b      	uxth	r3, r3
 8006280:	4313      	orrs	r3, r2
 8006282:	b29a      	uxth	r2, r3
 8006284:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	e030      	b.n	80062ee <USB_EPStartXfer+0x155e>
 800628c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d128      	bne.n	80062ee <USB_EPStartXfer+0x155e>
 800629c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80062aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062c0:	4413      	add	r3, r2
 80062c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80062c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	011a      	lsls	r2, r3, #4
 80062d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062d8:	4413      	add	r3, r2
 80062da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f040 8085 	bne.w	8006418 <USB_EPStartXfer+0x1688>
 800630e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800631c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800632a:	b29b      	uxth	r3, r3
 800632c:	461a      	mov	r2, r3
 800632e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006332:	4413      	add	r3, r2
 8006334:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	011a      	lsls	r2, r3, #4
 8006346:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800634a:	4413      	add	r3, r2
 800634c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006354:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006360:	b29a      	uxth	r2, r3
 8006362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636c:	2b3e      	cmp	r3, #62	@ 0x3e
 800636e:	d923      	bls.n	80063b8 <USB_EPStartXfer+0x1628>
 8006370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2b00      	cmp	r3, #0
 8006384:	d104      	bne.n	8006390 <USB_EPStartXfer+0x1600>
 8006386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800638a:	3b01      	subs	r3, #1
 800638c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29a      	uxth	r2, r3
 8006398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800639c:	b29b      	uxth	r3, r3
 800639e:	029b      	lsls	r3, r3, #10
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	4313      	orrs	r3, r2
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063b4:	801a      	strh	r2, [r3, #0]
 80063b6:	e05c      	b.n	8006472 <USB_EPStartXfer+0x16e2>
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10c      	bne.n	80063da <USB_EPStartXfer+0x164a>
 80063c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	e04b      	b.n	8006472 <USB_EPStartXfer+0x16e2>
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <USB_EPStartXfer+0x166a>
 80063f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063f4:	3301      	adds	r3, #1
 80063f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29a      	uxth	r2, r3
 8006402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006406:	b29b      	uxth	r3, r3
 8006408:	029b      	lsls	r3, r3, #10
 800640a:	b29b      	uxth	r3, r3
 800640c:	4313      	orrs	r3, r2
 800640e:	b29a      	uxth	r2, r3
 8006410:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	e02c      	b.n	8006472 <USB_EPStartXfer+0x16e2>
 8006418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d124      	bne.n	8006472 <USB_EPStartXfer+0x16e2>
 8006428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006436:	b29b      	uxth	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800643e:	4413      	add	r3, r2
 8006440:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	011a      	lsls	r2, r3, #4
 8006452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006456:	4413      	add	r3, r2
 8006458:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800645c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800646a:	801a      	strh	r2, [r3, #0]
 800646c:	e001      	b.n	8006472 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e03a      	b.n	80064e8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006476:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006498:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800649c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80064a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80064a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80064ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80064b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	441a      	add	r2, r3
 80064ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80064d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d020      	beq.n	8006546 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800651a:	81bb      	strh	r3, [r7, #12]
 800651c:	89bb      	ldrh	r3, [r7, #12]
 800651e:	f083 0310 	eor.w	r3, r3, #16
 8006522:	81bb      	strh	r3, [r7, #12]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	441a      	add	r2, r3
 800652e:	89bb      	ldrh	r3, [r7, #12]
 8006530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800653c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006540:	b29b      	uxth	r3, r3
 8006542:	8013      	strh	r3, [r2, #0]
 8006544:	e01f      	b.n	8006586 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655c:	81fb      	strh	r3, [r7, #14]
 800655e:	89fb      	ldrh	r3, [r7, #14]
 8006560:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006564:	81fb      	strh	r3, [r7, #14]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	441a      	add	r2, r3
 8006570:	89fb      	ldrh	r3, [r7, #14]
 8006572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800657a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800657e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006582:	b29b      	uxth	r3, r3
 8006584:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr

08006592 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006592:	b480      	push	{r7}
 8006594:	b087      	sub	sp, #28
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	7b1b      	ldrb	r3, [r3, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f040 809d 	bne.w	80066e0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d04c      	beq.n	8006648 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	823b      	strh	r3, [r7, #16]
 80065bc:	8a3b      	ldrh	r3, [r7, #16]
 80065be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d01b      	beq.n	80065fe <USB_EPClearStall+0x6c>
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065dc:	81fb      	strh	r3, [r7, #14]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	78db      	ldrb	r3, [r3, #3]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d06c      	beq.n	80066e0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800661c:	81bb      	strh	r3, [r7, #12]
 800661e:	89bb      	ldrh	r3, [r7, #12]
 8006620:	f083 0320 	eor.w	r3, r3, #32
 8006624:	81bb      	strh	r3, [r7, #12]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	89bb      	ldrh	r3, [r7, #12]
 8006632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800663a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800663e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006642:	b29b      	uxth	r3, r3
 8006644:	8013      	strh	r3, [r2, #0]
 8006646:	e04b      	b.n	80066e0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	82fb      	strh	r3, [r7, #22]
 8006656:	8afb      	ldrh	r3, [r7, #22]
 8006658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01b      	beq.n	8006698 <USB_EPClearStall+0x106>
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006676:	82bb      	strh	r3, [r7, #20]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	8abb      	ldrh	r3, [r7, #20]
 8006684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800668c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006694:	b29b      	uxth	r3, r3
 8006696:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ae:	827b      	strh	r3, [r7, #18]
 80066b0:	8a7b      	ldrh	r3, [r7, #18]
 80066b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066b6:	827b      	strh	r3, [r7, #18]
 80066b8:	8a7b      	ldrh	r3, [r7, #18]
 80066ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066be:	827b      	strh	r3, [r7, #18]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	441a      	add	r2, r3
 80066ca:	8a7b      	ldrh	r3, [r7, #18]
 80066cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066dc:	b29b      	uxth	r3, r3
 80066de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr

080066ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d103      	bne.n	8006706 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2280      	movs	r2, #128	@ 0x80
 8006702:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr

08006726 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006748:	b29b      	uxth	r3, r3
 800674a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800674c:	68fb      	ldr	r3, [r7, #12]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr

0800676e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800676e:	b480      	push	{r7}
 8006770:	b08b      	sub	sp, #44	@ 0x2c
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	4611      	mov	r1, r2
 800677a:	461a      	mov	r2, r3
 800677c:	460b      	mov	r3, r1
 800677e:	80fb      	strh	r3, [r7, #6]
 8006780:	4613      	mov	r3, r2
 8006782:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006784:	88bb      	ldrh	r3, [r7, #4]
 8006786:	3301      	adds	r3, #1
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	005a      	lsls	r2, r3, #1
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067a6:	e01e      	b.n	80067e6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	3301      	adds	r3, #1
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	b21a      	sxth	r2, r3
 80067b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067bc:	4313      	orrs	r3, r2
 80067be:	b21b      	sxth	r3, r3
 80067c0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	8a7a      	ldrh	r2, [r7, #18]
 80067c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	3302      	adds	r3, #2
 80067cc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	3302      	adds	r3, #2
 80067d2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	3301      	adds	r3, #1
 80067d8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	3301      	adds	r3, #1
 80067de:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	3b01      	subs	r3, #1
 80067e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1dd      	bne.n	80067a8 <USB_WritePMA+0x3a>
  }
}
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
 80067f0:	372c      	adds	r7, #44	@ 0x2c
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b08b      	sub	sp, #44	@ 0x2c
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4611      	mov	r1, r2
 8006804:	461a      	mov	r2, r3
 8006806:	460b      	mov	r3, r1
 8006808:	80fb      	strh	r3, [r7, #6]
 800680a:	4613      	mov	r3, r2
 800680c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800680e:	88bb      	ldrh	r3, [r7, #4]
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	b29b      	uxth	r3, r3
 8006814:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	005a      	lsls	r2, r3, #1
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800682a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006830:	e01b      	b.n	800686a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	3302      	adds	r3, #2
 800683e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	b2da      	uxtb	r2, r3
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	3301      	adds	r3, #1
 800684c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	b2da      	uxtb	r2, r3
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	3301      	adds	r3, #1
 800685c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	3302      	adds	r3, #2
 8006862:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	3b01      	subs	r3, #1
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e0      	bne.n	8006832 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006870:	88bb      	ldrh	r3, [r7, #4]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	701a      	strb	r2, [r3, #0]
  }
}
 800688c:	bf00      	nop
 800688e:	372c      	adds	r7, #44	@ 0x2c
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr

08006896 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	4613      	mov	r3, r2
 80068a2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068aa:	2302      	movs	r3, #2
 80068ac:	e01a      	b.n	80068e4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	79fa      	ldrb	r2, [r7, #7]
 80068da:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f001 fc03 	bl	80080e8 <USBD_LL_Init>

  return USBD_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d006      	beq.n	800690e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]
 800690c:	e001      	b.n	8006912 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800690e:	2302      	movs	r3, #2
 8006910:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr

0800691e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 fc26 	bl	8008178 <USBD_LL_Start>

  return USBD_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	bc80      	pop	{r7}
 8006948:	4770      	bx	lr

0800694a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006956:	2302      	movs	r3, #2
 8006958:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00c      	beq.n	800697e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	78fa      	ldrb	r2, [r7, #3]
 800696e:	4611      	mov	r1, r2
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	4798      	blx	r3
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	4611      	mov	r1, r2
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3

  return USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fed8 	bl	8007776 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069d4:	461a      	mov	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d016      	beq.n	8006a18 <USBD_LL_SetupStage+0x6a>
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d81c      	bhi.n	8006a28 <USBD_LL_SetupStage+0x7a>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <USBD_LL_SetupStage+0x4a>
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d008      	beq.n	8006a08 <USBD_LL_SetupStage+0x5a>
 80069f6:	e017      	b.n	8006a28 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f9cb 	bl	8006d9c <USBD_StdDevReq>
      break;
 8006a06:	e01a      	b.n	8006a3e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fa2d 	bl	8006e70 <USBD_StdItfReq>
      break;
 8006a16:	e012      	b.n	8006a3e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fa6d 	bl	8006f00 <USBD_StdEPReq>
      break;
 8006a26:	e00a      	b.n	8006a3e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006a2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fbfe 	bl	8008238 <USBD_LL_StallEP>
      break;
 8006a3c:	bf00      	nop
  }

  return USBD_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	460b      	mov	r3, r1
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a56:	7afb      	ldrb	r3, [r7, #11]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d14b      	bne.n	8006af4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006a62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d134      	bne.n	8006ad8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d919      	bls.n	8006aae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	1ad2      	subs	r2, r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d203      	bcs.n	8006a9c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	e002      	b.n	8006aa2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f001 f8f0 	bl	8007c8c <USBD_CtlContinueRx>
 8006aac:	e038      	b.n	8006b20 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d105      	bne.n	8006ad0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f001 f8ed 	bl	8007cb0 <USBD_CtlSendStatus>
 8006ad6:	e023      	b.n	8006b20 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ade:	2b05      	cmp	r3, #5
 8006ae0:	d11e      	bne.n	8006b20 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006aea:	2100      	movs	r1, #0
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f001 fba3 	bl	8008238 <USBD_LL_StallEP>
 8006af2:	e015      	b.n	8006b20 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00d      	beq.n	8006b1c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d108      	bne.n	8006b1c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	7afa      	ldrb	r2, [r7, #11]
 8006b14:	4611      	mov	r1, r2
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	4798      	blx	r3
 8006b1a:	e001      	b.n	8006b20 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e000      	b.n	8006b22 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	460b      	mov	r3, r1
 8006b34:	607a      	str	r2, [r7, #4]
 8006b36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b38:	7afb      	ldrb	r3, [r7, #11]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d17f      	bne.n	8006c3e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3314      	adds	r3, #20
 8006b42:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d15c      	bne.n	8006c08 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d915      	bls.n	8006b86 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f001 f878 	bl	8007c68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f001 fc05 	bl	800838e <USBD_LL_PrepareReceive>
 8006b84:	e04e      	b.n	8006c24 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	6912      	ldr	r2, [r2, #16]
 8006b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b92:	fb01 f202 	mul.w	r2, r1, r2
 8006b96:	1a9b      	subs	r3, r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d11c      	bne.n	8006bd6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d316      	bcc.n	8006bd6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d20f      	bcs.n	8006bd6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f001 f854 	bl	8007c68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2100      	movs	r1, #0
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f001 fbdd 	bl	800838e <USBD_LL_PrepareReceive>
 8006bd4:	e026      	b.n	8006c24 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d105      	bne.n	8006bf8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006bf8:	2180      	movs	r1, #128	@ 0x80
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f001 fb1c 	bl	8008238 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f001 f868 	bl	8007cd6 <USBD_CtlReceiveStatus>
 8006c06:	e00d      	b.n	8006c24 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d004      	beq.n	8006c1c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d103      	bne.n	8006c24 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c1c:	2180      	movs	r1, #128	@ 0x80
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f001 fb0a 	bl	8008238 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d11d      	bne.n	8006c6a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff fe81 	bl	8006936 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006c3c:	e015      	b.n	8006c6a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00d      	beq.n	8006c66 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d108      	bne.n	8006c66 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	7afa      	ldrb	r2, [r7, #11]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	4798      	blx	r3
 8006c64:	e001      	b.n	8006c6a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c66:	2302      	movs	r3, #2
 8006c68:	e000      	b.n	8006c6c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c7c:	2340      	movs	r3, #64	@ 0x40
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fa93 	bl	80081ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2240      	movs	r2, #64	@ 0x40
 8006c94:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c98:	2340      	movs	r3, #64	@ 0x40
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2180      	movs	r1, #128	@ 0x80
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 fa85 	bl	80081ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2240      	movs	r2, #64	@ 0x40
 8006cae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d009      	beq.n	8006cec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6852      	ldr	r2, [r2, #4]
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	4798      	blx	r3
  }

  return USBD_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	78fa      	ldrb	r2, [r7, #3]
 8006d06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr

08006d3c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	d105      	bne.n	8006d5a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr

08006d66 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d10b      	bne.n	8006d90 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006db2:	2b40      	cmp	r3, #64	@ 0x40
 8006db4:	d005      	beq.n	8006dc2 <USBD_StdDevReq+0x26>
 8006db6:	2b40      	cmp	r3, #64	@ 0x40
 8006db8:	d84f      	bhi.n	8006e5a <USBD_StdDevReq+0xbe>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <USBD_StdDevReq+0x36>
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d14b      	bne.n	8006e5a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
      break;
 8006dd0:	e048      	b.n	8006e64 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b09      	cmp	r3, #9
 8006dd8:	d839      	bhi.n	8006e4e <USBD_StdDevReq+0xb2>
 8006dda:	a201      	add	r2, pc, #4	@ (adr r2, 8006de0 <USBD_StdDevReq+0x44>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e31 	.word	0x08006e31
 8006de4:	08006e45 	.word	0x08006e45
 8006de8:	08006e4f 	.word	0x08006e4f
 8006dec:	08006e3b 	.word	0x08006e3b
 8006df0:	08006e4f 	.word	0x08006e4f
 8006df4:	08006e13 	.word	0x08006e13
 8006df8:	08006e09 	.word	0x08006e09
 8006dfc:	08006e4f 	.word	0x08006e4f
 8006e00:	08006e27 	.word	0x08006e27
 8006e04:	08006e1d 	.word	0x08006e1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f9dc 	bl	80071c8 <USBD_GetDescriptor>
          break;
 8006e10:	e022      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fb3f 	bl	8007498 <USBD_SetAddress>
          break;
 8006e1a:	e01d      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fb7e 	bl	8007520 <USBD_SetConfig>
          break;
 8006e24:	e018      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fc07 	bl	800763c <USBD_GetConfig>
          break;
 8006e2e:	e013      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fc37 	bl	80076a6 <USBD_GetStatus>
          break;
 8006e38:	e00e      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fc65 	bl	800770c <USBD_SetFeature>
          break;
 8006e42:	e009      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fc74 	bl	8007734 <USBD_ClrFeature>
          break;
 8006e4c:	e004      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fcc9 	bl	80077e8 <USBD_CtlError>
          break;
 8006e56:	bf00      	nop
      }
      break;
 8006e58:	e004      	b.n	8006e64 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fcc3 	bl	80077e8 <USBD_CtlError>
      break;
 8006e62:	bf00      	nop
  }

  return ret;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e86:	2b40      	cmp	r3, #64	@ 0x40
 8006e88:	d005      	beq.n	8006e96 <USBD_StdItfReq+0x26>
 8006e8a:	2b40      	cmp	r3, #64	@ 0x40
 8006e8c:	d82e      	bhi.n	8006eec <USBD_StdItfReq+0x7c>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <USBD_StdItfReq+0x26>
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d12a      	bne.n	8006eec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d81d      	bhi.n	8006ede <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	889b      	ldrh	r3, [r3, #4]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d813      	bhi.n	8006ed4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	88db      	ldrh	r3, [r3, #6]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d110      	bne.n	8006ee8 <USBD_StdItfReq+0x78>
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10d      	bne.n	8006ee8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 feef 	bl	8007cb0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ed2:	e009      	b.n	8006ee8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fc86 	bl	80077e8 <USBD_CtlError>
          break;
 8006edc:	e004      	b.n	8006ee8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fc81 	bl	80077e8 <USBD_CtlError>
          break;
 8006ee6:	e000      	b.n	8006eea <USBD_StdItfReq+0x7a>
          break;
 8006ee8:	bf00      	nop
      }
      break;
 8006eea:	e004      	b.n	8006ef6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fc7a 	bl	80077e8 <USBD_CtlError>
      break;
 8006ef4:	bf00      	nop
  }

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	889b      	ldrh	r3, [r3, #4]
 8006f12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f1c:	2b40      	cmp	r3, #64	@ 0x40
 8006f1e:	d007      	beq.n	8006f30 <USBD_StdEPReq+0x30>
 8006f20:	2b40      	cmp	r3, #64	@ 0x40
 8006f22:	f200 8146 	bhi.w	80071b2 <USBD_StdEPReq+0x2b2>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <USBD_StdEPReq+0x40>
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	f040 8141 	bne.w	80071b2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
      break;
 8006f3e:	e13d      	b.n	80071bc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d10a      	bne.n	8006f62 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	4798      	blx	r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	e12d      	b.n	80071be <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d007      	beq.n	8006f7a <USBD_StdEPReq+0x7a>
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	f300 811b 	bgt.w	80071a6 <USBD_StdEPReq+0x2a6>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d072      	beq.n	800705a <USBD_StdEPReq+0x15a>
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d03a      	beq.n	8006fee <USBD_StdEPReq+0xee>
 8006f78:	e115      	b.n	80071a6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d002      	beq.n	8006f8a <USBD_StdEPReq+0x8a>
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d015      	beq.n	8006fb4 <USBD_StdEPReq+0xb4>
 8006f88:	e02b      	b.n	8006fe2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00c      	beq.n	8006faa <USBD_StdEPReq+0xaa>
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	2b80      	cmp	r3, #128	@ 0x80
 8006f94:	d009      	beq.n	8006faa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 f94c 	bl	8008238 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006fa0:	2180      	movs	r1, #128	@ 0x80
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 f948 	bl	8008238 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fa8:	e020      	b.n	8006fec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fc1b 	bl	80077e8 <USBD_CtlError>
              break;
 8006fb2:	e01b      	b.n	8006fec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	885b      	ldrh	r3, [r3, #2]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10e      	bne.n	8006fda <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <USBD_StdEPReq+0xda>
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b80      	cmp	r3, #128	@ 0x80
 8006fc6:	d008      	beq.n	8006fda <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	88db      	ldrh	r3, [r3, #6]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 f92f 	bl	8008238 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fe68 	bl	8007cb0 <USBD_CtlSendStatus>

              break;
 8006fe0:	e004      	b.n	8006fec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fbff 	bl	80077e8 <USBD_CtlError>
              break;
 8006fea:	bf00      	nop
          }
          break;
 8006fec:	e0e0      	b.n	80071b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d002      	beq.n	8006ffe <USBD_StdEPReq+0xfe>
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d015      	beq.n	8007028 <USBD_StdEPReq+0x128>
 8006ffc:	e026      	b.n	800704c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00c      	beq.n	800701e <USBD_StdEPReq+0x11e>
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b80      	cmp	r3, #128	@ 0x80
 8007008:	d009      	beq.n	800701e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 f912 	bl	8008238 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007014:	2180      	movs	r1, #128	@ 0x80
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f90e 	bl	8008238 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800701c:	e01c      	b.n	8007058 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fbe1 	bl	80077e8 <USBD_CtlError>
              break;
 8007026:	e017      	b.n	8007058 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	885b      	ldrh	r3, [r3, #2]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d112      	bne.n	8007056 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 f919 	bl	8008276 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fe33 	bl	8007cb0 <USBD_CtlSendStatus>
              }
              break;
 800704a:	e004      	b.n	8007056 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fbca 	bl	80077e8 <USBD_CtlError>
              break;
 8007054:	e000      	b.n	8007058 <USBD_StdEPReq+0x158>
              break;
 8007056:	bf00      	nop
          }
          break;
 8007058:	e0aa      	b.n	80071b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007060:	2b02      	cmp	r3, #2
 8007062:	d002      	beq.n	800706a <USBD_StdEPReq+0x16a>
 8007064:	2b03      	cmp	r3, #3
 8007066:	d032      	beq.n	80070ce <USBD_StdEPReq+0x1ce>
 8007068:	e097      	b.n	800719a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <USBD_StdEPReq+0x180>
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b80      	cmp	r3, #128	@ 0x80
 8007074:	d004      	beq.n	8007080 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fbb5 	bl	80077e8 <USBD_CtlError>
                break;
 800707e:	e091      	b.n	80071a4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007084:	2b00      	cmp	r3, #0
 8007086:	da0b      	bge.n	80070a0 <USBD_StdEPReq+0x1a0>
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	3310      	adds	r3, #16
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	3304      	adds	r3, #4
 800709e:	e00b      	b.n	80070b8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	3304      	adds	r3, #4
 80070b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2202      	movs	r2, #2
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fdb2 	bl	8007c30 <USBD_CtlSendData>
              break;
 80070cc:	e06a      	b.n	80071a4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da11      	bge.n	80070fa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	f003 020f 	and.w	r2, r3, #15
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	3318      	adds	r3, #24
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d117      	bne.n	8007120 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fb78 	bl	80077e8 <USBD_CtlError>
                  break;
 80070f8:	e054      	b.n	80071a4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fb65 	bl	80077e8 <USBD_CtlError>
                  break;
 800711e:	e041      	b.n	80071a4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007124:	2b00      	cmp	r3, #0
 8007126:	da0b      	bge.n	8007140 <USBD_StdEPReq+0x240>
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	3310      	adds	r3, #16
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	4413      	add	r3, r2
 800713c:	3304      	adds	r3, #4
 800713e:	e00b      	b.n	8007158 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	3304      	adds	r3, #4
 8007158:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <USBD_StdEPReq+0x266>
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b80      	cmp	r3, #128	@ 0x80
 8007164:	d103      	bne.n	800716e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e00e      	b.n	800718c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 f89e 	bl	80082b4 <USBD_LL_IsStallEP>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2201      	movs	r2, #1
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	e002      	b.n	800718c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2202      	movs	r2, #2
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fd4c 	bl	8007c30 <USBD_CtlSendData>
              break;
 8007198:	e004      	b.n	80071a4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fb23 	bl	80077e8 <USBD_CtlError>
              break;
 80071a2:	bf00      	nop
          }
          break;
 80071a4:	e004      	b.n	80071b0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fb1d 	bl	80077e8 <USBD_CtlError>
          break;
 80071ae:	bf00      	nop
      }
      break;
 80071b0:	e004      	b.n	80071bc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fb17 	bl	80077e8 <USBD_CtlError>
      break;
 80071ba:	bf00      	nop
  }

  return ret;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	885b      	ldrh	r3, [r3, #2]
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	2b06      	cmp	r3, #6
 80071ea:	f200 8128 	bhi.w	800743e <USBD_GetDescriptor+0x276>
 80071ee:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <USBD_GetDescriptor+0x2c>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007211 	.word	0x08007211
 80071f8:	08007229 	.word	0x08007229
 80071fc:	08007269 	.word	0x08007269
 8007200:	0800743f 	.word	0x0800743f
 8007204:	0800743f 	.word	0x0800743f
 8007208:	080073df 	.word	0x080073df
 800720c:	0800740b 	.word	0x0800740b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	7c12      	ldrb	r2, [r2, #16]
 800721c:	f107 0108 	add.w	r1, r7, #8
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	60f8      	str	r0, [r7, #12]
      break;
 8007226:	e112      	b.n	800744e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7c1b      	ldrb	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10d      	bne.n	800724c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007238:	f107 0208 	add.w	r2, r7, #8
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3301      	adds	r3, #1
 8007246:	2202      	movs	r2, #2
 8007248:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800724a:	e100      	b.n	800744e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	f107 0208 	add.w	r2, r7, #8
 8007258:	4610      	mov	r0, r2
 800725a:	4798      	blx	r3
 800725c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3301      	adds	r3, #1
 8007262:	2202      	movs	r2, #2
 8007264:	701a      	strb	r2, [r3, #0]
      break;
 8007266:	e0f2      	b.n	800744e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	885b      	ldrh	r3, [r3, #2]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b05      	cmp	r3, #5
 8007270:	f200 80ac 	bhi.w	80073cc <USBD_GetDescriptor+0x204>
 8007274:	a201      	add	r2, pc, #4	@ (adr r2, 800727c <USBD_GetDescriptor+0xb4>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	08007295 	.word	0x08007295
 8007280:	080072c9 	.word	0x080072c9
 8007284:	080072fd 	.word	0x080072fd
 8007288:	08007331 	.word	0x08007331
 800728c:	08007365 	.word	0x08007365
 8007290:	08007399 	.word	0x08007399
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00b      	beq.n	80072b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	7c12      	ldrb	r2, [r2, #16]
 80072ac:	f107 0108 	add.w	r1, r7, #8
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
 80072b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072b6:	e091      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa94 	bl	80077e8 <USBD_CtlError>
            err++;
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	3301      	adds	r3, #1
 80072c4:	72fb      	strb	r3, [r7, #11]
          break;
 80072c6:	e089      	b.n	80073dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00b      	beq.n	80072ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	7c12      	ldrb	r2, [r2, #16]
 80072e0:	f107 0108 	add.w	r1, r7, #8
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ea:	e077      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa7a 	bl	80077e8 <USBD_CtlError>
            err++;
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	3301      	adds	r3, #1
 80072f8:	72fb      	strb	r3, [r7, #11]
          break;
 80072fa:	e06f      	b.n	80073dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00b      	beq.n	8007320 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7c12      	ldrb	r2, [r2, #16]
 8007314:	f107 0108 	add.w	r1, r7, #8
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
 800731c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800731e:	e05d      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa60 	bl	80077e8 <USBD_CtlError>
            err++;
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	3301      	adds	r3, #1
 800732c:	72fb      	strb	r3, [r7, #11]
          break;
 800732e:	e055      	b.n	80073dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00b      	beq.n	8007354 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	7c12      	ldrb	r2, [r2, #16]
 8007348:	f107 0108 	add.w	r1, r7, #8
 800734c:	4610      	mov	r0, r2
 800734e:	4798      	blx	r3
 8007350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007352:	e043      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa46 	bl	80077e8 <USBD_CtlError>
            err++;
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	3301      	adds	r3, #1
 8007360:	72fb      	strb	r3, [r7, #11]
          break;
 8007362:	e03b      	b.n	80073dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	7c12      	ldrb	r2, [r2, #16]
 800737c:	f107 0108 	add.w	r1, r7, #8
 8007380:	4610      	mov	r0, r2
 8007382:	4798      	blx	r3
 8007384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007386:	e029      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa2c 	bl	80077e8 <USBD_CtlError>
            err++;
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	3301      	adds	r3, #1
 8007394:	72fb      	strb	r3, [r7, #11]
          break;
 8007396:	e021      	b.n	80073dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	7c12      	ldrb	r2, [r2, #16]
 80073b0:	f107 0108 	add.w	r1, r7, #8
 80073b4:	4610      	mov	r0, r2
 80073b6:	4798      	blx	r3
 80073b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ba:	e00f      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa12 	bl	80077e8 <USBD_CtlError>
            err++;
 80073c4:	7afb      	ldrb	r3, [r7, #11]
 80073c6:	3301      	adds	r3, #1
 80073c8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ca:	e007      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa0a 	bl	80077e8 <USBD_CtlError>
          err++;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	3301      	adds	r3, #1
 80073d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80073da:	e038      	b.n	800744e <USBD_GetDescriptor+0x286>
 80073dc:	e037      	b.n	800744e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	7c1b      	ldrb	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ee:	f107 0208 	add.w	r2, r7, #8
 80073f2:	4610      	mov	r0, r2
 80073f4:	4798      	blx	r3
 80073f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073f8:	e029      	b.n	800744e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f9f3 	bl	80077e8 <USBD_CtlError>
        err++;
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	3301      	adds	r3, #1
 8007406:	72fb      	strb	r3, [r7, #11]
      break;
 8007408:	e021      	b.n	800744e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7c1b      	ldrb	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10d      	bne.n	800742e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741a:	f107 0208 	add.w	r2, r7, #8
 800741e:	4610      	mov	r0, r2
 8007420:	4798      	blx	r3
 8007422:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3301      	adds	r3, #1
 8007428:	2207      	movs	r2, #7
 800742a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800742c:	e00f      	b.n	800744e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9d9 	bl	80077e8 <USBD_CtlError>
        err++;
 8007436:	7afb      	ldrb	r3, [r7, #11]
 8007438:	3301      	adds	r3, #1
 800743a:	72fb      	strb	r3, [r7, #11]
      break;
 800743c:	e007      	b.n	800744e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f9d1 	bl	80077e8 <USBD_CtlError>
      err++;
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	3301      	adds	r3, #1
 800744a:	72fb      	strb	r3, [r7, #11]
      break;
 800744c:	bf00      	nop
  }

  if (err != 0U)
 800744e:	7afb      	ldrb	r3, [r7, #11]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11c      	bne.n	800748e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007454:	893b      	ldrh	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d011      	beq.n	800747e <USBD_GetDescriptor+0x2b6>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	88db      	ldrh	r3, [r3, #6]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00d      	beq.n	800747e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	88da      	ldrh	r2, [r3, #6]
 8007466:	893b      	ldrh	r3, [r7, #8]
 8007468:	4293      	cmp	r3, r2
 800746a:	bf28      	it	cs
 800746c:	4613      	movcs	r3, r2
 800746e:	b29b      	uxth	r3, r3
 8007470:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007472:	893b      	ldrh	r3, [r7, #8]
 8007474:	461a      	mov	r2, r3
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fbd9 	bl	8007c30 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	88db      	ldrh	r3, [r3, #6]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d104      	bne.n	8007490 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fc12 	bl	8007cb0 <USBD_CtlSendStatus>
 800748c:	e000      	b.n	8007490 <USBD_GetDescriptor+0x2c8>
    return;
 800748e:	bf00      	nop
    }
  }
}
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop

08007498 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	889b      	ldrh	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d130      	bne.n	800750c <USBD_SetAddress+0x74>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	88db      	ldrh	r3, [r3, #6]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d12c      	bne.n	800750c <USBD_SetAddress+0x74>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	885b      	ldrh	r3, [r3, #2]
 80074b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80074b8:	d828      	bhi.n	800750c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	885b      	ldrh	r3, [r3, #2]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d104      	bne.n	80074da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f988 	bl	80077e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d8:	e01d      	b.n	8007516 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7bfa      	ldrb	r2, [r7, #15]
 80074de:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 ff0f 	bl	800830a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fbdf 	bl	8007cb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d004      	beq.n	8007502 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007500:	e009      	b.n	8007516 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750a:	e004      	b.n	8007516 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f96a 	bl	80077e8 <USBD_CtlError>
  }
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	885b      	ldrh	r3, [r3, #2]
 800752e:	b2da      	uxtb	r2, r3
 8007530:	4b41      	ldr	r3, [pc, #260]	@ (8007638 <USBD_SetConfig+0x118>)
 8007532:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007534:	4b40      	ldr	r3, [pc, #256]	@ (8007638 <USBD_SetConfig+0x118>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d904      	bls.n	8007546 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f952 	bl	80077e8 <USBD_CtlError>
 8007544:	e075      	b.n	8007632 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800754c:	2b02      	cmp	r3, #2
 800754e:	d002      	beq.n	8007556 <USBD_SetConfig+0x36>
 8007550:	2b03      	cmp	r3, #3
 8007552:	d023      	beq.n	800759c <USBD_SetConfig+0x7c>
 8007554:	e062      	b.n	800761c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007556:	4b38      	ldr	r3, [pc, #224]	@ (8007638 <USBD_SetConfig+0x118>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01a      	beq.n	8007594 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800755e:	4b36      	ldr	r3, [pc, #216]	@ (8007638 <USBD_SetConfig+0x118>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2203      	movs	r2, #3
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007570:	4b31      	ldr	r3, [pc, #196]	@ (8007638 <USBD_SetConfig+0x118>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff f9e7 	bl	800694a <USBD_SetClassConfig>
 800757c:	4603      	mov	r3, r0
 800757e:	2b02      	cmp	r3, #2
 8007580:	d104      	bne.n	800758c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f92f 	bl	80077e8 <USBD_CtlError>
            return;
 800758a:	e052      	b.n	8007632 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fb8f 	bl	8007cb0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007592:	e04e      	b.n	8007632 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fb8b 	bl	8007cb0 <USBD_CtlSendStatus>
        break;
 800759a:	e04a      	b.n	8007632 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800759c:	4b26      	ldr	r3, [pc, #152]	@ (8007638 <USBD_SetConfig+0x118>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d112      	bne.n	80075ca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80075ac:	4b22      	ldr	r3, [pc, #136]	@ (8007638 <USBD_SetConfig+0x118>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	461a      	mov	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075b6:	4b20      	ldr	r3, [pc, #128]	@ (8007638 <USBD_SetConfig+0x118>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff f9e3 	bl	8006988 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fb74 	bl	8007cb0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075c8:	e033      	b.n	8007632 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80075ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007638 <USBD_SetConfig+0x118>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d01d      	beq.n	8007614 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff f9d1 	bl	8006988 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075e6:	4b14      	ldr	r3, [pc, #80]	@ (8007638 <USBD_SetConfig+0x118>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075f0:	4b11      	ldr	r3, [pc, #68]	@ (8007638 <USBD_SetConfig+0x118>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff f9a7 	bl	800694a <USBD_SetClassConfig>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d104      	bne.n	800760c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f8ef 	bl	80077e8 <USBD_CtlError>
            return;
 800760a:	e012      	b.n	8007632 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fb4f 	bl	8007cb0 <USBD_CtlSendStatus>
        break;
 8007612:	e00e      	b.n	8007632 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fb4b 	bl	8007cb0 <USBD_CtlSendStatus>
        break;
 800761a:	e00a      	b.n	8007632 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f8e2 	bl	80077e8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007624:	4b04      	ldr	r3, [pc, #16]	@ (8007638 <USBD_SetConfig+0x118>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff f9ac 	bl	8006988 <USBD_ClrClassConfig>
        break;
 8007630:	bf00      	nop
    }
  }
}
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	20000244 	.word	0x20000244

0800763c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	88db      	ldrh	r3, [r3, #6]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d004      	beq.n	8007658 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f8c9 	bl	80077e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007656:	e022      	b.n	800769e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800765e:	2b02      	cmp	r3, #2
 8007660:	dc02      	bgt.n	8007668 <USBD_GetConfig+0x2c>
 8007662:	2b00      	cmp	r3, #0
 8007664:	dc03      	bgt.n	800766e <USBD_GetConfig+0x32>
 8007666:	e015      	b.n	8007694 <USBD_GetConfig+0x58>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d00b      	beq.n	8007684 <USBD_GetConfig+0x48>
 800766c:	e012      	b.n	8007694 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3308      	adds	r3, #8
 8007678:	2201      	movs	r2, #1
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fad7 	bl	8007c30 <USBD_CtlSendData>
        break;
 8007682:	e00c      	b.n	800769e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3304      	adds	r3, #4
 8007688:	2201      	movs	r2, #1
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 facf 	bl	8007c30 <USBD_CtlSendData>
        break;
 8007692:	e004      	b.n	800769e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f8a6 	bl	80077e8 <USBD_CtlError>
        break;
 800769c:	bf00      	nop
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076b6:	3b01      	subs	r3, #1
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d81e      	bhi.n	80076fa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	88db      	ldrh	r3, [r3, #6]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d004      	beq.n	80076ce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f88e 	bl	80077e8 <USBD_CtlError>
        break;
 80076cc:	e01a      	b.n	8007704 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f043 0202 	orr.w	r2, r3, #2
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	330c      	adds	r3, #12
 80076ee:	2202      	movs	r2, #2
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa9c 	bl	8007c30 <USBD_CtlSendData>
      break;
 80076f8:	e004      	b.n	8007704 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f873 	bl	80077e8 <USBD_CtlError>
      break;
 8007702:	bf00      	nop
  }
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	885b      	ldrh	r3, [r3, #2]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d106      	bne.n	800772c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fac2 	bl	8007cb0 <USBD_CtlSendStatus>
  }
}
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007744:	3b01      	subs	r3, #1
 8007746:	2b02      	cmp	r3, #2
 8007748:	d80b      	bhi.n	8007762 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	885b      	ldrh	r3, [r3, #2]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d10c      	bne.n	800776c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 faa8 	bl	8007cb0 <USBD_CtlSendStatus>
      }
      break;
 8007760:	e004      	b.n	800776c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f83f 	bl	80077e8 <USBD_CtlError>
      break;
 800776a:	e000      	b.n	800776e <USBD_ClrFeature+0x3a>
      break;
 800776c:	bf00      	nop
  }
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	785a      	ldrb	r2, [r3, #1]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	3302      	adds	r3, #2
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	3303      	adds	r3, #3
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	3304      	adds	r3, #4
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	3305      	adds	r3, #5
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	4413      	add	r3, r2
 80077be:	b29a      	uxth	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	3306      	adds	r3, #6
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	3307      	adds	r3, #7
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	021b      	lsls	r3, r3, #8
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	4413      	add	r3, r2
 80077d8:	b29a      	uxth	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	80da      	strh	r2, [r3, #6]

}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr

080077e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80077f2:	2180      	movs	r1, #128	@ 0x80
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fd1f 	bl	8008238 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80077fa:	2100      	movs	r1, #0
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fd1b 	bl	8008238 <USBD_LL_StallEP>
}
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b086      	sub	sp, #24
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d032      	beq.n	8007886 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 f834 	bl	800788e <USBD_GetLen>
 8007826:	4603      	mov	r3, r0
 8007828:	3301      	adds	r3, #1
 800782a:	b29b      	uxth	r3, r3
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	75fa      	strb	r2, [r7, #23]
 800783a:	461a      	mov	r2, r3
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4413      	add	r3, r2
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	7812      	ldrb	r2, [r2, #0]
 8007844:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	75fa      	strb	r2, [r7, #23]
 800784c:	461a      	mov	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4413      	add	r3, r2
 8007852:	2203      	movs	r2, #3
 8007854:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007856:	e012      	b.n	800787e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	60fa      	str	r2, [r7, #12]
 800785e:	7dfa      	ldrb	r2, [r7, #23]
 8007860:	1c51      	adds	r1, r2, #1
 8007862:	75f9      	strb	r1, [r7, #23]
 8007864:	4611      	mov	r1, r2
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	440a      	add	r2, r1
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800786e:	7dfb      	ldrb	r3, [r7, #23]
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	75fa      	strb	r2, [r7, #23]
 8007874:	461a      	mov	r2, r3
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4413      	add	r3, r2
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e8      	bne.n	8007858 <USBD_GetString+0x4e>
    }
  }
}
 8007886:	bf00      	nop
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800789a:	e005      	b.n	80078a8 <USBD_GetLen+0x1a>
  {
    len++;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	3301      	adds	r3, #1
 80078a0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3301      	adds	r3, #1
 80078a6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1f5      	bne.n	800789c <USBD_GetLen+0xe>
  }

  return len;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bc80      	pop	{r7}
 80078ba:	4770      	bx	lr

080078bc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80078c8:	2304      	movs	r3, #4
 80078ca:	2203      	movs	r2, #3
 80078cc:	2181      	movs	r1, #129	@ 0x81
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fc6d 	bl	80081ae <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80078da:	2010      	movs	r0, #16
 80078dc:	f000 fd7a 	bl	80083d4 <USBD_static_malloc>
 80078e0:	4602      	mov	r2, r0
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80078f2:	2302      	movs	r3, #2
 80078f4:	e005      	b.n	8007902 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078fc:	2200      	movs	r2, #0
 80078fe:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007916:	2181      	movs	r1, #129	@ 0x81
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc6e 	bl	80081fa <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d009      	beq.n	8007942 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fd59 	bl	80083ec <USBD_static_free>
    pdev->pClassData = NULL;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_HID_Setup>:
  * @retval status
  */

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800795c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007976:	2b00      	cmp	r3, #0
 8007978:	d045      	beq.n	8007a06 <USBD_HID_Setup+0xba>
 800797a:	2b20      	cmp	r3, #32
 800797c:	f040 80d3 	bne.w	8007b26 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	3b02      	subs	r3, #2
 8007986:	2b09      	cmp	r3, #9
 8007988:	d835      	bhi.n	80079f6 <USBD_HID_Setup+0xaa>
 800798a:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <USBD_HID_Setup+0x44>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079e7 	.word	0x080079e7
 8007994:	080079c7 	.word	0x080079c7
 8007998:	080079f7 	.word	0x080079f7
 800799c:	080079f7 	.word	0x080079f7
 80079a0:	080079f7 	.word	0x080079f7
 80079a4:	080079f7 	.word	0x080079f7
 80079a8:	080079f7 	.word	0x080079f7
 80079ac:	080079f7 	.word	0x080079f7
 80079b0:	080079d5 	.word	0x080079d5
 80079b4:	080079b9 	.word	0x080079b9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	885b      	ldrh	r3, [r3, #2]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	601a      	str	r2, [r3, #0]
          break;
 80079c4:	e01e      	b.n	8007a04 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	2201      	movs	r2, #1
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f92f 	bl	8007c30 <USBD_CtlSendData>
          break;
 80079d2:	e017      	b.n	8007a04 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	885b      	ldrh	r3, [r3, #2]
 80079d8:	0a1b      	lsrs	r3, r3, #8
 80079da:	b29b      	uxth	r3, r3
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	605a      	str	r2, [r3, #4]
          break;
 80079e4:	e00e      	b.n	8007a04 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	3304      	adds	r3, #4
 80079ea:	2201      	movs	r2, #1
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f91e 	bl	8007c30 <USBD_CtlSendData>
          break;
 80079f4:	e006      	b.n	8007a04 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff fef5 	bl	80077e8 <USBD_CtlError>
          ret = USBD_FAIL;
 80079fe:	2302      	movs	r3, #2
 8007a00:	75fb      	strb	r3, [r7, #23]
          break;
 8007a02:	bf00      	nop
      }
      break;
 8007a04:	e096      	b.n	8007b34 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	2b0b      	cmp	r3, #11
 8007a0c:	f200 8083 	bhi.w	8007b16 <USBD_HID_Setup+0x1ca>
 8007a10:	a201      	add	r2, pc, #4	@ (adr r2, 8007a18 <USBD_HID_Setup+0xcc>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a49 	.word	0x08007a49
 8007a1c:	08007b17 	.word	0x08007b17
 8007a20:	08007b17 	.word	0x08007b17
 8007a24:	08007b17 	.word	0x08007b17
 8007a28:	08007b17 	.word	0x08007b17
 8007a2c:	08007b17 	.word	0x08007b17
 8007a30:	08007a71 	.word	0x08007a71
 8007a34:	08007b17 	.word	0x08007b17
 8007a38:	08007b17 	.word	0x08007b17
 8007a3c:	08007b17 	.word	0x08007b17
 8007a40:	08007ac9 	.word	0x08007ac9
 8007a44:	08007af1 	.word	0x08007af1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d107      	bne.n	8007a62 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a52:	f107 030e 	add.w	r3, r7, #14
 8007a56:	2202      	movs	r2, #2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f8e8 	bl	8007c30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a60:	e060      	b.n	8007b24 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff febf 	bl	80077e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a6e:	e059      	b.n	8007b24 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	885b      	ldrh	r3, [r3, #2]
 8007a74:	0a1b      	lsrs	r3, r3, #8
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b22      	cmp	r3, #34	@ 0x22
 8007a7a:	d108      	bne.n	8007a8e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	88db      	ldrh	r3, [r3, #6]
 8007a80:	2b73      	cmp	r3, #115	@ 0x73
 8007a82:	bf28      	it	cs
 8007a84:	2373      	movcs	r3, #115	@ 0x73
 8007a86:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007a88:	4b2d      	ldr	r3, [pc, #180]	@ (8007b40 <USBD_HID_Setup+0x1f4>)
 8007a8a:	61bb      	str	r3, [r7, #24]
 8007a8c:	e015      	b.n	8007aba <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	885b      	ldrh	r3, [r3, #2]
 8007a92:	0a1b      	lsrs	r3, r3, #8
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b21      	cmp	r3, #33	@ 0x21
 8007a98:	d108      	bne.n	8007aac <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8007b44 <USBD_HID_Setup+0x1f8>)
 8007a9c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	88db      	ldrh	r3, [r3, #6]
 8007aa2:	2b09      	cmp	r3, #9
 8007aa4:	bf28      	it	cs
 8007aa6:	2309      	movcs	r3, #9
 8007aa8:	83fb      	strh	r3, [r7, #30]
 8007aaa:	e006      	b.n	8007aba <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7ff fe9a 	bl	80077e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	75fb      	strb	r3, [r7, #23]
            break;
 8007ab8:	e034      	b.n	8007b24 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007aba:	8bfb      	ldrh	r3, [r7, #30]
 8007abc:	461a      	mov	r2, r3
 8007abe:	69b9      	ldr	r1, [r7, #24]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f8b5 	bl	8007c30 <USBD_CtlSendData>
          break;
 8007ac6:	e02d      	b.n	8007b24 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d107      	bne.n	8007ae2 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f8a8 	bl	8007c30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ae0:	e020      	b.n	8007b24 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fe7f 	bl	80077e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007aea:	2302      	movs	r3, #2
 8007aec:	75fb      	strb	r3, [r7, #23]
          break;
 8007aee:	e019      	b.n	8007b24 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d106      	bne.n	8007b08 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	885b      	ldrh	r3, [r3, #2]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b06:	e00d      	b.n	8007b24 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff fe6c 	bl	80077e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b10:	2302      	movs	r3, #2
 8007b12:	75fb      	strb	r3, [r7, #23]
          break;
 8007b14:	e006      	b.n	8007b24 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fe65 	bl	80077e8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	75fb      	strb	r3, [r7, #23]
          break;
 8007b22:	bf00      	nop
      }
      break;
 8007b24:	e006      	b.n	8007b34 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7ff fe5d 	bl	80077e8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	75fb      	strb	r3, [r7, #23]
      break;
 8007b32:	bf00      	nop
  }

  return ret;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3720      	adds	r7, #32
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	200000c8 	.word	0x200000c8
 8007b44:	200000b0 	.word	0x200000b0

08007b48 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4613      	mov	r3, r2
 8007b54:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b5c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d10c      	bne.n	8007b82 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	7b1b      	ldrb	r3, [r3, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d108      	bne.n	8007b82 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2201      	movs	r2, #1
 8007b74:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007b76:	88fb      	ldrh	r3, [r7, #6]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	2181      	movs	r1, #129	@ 0x81
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 fbe3 	bl	8008348 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2222      	movs	r2, #34	@ 0x22
 8007b98:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007b9a:	4b03      	ldr	r3, [pc, #12]	@ (8007ba8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bc80      	pop	{r7}
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	20000044 	.word	0x20000044

08007bac <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2222      	movs	r2, #34	@ 0x22
 8007bb8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007bba:	4b03      	ldr	r3, [pc, #12]	@ (8007bc8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20000068 	.word	0x20000068

08007bcc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2222      	movs	r2, #34	@ 0x22
 8007bd8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007bda:	4b03      	ldr	r3, [pc, #12]	@ (8007be8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bc80      	pop	{r7}
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	2000008c 	.word	0x2000008c

08007bec <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bfe:	2200      	movs	r2, #0
 8007c00:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bc80      	pop	{r7}
 8007c0c:	4770      	bx	lr
	...

08007c10 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	220a      	movs	r2, #10
 8007c1c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007c1e:	4b03      	ldr	r3, [pc, #12]	@ (8007c2c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	200000bc 	.word	0x200000bc

08007c30 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2202      	movs	r2, #2
 8007c42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007c46:	88fa      	ldrh	r2, [r7, #6]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007c4c:	88fa      	ldrh	r2, [r7, #6]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	2100      	movs	r1, #0
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 fb75 	bl	8008348 <USBD_LL_Transmit>

  return USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c76:	88fb      	ldrh	r3, [r7, #6]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fb63 	bl	8008348 <USBD_LL_Transmit>

  return USBD_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c9a:	88fb      	ldrh	r3, [r7, #6]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fb74 	bl	800838e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fb3e 	bl	8008348 <USBD_LL_Transmit>

  return USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2205      	movs	r2, #5
 8007ce2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2100      	movs	r1, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fb4e 	bl	800838e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d00:	2200      	movs	r2, #0
 8007d02:	490e      	ldr	r1, [pc, #56]	@ (8007d3c <MX_USB_DEVICE_Init+0x40>)
 8007d04:	480e      	ldr	r0, [pc, #56]	@ (8007d40 <MX_USB_DEVICE_Init+0x44>)
 8007d06:	f7fe fdc6 	bl	8006896 <USBD_Init>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d10:	f7f8 fc95 	bl	800063e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007d14:	490b      	ldr	r1, [pc, #44]	@ (8007d44 <MX_USB_DEVICE_Init+0x48>)
 8007d16:	480a      	ldr	r0, [pc, #40]	@ (8007d40 <MX_USB_DEVICE_Init+0x44>)
 8007d18:	f7fe fde8 	bl	80068ec <USBD_RegisterClass>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d22:	f7f8 fc8c 	bl	800063e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d26:	4806      	ldr	r0, [pc, #24]	@ (8007d40 <MX_USB_DEVICE_Init+0x44>)
 8007d28:	f7fe fdf9 	bl	800691e <USBD_Start>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007d32:	f7f8 fc84 	bl	800063e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d36:	bf00      	nop
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	2000013c 	.word	0x2000013c
 8007d40:	20000248 	.word	0x20000248
 8007d44:	2000000c 	.word	0x2000000c

08007d48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	6039      	str	r1, [r7, #0]
 8007d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2212      	movs	r2, #18
 8007d58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d5a:	4b03      	ldr	r3, [pc, #12]	@ (8007d68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	20000158 	.word	0x20000158

08007d6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	6039      	str	r1, [r7, #0]
 8007d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d7e:	4b03      	ldr	r3, [pc, #12]	@ (8007d8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	2000016c 	.word	0x2000016c

08007d90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	6039      	str	r1, [r7, #0]
 8007d9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d105      	bne.n	8007dae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	4907      	ldr	r1, [pc, #28]	@ (8007dc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007da6:	4808      	ldr	r0, [pc, #32]	@ (8007dc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007da8:	f7ff fd2f 	bl	800780a <USBD_GetString>
 8007dac:	e004      	b.n	8007db8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	4904      	ldr	r1, [pc, #16]	@ (8007dc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007db2:	4805      	ldr	r0, [pc, #20]	@ (8007dc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007db4:	f7ff fd29 	bl	800780a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007db8:	4b02      	ldr	r3, [pc, #8]	@ (8007dc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	2000050c 	.word	0x2000050c
 8007dc8:	080084e4 	.word	0x080084e4

08007dcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	6039      	str	r1, [r7, #0]
 8007dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	4904      	ldr	r1, [pc, #16]	@ (8007dec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ddc:	4804      	ldr	r0, [pc, #16]	@ (8007df0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007dde:	f7ff fd14 	bl	800780a <USBD_GetString>
  return USBD_StrDesc;
 8007de2:	4b02      	ldr	r3, [pc, #8]	@ (8007dec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	2000050c 	.word	0x2000050c
 8007df0:	080084f4 	.word	0x080084f4

08007df4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	6039      	str	r1, [r7, #0]
 8007dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	221a      	movs	r2, #26
 8007e04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e06:	f000 f843 	bl	8007e90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e0a:	4b02      	ldr	r3, [pc, #8]	@ (8007e14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000170 	.word	0x20000170

08007e18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	6039      	str	r1, [r7, #0]
 8007e22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d105      	bne.n	8007e36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	4907      	ldr	r1, [pc, #28]	@ (8007e4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e2e:	4808      	ldr	r0, [pc, #32]	@ (8007e50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e30:	f7ff fceb 	bl	800780a <USBD_GetString>
 8007e34:	e004      	b.n	8007e40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	4904      	ldr	r1, [pc, #16]	@ (8007e4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e3a:	4805      	ldr	r0, [pc, #20]	@ (8007e50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e3c:	f7ff fce5 	bl	800780a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e40:	4b02      	ldr	r3, [pc, #8]	@ (8007e4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	2000050c 	.word	0x2000050c
 8007e50:	080084fc 	.word	0x080084fc

08007e54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	6039      	str	r1, [r7, #0]
 8007e5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d105      	bne.n	8007e72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	4907      	ldr	r1, [pc, #28]	@ (8007e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e6a:	4808      	ldr	r0, [pc, #32]	@ (8007e8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e6c:	f7ff fccd 	bl	800780a <USBD_GetString>
 8007e70:	e004      	b.n	8007e7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	4904      	ldr	r1, [pc, #16]	@ (8007e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e76:	4805      	ldr	r0, [pc, #20]	@ (8007e8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e78:	f7ff fcc7 	bl	800780a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e7c:	4b02      	ldr	r3, [pc, #8]	@ (8007e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	2000050c 	.word	0x2000050c
 8007e8c:	08008508 	.word	0x08008508

08007e90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e96:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed4 <Get_SerialNum+0x44>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed8 <Get_SerialNum+0x48>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8007edc <Get_SerialNum+0x4c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4413      	add	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007eb6:	2208      	movs	r2, #8
 8007eb8:	4909      	ldr	r1, [pc, #36]	@ (8007ee0 <Get_SerialNum+0x50>)
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 f814 	bl	8007ee8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	4908      	ldr	r1, [pc, #32]	@ (8007ee4 <Get_SerialNum+0x54>)
 8007ec4:	68b8      	ldr	r0, [r7, #8]
 8007ec6:	f000 f80f 	bl	8007ee8 <IntToUnicode>
  }
}
 8007eca:	bf00      	nop
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	1ffff7e8 	.word	0x1ffff7e8
 8007ed8:	1ffff7ec 	.word	0x1ffff7ec
 8007edc:	1ffff7f0 	.word	0x1ffff7f0
 8007ee0:	20000172 	.word	0x20000172
 8007ee4:	20000182 	.word	0x20000182

08007ee8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007efa:	2300      	movs	r3, #0
 8007efc:	75fb      	strb	r3, [r7, #23]
 8007efe:	e027      	b.n	8007f50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	0f1b      	lsrs	r3, r3, #28
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d80b      	bhi.n	8007f20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	0f1b      	lsrs	r3, r3, #28
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	4619      	mov	r1, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	440b      	add	r3, r1
 8007f18:	3230      	adds	r2, #48	@ 0x30
 8007f1a:	b2d2      	uxtb	r2, r2
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	e00a      	b.n	8007f36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	0f1b      	lsrs	r3, r3, #28
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	440b      	add	r3, r1
 8007f30:	3237      	adds	r2, #55	@ 0x37
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	3301      	adds	r3, #1
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	4413      	add	r3, r2
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	75fb      	strb	r3, [r7, #23]
 8007f50:	7dfa      	ldrb	r2, [r7, #23]
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d3d3      	bcc.n	8007f00 <IntToUnicode+0x18>
  }
}
 8007f58:	bf00      	nop
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr

08007f64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a0d      	ldr	r2, [pc, #52]	@ (8007fa8 <HAL_PCD_MspInit+0x44>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d113      	bne.n	8007f9e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007f76:	4b0d      	ldr	r3, [pc, #52]	@ (8007fac <HAL_PCD_MspInit+0x48>)
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007fac <HAL_PCD_MspInit+0x48>)
 8007f7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f80:	61d3      	str	r3, [r2, #28]
 8007f82:	4b0a      	ldr	r3, [pc, #40]	@ (8007fac <HAL_PCD_MspInit+0x48>)
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007f8e:	2200      	movs	r2, #0
 8007f90:	2100      	movs	r1, #0
 8007f92:	2014      	movs	r0, #20
 8007f94:	f7f8 fdd3 	bl	8000b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007f98:	2014      	movs	r0, #20
 8007f9a:	f7f8 fdec 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	40005c00 	.word	0x40005c00
 8007fac:	40021000 	.word	0x40021000

08007fb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	f7fe fcf1 	bl	80069ae <USBD_LL_SetupStage>
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	440b      	add	r3, r1
 8007ff4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	f7fe fd23 	bl	8006a48 <USBD_LL_DataOutStage>
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800801c:	78fa      	ldrb	r2, [r7, #3]
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	00db      	lsls	r3, r3, #3
 8008028:	440b      	add	r3, r1
 800802a:	3324      	adds	r3, #36	@ 0x24
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	78fb      	ldrb	r3, [r7, #3]
 8008030:	4619      	mov	r1, r3
 8008032:	f7fe fd7a 	bl	8006b2a <USBD_LL_DataInStage>
}
 8008036:	bf00      	nop
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fe8a 	bl	8006d66 <USBD_LL_SOF>
}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008062:	2301      	movs	r3, #1
 8008064:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	799b      	ldrb	r3, [r3, #6]
 800806a:	2b02      	cmp	r3, #2
 800806c:	d001      	beq.n	8008072 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800806e:	f7f8 fae6 	bl	800063e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008078:	7bfa      	ldrb	r2, [r7, #15]
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f7fe fe3a 	bl	8006cf6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fdf3 	bl	8006c74 <USBD_LL_Reset>
}
 800808e:	bf00      	nop
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe fe34 	bl	8006d14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	7a9b      	ldrb	r3, [r3, #10]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080b4:	4b04      	ldr	r3, [pc, #16]	@ (80080c8 <HAL_PCD_SuspendCallback+0x30>)
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	4a03      	ldr	r2, [pc, #12]	@ (80080c8 <HAL_PCD_SuspendCallback+0x30>)
 80080ba:	f043 0306 	orr.w	r3, r3, #6
 80080be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	e000ed00 	.word	0xe000ed00

080080cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe fe2e 	bl	8006d3c <USBD_LL_Resume>
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80080f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008170 <USBD_LL_Init+0x88>)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008170 <USBD_LL_Init+0x88>)
 80080fc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008100:	4b1b      	ldr	r3, [pc, #108]	@ (8008170 <USBD_LL_Init+0x88>)
 8008102:	4a1c      	ldr	r2, [pc, #112]	@ (8008174 <USBD_LL_Init+0x8c>)
 8008104:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008106:	4b1a      	ldr	r3, [pc, #104]	@ (8008170 <USBD_LL_Init+0x88>)
 8008108:	2208      	movs	r2, #8
 800810a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800810c:	4b18      	ldr	r3, [pc, #96]	@ (8008170 <USBD_LL_Init+0x88>)
 800810e:	2202      	movs	r2, #2
 8008110:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008112:	4b17      	ldr	r3, [pc, #92]	@ (8008170 <USBD_LL_Init+0x88>)
 8008114:	2200      	movs	r2, #0
 8008116:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008118:	4b15      	ldr	r3, [pc, #84]	@ (8008170 <USBD_LL_Init+0x88>)
 800811a:	2200      	movs	r2, #0
 800811c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800811e:	4b14      	ldr	r3, [pc, #80]	@ (8008170 <USBD_LL_Init+0x88>)
 8008120:	2200      	movs	r2, #0
 8008122:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008124:	4812      	ldr	r0, [pc, #72]	@ (8008170 <USBD_LL_Init+0x88>)
 8008126:	f7f8 ffa8 	bl	800107a <HAL_PCD_Init>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008130:	f7f8 fa85 	bl	800063e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800813a:	2318      	movs	r3, #24
 800813c:	2200      	movs	r2, #0
 800813e:	2100      	movs	r1, #0
 8008140:	f7fa fca2 	bl	8002a88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800814a:	2358      	movs	r3, #88	@ 0x58
 800814c:	2200      	movs	r2, #0
 800814e:	2180      	movs	r1, #128	@ 0x80
 8008150:	f7fa fc9a 	bl	8002a88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800815a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800815e:	2200      	movs	r2, #0
 8008160:	2181      	movs	r1, #129	@ 0x81
 8008162:	f7fa fc91 	bl	8002a88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	2000070c 	.word	0x2000070c
 8008174:	40005c00 	.word	0x40005c00

08008178 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800818e:	4618      	mov	r0, r3
 8008190:	f7f9 f869 	bl	8001266 <HAL_PCD_Start>
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f93a 	bl	8008414 <USBD_Get_USB_Status>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	4608      	mov	r0, r1
 80081b8:	4611      	mov	r1, r2
 80081ba:	461a      	mov	r2, r3
 80081bc:	4603      	mov	r3, r0
 80081be:	70fb      	strb	r3, [r7, #3]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70bb      	strb	r3, [r7, #2]
 80081c4:	4613      	mov	r3, r2
 80081c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081d6:	78bb      	ldrb	r3, [r7, #2]
 80081d8:	883a      	ldrh	r2, [r7, #0]
 80081da:	78f9      	ldrb	r1, [r7, #3]
 80081dc:	f7f9 f9bd 	bl	800155a <HAL_PCD_EP_Open>
 80081e0:	4603      	mov	r3, r0
 80081e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f914 	bl	8008414 <USBD_Get_USB_Status>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008214:	78fa      	ldrb	r2, [r7, #3]
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f7f9 f9fb 	bl	8001614 <HAL_PCD_EP_Close>
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f8f5 	bl	8008414 <USBD_Get_USB_Status>
 800822a:	4603      	mov	r3, r0
 800822c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800822e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008252:	78fa      	ldrb	r2, [r7, #3]
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f7f9 fa8c 	bl	8001774 <HAL_PCD_EP_SetStall>
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f8d6 	bl	8008414 <USBD_Get_USB_Status>
 8008268:	4603      	mov	r3, r0
 800826a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800826c:	7bbb      	ldrb	r3, [r7, #14]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008290:	78fa      	ldrb	r2, [r7, #3]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f7f9 facd 	bl	8001834 <HAL_PCD_EP_ClrStall>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f8b7 	bl	8008414 <USBD_Get_USB_Status>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	da0b      	bge.n	80082e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082d6:	68f9      	ldr	r1, [r7, #12]
 80082d8:	4613      	mov	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	440b      	add	r3, r1
 80082e2:	3312      	adds	r3, #18
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	e00b      	b.n	8008300 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	440b      	add	r3, r1
 80082fa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80082fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr

0800830a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f7f9 f8f2 	bl	8001512 <HAL_PCD_SetAddress>
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 f86d 	bl	8008414 <USBD_Get_USB_Status>
 800833a:	4603      	mov	r3, r0
 800833c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800833e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	461a      	mov	r2, r3
 8008354:	460b      	mov	r3, r1
 8008356:	72fb      	strb	r3, [r7, #11]
 8008358:	4613      	mov	r3, r2
 800835a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800836a:	893b      	ldrh	r3, [r7, #8]
 800836c:	7af9      	ldrb	r1, [r7, #11]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	f7f9 f9c9 	bl	8001706 <HAL_PCD_EP_Transmit>
 8008374:	4603      	mov	r3, r0
 8008376:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 f84a 	bl	8008414 <USBD_Get_USB_Status>
 8008380:	4603      	mov	r3, r0
 8008382:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008384:	7dbb      	ldrb	r3, [r7, #22]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b086      	sub	sp, #24
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	461a      	mov	r2, r3
 800839a:	460b      	mov	r3, r1
 800839c:	72fb      	strb	r3, [r7, #11]
 800839e:	4613      	mov	r3, r2
 80083a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083b0:	893b      	ldrh	r3, [r7, #8]
 80083b2:	7af9      	ldrb	r1, [r7, #11]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	f7f9 f975 	bl	80016a4 <HAL_PCD_EP_Receive>
 80083ba:	4603      	mov	r3, r0
 80083bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f827 	bl	8008414 <USBD_Get_USB_Status>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80083dc:	4b02      	ldr	r3, [pc, #8]	@ (80083e8 <USBD_static_malloc+0x14>)
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr
 80083e8:	200009e4 	.word	0x200009e4

080083ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]

}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr

080083fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	460b      	mov	r3, r1
 8008408:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800840a:	bf00      	nop
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr

08008414 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	2b03      	cmp	r3, #3
 8008426:	d817      	bhi.n	8008458 <USBD_Get_USB_Status+0x44>
 8008428:	a201      	add	r2, pc, #4	@ (adr r2, 8008430 <USBD_Get_USB_Status+0x1c>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	08008441 	.word	0x08008441
 8008434:	08008447 	.word	0x08008447
 8008438:	0800844d 	.word	0x0800844d
 800843c:	08008453 	.word	0x08008453
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
    break;
 8008444:	e00b      	b.n	800845e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008446:	2302      	movs	r3, #2
 8008448:	73fb      	strb	r3, [r7, #15]
    break;
 800844a:	e008      	b.n	800845e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800844c:	2301      	movs	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
    break;
 8008450:	e005      	b.n	800845e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008452:	2302      	movs	r3, #2
 8008454:	73fb      	strb	r3, [r7, #15]
    break;
 8008456:	e002      	b.n	800845e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008458:	2302      	movs	r3, #2
 800845a:	73fb      	strb	r3, [r7, #15]
    break;
 800845c:	bf00      	nop
  }
  return usb_status;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop

0800846c <memset>:
 800846c:	4603      	mov	r3, r0
 800846e:	4402      	add	r2, r0
 8008470:	4293      	cmp	r3, r2
 8008472:	d100      	bne.n	8008476 <memset+0xa>
 8008474:	4770      	bx	lr
 8008476:	f803 1b01 	strb.w	r1, [r3], #1
 800847a:	e7f9      	b.n	8008470 <memset+0x4>

0800847c <__libc_init_array>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	2600      	movs	r6, #0
 8008480:	4d0c      	ldr	r5, [pc, #48]	@ (80084b4 <__libc_init_array+0x38>)
 8008482:	4c0d      	ldr	r4, [pc, #52]	@ (80084b8 <__libc_init_array+0x3c>)
 8008484:	1b64      	subs	r4, r4, r5
 8008486:	10a4      	asrs	r4, r4, #2
 8008488:	42a6      	cmp	r6, r4
 800848a:	d109      	bne.n	80084a0 <__libc_init_array+0x24>
 800848c:	f000 f81a 	bl	80084c4 <_init>
 8008490:	2600      	movs	r6, #0
 8008492:	4d0a      	ldr	r5, [pc, #40]	@ (80084bc <__libc_init_array+0x40>)
 8008494:	4c0a      	ldr	r4, [pc, #40]	@ (80084c0 <__libc_init_array+0x44>)
 8008496:	1b64      	subs	r4, r4, r5
 8008498:	10a4      	asrs	r4, r4, #2
 800849a:	42a6      	cmp	r6, r4
 800849c:	d105      	bne.n	80084aa <__libc_init_array+0x2e>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a4:	4798      	blx	r3
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7ee      	b.n	8008488 <__libc_init_array+0xc>
 80084aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ae:	4798      	blx	r3
 80084b0:	3601      	adds	r6, #1
 80084b2:	e7f2      	b.n	800849a <__libc_init_array+0x1e>
 80084b4:	08008544 	.word	0x08008544
 80084b8:	08008544 	.word	0x08008544
 80084bc:	08008544 	.word	0x08008544
 80084c0:	08008548 	.word	0x08008548

080084c4 <_init>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	bf00      	nop
 80084c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ca:	bc08      	pop	{r3}
 80084cc:	469e      	mov	lr, r3
 80084ce:	4770      	bx	lr

080084d0 <_fini>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr
