
STM32F103HidDeviceEmulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008510  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800861c  0800861c  0000961c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008690  08008690  0000a18c  2**0
                  CONTENTS
  4 .ARM          00000000  08008690  08008690  0000a18c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008690  08008690  0000a18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008690  08008690  00009690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008694  08008694  00009694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08008698  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  2000018c  08008824  0000a18c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  08008824  0000a9f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a18c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fe1  00000000  00000000  0000a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003626  00000000  00000000  0001b196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0001e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1e  00000000  00000000  0001f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a249  00000000  00000000  0001ff7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001637a  00000000  00000000  0003a1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008717c  00000000  00000000  00050541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d76bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003440  00000000  00000000  000d7700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000dab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000018c 	.word	0x2000018c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008604 	.word	0x08008604

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000190 	.word	0x20000190
 8000148:	08008604 	.word	0x08008604

0800014c <KeyboardSetup>:
 */

#include "KeyboardModule.h"
extern USBD_HandleTypeDef hUsbDeviceFS;

void KeyboardSetup(Action *act){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	785b      	ldrb	r3, [r3, #1]
 8000158:	2b03      	cmp	r3, #3
 800015a:	d00c      	beq.n	8000176 <KeyboardSetup+0x2a>
 800015c:	2b03      	cmp	r3, #3
 800015e:	dc13      	bgt.n	8000188 <KeyboardSetup+0x3c>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d002      	beq.n	800016a <KeyboardSetup+0x1e>
 8000164:	2b02      	cmp	r3, #2
 8000166:	d00c      	beq.n	8000182 <KeyboardSetup+0x36>
				break;
		case(REMOVE_COMMAND):
				KeyboardRemove();
				break;
	}
}
 8000168:	e00e      	b.n	8000188 <KeyboardSetup+0x3c>
				KeyboardSet(act->data);
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	3302      	adds	r3, #2
 800016e:	4618      	mov	r0, r3
 8000170:	f000 f80e 	bl	8000190 <KeyboardSet>
				break;
 8000174:	e008      	b.n	8000188 <KeyboardSetup+0x3c>
				KeyboardClick(act->data);
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3302      	adds	r3, #2
 800017a:	4618      	mov	r0, r3
 800017c:	f000 f836 	bl	80001ec <KeyboardClick>
				break;
 8000180:	e002      	b.n	8000188 <KeyboardSetup+0x3c>
				KeyboardRemove();
 8000182:	f000 f865 	bl	8000250 <KeyboardRemove>
				break;
 8000186:	bf00      	nop
}
 8000188:	bf00      	nop
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}

08000190 <KeyboardSet>:

void KeyboardSet(uint8_t *data){
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 8000198:	2300      	movs	r3, #0
 800019a:	60fb      	str	r3, [r7, #12]
 800019c:	f107 0310 	add.w	r3, r7, #16
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 80001a6:	2302      	movs	r3, #2
 80001a8:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 80001aa:	2300      	movs	r3, #0
 80001ac:	75fb      	strb	r3, [r7, #23]
 80001ae:	e00c      	b.n	80001ca <KeyboardSet+0x3a>
		data_out[i+1] = data[i];
 80001b0:	7dfb      	ldrb	r3, [r7, #23]
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	441a      	add	r2, r3
 80001b6:	7dfb      	ldrb	r3, [r7, #23]
 80001b8:	3301      	adds	r3, #1
 80001ba:	7812      	ldrb	r2, [r2, #0]
 80001bc:	3318      	adds	r3, #24
 80001be:	443b      	add	r3, r7
 80001c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 80001c4:	7dfb      	ldrb	r3, [r7, #23]
 80001c6:	3301      	adds	r3, #1
 80001c8:	75fb      	strb	r3, [r7, #23]
 80001ca:	7dfb      	ldrb	r3, [r7, #23]
 80001cc:	2b07      	cmp	r3, #7
 80001ce:	d9ef      	bls.n	80001b0 <KeyboardSet+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 80001d0:	f107 030c 	add.w	r3, r7, #12
 80001d4:	2209      	movs	r2, #9
 80001d6:	4619      	mov	r1, r3
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <KeyboardSet+0x58>)
 80001da:	f007 fd55 	bl	8007c88 <USBD_HID_SendReport>
}
 80001de:	bf00      	nop
 80001e0:	3718      	adds	r7, #24
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000248 	.word	0x20000248

080001ec <KeyboardClick>:

void KeyboardClick(uint8_t *data){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 8000202:	2302      	movs	r3, #2
 8000204:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 8000206:	2300      	movs	r3, #0
 8000208:	75fb      	strb	r3, [r7, #23]
 800020a:	e00c      	b.n	8000226 <KeyboardClick+0x3a>
		data_out[i+1] = data[i];
 800020c:	7dfb      	ldrb	r3, [r7, #23]
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	441a      	add	r2, r3
 8000212:	7dfb      	ldrb	r3, [r7, #23]
 8000214:	3301      	adds	r3, #1
 8000216:	7812      	ldrb	r2, [r2, #0]
 8000218:	3318      	adds	r3, #24
 800021a:	443b      	add	r3, r7
 800021c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 8000220:	7dfb      	ldrb	r3, [r7, #23]
 8000222:	3301      	adds	r3, #1
 8000224:	75fb      	strb	r3, [r7, #23]
 8000226:	7dfb      	ldrb	r3, [r7, #23]
 8000228:	2b07      	cmp	r3, #7
 800022a:	d9ef      	bls.n	800020c <KeyboardClick+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 800022c:	f107 030c 	add.w	r3, r7, #12
 8000230:	2209      	movs	r2, #9
 8000232:	4619      	mov	r1, r3
 8000234:	4805      	ldr	r0, [pc, #20]	@ (800024c <KeyboardClick+0x60>)
 8000236:	f007 fd27 	bl	8007c88 <USBD_HID_SendReport>
	HAL_Delay(30);
 800023a:	201e      	movs	r0, #30
 800023c:	f000 fc24 	bl	8000a88 <HAL_Delay>
	KeyboardRemove();
 8000240:	f000 f806 	bl	8000250 <KeyboardRemove>
}
 8000244:	bf00      	nop
 8000246:	3718      	adds	r7, #24
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000248 	.word	0x20000248

08000250 <KeyboardRemove>:

void KeyboardRemove(){
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
	uint8_t data_out[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 8000256:	4a07      	ldr	r2, [pc, #28]	@ (8000274 <KeyboardRemove+0x24>)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	ca07      	ldmia	r2, {r0, r1, r2}
 800025c:	c303      	stmia	r3!, {r0, r1}
 800025e:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2209      	movs	r2, #9
 8000264:	4619      	mov	r1, r3
 8000266:	4804      	ldr	r0, [pc, #16]	@ (8000278 <KeyboardRemove+0x28>)
 8000268:	f007 fd0e 	bl	8007c88 <USBD_HID_SendReport>
}
 800026c:	bf00      	nop
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	0800861c 	.word	0x0800861c
 8000278:	20000248 	.word	0x20000248

0800027c <MouseCommandSetup>:
 */

#include <MouseModule.h>
extern USBD_HandleTypeDef hUsbDeviceFS;

void MouseCommandSetup(Action *act){
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	785b      	ldrb	r3, [r3, #1]
 8000288:	2b03      	cmp	r3, #3
 800028a:	d00c      	beq.n	80002a6 <MouseCommandSetup+0x2a>
 800028c:	2b03      	cmp	r3, #3
 800028e:	dc13      	bgt.n	80002b8 <MouseCommandSetup+0x3c>
 8000290:	2b01      	cmp	r3, #1
 8000292:	d002      	beq.n	800029a <MouseCommandSetup+0x1e>
 8000294:	2b02      	cmp	r3, #2
 8000296:	d00c      	beq.n	80002b2 <MouseCommandSetup+0x36>
			break;
		case(REMOVE_COMMAND):
			MouseRemove();
			break;
	}
}
 8000298:	e00e      	b.n	80002b8 <MouseCommandSetup+0x3c>
			MouseSet(act->data);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	3302      	adds	r3, #2
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 f80e 	bl	80002c0 <MouseSet>
			break;
 80002a4:	e008      	b.n	80002b8 <MouseCommandSetup+0x3c>
			MouseClick(act->data[0]);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	789b      	ldrb	r3, [r3, #2]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f836 	bl	800031c <MouseClick>
			break;
 80002b0:	e002      	b.n	80002b8 <MouseCommandSetup+0x3c>
			MouseRemove();
 80002b2:	f000 f855 	bl	8000360 <MouseRemove>
			break;
 80002b6:	bf00      	nop
}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <MouseSet>:

void MouseSet(uint8_t *data){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 80002c8:	4a12      	ldr	r2, [pc, #72]	@ (8000314 <MouseSet+0x54>)
 80002ca:	f107 0308 	add.w	r3, r7, #8
 80002ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d2:	6018      	str	r0, [r3, #0]
 80002d4:	3304      	adds	r3, #4
 80002d6:	7019      	strb	r1, [r3, #0]
	for(uint8_t i=0; i<4; i++)
 80002d8:	2300      	movs	r3, #0
 80002da:	73fb      	strb	r3, [r7, #15]
 80002dc:	e00c      	b.n	80002f8 <MouseSet+0x38>
		data_out[i+1] = data[i];
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	441a      	add	r2, r3
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	3301      	adds	r3, #1
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	3310      	adds	r3, #16
 80002ec:	443b      	add	r3, r7
 80002ee:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i=0; i<4; i++)
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	3301      	adds	r3, #1
 80002f6:	73fb      	strb	r3, [r7, #15]
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	d9ef      	bls.n	80002de <MouseSet+0x1e>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80002fe:	f107 0308 	add.w	r3, r7, #8
 8000302:	2205      	movs	r2, #5
 8000304:	4619      	mov	r1, r3
 8000306:	4804      	ldr	r0, [pc, #16]	@ (8000318 <MouseSet+0x58>)
 8000308:	f007 fcbe 	bl	8007c88 <USBD_HID_SendReport>
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	08008628 	.word	0x08008628
 8000318:	20000248 	.word	0x20000248

0800031c <MouseClick>:

void MouseClick(uint8_t buttons){
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[5] = {0x01, buttons, 0, 0, 0};
 8000326:	2301      	movs	r3, #1
 8000328:	723b      	strb	r3, [r7, #8]
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	727b      	strb	r3, [r7, #9]
 800032e:	2300      	movs	r3, #0
 8000330:	72bb      	strb	r3, [r7, #10]
 8000332:	2300      	movs	r3, #0
 8000334:	72fb      	strb	r3, [r7, #11]
 8000336:	2300      	movs	r3, #0
 8000338:	733b      	strb	r3, [r7, #12]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	2205      	movs	r2, #5
 8000340:	4619      	mov	r1, r3
 8000342:	4806      	ldr	r0, [pc, #24]	@ (800035c <MouseClick+0x40>)
 8000344:	f007 fca0 	bl	8007c88 <USBD_HID_SendReport>
	HAL_Delay(30);
 8000348:	201e      	movs	r0, #30
 800034a:	f000 fb9d 	bl	8000a88 <HAL_Delay>
	MouseRemove();
 800034e:	f000 f807 	bl	8000360 <MouseRemove>
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000248 	.word	0x20000248

08000360 <MouseRemove>:

void MouseRemove(){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8000366:	4a08      	ldr	r2, [pc, #32]	@ (8000388 <MouseRemove+0x28>)
 8000368:	463b      	mov	r3, r7
 800036a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800036e:	6018      	str	r0, [r3, #0]
 8000370:	3304      	adds	r3, #4
 8000372:	7019      	strb	r1, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8000374:	463b      	mov	r3, r7
 8000376:	2205      	movs	r2, #5
 8000378:	4619      	mov	r1, r3
 800037a:	4804      	ldr	r0, [pc, #16]	@ (800038c <MouseRemove+0x2c>)
 800037c:	f007 fc84 	bl	8007c88 <USBD_HID_SendReport>
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	08008628 	.word	0x08008628
 800038c:	20000248 	.word	0x20000248

08000390 <HAL_UART_RxCpltCallback>:
uint8_t length = 0;
uint8_t parsedData = 0;
uint8_t buffer[32] = {};
uint32_t timer = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	uint8_t byte = rxcall;
 8000398:	4b29      	ldr	r3, [pc, #164]	@ (8000440 <HAL_UART_RxCpltCallback+0xb0>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	73fb      	strb	r3, [r7, #15]
	if((HAL_GetTick()-timer) > 2){
 800039e:	f000 fb69 	bl	8000a74 <HAL_GetTick>
 80003a2:	4602      	mov	r2, r0
 80003a4:	4b27      	ldr	r3, [pc, #156]	@ (8000444 <HAL_UART_RxCpltCallback+0xb4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	d905      	bls.n	80003ba <HAL_UART_RxCpltCallback+0x2a>
		length = 0;
 80003ae:	4b26      	ldr	r3, [pc, #152]	@ (8000448 <HAL_UART_RxCpltCallback+0xb8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
		parsedData = 0;
 80003b4:	4b25      	ldr	r3, [pc, #148]	@ (800044c <HAL_UART_RxCpltCallback+0xbc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
	}
	if(byte == HEADER || parsedData > 0){
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	2bc5      	cmp	r3, #197	@ 0xc5
 80003be:	d003      	beq.n	80003c8 <HAL_UART_RxCpltCallback+0x38>
 80003c0:	4b22      	ldr	r3, [pc, #136]	@ (800044c <HAL_UART_RxCpltCallback+0xbc>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d02d      	beq.n	8000424 <HAL_UART_RxCpltCallback+0x94>
		buffer[parsedData] = byte;
 80003c8:	4b20      	ldr	r3, [pc, #128]	@ (800044c <HAL_UART_RxCpltCallback+0xbc>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4619      	mov	r1, r3
 80003ce:	4a20      	ldr	r2, [pc, #128]	@ (8000450 <HAL_UART_RxCpltCallback+0xc0>)
 80003d0:	7bfb      	ldrb	r3, [r7, #15]
 80003d2:	5453      	strb	r3, [r2, r1]
		if(parsedData == 3)
 80003d4:	4b1d      	ldr	r3, [pc, #116]	@ (800044c <HAL_UART_RxCpltCallback+0xbc>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	d102      	bne.n	80003e2 <HAL_UART_RxCpltCallback+0x52>
			length = byte;
 80003dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000448 <HAL_UART_RxCpltCallback+0xb8>)
 80003de:	7bfb      	ldrb	r3, [r7, #15]
 80003e0:	7013      	strb	r3, [r2, #0]
		if(parsedData >= length+4){
 80003e2:	4b19      	ldr	r3, [pc, #100]	@ (8000448 <HAL_UART_RxCpltCallback+0xb8>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	3303      	adds	r3, #3
 80003e8:	4a18      	ldr	r2, [pc, #96]	@ (800044c <HAL_UART_RxCpltCallback+0xbc>)
 80003ea:	7812      	ldrb	r2, [r2, #0]
 80003ec:	4293      	cmp	r3, r2
 80003ee:	da13      	bge.n	8000418 <HAL_UART_RxCpltCallback+0x88>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003f4:	4817      	ldr	r0, [pc, #92]	@ (8000454 <HAL_UART_RxCpltCallback+0xc4>)
 80003f6:	f000 fec7 	bl	8001188 <HAL_GPIO_TogglePin>
			ParsingData(buffer, parsedData+1);
 80003fa:	4b14      	ldr	r3, [pc, #80]	@ (800044c <HAL_UART_RxCpltCallback+0xbc>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	3301      	adds	r3, #1
 8000400:	b2db      	uxtb	r3, r3
 8000402:	4619      	mov	r1, r3
 8000404:	4812      	ldr	r0, [pc, #72]	@ (8000450 <HAL_UART_RxCpltCallback+0xc0>)
 8000406:	f000 f885 	bl	8000514 <ParsingData>
			length = 0;
 800040a:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <HAL_UART_RxCpltCallback+0xb8>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
			parsedData = 0;
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <HAL_UART_RxCpltCallback+0xbc>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
 8000416:	e005      	b.n	8000424 <HAL_UART_RxCpltCallback+0x94>
		}else
			parsedData++;
 8000418:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <HAL_UART_RxCpltCallback+0xbc>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b0a      	ldr	r3, [pc, #40]	@ (800044c <HAL_UART_RxCpltCallback+0xbc>)
 8000422:	701a      	strb	r2, [r3, #0]
	}
	timer = HAL_GetTick();
 8000424:	f000 fb26 	bl	8000a74 <HAL_GetTick>
 8000428:	4603      	mov	r3, r0
 800042a:	4a06      	ldr	r2, [pc, #24]	@ (8000444 <HAL_UART_RxCpltCallback+0xb4>)
 800042c:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart,&rxcall,1);
 800042e:	2201      	movs	r2, #1
 8000430:	4903      	ldr	r1, [pc, #12]	@ (8000440 <HAL_UART_RxCpltCallback+0xb0>)
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f003 f9ab 	bl	800378e <HAL_UART_Receive_IT>
}
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200001d0 	.word	0x200001d0
 8000444:	200001cc 	.word	0x200001cc
 8000448:	200001a8 	.word	0x200001a8
 800044c:	200001a9 	.word	0x200001a9
 8000450:	200001ac 	.word	0x200001ac
 8000454:	40011000 	.word	0x40011000

08000458 <crc8>:
#ifndef INC_CRC8_H_
#define INC_CRC8_H_

#include "main.h"

uint8_t crc8(uint8_t *buffer, uint8_t size) {
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < size; i++) {
 8000468:	2300      	movs	r3, #0
 800046a:	73bb      	strb	r3, [r7, #14]
 800046c:	e027      	b.n	80004be <crc8+0x66>
		uint8_t data = buffer[i];
 800046e:	7bbb      	ldrb	r3, [r7, #14]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	4413      	add	r3, r2
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8000478:	2308      	movs	r3, #8
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	e019      	b.n	80004b2 <crc8+0x5a>
		crc = ((crc ^ data) & 1) ? (crc >> 1) ^ 0x8C : (crc >> 1);
 800047e:	7bfa      	ldrb	r2, [r7, #15]
 8000480:	7b7b      	ldrb	r3, [r7, #13]
 8000482:	4053      	eors	r3, r2
 8000484:	b2db      	uxtb	r3, r3
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d007      	beq.n	800049e <crc8+0x46>
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	085b      	lsrs	r3, r3, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8000498:	43db      	mvns	r3, r3
 800049a:	b2db      	uxtb	r3, r3
 800049c:	e002      	b.n	80004a4 <crc8+0x4c>
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	085b      	lsrs	r3, r3, #1
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	73fb      	strb	r3, [r7, #15]
		data >>= 1;
 80004a6:	7b7b      	ldrb	r3, [r7, #13]
 80004a8:	085b      	lsrs	r3, r3, #1
 80004aa:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dce2      	bgt.n	800047e <crc8+0x26>
	for (uint8_t i = 0; i < size; i++) {
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	3301      	adds	r3, #1
 80004bc:	73bb      	strb	r3, [r7, #14]
 80004be:	7bba      	ldrb	r2, [r7, #14]
 80004c0:	78fb      	ldrb	r3, [r7, #3]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d3d3      	bcc.n	800046e <crc8+0x16>
		}
	}
	return crc;
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
	...

080004d4 <answer>:
#include "UsartController.h"
#include "crc8.h"

extern UART_HandleTypeDef huart3;

void answer(uint8_t data){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[3] = {HEADER, data, 0};
 80004de:	23c5      	movs	r3, #197	@ 0xc5
 80004e0:	733b      	strb	r3, [r7, #12]
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	737b      	strb	r3, [r7, #13]
 80004e6:	2300      	movs	r3, #0
 80004e8:	73bb      	strb	r3, [r7, #14]
	data_out[2] = crc8(data_out, 2);
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	2102      	movs	r1, #2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ffb1 	bl	8000458 <crc8>
 80004f6:	4603      	mov	r3, r0
 80004f8:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, data_out, 3, 100);
 80004fa:	f107 010c 	add.w	r1, r7, #12
 80004fe:	2364      	movs	r3, #100	@ 0x64
 8000500:	2203      	movs	r2, #3
 8000502:	4803      	ldr	r0, [pc, #12]	@ (8000510 <answer+0x3c>)
 8000504:	f003 f8b8 	bl	8003678 <HAL_UART_Transmit>
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200001f8 	.word	0x200001f8

08000514 <ParsingData>:

#include "UsartRouter.h"
#include "crc8.h"
#include "UsartAnswerModule.h"

void ParsingData(uint8_t *buffer, uint8_t len){
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	70fb      	strb	r3, [r7, #3]
	if(buffer[0] == HEADER){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2bc5      	cmp	r3, #197	@ 0xc5
 8000526:	d13f      	bne.n	80005a8 <ParsingData+0x94>
		if(buffer[3]+5 == len){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3303      	adds	r3, #3
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	1d5a      	adds	r2, r3, #5
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	429a      	cmp	r2, r3
 8000534:	d138      	bne.n	80005a8 <ParsingData+0x94>
			if(crc8(buffer, buffer[3]+4) == buffer[buffer[3]+4]){
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3303      	adds	r3, #3
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3304      	adds	r3, #4
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff ff88 	bl	8000458 <crc8>
 8000548:	4603      	mov	r3, r0
 800054a:	4619      	mov	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3303      	adds	r3, #3
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3304      	adds	r3, #4
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	4299      	cmp	r1, r3
 800055c:	d121      	bne.n	80005a2 <ParsingData+0x8e>
				answer(USART_OK);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ffb8 	bl	80004d4 <answer>
				action.command = buffer[2];
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	789a      	ldrb	r2, [r3, #2]
 8000568:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <ParsingData+0x9c>)
 800056a:	705a      	strb	r2, [r3, #1]
				for(uint8_t i=0; i<buffer[3]; i++){
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e00c      	b.n	800058c <ParsingData+0x78>
					action.data[i] = buffer[i+4];
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	3304      	adds	r3, #4
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	441a      	add	r2, r3
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	7811      	ldrb	r1, [r2, #0]
 800057e:	4a0c      	ldr	r2, [pc, #48]	@ (80005b0 <ParsingData+0x9c>)
 8000580:	4413      	add	r3, r2
 8000582:	460a      	mov	r2, r1
 8000584:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<buffer[3]; i++){
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	3301      	adds	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3303      	adds	r3, #3
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	7bfa      	ldrb	r2, [r7, #15]
 8000594:	429a      	cmp	r2, r3
 8000596:	d3ec      	bcc.n	8000572 <ParsingData+0x5e>
				}
				action.device = buffer[1];
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	785a      	ldrb	r2, [r3, #1]
 800059c:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <ParsingData+0x9c>)
 800059e:	701a      	strb	r2, [r3, #0]
			}else
				answer(USART_ERROR);
		}
	}
}
 80005a0:	e002      	b.n	80005a8 <ParsingData+0x94>
				answer(USART_ERROR);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff ff96 	bl	80004d4 <answer>
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200001d4 	.word	0x200001d4

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c8:	4b24      	ldr	r3, [pc, #144]	@ (800065c <MX_GPIO_Init+0xa8>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a23      	ldr	r2, [pc, #140]	@ (800065c <MX_GPIO_Init+0xa8>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <MX_GPIO_Init+0xa8>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0310 	and.w	r3, r3, #16
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <MX_GPIO_Init+0xa8>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a1d      	ldr	r2, [pc, #116]	@ (800065c <MX_GPIO_Init+0xa8>)
 80005e6:	f043 0320 	orr.w	r3, r3, #32
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b1b      	ldr	r3, [pc, #108]	@ (800065c <MX_GPIO_Init+0xa8>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0320 	and.w	r3, r3, #32
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b18      	ldr	r3, [pc, #96]	@ (800065c <MX_GPIO_Init+0xa8>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a17      	ldr	r2, [pc, #92]	@ (800065c <MX_GPIO_Init+0xa8>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b15      	ldr	r3, [pc, #84]	@ (800065c <MX_GPIO_Init+0xa8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <MX_GPIO_Init+0xa8>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a11      	ldr	r2, [pc, #68]	@ (800065c <MX_GPIO_Init+0xa8>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <MX_GPIO_Init+0xa8>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0308 	and.w	r3, r3, #8
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800062e:	480c      	ldr	r0, [pc, #48]	@ (8000660 <MX_GPIO_Init+0xac>)
 8000630:	f000 fd92 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000634:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2302      	movs	r3, #2
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	4619      	mov	r1, r3
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_GPIO_Init+0xac>)
 800064e:	f000 fbff 	bl	8000e50 <HAL_GPIO_Init>

}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	40011000 	.word	0x40011000

08000664 <main>:
Action action = {0, 0, {}};

void SystemClock_Config(void);

int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_Init();
 8000668:	f000 f9ac 	bl	80009c4 <HAL_Init>
	SystemClock_Config();
 800066c:	f000 f82c 	bl	80006c8 <SystemClock_Config>
	MX_GPIO_Init();
 8000670:	f7ff ffa0 	bl	80005b4 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000674:	f007 fbe2 	bl	8007e3c <MX_USB_DEVICE_Init>
	MX_USART3_UART_Init();
 8000678:	f000 f900 	bl	800087c <MX_USART3_UART_Init>
	HAL_UART_Receive_IT(&huart3,&rxcall,1);
 800067c:	2201      	movs	r2, #1
 800067e:	490f      	ldr	r1, [pc, #60]	@ (80006bc <main+0x58>)
 8000680:	480f      	ldr	r0, [pc, #60]	@ (80006c0 <main+0x5c>)
 8000682:	f003 f884 	bl	800378e <HAL_UART_Receive_IT>

	while (1)
	{
		switch(action.device){
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <main+0x60>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d014      	beq.n	80006b8 <main+0x54>
 800068e:	2b03      	cmp	r3, #3
 8000690:	dcf9      	bgt.n	8000686 <main+0x22>
 8000692:	2b01      	cmp	r3, #1
 8000694:	d002      	beq.n	800069c <main+0x38>
 8000696:	2b02      	cmp	r3, #2
 8000698:	d007      	beq.n	80006aa <main+0x46>
 800069a:	e7f4      	b.n	8000686 <main+0x22>
			case(MOUSE):
				MouseCommandSetup(&action);
 800069c:	4809      	ldr	r0, [pc, #36]	@ (80006c4 <main+0x60>)
 800069e:	f7ff fded 	bl	800027c <MouseCommandSetup>
				action.device = 0;
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <main+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
				break;
 80006a8:	e007      	b.n	80006ba <main+0x56>
			case(KEYBOARD):
				KeyboardSetup(&action);
 80006aa:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <main+0x60>)
 80006ac:	f7ff fd4e 	bl	800014c <KeyboardSetup>
				action.device = 0;
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <main+0x60>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
				break;
 80006b6:	e000      	b.n	80006ba <main+0x56>
			case(ANIMATION):
				break;
 80006b8:	bf00      	nop
		switch(action.device){
 80006ba:	e7e4      	b.n	8000686 <main+0x22>
 80006bc:	200001d0 	.word	0x200001d0
 80006c0:	200001f8 	.word	0x200001f8
 80006c4:	200001d4 	.word	0x200001d4

080006c8 <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006d2:	2228      	movs	r2, #40	@ 0x28
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f007 ff68 	bl	80085ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000700:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000714:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000718:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fa94 	bl	8002c4c <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800072a:	f000 f828 	bl	800077e <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fd00 	bl	8003150 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000756:	f000 f812 	bl	800077e <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800075a:	2310      	movs	r3, #16
 800075c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800075e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000762:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fe80 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000772:	f000 f804 	bl	800077e <Error_Handler>
	}
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	@ 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <Error_Handler>:

void Error_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000782:	b672      	cpsid	i
}
 8000784:	bf00      	nop
  __disable_irq();
  while (1){}
 8000786:	bf00      	nop
 8000788:	e7fd      	b.n	8000786 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <HAL_MspInit+0x5c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007c2:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <HAL_MspInit+0x60>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <HAL_MspInit+0x60>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <NMI_Handler+0x4>

080007f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <MemManage_Handler+0x4>

08000808 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <UsageFault_Handler+0x4>

08000818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000840:	f000 f906 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800084c:	4802      	ldr	r0, [pc, #8]	@ (8000858 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800084e:	f000 fdd0 	bl	80013f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000070c 	.word	0x2000070c

0800085c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000860:	4802      	ldr	r0, [pc, #8]	@ (800086c <USART3_IRQHandler+0x10>)
 8000862:	f002 ffb9 	bl	80037d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200001f8 	.word	0x200001f8

08000870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_USART3_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <MX_USART3_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_USART3_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_USART3_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_USART3_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <MX_USART3_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_USART3_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_USART3_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_USART3_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_USART3_UART_Init+0x4c>)
 80008b4:	f002 fe90 	bl	80035d8 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f7ff ff5e 	bl	800077e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001f8 	.word	0x200001f8
 80008cc:	40004800 	.word	0x40004800

080008d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a20      	ldr	r2, [pc, #128]	@ (800096c <HAL_UART_MspInit+0x9c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d139      	bne.n	8000964 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <HAL_UART_MspInit+0xa0>)
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000970 <HAL_UART_MspInit+0xa0>)
 80008f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008fa:	61d3      	str	r3, [r2, #28]
 80008fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <HAL_UART_MspInit+0xa0>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <HAL_UART_MspInit+0xa0>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a18      	ldr	r2, [pc, #96]	@ (8000970 <HAL_UART_MspInit+0xa0>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <HAL_UART_MspInit+0xa0>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000924:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4619      	mov	r1, r3
 8000934:	480f      	ldr	r0, [pc, #60]	@ (8000974 <HAL_UART_MspInit+0xa4>)
 8000936:	f000 fa8b 	bl	8000e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800093a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800093e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	4809      	ldr	r0, [pc, #36]	@ (8000974 <HAL_UART_MspInit+0xa4>)
 8000950:	f000 fa7e 	bl	8000e50 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2101      	movs	r1, #1
 8000958:	2027      	movs	r0, #39	@ 0x27
 800095a:	f000 f990 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800095e:	2027      	movs	r0, #39	@ 0x27
 8000960:	f000 f9a9 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40004800 	.word	0x40004800
 8000970:	40021000 	.word	0x40021000
 8000974:	40010c00 	.word	0x40010c00

08000978 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000978:	f7ff ff7a 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480b      	ldr	r0, [pc, #44]	@ (80009ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800097e:	490c      	ldr	r1, [pc, #48]	@ (80009b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000980:	4a0c      	ldr	r2, [pc, #48]	@ (80009b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a09      	ldr	r2, [pc, #36]	@ (80009b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000994:	4c09      	ldr	r4, [pc, #36]	@ (80009bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a2:	f007 fe0b 	bl	80085bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a6:	f7ff fe5d 	bl	8000664 <main>
  bx lr
 80009aa:	4770      	bx	lr
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80009b4:	08008698 	.word	0x08008698
  ldr r2, =_sbss
 80009b8:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80009bc:	200009f8 	.word	0x200009f8

080009c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_2_IRQHandler>
	...

080009c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_Init+0x28>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <HAL_Init+0x28>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f947 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	200f      	movs	r0, #15
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff fed4 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f95f 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f927 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	@ (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_IncTick+0x20>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a03      	ldr	r2, [pc, #12]	@ (8000a70 <HAL_IncTick+0x20>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000240 	.word	0x20000240

08000a74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b02      	ldr	r3, [pc, #8]	@ (8000a84 <HAL_GetTick+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	20000240 	.word	0x20000240

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff fff0 	bl	8000a74 <HAL_GetTick>
 8000a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <HAL_Delay+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aae:	bf00      	nop
 8000ab0:	f7ff ffe0 	bl	8000a74 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4906      	ldr	r1, [pc, #24]	@ (8000b68 <__NVIC_EnableIRQ+0x34>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	@ (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	@ (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	@ 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	@ 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff90 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff2d 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff42 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff90 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5f 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff35 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d008      	beq.n	8000d14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2204      	movs	r2, #4
 8000d06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e020      	b.n	8000d56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 020e 	bic.w	r2, r2, #14
 8000d22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0201 	bic.w	r2, r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d005      	beq.n	8000d84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	e051      	b.n	8000e28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 020e 	bic.w	r2, r2, #14
 8000d92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0201 	bic.w	r2, r2, #1
 8000da2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a22      	ldr	r2, [pc, #136]	@ (8000e34 <HAL_DMA_Abort_IT+0xd4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d029      	beq.n	8000e02 <HAL_DMA_Abort_IT+0xa2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a21      	ldr	r2, [pc, #132]	@ (8000e38 <HAL_DMA_Abort_IT+0xd8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d022      	beq.n	8000dfe <HAL_DMA_Abort_IT+0x9e>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e3c <HAL_DMA_Abort_IT+0xdc>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01a      	beq.n	8000df8 <HAL_DMA_Abort_IT+0x98>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e40 <HAL_DMA_Abort_IT+0xe0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d012      	beq.n	8000df2 <HAL_DMA_Abort_IT+0x92>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e44 <HAL_DMA_Abort_IT+0xe4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d00a      	beq.n	8000dec <HAL_DMA_Abort_IT+0x8c>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a1b      	ldr	r2, [pc, #108]	@ (8000e48 <HAL_DMA_Abort_IT+0xe8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d102      	bne.n	8000de6 <HAL_DMA_Abort_IT+0x86>
 8000de0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000de4:	e00e      	b.n	8000e04 <HAL_DMA_Abort_IT+0xa4>
 8000de6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dea:	e00b      	b.n	8000e04 <HAL_DMA_Abort_IT+0xa4>
 8000dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df0:	e008      	b.n	8000e04 <HAL_DMA_Abort_IT+0xa4>
 8000df2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df6:	e005      	b.n	8000e04 <HAL_DMA_Abort_IT+0xa4>
 8000df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dfc:	e002      	b.n	8000e04 <HAL_DMA_Abort_IT+0xa4>
 8000dfe:	2310      	movs	r3, #16
 8000e00:	e000      	b.n	8000e04 <HAL_DMA_Abort_IT+0xa4>
 8000e02:	2301      	movs	r3, #1
 8000e04:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <HAL_DMA_Abort_IT+0xec>)
 8000e06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	4798      	blx	r3
    } 
  }
  return status;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40020008 	.word	0x40020008
 8000e38:	4002001c 	.word	0x4002001c
 8000e3c:	40020030 	.word	0x40020030
 8000e40:	40020044 	.word	0x40020044
 8000e44:	40020058 	.word	0x40020058
 8000e48:	4002006c 	.word	0x4002006c
 8000e4c:	40020000 	.word	0x40020000

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b08b      	sub	sp, #44	@ 0x2c
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	e169      	b.n	8001138 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e64:	2201      	movs	r2, #1
 8000e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8158 	bne.w	8001132 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	4a9a      	ldr	r2, [pc, #616]	@ (80010f0 <HAL_GPIO_Init+0x2a0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d05e      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
 8000e8c:	4a98      	ldr	r2, [pc, #608]	@ (80010f0 <HAL_GPIO_Init+0x2a0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d875      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000e92:	4a98      	ldr	r2, [pc, #608]	@ (80010f4 <HAL_GPIO_Init+0x2a4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d058      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
 8000e98:	4a96      	ldr	r2, [pc, #600]	@ (80010f4 <HAL_GPIO_Init+0x2a4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d86f      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000e9e:	4a96      	ldr	r2, [pc, #600]	@ (80010f8 <HAL_GPIO_Init+0x2a8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d052      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
 8000ea4:	4a94      	ldr	r2, [pc, #592]	@ (80010f8 <HAL_GPIO_Init+0x2a8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d869      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000eaa:	4a94      	ldr	r2, [pc, #592]	@ (80010fc <HAL_GPIO_Init+0x2ac>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d04c      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
 8000eb0:	4a92      	ldr	r2, [pc, #584]	@ (80010fc <HAL_GPIO_Init+0x2ac>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d863      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000eb6:	4a92      	ldr	r2, [pc, #584]	@ (8001100 <HAL_GPIO_Init+0x2b0>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d046      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
 8000ebc:	4a90      	ldr	r2, [pc, #576]	@ (8001100 <HAL_GPIO_Init+0x2b0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d85d      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	d82a      	bhi.n	8000f1c <HAL_GPIO_Init+0xcc>
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d859      	bhi.n	8000f7e <HAL_GPIO_Init+0x12e>
 8000eca:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed0 <HAL_GPIO_Init+0x80>)
 8000ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed0:	08000f4b 	.word	0x08000f4b
 8000ed4:	08000f25 	.word	0x08000f25
 8000ed8:	08000f37 	.word	0x08000f37
 8000edc:	08000f79 	.word	0x08000f79
 8000ee0:	08000f7f 	.word	0x08000f7f
 8000ee4:	08000f7f 	.word	0x08000f7f
 8000ee8:	08000f7f 	.word	0x08000f7f
 8000eec:	08000f7f 	.word	0x08000f7f
 8000ef0:	08000f7f 	.word	0x08000f7f
 8000ef4:	08000f7f 	.word	0x08000f7f
 8000ef8:	08000f7f 	.word	0x08000f7f
 8000efc:	08000f7f 	.word	0x08000f7f
 8000f00:	08000f7f 	.word	0x08000f7f
 8000f04:	08000f7f 	.word	0x08000f7f
 8000f08:	08000f7f 	.word	0x08000f7f
 8000f0c:	08000f7f 	.word	0x08000f7f
 8000f10:	08000f7f 	.word	0x08000f7f
 8000f14:	08000f2d 	.word	0x08000f2d
 8000f18:	08000f41 	.word	0x08000f41
 8000f1c:	4a79      	ldr	r2, [pc, #484]	@ (8001104 <HAL_GPIO_Init+0x2b4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f22:	e02c      	b.n	8000f7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	623b      	str	r3, [r7, #32]
          break;
 8000f2a:	e029      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	3304      	adds	r3, #4
 8000f32:	623b      	str	r3, [r7, #32]
          break;
 8000f34:	e024      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	3308      	adds	r3, #8
 8000f3c:	623b      	str	r3, [r7, #32]
          break;
 8000f3e:	e01f      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	330c      	adds	r3, #12
 8000f46:	623b      	str	r3, [r7, #32]
          break;
 8000f48:	e01a      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f52:	2304      	movs	r3, #4
 8000f54:	623b      	str	r3, [r7, #32]
          break;
 8000f56:	e013      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d105      	bne.n	8000f6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f60:	2308      	movs	r3, #8
 8000f62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	611a      	str	r2, [r3, #16]
          break;
 8000f6a:	e009      	b.n	8000f80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69fa      	ldr	r2, [r7, #28]
 8000f74:	615a      	str	r2, [r3, #20]
          break;
 8000f76:	e003      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
          break;
 8000f7c:	e000      	b.n	8000f80 <HAL_GPIO_Init+0x130>
          break;
 8000f7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	2bff      	cmp	r3, #255	@ 0xff
 8000f84:	d801      	bhi.n	8000f8a <HAL_GPIO_Init+0x13a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	e001      	b.n	8000f8e <HAL_GPIO_Init+0x13e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	2bff      	cmp	r3, #255	@ 0xff
 8000f94:	d802      	bhi.n	8000f9c <HAL_GPIO_Init+0x14c>
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	e002      	b.n	8000fa2 <HAL_GPIO_Init+0x152>
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	3b08      	subs	r3, #8
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	210f      	movs	r1, #15
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	6a39      	ldr	r1, [r7, #32]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 80b1 	beq.w	8001132 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8001108 <HAL_GPIO_Init+0x2b8>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a4c      	ldr	r2, [pc, #304]	@ (8001108 <HAL_GPIO_Init+0x2b8>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8001108 <HAL_GPIO_Init+0x2b8>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fe8:	4a48      	ldr	r2, [pc, #288]	@ (800110c <HAL_GPIO_Init+0x2bc>)
 8000fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4013      	ands	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a40      	ldr	r2, [pc, #256]	@ (8001110 <HAL_GPIO_Init+0x2c0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d013      	beq.n	800103c <HAL_GPIO_Init+0x1ec>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a3f      	ldr	r2, [pc, #252]	@ (8001114 <HAL_GPIO_Init+0x2c4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d00d      	beq.n	8001038 <HAL_GPIO_Init+0x1e8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a3e      	ldr	r2, [pc, #248]	@ (8001118 <HAL_GPIO_Init+0x2c8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_Init+0x1e4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a3d      	ldr	r2, [pc, #244]	@ (800111c <HAL_GPIO_Init+0x2cc>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d101      	bne.n	8001030 <HAL_GPIO_Init+0x1e0>
 800102c:	2303      	movs	r3, #3
 800102e:	e006      	b.n	800103e <HAL_GPIO_Init+0x1ee>
 8001030:	2304      	movs	r3, #4
 8001032:	e004      	b.n	800103e <HAL_GPIO_Init+0x1ee>
 8001034:	2302      	movs	r3, #2
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x1ee>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <HAL_GPIO_Init+0x1ee>
 800103c:	2300      	movs	r3, #0
 800103e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001040:	f002 0203 	and.w	r2, r2, #3
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	4093      	lsls	r3, r2
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800104e:	492f      	ldr	r1, [pc, #188]	@ (800110c <HAL_GPIO_Init+0x2bc>)
 8001050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	492c      	ldr	r1, [pc, #176]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	608b      	str	r3, [r1, #8]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001076:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	4928      	ldr	r1, [pc, #160]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001090:	4b23      	ldr	r3, [pc, #140]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	4922      	ldr	r1, [pc, #136]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	60cb      	str	r3, [r1, #12]
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	491e      	ldr	r1, [pc, #120]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4918      	ldr	r1, [pc, #96]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4914      	ldr	r1, [pc, #80]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d021      	beq.n	8001124 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	490e      	ldr	r1, [pc, #56]	@ (8001120 <HAL_GPIO_Init+0x2d0>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
 80010ec:	e021      	b.n	8001132 <HAL_GPIO_Init+0x2e2>
 80010ee:	bf00      	nop
 80010f0:	10320000 	.word	0x10320000
 80010f4:	10310000 	.word	0x10310000
 80010f8:	10220000 	.word	0x10220000
 80010fc:	10210000 	.word	0x10210000
 8001100:	10120000 	.word	0x10120000
 8001104:	10110000 	.word	0x10110000
 8001108:	40021000 	.word	0x40021000
 800110c:	40010000 	.word	0x40010000
 8001110:	40010800 	.word	0x40010800
 8001114:	40010c00 	.word	0x40010c00
 8001118:	40011000 	.word	0x40011000
 800111c:	40011400 	.word	0x40011400
 8001120:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <HAL_GPIO_Init+0x304>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	43db      	mvns	r3, r3
 800112c:	4909      	ldr	r1, [pc, #36]	@ (8001154 <HAL_GPIO_Init+0x304>)
 800112e:	4013      	ands	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	3301      	adds	r3, #1
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113e:	fa22 f303 	lsr.w	r3, r2, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	f47f ae8e 	bne.w	8000e64 <HAL_GPIO_Init+0x14>
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	372c      	adds	r7, #44	@ 0x2c
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	40010400 	.word	0x40010400

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	611a      	str	r2, [r3, #16]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800119a:	887a      	ldrh	r2, [r7, #2]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4013      	ands	r3, r2
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43d9      	mvns	r1, r3
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	400b      	ands	r3, r1
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	611a      	str	r2, [r3, #16]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0e8      	b.n	800139e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d106      	bne.n	80011e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f006 ff5f 	bl	80080a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2203      	movs	r2, #3
 80011ea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 f87a 	bl	80042f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3304      	adds	r3, #4
 8001206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001208:	f003 f850 	bl	80042ac <USB_CoreInit>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2202      	movs	r2, #2
 8001216:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e0bf      	b.n	800139e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f003 f87e 	bl	8004326 <USB_SetCurrentMode>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2202      	movs	r2, #2
 8001234:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0b0      	b.n	800139e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e03e      	b.n	80012c0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3311      	adds	r3, #17
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	3310      	adds	r3, #16
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3313      	adds	r3, #19
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	3320      	adds	r3, #32
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	440b      	add	r3, r1
 80012a0:	3324      	adds	r3, #36	@ 0x24
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	440b      	add	r3, r1
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	791b      	ldrb	r3, [r3, #4]
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3bb      	bcc.n	8001242 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e044      	b.n	800135a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	440b      	add	r3, r1
 800134c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	3301      	adds	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	791b      	ldrb	r3, [r3, #4]
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	429a      	cmp	r2, r3
 8001362:	d3b5      	bcc.n	80012d0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3304      	adds	r3, #4
 800136c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136e:	f002 ffe6 	bl	800433e <USB_DevInit>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e00c      	b.n	800139e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f005 fa65 	bl	8006866 <USB_DevDisconnect>

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_PCD_Start+0x16>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e016      	b.n	80013ea <HAL_PCD_Start+0x44>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 ff7c 	bl	80042c6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013ce:	2101      	movs	r1, #1
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f007 f8b4 	bl	800853e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 fa39 	bl	8006852 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b088      	sub	sp, #32
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 fa3b 	bl	800687a <USB_ReadInterrupts>
 8001404:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 fb03 	bl	8001a1c <PCD_EP_ISR_Handler>

    return;
 8001416:	e119      	b.n	800164c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141e:	2b00      	cmp	r3, #0
 8001420:	d013      	beq.n	800144a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800142a:	b29a      	uxth	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001434:	b292      	uxth	r2, r2
 8001436:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f006 fead 	bl	800819a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001440:	2100      	movs	r1, #0
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f905 	bl	8001652 <HAL_PCD_SetAddress>

    return;
 8001448:	e100      	b.n	800164c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001466:	b292      	uxth	r2, r2
 8001468:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800146c:	e0ee      	b.n	800164c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800148a:	b292      	uxth	r2, r2
 800148c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001490:	e0dc      	b.n	800164c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d027      	beq.n	80014ec <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0204 	bic.w	r2, r2, #4
 80014ae:	b292      	uxth	r2, r2
 80014b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014bc:	b29a      	uxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0208 	bic.w	r2, r2, #8
 80014c6:	b292      	uxth	r2, r2
 80014c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f006 fe9d 	bl	800820c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014e4:	b292      	uxth	r2, r2
 80014e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014ea:	e0af      	b.n	800164c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 8083 	beq.w	80015fe <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	77fb      	strb	r3, [r7, #31]
 80014fc:	e010      	b.n	8001520 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	7ffb      	ldrb	r3, [r7, #31]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	441a      	add	r2, r3
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	b292      	uxth	r2, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	3320      	adds	r3, #32
 8001514:	443b      	add	r3, r7
 8001516:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800151a:	7ffb      	ldrb	r3, [r7, #31]
 800151c:	3301      	adds	r3, #1
 800151e:	77fb      	strb	r3, [r7, #31]
 8001520:	7ffb      	ldrb	r3, [r7, #31]
 8001522:	2b07      	cmp	r3, #7
 8001524:	d9eb      	bls.n	80014fe <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0201 	orr.w	r2, r2, #1
 8001538:	b292      	uxth	r2, r2
 800153a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	b292      	uxth	r2, r2
 8001552:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001556:	bf00      	nop
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001560:	b29b      	uxth	r3, r3
 8001562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f6      	beq.n	8001558 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001572:	b29a      	uxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800157c:	b292      	uxth	r2, r2
 800157e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001582:	2300      	movs	r3, #0
 8001584:	77fb      	strb	r3, [r7, #31]
 8001586:	e00f      	b.n	80015a8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001588:	7ffb      	ldrb	r3, [r7, #31]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	4611      	mov	r1, r2
 8001590:	7ffa      	ldrb	r2, [r7, #31]
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	440a      	add	r2, r1
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	3320      	adds	r3, #32
 800159a:	443b      	add	r3, r7
 800159c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80015a0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	3301      	adds	r3, #1
 80015a6:	77fb      	strb	r3, [r7, #31]
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	d9ec      	bls.n	8001588 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0208 	orr.w	r2, r2, #8
 80015c0:	b292      	uxth	r2, r2
 80015c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015d8:	b292      	uxth	r2, r2
 80015da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0204 	orr.w	r2, r2, #4
 80015f0:	b292      	uxth	r2, r2
 80015f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f006 fdee 	bl	80081d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015fc:	e026      	b.n	800164c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00f      	beq.n	8001628 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800161a:	b292      	uxth	r2, r2
 800161c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f006 fdac 	bl	800817e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001626:	e011      	b.n	800164c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00c      	beq.n	800164c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001644:	b292      	uxth	r2, r2
 8001646:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800164a:	bf00      	nop
  }
}
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_PCD_SetAddress+0x1a>
 8001668:	2302      	movs	r3, #2
 800166a:	e012      	b.n	8001692 <HAL_PCD_SetAddress+0x40>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	78fa      	ldrb	r2, [r7, #3]
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f005 f8d2 	bl	800682c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	4608      	mov	r0, r1
 80016a4:	4611      	mov	r1, r2
 80016a6:	461a      	mov	r2, r3
 80016a8:	4603      	mov	r3, r0
 80016aa:	70fb      	strb	r3, [r7, #3]
 80016ac:	460b      	mov	r3, r1
 80016ae:	803b      	strh	r3, [r7, #0]
 80016b0:	4613      	mov	r3, r2
 80016b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da0e      	bge.n	80016de <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	f003 0207 	and.w	r2, r3, #7
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	3310      	adds	r3, #16
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2201      	movs	r2, #1
 80016da:	705a      	strb	r2, [r3, #1]
 80016dc:	e00e      	b.n	80016fc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	f003 0207 	and.w	r2, r3, #7
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	b2da      	uxtb	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001708:	883a      	ldrh	r2, [r7, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	78ba      	ldrb	r2, [r7, #2]
 8001712:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001714:	78bb      	ldrb	r3, [r7, #2]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d102      	bne.n	8001720 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_PCD_EP_Open+0x94>
 800172a:	2302      	movs	r3, #2
 800172c:	e00e      	b.n	800174c <HAL_PCD_EP_Open+0xb2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	4618      	mov	r0, r3
 800173e:	f002 fe1b 	bl	8004378 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800174a:	7afb      	ldrb	r3, [r7, #11]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da0e      	bge.n	8001786 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	f003 0207 	and.w	r2, r3, #7
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	3310      	adds	r3, #16
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	705a      	strb	r2, [r3, #1]
 8001784:	e00e      	b.n	80017a4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	f003 0207 	and.w	r2, r3, #7
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_PCD_EP_Close+0x6a>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e00e      	b.n	80017dc <HAL_PCD_EP_Close+0x88>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68f9      	ldr	r1, [r7, #12]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 f993 	bl	8004af8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	460b      	mov	r3, r1
 80017f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	f003 0207 	and.w	r2, r3, #7
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2200      	movs	r2, #0
 8001822:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001824:	7afb      	ldrb	r3, [r7, #11]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	b2da      	uxtb	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6979      	ldr	r1, [r7, #20]
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fb4a 	bl	8004ed0 <USB_EPStartXfer>

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	460b      	mov	r3, r1
 8001854:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001856:	7afb      	ldrb	r3, [r7, #11]
 8001858:	f003 0207 	and.w	r2, r3, #7
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	3310      	adds	r3, #16
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2200      	movs	r2, #0
 800188a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2201      	movs	r2, #1
 8001890:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001892:	7afb      	ldrb	r3, [r7, #11]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	b2da      	uxtb	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6979      	ldr	r1, [r7, #20]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fb13 	bl	8004ed0 <USB_EPStartXfer>

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	7912      	ldrb	r2, [r2, #4]
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e04c      	b.n	800196c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da0e      	bge.n	80018f8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	f003 0207 	and.w	r2, r3, #7
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	3310      	adds	r3, #16
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	705a      	strb	r2, [r3, #1]
 80018f6:	e00c      	b.n	8001912 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	b2da      	uxtb	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_PCD_EP_SetStall+0x7e>
 800192e:	2302      	movs	r3, #2
 8001930:	e01c      	b.n	800196c <HAL_PCD_EP_SetStall+0xb8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68f9      	ldr	r1, [r7, #12]
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fe76 	bl	8006632 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	2b00      	cmp	r3, #0
 800194e:	d108      	bne.n	8001962 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f004 ff9b 	bl	8006898 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	7912      	ldrb	r2, [r2, #4]
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e040      	b.n	8001a14 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001996:	2b00      	cmp	r3, #0
 8001998:	da0e      	bge.n	80019b8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	f003 0207 	and.w	r2, r3, #7
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	3310      	adds	r3, #16
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2201      	movs	r2, #1
 80019b4:	705a      	strb	r2, [r3, #1]
 80019b6:	e00e      	b.n	80019d6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	f003 0207 	and.w	r2, r3, #7
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_PCD_EP_ClrStall+0x82>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e00e      	b.n	8001a14 <HAL_PCD_EP_ClrStall+0xa0>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 fe64 	bl	80066d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b096      	sub	sp, #88	@ 0x58
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a24:	e3bb      	b.n	800219e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a2e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001a40:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f040 8175 	bne.w	8001d34 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d14e      	bne.n	8001af4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a66:	81fb      	strh	r3, [r7, #14]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	89fb      	ldrh	r3, [r7, #14]
 8001a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3310      	adds	r3, #16
 8001a7e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	3302      	adds	r3, #2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aaa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	441a      	add	r2, r3
 8001ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001aba:	2100      	movs	r1, #0
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f006 fb44 	bl	800814a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7b5b      	ldrb	r3, [r3, #13]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8368 	beq.w	800219e <PCD_EP_ISR_Handler+0x782>
 8001ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 8363 	bne.w	800219e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7b5b      	ldrb	r3, [r3, #13]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	735a      	strb	r2, [r3, #13]
 8001af2:	e354      	b.n	800219e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001afa:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d034      	beq.n	8001b7c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	3306      	adds	r3, #6
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b4a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b4e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f004 fef1 	bl	8006938 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b62:	4013      	ands	r3, r2
 8001b64:	823b      	strh	r3, [r7, #16]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	8a3a      	ldrh	r2, [r7, #16]
 8001b6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b70:	b292      	uxth	r2, r2
 8001b72:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f006 fabb 	bl	80080f0 <HAL_PCD_SetupStageCallback>
 8001b7a:	e310      	b.n	800219e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b7c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f280 830c 	bge.w	800219e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b92:	4013      	ands	r3, r2
 8001b94:	83fb      	strh	r3, [r7, #30]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	8bfa      	ldrh	r2, [r7, #30]
 8001b9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ba0:	b292      	uxth	r2, r2
 8001ba2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3306      	adds	r3, #6
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d019      	beq.n	8001c0c <PCD_EP_ISR_Handler+0x1f0>
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d015      	beq.n	8001c0c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be6:	6959      	ldr	r1, [r3, #20]
 8001be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f004 fea1 	bl	8006938 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	441a      	add	r2, r3
 8001c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c02:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c04:	2100      	movs	r1, #0
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f006 fa84 	bl	8008114 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001c16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 82bd 	bne.w	800219e <PCD_EP_ISR_Handler+0x782>
 8001c24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c28:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001c2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001c30:	f000 82b5 	beq.w	800219e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4413      	add	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	801a      	strh	r2, [r3, #0]
 8001c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c6a:	d91d      	bls.n	8001ca8 <PCD_EP_ISR_Handler+0x28c>
 8001c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <PCD_EP_ISR_Handler+0x26a>
 8001c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c82:	3b01      	subs	r3, #1
 8001c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	029b      	lsls	r3, r3, #10
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	801a      	strh	r2, [r3, #0]
 8001ca6:	e026      	b.n	8001cf6 <PCD_EP_ISR_Handler+0x2da>
 8001ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10a      	bne.n	8001cc6 <PCD_EP_ISR_Handler+0x2aa>
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	801a      	strh	r2, [r3, #0]
 8001cc4:	e017      	b.n	8001cf6 <PCD_EP_ISR_Handler+0x2da>
 8001cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	085b      	lsrs	r3, r3, #1
 8001ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <PCD_EP_ISR_Handler+0x2c4>
 8001cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cdc:	3301      	adds	r3, #1
 8001cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	029b      	lsls	r3, r3, #10
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d06:	827b      	strh	r3, [r7, #18]
 8001d08:	8a7b      	ldrh	r3, [r7, #18]
 8001d0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001d0e:	827b      	strh	r3, [r7, #18]
 8001d10:	8a7b      	ldrh	r3, [r7, #18]
 8001d12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001d16:	827b      	strh	r3, [r7, #18]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	8a7b      	ldrh	r3, [r7, #18]
 8001d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	8013      	strh	r3, [r2, #0]
 8001d32:	e234      	b.n	800219e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d48:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f280 80fc 	bge.w	8001f4a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001d68:	4013      	ands	r3, r2
 8001d6a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001d80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d84:	b292      	uxth	r2, r2
 8001d86:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d88:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da0:	7b1b      	ldrb	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d125      	bne.n	8001df2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	3306      	adds	r3, #6
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dce:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001dd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8092 	beq.w	8001f00 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de2:	6959      	ldr	r1, [r3, #20]
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	88da      	ldrh	r2, [r3, #6]
 8001de8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dec:	f004 fda4 	bl	8006938 <USB_ReadPMA>
 8001df0:	e086      	b.n	8001f00 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df4:	78db      	ldrb	r3, [r3, #3]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d10a      	bne.n	8001e10 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f9d9 	bl	80021ba <HAL_PCD_EP_DB_Receive>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001e0e:	e077      	b.n	8001f00 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e2a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	441a      	add	r2, r3
 8001e3c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d024      	beq.n	8001eb8 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	3302      	adds	r3, #2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e96:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d02e      	beq.n	8001f00 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea8:	6959      	ldr	r1, [r3, #20]
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eac:	891a      	ldrh	r2, [r3, #8]
 8001eae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001eb2:	f004 fd41 	bl	8006938 <USB_ReadPMA>
 8001eb6:	e023      	b.n	8001f00 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	3306      	adds	r3, #6
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001ee4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d009      	beq.n	8001f00 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef2:	6959      	ldr	r1, [r3, #20]
 8001ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef6:	895a      	ldrh	r2, [r3, #10]
 8001ef8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001efc:	f004 fd1c 	bl	8006938 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f08:	441a      	add	r2, r3
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f16:	441a      	add	r2, r3
 8001f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <PCD_EP_ISR_Handler+0x514>
 8001f24:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d206      	bcs.n	8001f3e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f006 f8ec 	bl	8008114 <HAL_PCD_DataOutStageCallback>
 8001f3c:	e005      	b.n	8001f4a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 ffc3 	bl	8004ed0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8123 	beq.w	800219e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f58:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	3310      	adds	r3, #16
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	441a      	add	r2, r3
 8001f98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001faa:	78db      	ldrb	r3, [r3, #3]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	f040 80a2 	bne.w	80020f6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fba:	7b1b      	ldrb	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8093 	beq.w	80020e8 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d046      	beq.n	800205c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d126      	bne.n	8002024 <PCD_EP_ISR_Handler+0x608>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	4413      	add	r3, r2
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	011a      	lsls	r2, r3, #4
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ffc:	623b      	str	r3, [r7, #32]
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002008:	b29a      	uxth	r2, r3
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201c:	b29a      	uxth	r2, r3
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	e061      	b.n	80020e8 <PCD_EP_ISR_Handler+0x6cc>
 8002024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002026:	785b      	ldrb	r3, [r3, #1]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d15d      	bne.n	80020e8 <PCD_EP_ISR_Handler+0x6cc>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002040:	4413      	add	r3, r2
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	011a      	lsls	r2, r3, #4
 800204a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800204c:	4413      	add	r3, r2
 800204e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002056:	2200      	movs	r2, #0
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	e045      	b.n	80020e8 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d126      	bne.n	80020b8 <PCD_EP_ISR_Handler+0x69c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800207e:	4413      	add	r3, r2
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
 8002082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	011a      	lsls	r2, r3, #4
 8002088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800208a:	4413      	add	r3, r2
 800208c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002090:	633b      	str	r3, [r7, #48]	@ 0x30
 8002092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800209c:	b29a      	uxth	r2, r3
 800209e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a0:	801a      	strh	r2, [r3, #0]
 80020a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b4:	801a      	strh	r2, [r3, #0]
 80020b6:	e017      	b.n	80020e8 <PCD_EP_ISR_Handler+0x6cc>
 80020b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d113      	bne.n	80020e8 <PCD_EP_ISR_Handler+0x6cc>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ce:	4413      	add	r3, r2
 80020d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	011a      	lsls	r2, r3, #4
 80020d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020da:	4413      	add	r3, r2
 80020dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80020e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e4:	2200      	movs	r2, #0
 80020e6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f006 f82b 	bl	800814a <HAL_PCD_DataInStageCallback>
 80020f4:	e053      	b.n	800219e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80020f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d146      	bne.n	8002190 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	3302      	adds	r3, #2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800212e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002136:	429a      	cmp	r2, r3
 8002138:	d907      	bls.n	800214a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800213a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002142:	1ad2      	subs	r2, r2, r3
 8002144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002146:	619a      	str	r2, [r3, #24]
 8002148:	e002      	b.n	8002150 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800214a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f005 fff3 	bl	800814a <HAL_PCD_DataInStageCallback>
 8002164:	e01b      	b.n	800219e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800216e:	441a      	add	r2, r3
 8002170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002172:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800217c:	441a      	add	r2, r3
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002188:	4618      	mov	r0, r3
 800218a:	f002 fea1 	bl	8004ed0 <USB_EPStartXfer>
 800218e:	e006      	b.n	800219e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002190:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002194:	461a      	mov	r2, r3
 8002196:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f91b 	bl	80023d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f6ff ac3b 	blt.w	8001a26 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3758      	adds	r7, #88	@ 0x58
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b088      	sub	sp, #32
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	4613      	mov	r3, r2
 80021c6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d07e      	beq.n	80022d0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	3302      	adds	r3, #2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	8b7b      	ldrh	r3, [r7, #26]
 8002202:	429a      	cmp	r2, r3
 8002204:	d306      	bcc.n	8002214 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	8b7b      	ldrh	r3, [r7, #26]
 800220c:	1ad2      	subs	r2, r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	619a      	str	r2, [r3, #24]
 8002212:	e002      	b.n	800221a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d123      	bne.n	800226a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800223c:	833b      	strh	r3, [r7, #24]
 800223e:	8b3b      	ldrh	r3, [r7, #24]
 8002240:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002244:	833b      	strh	r3, [r7, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	441a      	add	r2, r3
 8002254:	8b3b      	ldrh	r3, [r7, #24]
 8002256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800225a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800225e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002266:	b29b      	uxth	r3, r3
 8002268:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01f      	beq.n	80022b4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800228a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800228e:	82fb      	strh	r3, [r7, #22]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	441a      	add	r2, r3
 800229e:	8afb      	ldrh	r3, [r7, #22]
 80022a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022b4:	8b7b      	ldrh	r3, [r7, #26]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8087 	beq.w	80023ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6959      	ldr	r1, [r3, #20]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	891a      	ldrh	r2, [r3, #8]
 80022c8:	8b7b      	ldrh	r3, [r7, #26]
 80022ca:	f004 fb35 	bl	8006938 <USB_ReadPMA>
 80022ce:	e07c      	b.n	80023ca <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	3306      	adds	r3, #6
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	8b7b      	ldrh	r3, [r7, #26]
 8002300:	429a      	cmp	r2, r3
 8002302:	d306      	bcc.n	8002312 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	8b7b      	ldrh	r3, [r7, #26]
 800230a:	1ad2      	subs	r2, r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	619a      	str	r2, [r3, #24]
 8002310:	e002      	b.n	8002318 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d123      	bne.n	8002368 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800233a:	83fb      	strh	r3, [r7, #30]
 800233c:	8bfb      	ldrh	r3, [r7, #30]
 800233e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002342:	83fb      	strh	r3, [r7, #30]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	8bfb      	ldrh	r3, [r7, #30]
 8002354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800235c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002364:	b29b      	uxth	r3, r3
 8002366:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11f      	bne.n	80023b2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800238c:	83bb      	strh	r3, [r7, #28]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	441a      	add	r2, r3
 800239c:	8bbb      	ldrh	r3, [r7, #28]
 800239e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023b2:	8b7b      	ldrh	r3, [r7, #26]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6959      	ldr	r1, [r3, #20]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	895a      	ldrh	r2, [r3, #10]
 80023c4:	8b7b      	ldrh	r3, [r7, #26]
 80023c6:	f004 fab7 	bl	8006938 <USB_ReadPMA>
    }
  }

  return count;
 80023ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b0a4      	sub	sp, #144	@ 0x90
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 81dd 	beq.w	80027a8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	3302      	adds	r3, #2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	4413      	add	r3, r2
 800240c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002416:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002422:	429a      	cmp	r2, r3
 8002424:	d907      	bls.n	8002436 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800242e:	1ad2      	subs	r2, r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	619a      	str	r2, [r3, #24]
 8002434:	e002      	b.n	800243c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 80b9 	bne.w	80025b8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d126      	bne.n	800249c <HAL_PCD_EP_DB_Transmit+0xc8>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800245c:	b29b      	uxth	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002462:	4413      	add	r3, r2
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	011a      	lsls	r2, r3, #4
 800246c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246e:	4413      	add	r3, r2
 8002470:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002480:	b29a      	uxth	r2, r3
 8002482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002484:	801a      	strh	r2, [r3, #0]
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002494:	b29a      	uxth	r2, r3
 8002496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002498:	801a      	strh	r2, [r3, #0]
 800249a:	e01a      	b.n	80024d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	785b      	ldrb	r3, [r3, #1]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d116      	bne.n	80024d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b8:	4413      	add	r3, r2
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	011a      	lsls	r2, r3, #4
 80024c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c4:	4413      	add	r3, r2
 80024c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80024cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ce:	2200      	movs	r2, #0
 80024d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	785b      	ldrb	r3, [r3, #1]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d126      	bne.n	800252e <HAL_PCD_EP_DB_Transmit+0x15a>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	011a      	lsls	r2, r3, #4
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002512:	b29a      	uxth	r2, r3
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	801a      	strh	r2, [r3, #0]
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002526:	b29a      	uxth	r2, r3
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	e017      	b.n	800255e <HAL_PCD_EP_DB_Transmit+0x18a>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d113      	bne.n	800255e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	4413      	add	r3, r2
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	011a      	lsls	r2, r3, #4
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	4413      	add	r3, r2
 8002552:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002556:	623b      	str	r3, [r7, #32]
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	2200      	movs	r2, #0
 800255c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f005 fdf0 	bl	800814a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 82fc 	beq.w	8002b6e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800258c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002590:	82fb      	strh	r3, [r7, #22]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	441a      	add	r2, r3
 80025a0:	8afb      	ldrh	r3, [r7, #22]
 80025a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	8013      	strh	r3, [r2, #0]
 80025b6:	e2da      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d021      	beq.n	8002606 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	441a      	add	r2, r3
 80025ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80025f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002602:	b29b      	uxth	r3, r3
 8002604:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800260c:	2b01      	cmp	r3, #1
 800260e:	f040 82ae 	bne.w	8002b6e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800261a:	441a      	add	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	69da      	ldr	r2, [r3, #28]
 8002624:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002628:	441a      	add	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6a1a      	ldr	r2, [r3, #32]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	429a      	cmp	r2, r3
 8002638:	d30b      	bcc.n	8002652 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6a1a      	ldr	r2, [r3, #32]
 8002646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800264a:	1ad2      	subs	r2, r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	621a      	str	r2, [r3, #32]
 8002650:	e017      	b.n	8002682 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d108      	bne.n	800266c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800265a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800265e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800266a:	e00a      	b.n	8002682 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d165      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0x382>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800269e:	4413      	add	r3, r2
 80026a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	011a      	lsls	r2, r3, #4
 80026a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026aa:	4413      	add	r3, r2
 80026ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80026c8:	d91d      	bls.n	8002706 <HAL_PCD_EP_DB_Transmit+0x332>
 80026ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x310>
 80026de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026e0:	3b01      	subs	r3, #1
 80026e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e044      	b.n	8002790 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <HAL_PCD_EP_DB_Transmit+0x350>
 800270e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800271c:	b29a      	uxth	r2, r3
 800271e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002720:	801a      	strh	r2, [r3, #0]
 8002722:	e035      	b.n	8002790 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800272c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800273a:	3301      	adds	r3, #1
 800273c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800273e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29a      	uxth	r2, r3
 8002744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002746:	b29b      	uxth	r3, r3
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	b29b      	uxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b29a      	uxth	r2, r3
 8002750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	e01c      	b.n	8002790 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	785b      	ldrb	r3, [r3, #1]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d118      	bne.n	8002790 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	647b      	str	r3, [r7, #68]	@ 0x44
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002772:	4413      	add	r3, r2
 8002774:	647b      	str	r3, [r7, #68]	@ 0x44
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	011a      	lsls	r2, r3, #4
 800277c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800277e:	4413      	add	r3, r2
 8002780:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002784:	643b      	str	r3, [r7, #64]	@ 0x40
 8002786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800278a:	b29a      	uxth	r2, r3
 800278c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800278e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	6959      	ldr	r1, [r3, #20]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	891a      	ldrh	r2, [r3, #8]
 800279c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f004 f884 	bl	80068ae <USB_WritePMA>
 80027a6:	e1e2      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	3306      	adds	r3, #6
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027dc:	429a      	cmp	r2, r3
 80027de:	d307      	bcc.n	80027f0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027e8:	1ad2      	subs	r2, r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	619a      	str	r2, [r3, #24]
 80027ee:	e002      	b.n	80027f6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 80c0 	bne.w	8002980 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	785b      	ldrb	r3, [r3, #1]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d126      	bne.n	8002856 <HAL_PCD_EP_DB_Transmit+0x482>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800281c:	4413      	add	r3, r2
 800281e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	011a      	lsls	r2, r3, #4
 8002826:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002828:	4413      	add	r3, r2
 800282a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800282e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002830:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b29b      	uxth	r3, r3
 8002836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283a:	b29a      	uxth	r2, r3
 800283c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800284a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800284e:	b29a      	uxth	r2, r3
 8002850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002852:	801a      	strh	r2, [r3, #0]
 8002854:	e01a      	b.n	800288c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d116      	bne.n	800288c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	667b      	str	r3, [r7, #100]	@ 0x64
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800286c:	b29b      	uxth	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002872:	4413      	add	r3, r2
 8002874:	667b      	str	r3, [r7, #100]	@ 0x64
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	011a      	lsls	r2, r3, #4
 800287c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800287e:	4413      	add	r3, r2
 8002880:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002884:	663b      	str	r3, [r7, #96]	@ 0x60
 8002886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002888:	2200      	movs	r2, #0
 800288a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	677b      	str	r3, [r7, #116]	@ 0x74
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	785b      	ldrb	r3, [r3, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d12b      	bne.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ae:	4413      	add	r3, r2
 80028b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	011a      	lsls	r2, r3, #4
 80028b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ba:	4413      	add	r3, r2
 80028bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028ee:	801a      	strh	r2, [r3, #0]
 80028f0:	e017      	b.n	8002922 <HAL_PCD_EP_DB_Transmit+0x54e>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d113      	bne.n	8002922 <HAL_PCD_EP_DB_Transmit+0x54e>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002908:	4413      	add	r3, r2
 800290a:	677b      	str	r3, [r7, #116]	@ 0x74
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	011a      	lsls	r2, r3, #4
 8002912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002914:	4413      	add	r3, r2
 8002916:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800291a:	673b      	str	r3, [r7, #112]	@ 0x70
 800291c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800291e:	2200      	movs	r2, #0
 8002920:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f005 fc0e 	bl	800814a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 811a 	bne.w	8002b6e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002954:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800296a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800296e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002972:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800297a:	b29b      	uxth	r3, r3
 800297c:	8013      	strh	r3, [r2, #0]
 800297e:	e0f6      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d121      	bne.n	80029ce <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f040 80ca 	bne.w	8002b6e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029e2:	441a      	add	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	69da      	ldr	r2, [r3, #28]
 80029ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029f0:	441a      	add	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	6a1a      	ldr	r2, [r3, #32]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d30b      	bcc.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a12:	1ad2      	subs	r2, r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	621a      	str	r2, [r3, #32]
 8002a18:	e017      	b.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d108      	bne.n	8002a34 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002a22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a32:	e00a      	b.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d165      	bne.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x750>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a6c:	4413      	add	r3, r2
 8002a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	011a      	lsls	r2, r3, #4
 8002a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a78:	4413      	add	r3, r2
 8002a7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a8e:	801a      	strh	r2, [r3, #0]
 8002a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a94:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a96:	d91d      	bls.n	8002ad4 <HAL_PCD_EP_DB_Transmit+0x700>
 8002a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	029b      	lsls	r3, r3, #10
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	e041      	b.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002adc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aee:	801a      	strh	r2, [r3, #0]
 8002af0:	e032      	b.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x784>
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x738>
 8002b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b08:	3301      	adds	r3, #1
 8002b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	e019      	b.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	785b      	ldrb	r3, [r3, #1]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d115      	bne.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x784>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3a:	4413      	add	r3, r2
 8002b3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	011a      	lsls	r2, r3, #4
 8002b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b46:	4413      	add	r3, r2
 8002b48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b56:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	6959      	ldr	r1, [r3, #20]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	895a      	ldrh	r2, [r3, #10]
 8002b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f003 fea0 	bl	80068ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b88:	82bb      	strh	r3, [r7, #20]
 8002b8a:	8abb      	ldrh	r3, [r7, #20]
 8002b8c:	f083 0310 	eor.w	r3, r3, #16
 8002b90:	82bb      	strh	r3, [r7, #20]
 8002b92:	8abb      	ldrh	r3, [r7, #20]
 8002b94:	f083 0320 	eor.w	r3, r3, #32
 8002b98:	82bb      	strh	r3, [r7, #20]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	441a      	add	r2, r3
 8002ba8:	8abb      	ldrh	r3, [r7, #20]
 8002baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3790      	adds	r7, #144	@ 0x90
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	817b      	strh	r3, [r7, #10]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	897b      	ldrh	r3, [r7, #10]
 8002be8:	f003 0207 	and.w	r2, r3, #7
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	3310      	adds	r3, #16
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	e009      	b.n	8002c12 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bfe:	897a      	ldrh	r2, [r7, #10]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c12:	893b      	ldrh	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	80da      	strh	r2, [r3, #6]
 8002c26:	e00b      	b.n	8002c40 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e272      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8087 	beq.w	8002d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c6c:	4b92      	ldr	r3, [pc, #584]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d00c      	beq.n	8002c92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c78:	4b8f      	ldr	r3, [pc, #572]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d112      	bne.n	8002caa <HAL_RCC_OscConfig+0x5e>
 8002c84:	4b8c      	ldr	r3, [pc, #560]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c90:	d10b      	bne.n	8002caa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c92:	4b89      	ldr	r3, [pc, #548]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d06c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x12c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d168      	bne.n	8002d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e24c      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x76>
 8002cb4:	4b80      	ldr	r3, [pc, #512]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a7f      	ldr	r2, [pc, #508]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	e02e      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x98>
 8002cca:	4b7b      	ldr	r3, [pc, #492]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a7a      	ldr	r2, [pc, #488]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b78      	ldr	r3, [pc, #480]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a77      	ldr	r2, [pc, #476]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e01d      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0xbc>
 8002cee:	4b72      	ldr	r3, [pc, #456]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a71      	ldr	r2, [pc, #452]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a6e      	ldr	r2, [pc, #440]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002d08:	4b6b      	ldr	r3, [pc, #428]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b68      	ldr	r3, [pc, #416]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a67      	ldr	r2, [pc, #412]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d013      	beq.n	8002d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fd fea4 	bl	8000a74 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fd fea0 	bl	8000a74 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	@ 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e200      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0xe4>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fd fe90 	bl	8000a74 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fd fe8c 	bl	8000a74 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	@ 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1ec      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	4b53      	ldr	r3, [pc, #332]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x10c>
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d063      	beq.n	8002e4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d86:	4b4c      	ldr	r3, [pc, #304]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d92:	4b49      	ldr	r3, [pc, #292]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x18c>
 8002d9e:	4b46      	ldr	r3, [pc, #280]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	4b43      	ldr	r3, [pc, #268]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x176>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e1c0      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4939      	ldr	r1, [pc, #228]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	e03a      	b.n	8002e4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	4b36      	ldr	r3, [pc, #216]	@ (8002ebc <HAL_RCC_OscConfig+0x270>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fd fe45 	bl	8000a74 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fd fe41 	bl	8000a74 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1a1      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4927      	ldr	r1, [pc, #156]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	4b26      	ldr	r3, [pc, #152]	@ (8002ebc <HAL_RCC_OscConfig+0x270>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fd fe24 	bl	8000a74 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e30:	f7fd fe20 	bl	8000a74 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e180      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d03a      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d019      	beq.n	8002e96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e62:	4b17      	ldr	r3, [pc, #92]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fd fe04 	bl	8000a74 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fd fe00 	bl	8000a74 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e160      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f000 face 	bl	8003430 <RCC_Delay>
 8002e94:	e01c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9c:	f7fd fdea 	bl	8000a74 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea2:	e00f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7fd fde6 	bl	8000a74 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d908      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e146      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	42420000 	.word	0x42420000
 8002ec0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	4b92      	ldr	r3, [pc, #584]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e9      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a6 	beq.w	800302a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee2:	4b8b      	ldr	r3, [pc, #556]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	4b88      	ldr	r3, [pc, #544]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4a87      	ldr	r2, [pc, #540]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef8:	61d3      	str	r3, [r2, #28]
 8002efa:	4b85      	ldr	r3, [pc, #532]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0a:	4b82      	ldr	r3, [pc, #520]	@ (8003114 <HAL_RCC_OscConfig+0x4c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d118      	bne.n	8002f48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f16:	4b7f      	ldr	r3, [pc, #508]	@ (8003114 <HAL_RCC_OscConfig+0x4c8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003114 <HAL_RCC_OscConfig+0x4c8>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f22:	f7fd fda7 	bl	8000a74 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2a:	f7fd fda3 	bl	8000a74 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b64      	cmp	r3, #100	@ 0x64
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e103      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	4b75      	ldr	r3, [pc, #468]	@ (8003114 <HAL_RCC_OscConfig+0x4c8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x312>
 8002f50:	4b6f      	ldr	r3, [pc, #444]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4a6e      	ldr	r2, [pc, #440]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6213      	str	r3, [r2, #32]
 8002f5c:	e02d      	b.n	8002fba <HAL_RCC_OscConfig+0x36e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x334>
 8002f66:	4b6a      	ldr	r3, [pc, #424]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4a69      	ldr	r2, [pc, #420]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	6213      	str	r3, [r2, #32]
 8002f72:	4b67      	ldr	r3, [pc, #412]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a66      	ldr	r2, [pc, #408]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	6213      	str	r3, [r2, #32]
 8002f7e:	e01c      	b.n	8002fba <HAL_RCC_OscConfig+0x36e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d10c      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x356>
 8002f88:	4b61      	ldr	r3, [pc, #388]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a60      	ldr	r2, [pc, #384]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	6213      	str	r3, [r2, #32]
 8002f94:	4b5e      	ldr	r3, [pc, #376]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a5d      	ldr	r2, [pc, #372]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6213      	str	r3, [r2, #32]
 8002fa0:	e00b      	b.n	8002fba <HAL_RCC_OscConfig+0x36e>
 8002fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a5a      	ldr	r2, [pc, #360]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	4b58      	ldr	r3, [pc, #352]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a57      	ldr	r2, [pc, #348]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
 8002fb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d015      	beq.n	8002fee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fd fd57 	bl	8000a74 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd fd53 	bl	8000a74 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0b1      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ee      	beq.n	8002fca <HAL_RCC_OscConfig+0x37e>
 8002fec:	e014      	b.n	8003018 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fee:	f7fd fd41 	bl	8000a74 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fd fd3d 	bl	8000a74 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e09b      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300c:	4b40      	ldr	r3, [pc, #256]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ee      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d105      	bne.n	800302a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301e:	4b3c      	ldr	r3, [pc, #240]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4a3b      	ldr	r2, [pc, #236]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003028:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8087 	beq.w	8003142 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003034:	4b36      	ldr	r3, [pc, #216]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d061      	beq.n	8003104 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d146      	bne.n	80030d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003048:	4b33      	ldr	r3, [pc, #204]	@ (8003118 <HAL_RCC_OscConfig+0x4cc>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fd fd11 	bl	8000a74 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7fd fd0d 	bl	8000a74 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e06d      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003068:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307c:	d108      	bne.n	8003090 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800307e:	4b24      	ldr	r3, [pc, #144]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4921      	ldr	r1, [pc, #132]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	4b1f      	ldr	r3, [pc, #124]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a19      	ldr	r1, [r3, #32]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	430b      	orrs	r3, r1
 80030a2:	491b      	ldr	r1, [pc, #108]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003118 <HAL_RCC_OscConfig+0x4cc>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fd fce1 	bl	8000a74 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fd fcdd 	bl	8000a74 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e03d      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c8:	4b11      	ldr	r3, [pc, #68]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x46a>
 80030d4:	e035      	b.n	8003142 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <HAL_RCC_OscConfig+0x4cc>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fd fcca 	bl	8000a74 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fd fcc6 	bl	8000a74 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e026      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f6:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x498>
 8003102:	e01e      	b.n	8003142 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e019      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
 8003110:	40021000 	.word	0x40021000
 8003114:	40007000 	.word	0x40007000
 8003118:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_RCC_OscConfig+0x500>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	429a      	cmp	r2, r3
 800312e:	d106      	bne.n	800313e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0d0      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b6a      	ldr	r3, [pc, #424]	@ (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b67      	ldr	r3, [pc, #412]	@ (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 0207 	bic.w	r2, r3, #7
 800317a:	4965      	ldr	r1, [pc, #404]	@ (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b63      	ldr	r3, [pc, #396]	@ (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b8      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4b59      	ldr	r3, [pc, #356]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a58      	ldr	r2, [pc, #352]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4b53      	ldr	r3, [pc, #332]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a52      	ldr	r2, [pc, #328]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80031ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4b50      	ldr	r3, [pc, #320]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	494d      	ldr	r1, [pc, #308]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d040      	beq.n	8003270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b47      	ldr	r3, [pc, #284]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d115      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320e:	4b41      	ldr	r3, [pc, #260]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e073      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b3d      	ldr	r3, [pc, #244]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e06b      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b39      	ldr	r3, [pc, #228]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4936      	ldr	r1, [pc, #216]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7fd fc18 	bl	8000a74 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fd fc14 	bl	8000a74 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e053      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b2d      	ldr	r3, [pc, #180]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b27      	ldr	r3, [pc, #156]	@ (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d210      	bcs.n	80032a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b24      	ldr	r3, [pc, #144]	@ (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0207 	bic.w	r2, r3, #7
 8003286:	4922      	ldr	r1, [pc, #136]	@ (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b20      	ldr	r3, [pc, #128]	@ (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e032      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4916      	ldr	r1, [pc, #88]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ca:	4b12      	ldr	r3, [pc, #72]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	490e      	ldr	r1, [pc, #56]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032de:	f000 f821 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	490a      	ldr	r1, [pc, #40]	@ (8003318 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	5ccb      	ldrb	r3, [r1, r3]
 80032f2:	fa22 f303 	lsr.w	r3, r2, r3
 80032f6:	4a09      	ldr	r2, [pc, #36]	@ (800331c <HAL_RCC_ClockConfig+0x1cc>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032fa:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <HAL_RCC_ClockConfig+0x1d0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fb76 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40022000 	.word	0x40022000
 8003314:	40021000 	.word	0x40021000
 8003318:	08008664 	.word	0x08008664
 800331c:	20000000 	.word	0x20000000
 8003320:	20000004 	.word	0x20000004

08003324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800333e:	4b1e      	ldr	r3, [pc, #120]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b04      	cmp	r3, #4
 800334c:	d002      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x30>
 800334e:	2b08      	cmp	r3, #8
 8003350:	d003      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0x36>
 8003352:	e027      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003354:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003356:	613b      	str	r3, [r7, #16]
      break;
 8003358:	e027      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	0c9b      	lsrs	r3, r3, #18
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a17      	ldr	r2, [pc, #92]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d010      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003372:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0c5b      	lsrs	r3, r3, #17
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	4a11      	ldr	r2, [pc, #68]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a0d      	ldr	r2, [pc, #52]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003386:	fb03 f202 	mul.w	r2, r3, r2
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e004      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a0c      	ldr	r2, [pc, #48]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	613b      	str	r3, [r7, #16]
      break;
 80033a2:	e002      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 80033a6:	613b      	str	r3, [r7, #16]
      break;
 80033a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033aa:	693b      	ldr	r3, [r7, #16]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	371c      	adds	r7, #28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	007a1200 	.word	0x007a1200
 80033c0:	0800867c 	.word	0x0800867c
 80033c4:	0800868c 	.word	0x0800868c
 80033c8:	003d0900 	.word	0x003d0900

080033cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b02      	ldr	r3, [pc, #8]	@ (80033dc <HAL_RCC_GetHCLKFreq+0x10>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	20000000 	.word	0x20000000

080033e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e4:	f7ff fff2 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	@ (8003404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	08008674 	.word	0x08008674

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800340c:	f7ff ffde 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b05      	ldr	r3, [pc, #20]	@ (8003428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0adb      	lsrs	r3, r3, #11
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4903      	ldr	r1, [pc, #12]	@ (800342c <HAL_RCC_GetPCLK2Freq+0x24>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	08008674 	.word	0x08008674

08003430 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003438:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <RCC_Delay+0x34>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0a      	ldr	r2, [pc, #40]	@ (8003468 <RCC_Delay+0x38>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0a5b      	lsrs	r3, r3, #9
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800344c:	bf00      	nop
  }
  while (Delay --);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1e5a      	subs	r2, r3, #1
 8003452:	60fa      	str	r2, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f9      	bne.n	800344c <RCC_Delay+0x1c>
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	20000000 	.word	0x20000000
 8003468:	10624dd3 	.word	0x10624dd3

0800346c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d07d      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348c:	4b4f      	ldr	r3, [pc, #316]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10d      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003498:	4b4c      	ldr	r3, [pc, #304]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	4a4b      	ldr	r2, [pc, #300]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	61d3      	str	r3, [r2, #28]
 80034a4:	4b49      	ldr	r3, [pc, #292]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b0:	2301      	movs	r3, #1
 80034b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b46      	ldr	r3, [pc, #280]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d118      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c0:	4b43      	ldr	r3, [pc, #268]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a42      	ldr	r2, [pc, #264]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034cc:	f7fd fad2 	bl	8000a74 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	e008      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7fd face 	bl	8000a74 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	@ 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e06d      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e6:	4b3a      	ldr	r3, [pc, #232]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f2:	4b36      	ldr	r3, [pc, #216]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d02e      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	429a      	cmp	r2, r3
 800350e:	d027      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003510:	4b2e      	ldr	r3, [pc, #184]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003518:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800351a:	4b2e      	ldr	r3, [pc, #184]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003520:	4b2c      	ldr	r3, [pc, #176]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003526:	4a29      	ldr	r2, [pc, #164]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d014      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7fd fa9d 	bl	8000a74 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fd fa99 	bl	8000a74 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e036      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	4b1d      	ldr	r3, [pc, #116]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ee      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003560:	4b1a      	ldr	r3, [pc, #104]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4917      	ldr	r1, [pc, #92]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	4313      	orrs	r3, r2
 8003570:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d105      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003578:	4b14      	ldr	r3, [pc, #80]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	4a13      	ldr	r2, [pc, #76]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003582:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003590:	4b0e      	ldr	r3, [pc, #56]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	490b      	ldr	r1, [pc, #44]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ae:	4b07      	ldr	r3, [pc, #28]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	4904      	ldr	r1, [pc, #16]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
 80035d4:	42420440 	.word	0x42420440

080035d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e042      	b.n	8003670 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd f966 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	@ 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800361a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fdb7 	bl	8004190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	@ 0x28
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b20      	cmp	r3, #32
 8003696:	d175      	bne.n	8003784 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_UART_Transmit+0x2c>
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e06e      	b.n	8003786 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2221      	movs	r2, #33	@ 0x21
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036b6:	f7fd f9dd 	bl	8000a74 <HAL_GetTick>
 80036ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d0:	d108      	bne.n	80036e4 <HAL_UART_Transmit+0x6c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e003      	b.n	80036ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036ec:	e02e      	b.n	800374c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	@ 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fb1c 	bl	8003d36 <UART_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e03a      	b.n	8003786 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	3302      	adds	r3, #2
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	e007      	b.n	800373e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	3301      	adds	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1cb      	bne.n	80036ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	2140      	movs	r1, #64	@ 0x40
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fae8 	bl	8003d36 <UART_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e006      	b.n	8003786 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e000      	b.n	8003786 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	4613      	mov	r3, r2
 800379a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d112      	bne.n	80037ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_UART_Receive_IT+0x26>
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e00b      	b.n	80037d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	461a      	mov	r2, r3
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fb0f 	bl	8003de8 <UART_Start_Receive_IT>
 80037ca:	4603      	mov	r3, r0
 80037cc:	e000      	b.n	80037d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
  }
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b0ba      	sub	sp, #232	@ 0xe8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_UART_IRQHandler+0x66>
 800382a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fbec 	bl	8004014 <UART_Receive_IT>
      return;
 800383c:	e25b      	b.n	8003cf6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800383e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80de 	beq.w	8003a04 <HAL_UART_IRQHandler+0x22c>
 8003848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003858:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80d1 	beq.w	8003a04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_UART_IRQHandler+0xae>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	f043 0201 	orr.w	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_UART_IRQHandler+0xd2>
 8003892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	f043 0202 	orr.w	r2, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_UART_IRQHandler+0xf6>
 80038b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	f043 0204 	orr.w	r2, r3, #4
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d011      	beq.n	80038fe <HAL_UART_IRQHandler+0x126>
 80038da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f6:	f043 0208 	orr.w	r2, r3, #8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 81f2 	beq.w	8003cec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_UART_IRQHandler+0x14e>
 8003914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fb77 	bl	8004014 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <HAL_UART_IRQHandler+0x17a>
 800394a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d04f      	beq.n	80039f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa81 	bl	8003e5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d041      	beq.n	80039ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800397c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3314      	adds	r3, #20
 800398e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003992:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800399e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1d9      	bne.n	8003966 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d013      	beq.n	80039e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039be:	4a7e      	ldr	r2, [pc, #504]	@ (8003bb8 <HAL_UART_IRQHandler+0x3e0>)
 80039c0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd f9ca 	bl	8000d60 <HAL_DMA_Abort_IT>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039dc:	4610      	mov	r0, r2
 80039de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	e00e      	b.n	8003a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f993 	bl	8003d0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e8:	e00a      	b.n	8003a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f98f 	bl	8003d0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	e006      	b.n	8003a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f98b 	bl	8003d0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039fe:	e175      	b.n	8003cec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	bf00      	nop
    return;
 8003a02:	e173      	b.n	8003cec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	f040 814f 	bne.w	8003cac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8148 	beq.w	8003cac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8141 	beq.w	8003cac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80b6 	beq.w	8003bbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8145 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	f080 813e 	bcs.w	8003cf0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	f000 8088 	beq.w	8003b98 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	330c      	adds	r3, #12
 8003a8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aa2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aa6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ab4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ab8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ac0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1d9      	bne.n	8003a88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3314      	adds	r3, #20
 8003ada:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ae4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003af8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003afc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e1      	bne.n	8003ad4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e3      	bne.n	8003b10 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b68:	f023 0310 	bic.w	r3, r3, #16
 8003b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b7a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b7c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e3      	bne.n	8003b56 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd f8a9 	bl	8000cea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	4619      	mov	r1, r3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f8b6 	bl	8003d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bb4:	e09c      	b.n	8003cf0 <HAL_UART_IRQHandler+0x518>
 8003bb6:	bf00      	nop
 8003bb8:	08003f1f 	.word	0x08003f1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 808e 	beq.w	8003cf4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8089 	beq.w	8003cf4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c06:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e3      	bne.n	8003be2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	623b      	str	r3, [r7, #32]
   return(result);
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e3      	bne.n	8003c1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	330c      	adds	r3, #12
 8003c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0310 	bic.w	r3, r3, #16
 8003c76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c84:	61fa      	str	r2, [r7, #28]
 8003c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	69b9      	ldr	r1, [r7, #24]
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	617b      	str	r3, [r7, #20]
   return(result);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e3      	bne.n	8003c60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f83b 	bl	8003d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003caa:	e023      	b.n	8003cf4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d009      	beq.n	8003ccc <HAL_UART_IRQHandler+0x4f4>
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f93e 	bl	8003f46 <UART_Transmit_IT>
    return;
 8003cca:	e014      	b.n	8003cf6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x51e>
 8003cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f97d 	bl	8003fe4 <UART_EndTransmit_IT>
    return;
 8003cea:	e004      	b.n	8003cf6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003cec:	bf00      	nop
 8003cee:	e002      	b.n	8003cf6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cf0:	bf00      	nop
 8003cf2:	e000      	b.n	8003cf6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cf4:	bf00      	nop
  }
}
 8003cf6:	37e8      	adds	r7, #232	@ 0xe8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr

08003d36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b086      	sub	sp, #24
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d46:	e03b      	b.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d037      	beq.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d50:	f7fc fe90 	bl	8000a74 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	6a3a      	ldr	r2, [r7, #32]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e03a      	b.n	8003de0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d023      	beq.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b80      	cmp	r3, #128	@ 0x80
 8003d7c:	d020      	beq.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b40      	cmp	r3, #64	@ 0x40
 8003d82:	d01d      	beq.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d116      	bne.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f856 	bl	8003e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2208      	movs	r2, #8
 8003db2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e00f      	b.n	8003de0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d0b4      	beq.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2222      	movs	r2, #34	@ 0x22
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0220 	orr.w	r2, r2, #32
 8003e4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b095      	sub	sp, #84	@ 0x54
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e82:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3314      	adds	r3, #20
 8003eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e5      	bne.n	8003e96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d119      	bne.n	8003f06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f023 0310 	bic.w	r3, r3, #16
 8003ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	330c      	adds	r3, #12
 8003ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ef2:	61ba      	str	r2, [r7, #24]
 8003ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6979      	ldr	r1, [r7, #20]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	613b      	str	r3, [r7, #16]
   return(result);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e5      	bne.n	8003ed2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f14:	bf00      	nop
 8003f16:	3754      	adds	r7, #84	@ 0x54
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff fee8 	bl	8003d0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b21      	cmp	r3, #33	@ 0x21
 8003f58:	d13e      	bne.n	8003fd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f62:	d114      	bne.n	8003f8e <UART_Transmit_IT+0x48>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d110      	bne.n	8003f8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	1c9a      	adds	r2, r3, #2
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	621a      	str	r2, [r3, #32]
 8003f8c:	e008      	b.n	8003fa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	1c59      	adds	r1, r3, #1
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6211      	str	r1, [r2, #32]
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4619      	mov	r1, r3
 8003fae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10f      	bne.n	8003fd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fe79 	bl	8003cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08c      	sub	sp, #48	@ 0x30
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b22      	cmp	r3, #34	@ 0x22
 8004026:	f040 80ae 	bne.w	8004186 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004032:	d117      	bne.n	8004064 <UART_Receive_IT+0x50>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d113      	bne.n	8004064 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004044:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004052:	b29a      	uxth	r2, r3
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	1c9a      	adds	r2, r3, #2
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	629a      	str	r2, [r3, #40]	@ 0x28
 8004062:	e026      	b.n	80040b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004076:	d007      	beq.n	8004088 <UART_Receive_IT+0x74>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <UART_Receive_IT+0x82>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e008      	b.n	80040a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4619      	mov	r1, r3
 80040c0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d15d      	bne.n	8004182 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0220 	bic.w	r2, r2, #32
 80040d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	2b01      	cmp	r3, #1
 800410a:	d135      	bne.n	8004178 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	330c      	adds	r3, #12
 8004118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	613b      	str	r3, [r7, #16]
   return(result);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f023 0310 	bic.w	r3, r3, #16
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004132:	623a      	str	r2, [r7, #32]
 8004134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	69f9      	ldr	r1, [r7, #28]
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e5      	bne.n	8004112 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b10      	cmp	r3, #16
 8004152:	d10a      	bne.n	800416a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800416e:	4619      	mov	r1, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fdd5 	bl	8003d20 <HAL_UARTEx_RxEventCallback>
 8004176:	e002      	b.n	800417e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fc f909 	bl	8000390 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e002      	b.n	8004188 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
  }
}
 8004188:	4618      	mov	r0, r3
 800418a:	3730      	adds	r7, #48	@ 0x30
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80041ca:	f023 030c 	bic.w	r3, r3, #12
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2c      	ldr	r2, [pc, #176]	@ (80042a4 <UART_SetConfig+0x114>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d103      	bne.n	8004200 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041f8:	f7ff f906 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	e002      	b.n	8004206 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7ff f8ee 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8004204:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	009a      	lsls	r2, r3, #2
 8004210:	441a      	add	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	4a22      	ldr	r2, [pc, #136]	@ (80042a8 <UART_SetConfig+0x118>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	0119      	lsls	r1, r3, #4
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	009a      	lsls	r2, r3, #2
 8004230:	441a      	add	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	fbb2 f2f3 	udiv	r2, r2, r3
 800423c:	4b1a      	ldr	r3, [pc, #104]	@ (80042a8 <UART_SetConfig+0x118>)
 800423e:	fba3 0302 	umull	r0, r3, r3, r2
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2064      	movs	r0, #100	@ 0x64
 8004246:	fb00 f303 	mul.w	r3, r0, r3
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	3332      	adds	r3, #50	@ 0x32
 8004250:	4a15      	ldr	r2, [pc, #84]	@ (80042a8 <UART_SetConfig+0x118>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800425c:	4419      	add	r1, r3
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	fbb2 f2f3 	udiv	r2, r2, r3
 8004274:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <UART_SetConfig+0x118>)
 8004276:	fba3 0302 	umull	r0, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2064      	movs	r0, #100	@ 0x64
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	3332      	adds	r3, #50	@ 0x32
 8004288:	4a07      	ldr	r2, [pc, #28]	@ (80042a8 <UART_SetConfig+0x118>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 020f 	and.w	r2, r3, #15
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	440a      	add	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40013800 	.word	0x40013800
 80042a8:	51eb851f 	.word	0x51eb851f

080042ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	4638      	mov	r0, r7
 80042b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042d6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	b29a      	uxth	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr

080042f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042fa:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	b29b      	uxth	r3, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	b29b      	uxth	r3, r3
 8004310:	4013      	ands	r3, r2
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800433e:	b480      	push	{r7}
 8004340:	b085      	sub	sp, #20
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	4638      	mov	r0, r7
 8004348:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004378:	b480      	push	{r7}
 800437a:	b09d      	sub	sp, #116	@ 0x74
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800439a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	78db      	ldrb	r3, [r3, #3]
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d81f      	bhi.n	80043ea <USB_ActivateEndpoint+0x72>
 80043aa:	a201      	add	r2, pc, #4	@ (adr r2, 80043b0 <USB_ActivateEndpoint+0x38>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043c1 	.word	0x080043c1
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043f3 	.word	0x080043f3
 80043bc:	080043cf 	.word	0x080043cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043cc:	e012      	b.n	80043f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043d2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80043d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043da:	e00b      	b.n	80043f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043e8:	e004      	b.n	80043f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80043f0:	e000      	b.n	80043f4 <USB_ActivateEndpoint+0x7c>
      break;
 80043f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800440a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800440e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004412:	b29b      	uxth	r3, r3
 8004414:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442c:	b29b      	uxth	r3, r3
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	441a      	add	r2, r3
 8004442:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800444a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800444e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004456:	b29b      	uxth	r3, r3
 8004458:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	7b1b      	ldrb	r3, [r3, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f040 8178 	bne.w	8004754 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8084 	beq.w	8004576 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004478:	b29b      	uxth	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	4413      	add	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	011a      	lsls	r2, r3, #4
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	88db      	ldrh	r3, [r3, #6]
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	b29b      	uxth	r3, r3
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	827b      	strh	r3, [r7, #18]
 80044b0:	8a7b      	ldrh	r3, [r7, #18]
 80044b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01b      	beq.n	80044f2 <USB_ActivateEndpoint+0x17a>
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d0:	823b      	strh	r3, [r7, #16]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	8a3b      	ldrh	r3, [r7, #16]
 80044de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	78db      	ldrb	r3, [r3, #3]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d020      	beq.n	800453c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800450c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004510:	81bb      	strh	r3, [r7, #12]
 8004512:	89bb      	ldrh	r3, [r7, #12]
 8004514:	f083 0320 	eor.w	r3, r3, #32
 8004518:	81bb      	strh	r3, [r7, #12]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	441a      	add	r2, r3
 8004524:	89bb      	ldrh	r3, [r7, #12]
 8004526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800452a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800452e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004536:	b29b      	uxth	r3, r3
 8004538:	8013      	strh	r3, [r2, #0]
 800453a:	e2d5      	b.n	8004ae8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800454e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004552:	81fb      	strh	r3, [r7, #14]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	441a      	add	r2, r3
 800455e:	89fb      	ldrh	r3, [r7, #14]
 8004560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800456c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004570:	b29b      	uxth	r3, r3
 8004572:	8013      	strh	r3, [r2, #0]
 8004574:	e2b8      	b.n	8004ae8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	633b      	str	r3, [r7, #48]	@ 0x30
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004580:	b29b      	uxth	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004586:	4413      	add	r3, r2
 8004588:	633b      	str	r3, [r7, #48]	@ 0x30
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	011a      	lsls	r2, r3, #4
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	4413      	add	r3, r2
 8004594:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	88db      	ldrh	r3, [r3, #6]
 800459e:	085b      	lsrs	r3, r3, #1
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	4413      	add	r3, r2
 80045bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	011a      	lsls	r2, r3, #4
 80045c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c6:	4413      	add	r3, r2
 80045c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d8:	b29a      	uxth	r2, r3
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80045e4:	d91d      	bls.n	8004622 <USB_ActivateEndpoint+0x2aa>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <USB_ActivateEndpoint+0x288>
 80045fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045fc:	3b01      	subs	r3, #1
 80045fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29a      	uxth	r2, r3
 8004606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004608:	b29b      	uxth	r3, r3
 800460a:	029b      	lsls	r3, r3, #10
 800460c:	b29b      	uxth	r3, r3
 800460e:	4313      	orrs	r3, r2
 8004610:	b29b      	uxth	r3, r3
 8004612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461a:	b29a      	uxth	r2, r3
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	e026      	b.n	8004670 <USB_ActivateEndpoint+0x2f8>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <USB_ActivateEndpoint+0x2c8>
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004638:	b29a      	uxth	r2, r3
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	e017      	b.n	8004670 <USB_ActivateEndpoint+0x2f8>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <USB_ActivateEndpoint+0x2e2>
 8004654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004656:	3301      	adds	r3, #1
 8004658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29a      	uxth	r2, r3
 8004660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004662:	b29b      	uxth	r3, r3
 8004664:	029b      	lsls	r3, r3, #10
 8004666:	b29b      	uxth	r3, r3
 8004668:	4313      	orrs	r3, r2
 800466a:	b29a      	uxth	r2, r3
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800467e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01b      	beq.n	80046c0 <USB_ActivateEndpoint+0x348>
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	843b      	strh	r3, [r7, #32]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	8c3b      	ldrh	r3, [r7, #32]
 80046ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046bc:	b29b      	uxth	r3, r3
 80046be:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d124      	bne.n	8004712 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046de:	83bb      	strh	r3, [r7, #28]
 80046e0:	8bbb      	ldrh	r3, [r7, #28]
 80046e2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80046e6:	83bb      	strh	r3, [r7, #28]
 80046e8:	8bbb      	ldrh	r3, [r7, #28]
 80046ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046ee:	83bb      	strh	r3, [r7, #28]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	8bbb      	ldrh	r3, [r7, #28]
 80046fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470c:	b29b      	uxth	r3, r3
 800470e:	8013      	strh	r3, [r2, #0]
 8004710:	e1ea      	b.n	8004ae8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004728:	83fb      	strh	r3, [r7, #30]
 800472a:	8bfb      	ldrh	r3, [r7, #30]
 800472c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004730:	83fb      	strh	r3, [r7, #30]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	8bfb      	ldrh	r3, [r7, #30]
 800473e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800474a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800474e:	b29b      	uxth	r3, r3
 8004750:	8013      	strh	r3, [r2, #0]
 8004752:	e1c9      	b.n	8004ae8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	78db      	ldrb	r3, [r3, #3]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d11e      	bne.n	800479a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800476e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004772:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	441a      	add	r2, r3
 8004780:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800478c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004794:	b29b      	uxth	r3, r3
 8004796:	8013      	strh	r3, [r2, #0]
 8004798:	e01d      	b.n	80047d6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80047ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	441a      	add	r2, r3
 80047be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80047c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e6:	4413      	add	r3, r2
 80047e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	011a      	lsls	r2, r3, #4
 80047f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	891b      	ldrh	r3, [r3, #8]
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	b29b      	uxth	r3, r3
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004808:	801a      	strh	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	657b      	str	r3, [r7, #84]	@ 0x54
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800481a:	4413      	add	r3, r2
 800481c:	657b      	str	r3, [r7, #84]	@ 0x54
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	011a      	lsls	r2, r3, #4
 8004824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004826:	4413      	add	r3, r2
 8004828:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800482c:	653b      	str	r3, [r7, #80]	@ 0x50
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	895b      	ldrh	r3, [r3, #10]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800483c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	785b      	ldrb	r3, [r3, #1]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 8093 	bne.w	800496e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004858:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800485c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01b      	beq.n	800489c <USB_ActivateEndpoint+0x524>
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004890:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80048aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80048ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01b      	beq.n	80048ec <USB_ActivateEndpoint+0x574>
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80048d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004902:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004904:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004906:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800490a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800490c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800490e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004912:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800492c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004930:	b29b      	uxth	r3, r3
 8004932:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800494a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800495c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]
 800496c:	e0bc      	b.n	8004ae8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800497e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01d      	beq.n	80049c6 <USB_ActivateEndpoint+0x64e>
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800499c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	441a      	add	r2, r3
 80049ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80049b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80049d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80049da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01d      	beq.n	8004a1e <USB_ActivateEndpoint+0x6a6>
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	78db      	ldrb	r3, [r3, #3]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d024      	beq.n	8004a70 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a3c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004a40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004a44:	f083 0320 	eor.w	r3, r3, #32
 8004a48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	8013      	strh	r3, [r2, #0]
 8004a6e:	e01d      	b.n	8004aac <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a86:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	441a      	add	r2, r3
 8004a94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	441a      	add	r2, r3
 8004ad0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ae8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3774      	adds	r7, #116	@ 0x74
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop

08004af8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b08d      	sub	sp, #52	@ 0x34
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	7b1b      	ldrb	r3, [r3, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 808e 	bne.w	8004c28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d044      	beq.n	8004b9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	81bb      	strh	r3, [r7, #12]
 8004b22:	89bb      	ldrh	r3, [r7, #12]
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01b      	beq.n	8004b64 <USB_DeactivateEndpoint+0x6c>
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b42:	817b      	strh	r3, [r7, #10]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	441a      	add	r2, r3
 8004b4e:	897b      	ldrh	r3, [r7, #10]
 8004b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b7a:	813b      	strh	r3, [r7, #8]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	893b      	ldrh	r3, [r7, #8]
 8004b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]
 8004b9c:	e192      	b.n	8004ec4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	827b      	strh	r3, [r7, #18]
 8004bac:	8a7b      	ldrh	r3, [r7, #18]
 8004bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01b      	beq.n	8004bee <USB_DeactivateEndpoint+0xf6>
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bcc:	823b      	strh	r3, [r7, #16]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	441a      	add	r2, r3
 8004bd8:	8a3b      	ldrh	r3, [r7, #16]
 8004bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c04:	81fb      	strh	r3, [r7, #14]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	89fb      	ldrh	r3, [r7, #14]
 8004c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]
 8004c26:	e14d      	b.n	8004ec4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 80a5 	bne.w	8004d7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	843b      	strh	r3, [r7, #32]
 8004c40:	8c3b      	ldrh	r3, [r7, #32]
 8004c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01b      	beq.n	8004c82 <USB_DeactivateEndpoint+0x18a>
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c60:	83fb      	strh	r3, [r7, #30]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	441a      	add	r2, r3
 8004c6c:	8bfb      	ldrh	r3, [r7, #30]
 8004c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	83bb      	strh	r3, [r7, #28]
 8004c90:	8bbb      	ldrh	r3, [r7, #28]
 8004c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01b      	beq.n	8004cd2 <USB_DeactivateEndpoint+0x1da>
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb0:	837b      	strh	r3, [r7, #26]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	441a      	add	r2, r3
 8004cbc:	8b7b      	ldrh	r3, [r7, #26]
 8004cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce8:	833b      	strh	r3, [r7, #24]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	8b3b      	ldrh	r3, [r7, #24]
 8004cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d20:	82fb      	strh	r3, [r7, #22]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	8afb      	ldrh	r3, [r7, #22]
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d58:	82bb      	strh	r3, [r7, #20]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	441a      	add	r2, r3
 8004d64:	8abb      	ldrh	r3, [r7, #20]
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]
 8004d7a:	e0a3      	b.n	8004ec4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004d8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01b      	beq.n	8004dcc <USB_DeactivateEndpoint+0x2d4>
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	441a      	add	r2, r3
 8004db6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004dda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01b      	beq.n	8004e1c <USB_DeactivateEndpoint+0x324>
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dfa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	441a      	add	r2, r3
 8004eae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004eb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3734      	adds	r7, #52	@ 0x34
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr

08004ed0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b0c2      	sub	sp, #264	@ 0x108
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ede:	6018      	str	r0, [r3, #0]
 8004ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	f040 86b7 	bne.w	8005c6a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d908      	bls.n	8004f2a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004f28:	e007      	b.n	8004f3a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	7b1b      	ldrb	r3, [r3, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d13a      	bne.n	8004fc0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6959      	ldr	r1, [r3, #20]
 8004f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	88da      	ldrh	r2, [r3, #6]
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f6c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f70:	6800      	ldr	r0, [r0, #0]
 8004f72:	f001 fc9c 	bl	80068ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	011a      	lsls	r2, r3, #4
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4413      	add	r3, r2
 8004fac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	f000 be1f 	b.w	8005bfe <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	78db      	ldrb	r3, [r3, #3]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	f040 8462 	bne.w	8005896 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	f240 83df 	bls.w	80057ae <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005016:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800501a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800501e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	441a      	add	r2, r3
 8005034:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800503c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005040:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005048:	b29b      	uxth	r3, r3
 800504a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800504c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505c:	1ad2      	subs	r2, r2, r3
 800505e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800506a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 81c7 	beq.w	8005420 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	633b      	str	r3, [r7, #48]	@ 0x30
 800509e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d177      	bne.n	800519e <USB_EPStartXfer+0x2ce>
 80050ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ce:	4413      	add	r3, r2
 80050d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	011a      	lsls	r2, r3, #4
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	4413      	add	r3, r2
 80050e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	801a      	strh	r2, [r3, #0]
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8005100:	d921      	bls.n	8005146 <USB_EPStartXfer+0x276>
 8005102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800510c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2b00      	cmp	r3, #0
 8005116:	d104      	bne.n	8005122 <USB_EPStartXfer+0x252>
 8005118:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800511c:	3b01      	subs	r3, #1
 800511e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29a      	uxth	r2, r3
 8005128:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800512c:	b29b      	uxth	r3, r3
 800512e:	029b      	lsls	r3, r3, #10
 8005130:	b29b      	uxth	r3, r3
 8005132:	4313      	orrs	r3, r2
 8005134:	b29b      	uxth	r3, r3
 8005136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513e:	b29a      	uxth	r2, r3
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	801a      	strh	r2, [r3, #0]
 8005144:	e050      	b.n	80051e8 <USB_EPStartXfer+0x318>
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <USB_EPStartXfer+0x294>
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515c:	b29a      	uxth	r2, r3
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	e041      	b.n	80051e8 <USB_EPStartXfer+0x318>
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <USB_EPStartXfer+0x2b4>
 800517a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800517e:	3301      	adds	r3, #1
 8005180:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29a      	uxth	r2, r3
 800518a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800518e:	b29b      	uxth	r3, r3
 8005190:	029b      	lsls	r3, r3, #10
 8005192:	b29b      	uxth	r3, r3
 8005194:	4313      	orrs	r3, r2
 8005196:	b29a      	uxth	r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	e024      	b.n	80051e8 <USB_EPStartXfer+0x318>
 800519e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d11c      	bne.n	80051e8 <USB_EPStartXfer+0x318>
 80051ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051bc:	b29b      	uxth	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	4413      	add	r3, r2
 80051c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	011a      	lsls	r2, r3, #4
 80051d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d6:	4413      	add	r3, r2
 80051d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	895b      	ldrh	r3, [r3, #10]
 80051f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6959      	ldr	r1, [r3, #20]
 8005204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005208:	b29b      	uxth	r3, r3
 800520a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800520e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005212:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005216:	6800      	ldr	r0, [r0, #0]
 8005218:	f001 fb49 	bl	80068ae <USB_WritePMA>
            ep->xfer_buff += len;
 800521c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695a      	ldr	r2, [r3, #20]
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522c:	441a      	add	r2, r3
 800522e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800523a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	429a      	cmp	r2, r3
 8005254:	d90f      	bls.n	8005276 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	621a      	str	r2, [r3, #32]
 8005274:	e00e      	b.n	8005294 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2200      	movs	r2, #0
 8005292:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	785b      	ldrb	r3, [r3, #1]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d177      	bne.n	8005394 <USB_EPStartXfer+0x4c4>
 80052a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	4413      	add	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	011a      	lsls	r2, r3, #4
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	4413      	add	r3, r2
 80052da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80052f6:	d921      	bls.n	800533c <USB_EPStartXfer+0x46c>
 80052f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <USB_EPStartXfer+0x448>
 800530e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005312:	3b01      	subs	r3, #1
 8005314:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29a      	uxth	r2, r3
 800531e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005322:	b29b      	uxth	r3, r3
 8005324:	029b      	lsls	r3, r3, #10
 8005326:	b29b      	uxth	r3, r3
 8005328:	4313      	orrs	r3, r2
 800532a:	b29b      	uxth	r3, r3
 800532c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005334:	b29a      	uxth	r2, r3
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	e056      	b.n	80053ea <USB_EPStartXfer+0x51a>
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <USB_EPStartXfer+0x48a>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005352:	b29a      	uxth	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	e047      	b.n	80053ea <USB_EPStartXfer+0x51a>
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d004      	beq.n	800537a <USB_EPStartXfer+0x4aa>
 8005370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005374:	3301      	adds	r3, #1
 8005376:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29a      	uxth	r2, r3
 8005380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005384:	b29b      	uxth	r3, r3
 8005386:	029b      	lsls	r3, r3, #10
 8005388:	b29b      	uxth	r3, r3
 800538a:	4313      	orrs	r3, r2
 800538c:	b29a      	uxth	r2, r3
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	e02a      	b.n	80053ea <USB_EPStartXfer+0x51a>
 8005394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d122      	bne.n	80053ea <USB_EPStartXfer+0x51a>
 80053a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	623b      	str	r3, [r7, #32]
 80053b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053be:	b29b      	uxth	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	4413      	add	r3, r2
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	011a      	lsls	r2, r3, #4
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	4413      	add	r3, r2
 80053da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	891b      	ldrh	r3, [r3, #8]
 80053f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6959      	ldr	r1, [r3, #20]
 8005406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540a:	b29b      	uxth	r3, r3
 800540c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005410:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005414:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005418:	6800      	ldr	r0, [r0, #0]
 800541a:	f001 fa48 	bl	80068ae <USB_WritePMA>
 800541e:	e3ee      	b.n	8005bfe <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d177      	bne.n	8005520 <USB_EPStartXfer+0x650>
 8005430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800543c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005440:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005450:	4413      	add	r3, r2
 8005452:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	011a      	lsls	r2, r3, #4
 8005462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005464:	4413      	add	r3, r2
 8005466:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800546a:	647b      	str	r3, [r7, #68]	@ 0x44
 800546c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005476:	b29a      	uxth	r2, r3
 8005478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005480:	2b3e      	cmp	r3, #62	@ 0x3e
 8005482:	d921      	bls.n	80054c8 <USB_EPStartXfer+0x5f8>
 8005484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800548e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	2b00      	cmp	r3, #0
 8005498:	d104      	bne.n	80054a4 <USB_EPStartXfer+0x5d4>
 800549a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800549e:	3b01      	subs	r3, #1
 80054a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	029b      	lsls	r3, r3, #10
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	e056      	b.n	8005576 <USB_EPStartXfer+0x6a6>
 80054c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <USB_EPStartXfer+0x616>
 80054d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	e047      	b.n	8005576 <USB_EPStartXfer+0x6a6>
 80054e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <USB_EPStartXfer+0x636>
 80054fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005500:	3301      	adds	r3, #1
 8005502:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29a      	uxth	r2, r3
 800550c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005510:	b29b      	uxth	r3, r3
 8005512:	029b      	lsls	r3, r3, #10
 8005514:	b29b      	uxth	r3, r3
 8005516:	4313      	orrs	r3, r2
 8005518:	b29a      	uxth	r2, r3
 800551a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	e02a      	b.n	8005576 <USB_EPStartXfer+0x6a6>
 8005520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d122      	bne.n	8005576 <USB_EPStartXfer+0x6a6>
 8005530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	653b      	str	r3, [r7, #80]	@ 0x50
 800553c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005550:	4413      	add	r3, r2
 8005552:	653b      	str	r3, [r7, #80]	@ 0x50
 8005554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	011a      	lsls	r2, r3, #4
 8005562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005564:	4413      	add	r3, r2
 8005566:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800556a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800556c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005570:	b29a      	uxth	r2, r3
 8005572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005574:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	891b      	ldrh	r3, [r3, #8]
 8005582:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6959      	ldr	r1, [r3, #20]
 8005592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005596:	b29b      	uxth	r3, r3
 8005598:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800559c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055a4:	6800      	ldr	r0, [r0, #0]
 80055a6:	f001 f982 	bl	80068ae <USB_WritePMA>
            ep->xfer_buff += len;
 80055aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ba:	441a      	add	r2, r3
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d90f      	bls.n	8005604 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80055e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a1a      	ldr	r2, [r3, #32]
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f4:	1ad2      	subs	r2, r2, r3
 80055f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	621a      	str	r2, [r3, #32]
 8005602:	e00e      	b.n	8005622 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2200      	movs	r2, #0
 8005620:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	643b      	str	r3, [r7, #64]	@ 0x40
 800562e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d177      	bne.n	800572e <USB_EPStartXfer+0x85e>
 800563e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	63bb      	str	r3, [r7, #56]	@ 0x38
 800564a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800564e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005658:	b29b      	uxth	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	4413      	add	r3, r2
 8005660:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	011a      	lsls	r2, r3, #4
 8005670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005672:	4413      	add	r3, r2
 8005674:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005678:	637b      	str	r3, [r7, #52]	@ 0x34
 800567a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005684:	b29a      	uxth	r2, r3
 8005686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005690:	d921      	bls.n	80056d6 <USB_EPStartXfer+0x806>
 8005692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d104      	bne.n	80056b2 <USB_EPStartXfer+0x7e2>
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ac:	3b01      	subs	r3, #1
 80056ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056bc:	b29b      	uxth	r3, r3
 80056be:	029b      	lsls	r3, r3, #10
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	4313      	orrs	r3, r2
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d2:	801a      	strh	r2, [r3, #0]
 80056d4:	e050      	b.n	8005778 <USB_EPStartXfer+0x8a8>
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <USB_EPStartXfer+0x824>
 80056de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e041      	b.n	8005778 <USB_EPStartXfer+0x8a8>
 80056f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <USB_EPStartXfer+0x844>
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570e:	3301      	adds	r3, #1
 8005710:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29a      	uxth	r2, r3
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571e:	b29b      	uxth	r3, r3
 8005720:	029b      	lsls	r3, r3, #10
 8005722:	b29b      	uxth	r3, r3
 8005724:	4313      	orrs	r3, r2
 8005726:	b29a      	uxth	r2, r3
 8005728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	e024      	b.n	8005778 <USB_EPStartXfer+0x8a8>
 800572e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d11c      	bne.n	8005778 <USB_EPStartXfer+0x8a8>
 800573e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800574c:	b29b      	uxth	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005752:	4413      	add	r3, r2
 8005754:	643b      	str	r3, [r7, #64]	@ 0x40
 8005756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	011a      	lsls	r2, r3, #4
 8005764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005766:	4413      	add	r3, r2
 8005768:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800576c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800576e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005772:	b29a      	uxth	r2, r3
 8005774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005776:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	895b      	ldrh	r3, [r3, #10]
 8005784:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6959      	ldr	r1, [r3, #20]
 8005794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005798:	b29b      	uxth	r3, r3
 800579a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800579e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057a6:	6800      	ldr	r0, [r0, #0]
 80057a8:	f001 f881 	bl	80068ae <USB_WritePMA>
 80057ac:	e227      	b.n	8005bfe <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80057be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80057e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80057e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005806:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800580a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800580e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005816:	b29b      	uxth	r3, r3
 8005818:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800581a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800582a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005834:	b29b      	uxth	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800583a:	4413      	add	r3, r2
 800583c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800583e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	011a      	lsls	r2, r3, #4
 800584c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800584e:	4413      	add	r3, r2
 8005850:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005854:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585a:	b29a      	uxth	r2, r3
 800585c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800585e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	891b      	ldrh	r3, [r3, #8]
 800586c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6959      	ldr	r1, [r3, #20]
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005880:	b29b      	uxth	r3, r3
 8005882:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005886:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800588a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800588e:	6800      	ldr	r0, [r0, #0]
 8005890:	f001 f80d 	bl	80068ae <USB_WritePMA>
 8005894:	e1b3      	b.n	8005bfe <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a6:	1ad2      	subs	r2, r2, r3
 80058a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80c6 	beq.w	8005a68 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d177      	bne.n	80059e8 <USB_EPStartXfer+0xb18>
 80058f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005912:	b29b      	uxth	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005918:	4413      	add	r3, r2
 800591a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800591c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	011a      	lsls	r2, r3, #4
 800592a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800592c:	4413      	add	r3, r2
 800592e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005932:	667b      	str	r3, [r7, #100]	@ 0x64
 8005934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800593e:	b29a      	uxth	r2, r3
 8005940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005948:	2b3e      	cmp	r3, #62	@ 0x3e
 800594a:	d921      	bls.n	8005990 <USB_EPStartXfer+0xac0>
 800594c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <USB_EPStartXfer+0xa9c>
 8005962:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005966:	3b01      	subs	r3, #1
 8005968:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800596c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29a      	uxth	r2, r3
 8005972:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005976:	b29b      	uxth	r3, r3
 8005978:	029b      	lsls	r3, r3, #10
 800597a:	b29b      	uxth	r3, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	b29b      	uxth	r3, r3
 8005980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005988:	b29a      	uxth	r2, r3
 800598a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	e050      	b.n	8005a32 <USB_EPStartXfer+0xb62>
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <USB_EPStartXfer+0xade>
 8005998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	e041      	b.n	8005a32 <USB_EPStartXfer+0xb62>
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <USB_EPStartXfer+0xafe>
 80059c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80059c8:	3301      	adds	r3, #1
 80059ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80059d8:	b29b      	uxth	r3, r3
 80059da:	029b      	lsls	r3, r3, #10
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4313      	orrs	r3, r2
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e024      	b.n	8005a32 <USB_EPStartXfer+0xb62>
 80059e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d11c      	bne.n	8005a32 <USB_EPStartXfer+0xb62>
 80059f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a0c:	4413      	add	r3, r2
 8005a0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	011a      	lsls	r2, r3, #4
 8005a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a20:	4413      	add	r3, r2
 8005a22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	895b      	ldrh	r3, [r3, #10]
 8005a3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6959      	ldr	r1, [r3, #20]
 8005a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a58:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a5c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a60:	6800      	ldr	r0, [r0, #0]
 8005a62:	f000 ff24 	bl	80068ae <USB_WritePMA>
 8005a66:	e0ca      	b.n	8005bfe <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d177      	bne.n	8005b68 <USB_EPStartXfer+0xc98>
 8005a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a98:	4413      	add	r3, r2
 8005a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	011a      	lsls	r2, r3, #4
 8005aaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005aac:	4413      	add	r3, r2
 8005aae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ab2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ac2:	801a      	strh	r2, [r3, #0]
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005aca:	d921      	bls.n	8005b10 <USB_EPStartXfer+0xc40>
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <USB_EPStartXfer+0xc1c>
 8005ae2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005aec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4313      	orrs	r3, r2
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	e05c      	b.n	8005bca <USB_EPStartXfer+0xcfa>
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <USB_EPStartXfer+0xc5e>
 8005b18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	e04d      	b.n	8005bca <USB_EPStartXfer+0xcfa>
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d004      	beq.n	8005b4e <USB_EPStartXfer+0xc7e>
 8005b44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b48:	3301      	adds	r3, #1
 8005b4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	029b      	lsls	r3, r3, #10
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b64:	801a      	strh	r2, [r3, #0]
 8005b66:	e030      	b.n	8005bca <USB_EPStartXfer+0xcfa>
 8005b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d128      	bne.n	8005bca <USB_EPStartXfer+0xcfa>
 8005b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	011a      	lsls	r2, r3, #4
 8005bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bc8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	891b      	ldrh	r3, [r3, #8]
 8005bd6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6959      	ldr	r1, [r3, #20]
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bf0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bf4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bf8:	6800      	ldr	r0, [r0, #0]
 8005bfa:	f000 fe58 	bl	80068ae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c24:	817b      	strh	r3, [r7, #10]
 8005c26:	897b      	ldrh	r3, [r7, #10]
 8005c28:	f083 0310 	eor.w	r3, r3, #16
 8005c2c:	817b      	strh	r3, [r7, #10]
 8005c2e:	897b      	ldrh	r3, [r7, #10]
 8005c30:	f083 0320 	eor.w	r3, r3, #32
 8005c34:	817b      	strh	r3, [r7, #10]
 8005c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	897b      	ldrh	r3, [r7, #10]
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]
 8005c66:	f000 bcde 	b.w	8006626 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	7b1b      	ldrb	r3, [r3, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 80bb 	bne.w	8005df2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d917      	bls.n	8005cc8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb8:	1ad2      	subs	r2, r2, r3
 8005cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	619a      	str	r2, [r3, #24]
 8005cc6:	e00e      	b.n	8005ce6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	011a      	lsls	r2, r3, #4
 8005d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d22:	4413      	add	r3, r2
 8005d24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d44:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d46:	d924      	bls.n	8005d92 <USB_EPStartXfer+0xec2>
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <USB_EPStartXfer+0xe98>
 8005d5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d62:	3b01      	subs	r3, #1
 8005d64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	029b      	lsls	r3, r3, #10
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	f000 bc10 	b.w	80065b2 <USB_EPStartXfer+0x16e2>
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10c      	bne.n	8005db4 <USB_EPStartXfer+0xee4>
 8005d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	e3fe      	b.n	80065b2 <USB_EPStartXfer+0x16e2>
 8005db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <USB_EPStartXfer+0xf04>
 8005dca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	029b      	lsls	r3, r3, #10
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	4313      	orrs	r3, r2
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e3df      	b.n	80065b2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	78db      	ldrb	r3, [r3, #3]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	f040 8218 	bne.w	8006234 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f040 809d 	bne.w	8005f50 <USB_EPStartXfer+0x1080>
 8005e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	011a      	lsls	r2, r3, #4
 8005e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e52:	4413      	add	r3, r2
 8005e54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e7e:	d92b      	bls.n	8005ed8 <USB_EPStartXfer+0x1008>
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d104      	bne.n	8005eb0 <USB_EPStartXfer+0xfe0>
 8005ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	029b      	lsls	r3, r3, #10
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	e070      	b.n	8005fba <USB_EPStartXfer+0x10ea>
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10c      	bne.n	8005f02 <USB_EPStartXfer+0x1032>
 8005ee8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	e05b      	b.n	8005fba <USB_EPStartXfer+0x10ea>
 8005f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	085b      	lsrs	r3, r3, #1
 8005f10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <USB_EPStartXfer+0x1062>
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	029b      	lsls	r3, r3, #10
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	4313      	orrs	r3, r2
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	e034      	b.n	8005fba <USB_EPStartXfer+0x10ea>
 8005f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	785b      	ldrb	r3, [r3, #1]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d12c      	bne.n	8005fba <USB_EPStartXfer+0x10ea>
 8005f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f84:	4413      	add	r3, r2
 8005f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	011a      	lsls	r2, r3, #4
 8005f98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 809d 	bne.w	8006114 <USB_EPStartXfer+0x1244>
 8005fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ffe:	4413      	add	r3, r2
 8006000:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	011a      	lsls	r2, r3, #4
 8006012:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006016:	4413      	add	r3, r2
 8006018:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800601c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800602c:	b29a      	uxth	r2, r3
 800602e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006032:	801a      	strh	r2, [r3, #0]
 8006034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b3e      	cmp	r3, #62	@ 0x3e
 8006042:	d92b      	bls.n	800609c <USB_EPStartXfer+0x11cc>
 8006044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2b00      	cmp	r3, #0
 8006068:	d104      	bne.n	8006074 <USB_EPStartXfer+0x11a4>
 800606a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800606e:	3b01      	subs	r3, #1
 8006070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29a      	uxth	r2, r3
 800607c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006080:	b29b      	uxth	r3, r3
 8006082:	029b      	lsls	r3, r3, #10
 8006084:	b29b      	uxth	r3, r3
 8006086:	4313      	orrs	r3, r2
 8006088:	b29b      	uxth	r3, r3
 800608a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006092:	b29a      	uxth	r2, r3
 8006094:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006098:	801a      	strh	r2, [r3, #0]
 800609a:	e069      	b.n	8006170 <USB_EPStartXfer+0x12a0>
 800609c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10c      	bne.n	80060c6 <USB_EPStartXfer+0x11f6>
 80060ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060bc:	b29a      	uxth	r2, r3
 80060be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	e054      	b.n	8006170 <USB_EPStartXfer+0x12a0>
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <USB_EPStartXfer+0x1226>
 80060ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f0:	3301      	adds	r3, #1
 80060f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006102:	b29b      	uxth	r3, r3
 8006104:	029b      	lsls	r3, r3, #10
 8006106:	b29b      	uxth	r3, r3
 8006108:	4313      	orrs	r3, r2
 800610a:	b29a      	uxth	r2, r3
 800610c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	e02d      	b.n	8006170 <USB_EPStartXfer+0x12a0>
 8006114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d125      	bne.n	8006170 <USB_EPStartXfer+0x12a0>
 8006124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006132:	b29b      	uxth	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800613a:	4413      	add	r3, r2
 800613c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	011a      	lsls	r2, r3, #4
 800614e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006152:	4413      	add	r3, r2
 8006154:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006158:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800615c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	b29a      	uxth	r2, r3
 800616a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800616e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8218 	beq.w	80065b2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <USB_EPStartXfer+0x12ea>
 80061ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10d      	bne.n	80061d6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f040 81f5 	bne.w	80065b2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f040 81ee 	bne.w	80065b2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80061d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061fc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800621e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800622a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800622e:	b29b      	uxth	r3, r3
 8006230:	8013      	strh	r3, [r2, #0]
 8006232:	e1be      	b.n	80065b2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	78db      	ldrb	r3, [r3, #3]
 8006240:	2b01      	cmp	r3, #1
 8006242:	f040 81b4 	bne.w	80065ae <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	429a      	cmp	r2, r3
 8006260:	d917      	bls.n	8006292 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006282:	1ad2      	subs	r2, r2, r3
 8006284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	619a      	str	r2, [r3, #24]
 8006290:	e00e      	b.n	80062b0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80062a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2200      	movs	r2, #0
 80062ae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f040 8085 	bne.w	80063cc <USB_EPStartXfer+0x14fc>
 80062c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062de:	b29b      	uxth	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062e6:	4413      	add	r3, r2
 80062e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	011a      	lsls	r2, r3, #4
 80062fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062fe:	4413      	add	r3, r2
 8006300:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006304:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006314:	b29a      	uxth	r2, r3
 8006316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006320:	2b3e      	cmp	r3, #62	@ 0x3e
 8006322:	d923      	bls.n	800636c <USB_EPStartXfer+0x149c>
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800632e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <USB_EPStartXfer+0x1474>
 800633a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800633e:	3b01      	subs	r3, #1
 8006340:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29a      	uxth	r2, r3
 800634c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006350:	b29b      	uxth	r3, r3
 8006352:	029b      	lsls	r3, r3, #10
 8006354:	b29b      	uxth	r3, r3
 8006356:	4313      	orrs	r3, r2
 8006358:	b29b      	uxth	r3, r3
 800635a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006362:	b29a      	uxth	r2, r3
 8006364:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006368:	801a      	strh	r2, [r3, #0]
 800636a:	e060      	b.n	800642e <USB_EPStartXfer+0x155e>
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10c      	bne.n	800638e <USB_EPStartXfer+0x14be>
 8006374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006384:	b29a      	uxth	r2, r3
 8006386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	e04f      	b.n	800642e <USB_EPStartXfer+0x155e>
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006392:	085b      	lsrs	r3, r3, #1
 8006394:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d004      	beq.n	80063ae <USB_EPStartXfer+0x14de>
 80063a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a8:	3301      	adds	r3, #1
 80063aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	029b      	lsls	r3, r3, #10
 80063be:	b29b      	uxth	r3, r3
 80063c0:	4313      	orrs	r3, r2
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	e030      	b.n	800642e <USB_EPStartXfer+0x155e>
 80063cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d128      	bne.n	800642e <USB_EPStartXfer+0x155e>
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006400:	4413      	add	r3, r2
 8006402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	011a      	lsls	r2, r3, #4
 8006414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006418:	4413      	add	r3, r2
 800641a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800641e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006426:	b29a      	uxth	r2, r3
 8006428:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006432:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800643c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f040 8085 	bne.w	8006558 <USB_EPStartXfer+0x1688>
 800644e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800645c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006472:	4413      	add	r3, r2
 8006474:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	011a      	lsls	r2, r3, #4
 8006486:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800648a:	4413      	add	r3, r2
 800648c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006494:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80064ae:	d923      	bls.n	80064f8 <USB_EPStartXfer+0x1628>
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <USB_EPStartXfer+0x1600>
 80064c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064ca:	3b01      	subs	r3, #1
 80064cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064dc:	b29b      	uxth	r3, r3
 80064de:	029b      	lsls	r3, r3, #10
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	4313      	orrs	r3, r2
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064f4:	801a      	strh	r2, [r3, #0]
 80064f6:	e05c      	b.n	80065b2 <USB_EPStartXfer+0x16e2>
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10c      	bne.n	800651a <USB_EPStartXfer+0x164a>
 8006500:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006510:	b29a      	uxth	r2, r3
 8006512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e04b      	b.n	80065b2 <USB_EPStartXfer+0x16e2>
 800651a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d004      	beq.n	800653a <USB_EPStartXfer+0x166a>
 8006530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006534:	3301      	adds	r3, #1
 8006536:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800653a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29a      	uxth	r2, r3
 8006542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006546:	b29b      	uxth	r3, r3
 8006548:	029b      	lsls	r3, r3, #10
 800654a:	b29b      	uxth	r3, r3
 800654c:	4313      	orrs	r3, r2
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	e02c      	b.n	80065b2 <USB_EPStartXfer+0x16e2>
 8006558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	785b      	ldrb	r3, [r3, #1]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d124      	bne.n	80065b2 <USB_EPStartXfer+0x16e2>
 8006568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006576:	b29b      	uxth	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800657e:	4413      	add	r3, r2
 8006580:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	011a      	lsls	r2, r3, #4
 8006592:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006596:	4413      	add	r3, r2
 8006598:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800659c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	e001      	b.n	80065b2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e03a      	b.n	8006628 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	441a      	add	r2, r3
 800660e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800661a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800661e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006622:	b29b      	uxth	r3, r3
 8006624:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	785b      	ldrb	r3, [r3, #1]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d020      	beq.n	8006686 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800665a:	81bb      	strh	r3, [r7, #12]
 800665c:	89bb      	ldrh	r3, [r7, #12]
 800665e:	f083 0310 	eor.w	r3, r3, #16
 8006662:	81bb      	strh	r3, [r7, #12]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	441a      	add	r2, r3
 800666e:	89bb      	ldrh	r3, [r7, #12]
 8006670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800667c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006680:	b29b      	uxth	r3, r3
 8006682:	8013      	strh	r3, [r2, #0]
 8006684:	e01f      	b.n	80066c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669c:	81fb      	strh	r3, [r7, #14]
 800669e:	89fb      	ldrh	r3, [r7, #14]
 80066a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066a4:	81fb      	strh	r3, [r7, #14]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	441a      	add	r2, r3
 80066b0:	89fb      	ldrh	r3, [r7, #14]
 80066b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr

080066d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b087      	sub	sp, #28
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	7b1b      	ldrb	r3, [r3, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f040 809d 	bne.w	8006820 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	785b      	ldrb	r3, [r3, #1]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d04c      	beq.n	8006788 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	823b      	strh	r3, [r7, #16]
 80066fc:	8a3b      	ldrh	r3, [r7, #16]
 80066fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d01b      	beq.n	800673e <USB_EPClearStall+0x6c>
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800671c:	81fb      	strh	r3, [r7, #14]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	89fb      	ldrh	r3, [r7, #14]
 800672a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006736:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800673a:	b29b      	uxth	r3, r3
 800673c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	78db      	ldrb	r3, [r3, #3]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d06c      	beq.n	8006820 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800675c:	81bb      	strh	r3, [r7, #12]
 800675e:	89bb      	ldrh	r3, [r7, #12]
 8006760:	f083 0320 	eor.w	r3, r3, #32
 8006764:	81bb      	strh	r3, [r7, #12]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	441a      	add	r2, r3
 8006770:	89bb      	ldrh	r3, [r7, #12]
 8006772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800677a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800677e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006782:	b29b      	uxth	r3, r3
 8006784:	8013      	strh	r3, [r2, #0]
 8006786:	e04b      	b.n	8006820 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	82fb      	strh	r3, [r7, #22]
 8006796:	8afb      	ldrh	r3, [r7, #22]
 8006798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01b      	beq.n	80067d8 <USB_EPClearStall+0x106>
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b6:	82bb      	strh	r3, [r7, #20]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	8abb      	ldrh	r3, [r7, #20]
 80067c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ee:	827b      	strh	r3, [r7, #18]
 80067f0:	8a7b      	ldrh	r3, [r7, #18]
 80067f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067f6:	827b      	strh	r3, [r7, #18]
 80067f8:	8a7b      	ldrh	r3, [r7, #18]
 80067fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067fe:	827b      	strh	r3, [r7, #18]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	441a      	add	r2, r3
 800680a:	8a7b      	ldrh	r3, [r7, #18]
 800680c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681c:	b29b      	uxth	r3, r3
 800681e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d103      	bne.n	8006846 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2280      	movs	r2, #128	@ 0x80
 8006842:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr

08006852 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr

08006866 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr

0800687a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800687a:	b480      	push	{r7}
 800687c:	b085      	sub	sp, #20
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006888:	b29b      	uxth	r3, r3
 800688a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800688c:	68fb      	ldr	r3, [r7, #12]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr

08006898 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr

080068ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b08b      	sub	sp, #44	@ 0x2c
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	4611      	mov	r1, r2
 80068ba:	461a      	mov	r2, r3
 80068bc:	460b      	mov	r3, r1
 80068be:	80fb      	strh	r3, [r7, #6]
 80068c0:	4613      	mov	r3, r2
 80068c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068c4:	88bb      	ldrh	r3, [r7, #4]
 80068c6:	3301      	adds	r3, #1
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068d4:	88fb      	ldrh	r3, [r7, #6]
 80068d6:	005a      	lsls	r2, r3, #1
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068e0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e6:	e01e      	b.n	8006926 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	3301      	adds	r3, #1
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	b21a      	sxth	r2, r3
 80068f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	b21b      	sxth	r3, r3
 8006900:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	8a7a      	ldrh	r2, [r7, #18]
 8006906:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	3302      	adds	r3, #2
 800690c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	3302      	adds	r3, #2
 8006912:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	3301      	adds	r3, #1
 8006918:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	3301      	adds	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	3b01      	subs	r3, #1
 8006924:	627b      	str	r3, [r7, #36]	@ 0x24
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1dd      	bne.n	80068e8 <USB_WritePMA+0x3a>
  }
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	372c      	adds	r7, #44	@ 0x2c
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr

08006938 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006938:	b480      	push	{r7}
 800693a:	b08b      	sub	sp, #44	@ 0x2c
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	4611      	mov	r1, r2
 8006944:	461a      	mov	r2, r3
 8006946:	460b      	mov	r3, r1
 8006948:	80fb      	strh	r3, [r7, #6]
 800694a:	4613      	mov	r3, r2
 800694c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800694e:	88bb      	ldrh	r3, [r7, #4]
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	b29b      	uxth	r3, r3
 8006954:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	005a      	lsls	r2, r3, #1
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800696a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006970:	e01b      	b.n	80069aa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	3302      	adds	r3, #2
 800697e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	3301      	adds	r3, #1
 800698c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	0a1b      	lsrs	r3, r3, #8
 8006992:	b2da      	uxtb	r2, r3
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	3301      	adds	r3, #1
 800699c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	3302      	adds	r3, #2
 80069a2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80069a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a6:	3b01      	subs	r3, #1
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e0      	bne.n	8006972 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80069b0:	88bb      	ldrh	r3, [r7, #4]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	701a      	strb	r2, [r3, #0]
  }
}
 80069cc:	bf00      	nop
 80069ce:	372c      	adds	r7, #44	@ 0x2c
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr

080069d6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	4613      	mov	r3, r2
 80069e2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069ea:	2302      	movs	r3, #2
 80069ec:	e01a      	b.n	8006a24 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	79fa      	ldrb	r2, [r7, #7]
 8006a1a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f001 fc03 	bl	8008228 <USBD_LL_Init>

  return USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73fb      	strb	r3, [r7, #15]
 8006a4c:	e001      	b.n	8006a52 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr

08006a5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fc26 	bl	80082b8 <USBD_LL_Start>

  return USBD_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr

08006a8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a96:	2302      	movs	r3, #2
 8006a98:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00c      	beq.n	8006abe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	78fa      	ldrb	r2, [r7, #3]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	78fa      	ldrb	r2, [r7, #3]
 8006ade:	4611      	mov	r1, r2
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	4798      	blx	r3

  return USBD_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fed8 	bl	80078b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b14:	461a      	mov	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d016      	beq.n	8006b58 <USBD_LL_SetupStage+0x6a>
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d81c      	bhi.n	8006b68 <USBD_LL_SetupStage+0x7a>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <USBD_LL_SetupStage+0x4a>
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d008      	beq.n	8006b48 <USBD_LL_SetupStage+0x5a>
 8006b36:	e017      	b.n	8006b68 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f9cb 	bl	8006edc <USBD_StdDevReq>
      break;
 8006b46:	e01a      	b.n	8006b7e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fa2d 	bl	8006fb0 <USBD_StdItfReq>
      break;
 8006b56:	e012      	b.n	8006b7e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fa6d 	bl	8007040 <USBD_StdEPReq>
      break;
 8006b66:	e00a      	b.n	8006b7e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006b6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 fbfe 	bl	8008378 <USBD_LL_StallEP>
      break;
 8006b7c:	bf00      	nop
  }

  return USBD_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	460b      	mov	r3, r1
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b96:	7afb      	ldrb	r3, [r7, #11]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d14b      	bne.n	8006c34 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006ba2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d134      	bne.n	8006c18 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d919      	bls.n	8006bee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	1ad2      	subs	r2, r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d203      	bcs.n	8006bdc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	e002      	b.n	8006be2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f001 f8f0 	bl	8007dcc <USBD_CtlContinueRx>
 8006bec:	e038      	b.n	8006c60 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d105      	bne.n	8006c10 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f001 f8ed 	bl	8007df0 <USBD_CtlSendStatus>
 8006c16:	e023      	b.n	8006c60 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	d11e      	bne.n	8006c60 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f001 fba3 	bl	8008378 <USBD_LL_StallEP>
 8006c32:	e015      	b.n	8006c60 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00d      	beq.n	8006c5c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d108      	bne.n	8006c5c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	7afa      	ldrb	r2, [r7, #11]
 8006c54:	4611      	mov	r1, r2
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	4798      	blx	r3
 8006c5a:	e001      	b.n	8006c60 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e000      	b.n	8006c62 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b086      	sub	sp, #24
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	460b      	mov	r3, r1
 8006c74:	607a      	str	r2, [r7, #4]
 8006c76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c78:	7afb      	ldrb	r3, [r7, #11]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d17f      	bne.n	8006d7e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3314      	adds	r3, #20
 8006c82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d15c      	bne.n	8006d48 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d915      	bls.n	8006cc6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	1ad2      	subs	r2, r2, r3
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f001 f878 	bl	8007da8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cb8:	2300      	movs	r3, #0
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f001 fc05 	bl	80084ce <USBD_LL_PrepareReceive>
 8006cc4:	e04e      	b.n	8006d64 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	6912      	ldr	r2, [r2, #16]
 8006cce:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cd2:	fb01 f202 	mul.w	r2, r1, r2
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d11c      	bne.n	8006d16 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d316      	bcc.n	8006d16 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d20f      	bcs.n	8006d16 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f001 f854 	bl	8007da8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d08:	2300      	movs	r3, #0
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f001 fbdd 	bl	80084ce <USBD_LL_PrepareReceive>
 8006d14:	e026      	b.n	8006d64 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d105      	bne.n	8006d38 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d38:	2180      	movs	r1, #128	@ 0x80
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f001 fb1c 	bl	8008378 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f001 f868 	bl	8007e16 <USBD_CtlReceiveStatus>
 8006d46:	e00d      	b.n	8006d64 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d004      	beq.n	8006d5c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d103      	bne.n	8006d64 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d5c:	2180      	movs	r1, #128	@ 0x80
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f001 fb0a 	bl	8008378 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d11d      	bne.n	8006daa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff fe81 	bl	8006a76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006d7c:	e015      	b.n	8006daa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d108      	bne.n	8006da6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	7afa      	ldrb	r2, [r7, #11]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	4798      	blx	r3
 8006da4:	e001      	b.n	8006daa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	e000      	b.n	8006dac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dbc:	2340      	movs	r3, #64	@ 0x40
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fa93 	bl	80082ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2240      	movs	r2, #64	@ 0x40
 8006dd4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dd8:	2340      	movs	r3, #64	@ 0x40
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2180      	movs	r1, #128	@ 0x80
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fa85 	bl	80082ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2240      	movs	r2, #64	@ 0x40
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d009      	beq.n	8006e2c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6852      	ldr	r2, [r2, #4]
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	4611      	mov	r1, r2
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
  }

  return USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	78fa      	ldrb	r2, [r7, #3]
 8006e46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d105      	bne.n	8006e9a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bc80      	pop	{r7}
 8006ea4:	4770      	bx	lr

08006ea6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d10b      	bne.n	8006ed0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ef2:	2b40      	cmp	r3, #64	@ 0x40
 8006ef4:	d005      	beq.n	8006f02 <USBD_StdDevReq+0x26>
 8006ef6:	2b40      	cmp	r3, #64	@ 0x40
 8006ef8:	d84f      	bhi.n	8006f9a <USBD_StdDevReq+0xbe>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <USBD_StdDevReq+0x36>
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d14b      	bne.n	8006f9a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3
      break;
 8006f10:	e048      	b.n	8006fa4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	785b      	ldrb	r3, [r3, #1]
 8006f16:	2b09      	cmp	r3, #9
 8006f18:	d839      	bhi.n	8006f8e <USBD_StdDevReq+0xb2>
 8006f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f20 <USBD_StdDevReq+0x44>)
 8006f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f20:	08006f71 	.word	0x08006f71
 8006f24:	08006f85 	.word	0x08006f85
 8006f28:	08006f8f 	.word	0x08006f8f
 8006f2c:	08006f7b 	.word	0x08006f7b
 8006f30:	08006f8f 	.word	0x08006f8f
 8006f34:	08006f53 	.word	0x08006f53
 8006f38:	08006f49 	.word	0x08006f49
 8006f3c:	08006f8f 	.word	0x08006f8f
 8006f40:	08006f67 	.word	0x08006f67
 8006f44:	08006f5d 	.word	0x08006f5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f9dc 	bl	8007308 <USBD_GetDescriptor>
          break;
 8006f50:	e022      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fb3f 	bl	80075d8 <USBD_SetAddress>
          break;
 8006f5a:	e01d      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb7e 	bl	8007660 <USBD_SetConfig>
          break;
 8006f64:	e018      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fc07 	bl	800777c <USBD_GetConfig>
          break;
 8006f6e:	e013      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fc37 	bl	80077e6 <USBD_GetStatus>
          break;
 8006f78:	e00e      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fc65 	bl	800784c <USBD_SetFeature>
          break;
 8006f82:	e009      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fc74 	bl	8007874 <USBD_ClrFeature>
          break;
 8006f8c:	e004      	b.n	8006f98 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fcc9 	bl	8007928 <USBD_CtlError>
          break;
 8006f96:	bf00      	nop
      }
      break;
 8006f98:	e004      	b.n	8006fa4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fcc3 	bl	8007928 <USBD_CtlError>
      break;
 8006fa2:	bf00      	nop
  }

  return ret;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fc6:	2b40      	cmp	r3, #64	@ 0x40
 8006fc8:	d005      	beq.n	8006fd6 <USBD_StdItfReq+0x26>
 8006fca:	2b40      	cmp	r3, #64	@ 0x40
 8006fcc:	d82e      	bhi.n	800702c <USBD_StdItfReq+0x7c>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <USBD_StdItfReq+0x26>
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d12a      	bne.n	800702c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d81d      	bhi.n	800701e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	889b      	ldrh	r3, [r3, #4]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d813      	bhi.n	8007014 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	88db      	ldrh	r3, [r3, #6]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d110      	bne.n	8007028 <USBD_StdItfReq+0x78>
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10d      	bne.n	8007028 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 feef 	bl	8007df0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007012:	e009      	b.n	8007028 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fc86 	bl	8007928 <USBD_CtlError>
          break;
 800701c:	e004      	b.n	8007028 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fc81 	bl	8007928 <USBD_CtlError>
          break;
 8007026:	e000      	b.n	800702a <USBD_StdItfReq+0x7a>
          break;
 8007028:	bf00      	nop
      }
      break;
 800702a:	e004      	b.n	8007036 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fc7a 	bl	8007928 <USBD_CtlError>
      break;
 8007034:	bf00      	nop
  }

  return USBD_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	889b      	ldrh	r3, [r3, #4]
 8007052:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800705c:	2b40      	cmp	r3, #64	@ 0x40
 800705e:	d007      	beq.n	8007070 <USBD_StdEPReq+0x30>
 8007060:	2b40      	cmp	r3, #64	@ 0x40
 8007062:	f200 8146 	bhi.w	80072f2 <USBD_StdEPReq+0x2b2>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <USBD_StdEPReq+0x40>
 800706a:	2b20      	cmp	r3, #32
 800706c:	f040 8141 	bne.w	80072f2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
      break;
 800707e:	e13d      	b.n	80072fc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007088:	2b20      	cmp	r3, #32
 800708a:	d10a      	bne.n	80070a2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	e12d      	b.n	80072fe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	785b      	ldrb	r3, [r3, #1]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d007      	beq.n	80070ba <USBD_StdEPReq+0x7a>
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	f300 811b 	bgt.w	80072e6 <USBD_StdEPReq+0x2a6>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d072      	beq.n	800719a <USBD_StdEPReq+0x15a>
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d03a      	beq.n	800712e <USBD_StdEPReq+0xee>
 80070b8:	e115      	b.n	80072e6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d002      	beq.n	80070ca <USBD_StdEPReq+0x8a>
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d015      	beq.n	80070f4 <USBD_StdEPReq+0xb4>
 80070c8:	e02b      	b.n	8007122 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00c      	beq.n	80070ea <USBD_StdEPReq+0xaa>
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b80      	cmp	r3, #128	@ 0x80
 80070d4:	d009      	beq.n	80070ea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 f94c 	bl	8008378 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80070e0:	2180      	movs	r1, #128	@ 0x80
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 f948 	bl	8008378 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070e8:	e020      	b.n	800712c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fc1b 	bl	8007928 <USBD_CtlError>
              break;
 80070f2:	e01b      	b.n	800712c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	885b      	ldrh	r3, [r3, #2]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10e      	bne.n	800711a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <USBD_StdEPReq+0xda>
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	2b80      	cmp	r3, #128	@ 0x80
 8007106:	d008      	beq.n	800711a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	88db      	ldrh	r3, [r3, #6]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f92f 	bl	8008378 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fe68 	bl	8007df0 <USBD_CtlSendStatus>

              break;
 8007120:	e004      	b.n	800712c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fbff 	bl	8007928 <USBD_CtlError>
              break;
 800712a:	bf00      	nop
          }
          break;
 800712c:	e0e0      	b.n	80072f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007134:	2b02      	cmp	r3, #2
 8007136:	d002      	beq.n	800713e <USBD_StdEPReq+0xfe>
 8007138:	2b03      	cmp	r3, #3
 800713a:	d015      	beq.n	8007168 <USBD_StdEPReq+0x128>
 800713c:	e026      	b.n	800718c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00c      	beq.n	800715e <USBD_StdEPReq+0x11e>
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b80      	cmp	r3, #128	@ 0x80
 8007148:	d009      	beq.n	800715e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 f912 	bl	8008378 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007154:	2180      	movs	r1, #128	@ 0x80
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 f90e 	bl	8008378 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800715c:	e01c      	b.n	8007198 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fbe1 	bl	8007928 <USBD_CtlError>
              break;
 8007166:	e017      	b.n	8007198 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	885b      	ldrh	r3, [r3, #2]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d112      	bne.n	8007196 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 f919 	bl	80083b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fe33 	bl	8007df0 <USBD_CtlSendStatus>
              }
              break;
 800718a:	e004      	b.n	8007196 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fbca 	bl	8007928 <USBD_CtlError>
              break;
 8007194:	e000      	b.n	8007198 <USBD_StdEPReq+0x158>
              break;
 8007196:	bf00      	nop
          }
          break;
 8007198:	e0aa      	b.n	80072f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d002      	beq.n	80071aa <USBD_StdEPReq+0x16a>
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d032      	beq.n	800720e <USBD_StdEPReq+0x1ce>
 80071a8:	e097      	b.n	80072da <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d007      	beq.n	80071c0 <USBD_StdEPReq+0x180>
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	2b80      	cmp	r3, #128	@ 0x80
 80071b4:	d004      	beq.n	80071c0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fbb5 	bl	8007928 <USBD_CtlError>
                break;
 80071be:	e091      	b.n	80072e4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	da0b      	bge.n	80071e0 <USBD_StdEPReq+0x1a0>
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	3310      	adds	r3, #16
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	4413      	add	r3, r2
 80071dc:	3304      	adds	r3, #4
 80071de:	e00b      	b.n	80071f8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4413      	add	r3, r2
 80071f6:	3304      	adds	r3, #4
 80071f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2202      	movs	r2, #2
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fdb2 	bl	8007d70 <USBD_CtlSendData>
              break;
 800720c:	e06a      	b.n	80072e4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800720e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007212:	2b00      	cmp	r3, #0
 8007214:	da11      	bge.n	800723a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	f003 020f 	and.w	r2, r3, #15
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	440b      	add	r3, r1
 8007228:	3318      	adds	r3, #24
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d117      	bne.n	8007260 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fb78 	bl	8007928 <USBD_CtlError>
                  break;
 8007238:	e054      	b.n	80072e4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	f003 020f 	and.w	r2, r3, #15
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fb65 	bl	8007928 <USBD_CtlError>
                  break;
 800725e:	e041      	b.n	80072e4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007260:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007264:	2b00      	cmp	r3, #0
 8007266:	da0b      	bge.n	8007280 <USBD_StdEPReq+0x240>
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	3310      	adds	r3, #16
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	4413      	add	r3, r2
 800727c:	3304      	adds	r3, #4
 800727e:	e00b      	b.n	8007298 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4413      	add	r3, r2
 8007296:	3304      	adds	r3, #4
 8007298:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <USBD_StdEPReq+0x266>
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	2b80      	cmp	r3, #128	@ 0x80
 80072a4:	d103      	bne.n	80072ae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	e00e      	b.n	80072cc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 f89e 	bl	80083f4 <USBD_LL_IsStallEP>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2201      	movs	r2, #1
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	e002      	b.n	80072cc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2202      	movs	r2, #2
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fd4c 	bl	8007d70 <USBD_CtlSendData>
              break;
 80072d8:	e004      	b.n	80072e4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fb23 	bl	8007928 <USBD_CtlError>
              break;
 80072e2:	bf00      	nop
          }
          break;
 80072e4:	e004      	b.n	80072f0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fb1d 	bl	8007928 <USBD_CtlError>
          break;
 80072ee:	bf00      	nop
      }
      break;
 80072f0:	e004      	b.n	80072fc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb17 	bl	8007928 <USBD_CtlError>
      break;
 80072fa:	bf00      	nop
  }

  return ret;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	885b      	ldrh	r3, [r3, #2]
 8007322:	0a1b      	lsrs	r3, r3, #8
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	2b06      	cmp	r3, #6
 800732a:	f200 8128 	bhi.w	800757e <USBD_GetDescriptor+0x276>
 800732e:	a201      	add	r2, pc, #4	@ (adr r2, 8007334 <USBD_GetDescriptor+0x2c>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	08007351 	.word	0x08007351
 8007338:	08007369 	.word	0x08007369
 800733c:	080073a9 	.word	0x080073a9
 8007340:	0800757f 	.word	0x0800757f
 8007344:	0800757f 	.word	0x0800757f
 8007348:	0800751f 	.word	0x0800751f
 800734c:	0800754b 	.word	0x0800754b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	7c12      	ldrb	r2, [r2, #16]
 800735c:	f107 0108 	add.w	r1, r7, #8
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3
 8007364:	60f8      	str	r0, [r7, #12]
      break;
 8007366:	e112      	b.n	800758e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	7c1b      	ldrb	r3, [r3, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10d      	bne.n	800738c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007378:	f107 0208 	add.w	r2, r7, #8
 800737c:	4610      	mov	r0, r2
 800737e:	4798      	blx	r3
 8007380:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3301      	adds	r3, #1
 8007386:	2202      	movs	r2, #2
 8007388:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800738a:	e100      	b.n	800758e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007394:	f107 0208 	add.w	r2, r7, #8
 8007398:	4610      	mov	r0, r2
 800739a:	4798      	blx	r3
 800739c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	2202      	movs	r2, #2
 80073a4:	701a      	strb	r2, [r3, #0]
      break;
 80073a6:	e0f2      	b.n	800758e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	885b      	ldrh	r3, [r3, #2]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b05      	cmp	r3, #5
 80073b0:	f200 80ac 	bhi.w	800750c <USBD_GetDescriptor+0x204>
 80073b4:	a201      	add	r2, pc, #4	@ (adr r2, 80073bc <USBD_GetDescriptor+0xb4>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073d5 	.word	0x080073d5
 80073c0:	08007409 	.word	0x08007409
 80073c4:	0800743d 	.word	0x0800743d
 80073c8:	08007471 	.word	0x08007471
 80073cc:	080074a5 	.word	0x080074a5
 80073d0:	080074d9 	.word	0x080074d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00b      	beq.n	80073f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	7c12      	ldrb	r2, [r2, #16]
 80073ec:	f107 0108 	add.w	r1, r7, #8
 80073f0:	4610      	mov	r0, r2
 80073f2:	4798      	blx	r3
 80073f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073f6:	e091      	b.n	800751c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa94 	bl	8007928 <USBD_CtlError>
            err++;
 8007400:	7afb      	ldrb	r3, [r7, #11]
 8007402:	3301      	adds	r3, #1
 8007404:	72fb      	strb	r3, [r7, #11]
          break;
 8007406:	e089      	b.n	800751c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00b      	beq.n	800742c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	7c12      	ldrb	r2, [r2, #16]
 8007420:	f107 0108 	add.w	r1, r7, #8
 8007424:	4610      	mov	r0, r2
 8007426:	4798      	blx	r3
 8007428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800742a:	e077      	b.n	800751c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fa7a 	bl	8007928 <USBD_CtlError>
            err++;
 8007434:	7afb      	ldrb	r3, [r7, #11]
 8007436:	3301      	adds	r3, #1
 8007438:	72fb      	strb	r3, [r7, #11]
          break;
 800743a:	e06f      	b.n	800751c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00b      	beq.n	8007460 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	7c12      	ldrb	r2, [r2, #16]
 8007454:	f107 0108 	add.w	r1, r7, #8
 8007458:	4610      	mov	r0, r2
 800745a:	4798      	blx	r3
 800745c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800745e:	e05d      	b.n	800751c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa60 	bl	8007928 <USBD_CtlError>
            err++;
 8007468:	7afb      	ldrb	r3, [r7, #11]
 800746a:	3301      	adds	r3, #1
 800746c:	72fb      	strb	r3, [r7, #11]
          break;
 800746e:	e055      	b.n	800751c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00b      	beq.n	8007494 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	7c12      	ldrb	r2, [r2, #16]
 8007488:	f107 0108 	add.w	r1, r7, #8
 800748c:	4610      	mov	r0, r2
 800748e:	4798      	blx	r3
 8007490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007492:	e043      	b.n	800751c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa46 	bl	8007928 <USBD_CtlError>
            err++;
 800749c:	7afb      	ldrb	r3, [r7, #11]
 800749e:	3301      	adds	r3, #1
 80074a0:	72fb      	strb	r3, [r7, #11]
          break;
 80074a2:	e03b      	b.n	800751c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	7c12      	ldrb	r2, [r2, #16]
 80074bc:	f107 0108 	add.w	r1, r7, #8
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074c6:	e029      	b.n	800751c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa2c 	bl	8007928 <USBD_CtlError>
            err++;
 80074d0:	7afb      	ldrb	r3, [r7, #11]
 80074d2:	3301      	adds	r3, #1
 80074d4:	72fb      	strb	r3, [r7, #11]
          break;
 80074d6:	e021      	b.n	800751c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	7c12      	ldrb	r2, [r2, #16]
 80074f0:	f107 0108 	add.w	r1, r7, #8
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
 80074f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074fa:	e00f      	b.n	800751c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa12 	bl	8007928 <USBD_CtlError>
            err++;
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	3301      	adds	r3, #1
 8007508:	72fb      	strb	r3, [r7, #11]
          break;
 800750a:	e007      	b.n	800751c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fa0a 	bl	8007928 <USBD_CtlError>
          err++;
 8007514:	7afb      	ldrb	r3, [r7, #11]
 8007516:	3301      	adds	r3, #1
 8007518:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800751a:	e038      	b.n	800758e <USBD_GetDescriptor+0x286>
 800751c:	e037      	b.n	800758e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	7c1b      	ldrb	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d109      	bne.n	800753a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800752c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800752e:	f107 0208 	add.w	r2, r7, #8
 8007532:	4610      	mov	r0, r2
 8007534:	4798      	blx	r3
 8007536:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007538:	e029      	b.n	800758e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f9f3 	bl	8007928 <USBD_CtlError>
        err++;
 8007542:	7afb      	ldrb	r3, [r7, #11]
 8007544:	3301      	adds	r3, #1
 8007546:	72fb      	strb	r3, [r7, #11]
      break;
 8007548:	e021      	b.n	800758e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	7c1b      	ldrb	r3, [r3, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10d      	bne.n	800756e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755a:	f107 0208 	add.w	r2, r7, #8
 800755e:	4610      	mov	r0, r2
 8007560:	4798      	blx	r3
 8007562:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
 8007568:	2207      	movs	r2, #7
 800756a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800756c:	e00f      	b.n	800758e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f9d9 	bl	8007928 <USBD_CtlError>
        err++;
 8007576:	7afb      	ldrb	r3, [r7, #11]
 8007578:	3301      	adds	r3, #1
 800757a:	72fb      	strb	r3, [r7, #11]
      break;
 800757c:	e007      	b.n	800758e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f9d1 	bl	8007928 <USBD_CtlError>
      err++;
 8007586:	7afb      	ldrb	r3, [r7, #11]
 8007588:	3301      	adds	r3, #1
 800758a:	72fb      	strb	r3, [r7, #11]
      break;
 800758c:	bf00      	nop
  }

  if (err != 0U)
 800758e:	7afb      	ldrb	r3, [r7, #11]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d11c      	bne.n	80075ce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007594:	893b      	ldrh	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d011      	beq.n	80075be <USBD_GetDescriptor+0x2b6>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00d      	beq.n	80075be <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	88da      	ldrh	r2, [r3, #6]
 80075a6:	893b      	ldrh	r3, [r7, #8]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	bf28      	it	cs
 80075ac:	4613      	movcs	r3, r2
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075b2:	893b      	ldrh	r3, [r7, #8]
 80075b4:	461a      	mov	r2, r3
 80075b6:	68f9      	ldr	r1, [r7, #12]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fbd9 	bl	8007d70 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	88db      	ldrh	r3, [r3, #6]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d104      	bne.n	80075d0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fc12 	bl	8007df0 <USBD_CtlSendStatus>
 80075cc:	e000      	b.n	80075d0 <USBD_GetDescriptor+0x2c8>
    return;
 80075ce:	bf00      	nop
    }
  }
}
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop

080075d8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	889b      	ldrh	r3, [r3, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d130      	bne.n	800764c <USBD_SetAddress+0x74>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	88db      	ldrh	r3, [r3, #6]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d12c      	bne.n	800764c <USBD_SetAddress+0x74>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80075f8:	d828      	bhi.n	800764c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	885b      	ldrh	r3, [r3, #2]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007604:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800760c:	2b03      	cmp	r3, #3
 800760e:	d104      	bne.n	800761a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f988 	bl	8007928 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007618:	e01d      	b.n	8007656 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	7bfa      	ldrb	r2, [r7, #15]
 800761e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 ff0f 	bl	800844a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fbdf 	bl	8007df0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007640:	e009      	b.n	8007656 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764a:	e004      	b.n	8007656 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f96a 	bl	8007928 <USBD_CtlError>
  }
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	885b      	ldrh	r3, [r3, #2]
 800766e:	b2da      	uxtb	r2, r3
 8007670:	4b41      	ldr	r3, [pc, #260]	@ (8007778 <USBD_SetConfig+0x118>)
 8007672:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007674:	4b40      	ldr	r3, [pc, #256]	@ (8007778 <USBD_SetConfig+0x118>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d904      	bls.n	8007686 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f952 	bl	8007928 <USBD_CtlError>
 8007684:	e075      	b.n	8007772 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800768c:	2b02      	cmp	r3, #2
 800768e:	d002      	beq.n	8007696 <USBD_SetConfig+0x36>
 8007690:	2b03      	cmp	r3, #3
 8007692:	d023      	beq.n	80076dc <USBD_SetConfig+0x7c>
 8007694:	e062      	b.n	800775c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007696:	4b38      	ldr	r3, [pc, #224]	@ (8007778 <USBD_SetConfig+0x118>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d01a      	beq.n	80076d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800769e:	4b36      	ldr	r3, [pc, #216]	@ (8007778 <USBD_SetConfig+0x118>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2203      	movs	r2, #3
 80076ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076b0:	4b31      	ldr	r3, [pc, #196]	@ (8007778 <USBD_SetConfig+0x118>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff f9e7 	bl	8006a8a <USBD_SetClassConfig>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d104      	bne.n	80076cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f92f 	bl	8007928 <USBD_CtlError>
            return;
 80076ca:	e052      	b.n	8007772 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fb8f 	bl	8007df0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076d2:	e04e      	b.n	8007772 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fb8b 	bl	8007df0 <USBD_CtlSendStatus>
        break;
 80076da:	e04a      	b.n	8007772 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80076dc:	4b26      	ldr	r3, [pc, #152]	@ (8007778 <USBD_SetConfig+0x118>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d112      	bne.n	800770a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80076ec:	4b22      	ldr	r3, [pc, #136]	@ (8007778 <USBD_SetConfig+0x118>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80076f6:	4b20      	ldr	r3, [pc, #128]	@ (8007778 <USBD_SetConfig+0x118>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff f9e3 	bl	8006ac8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fb74 	bl	8007df0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007708:	e033      	b.n	8007772 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800770a:	4b1b      	ldr	r3, [pc, #108]	@ (8007778 <USBD_SetConfig+0x118>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d01d      	beq.n	8007754 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff f9d1 	bl	8006ac8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007726:	4b14      	ldr	r3, [pc, #80]	@ (8007778 <USBD_SetConfig+0x118>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007730:	4b11      	ldr	r3, [pc, #68]	@ (8007778 <USBD_SetConfig+0x118>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff f9a7 	bl	8006a8a <USBD_SetClassConfig>
 800773c:	4603      	mov	r3, r0
 800773e:	2b02      	cmp	r3, #2
 8007740:	d104      	bne.n	800774c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f8ef 	bl	8007928 <USBD_CtlError>
            return;
 800774a:	e012      	b.n	8007772 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fb4f 	bl	8007df0 <USBD_CtlSendStatus>
        break;
 8007752:	e00e      	b.n	8007772 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fb4b 	bl	8007df0 <USBD_CtlSendStatus>
        break;
 800775a:	e00a      	b.n	8007772 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f8e2 	bl	8007928 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007764:	4b04      	ldr	r3, [pc, #16]	@ (8007778 <USBD_SetConfig+0x118>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff f9ac 	bl	8006ac8 <USBD_ClrClassConfig>
        break;
 8007770:	bf00      	nop
    }
  }
}
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	20000244 	.word	0x20000244

0800777c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	88db      	ldrh	r3, [r3, #6]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d004      	beq.n	8007798 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f8c9 	bl	8007928 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007796:	e022      	b.n	80077de <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800779e:	2b02      	cmp	r3, #2
 80077a0:	dc02      	bgt.n	80077a8 <USBD_GetConfig+0x2c>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dc03      	bgt.n	80077ae <USBD_GetConfig+0x32>
 80077a6:	e015      	b.n	80077d4 <USBD_GetConfig+0x58>
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d00b      	beq.n	80077c4 <USBD_GetConfig+0x48>
 80077ac:	e012      	b.n	80077d4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3308      	adds	r3, #8
 80077b8:	2201      	movs	r2, #1
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fad7 	bl	8007d70 <USBD_CtlSendData>
        break;
 80077c2:	e00c      	b.n	80077de <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	3304      	adds	r3, #4
 80077c8:	2201      	movs	r2, #1
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 facf 	bl	8007d70 <USBD_CtlSendData>
        break;
 80077d2:	e004      	b.n	80077de <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f8a6 	bl	8007928 <USBD_CtlError>
        break;
 80077dc:	bf00      	nop
}
 80077de:	bf00      	nop
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f6:	3b01      	subs	r3, #1
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d81e      	bhi.n	800783a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	88db      	ldrh	r3, [r3, #6]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d004      	beq.n	800780e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f88e 	bl	8007928 <USBD_CtlError>
        break;
 800780c:	e01a      	b.n	8007844 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800781a:	2b00      	cmp	r3, #0
 800781c:	d005      	beq.n	800782a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f043 0202 	orr.w	r2, r3, #2
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	330c      	adds	r3, #12
 800782e:	2202      	movs	r2, #2
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa9c 	bl	8007d70 <USBD_CtlSendData>
      break;
 8007838:	e004      	b.n	8007844 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f873 	bl	8007928 <USBD_CtlError>
      break;
 8007842:	bf00      	nop
  }
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	885b      	ldrh	r3, [r3, #2]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d106      	bne.n	800786c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fac2 	bl	8007df0 <USBD_CtlSendStatus>
  }
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007884:	3b01      	subs	r3, #1
 8007886:	2b02      	cmp	r3, #2
 8007888:	d80b      	bhi.n	80078a2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	885b      	ldrh	r3, [r3, #2]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d10c      	bne.n	80078ac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 faa8 	bl	8007df0 <USBD_CtlSendStatus>
      }
      break;
 80078a0:	e004      	b.n	80078ac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f83f 	bl	8007928 <USBD_CtlError>
      break;
 80078aa:	e000      	b.n	80078ae <USBD_ClrFeature+0x3a>
      break;
 80078ac:	bf00      	nop
  }
}
 80078ae:	bf00      	nop
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	785a      	ldrb	r2, [r3, #1]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	3302      	adds	r3, #2
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	3303      	adds	r3, #3
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	021b      	lsls	r3, r3, #8
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4413      	add	r3, r2
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	3304      	adds	r3, #4
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	3305      	adds	r3, #5
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	4413      	add	r3, r2
 80078fe:	b29a      	uxth	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	3306      	adds	r3, #6
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	3307      	adds	r3, #7
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	b29b      	uxth	r3, r3
 8007916:	4413      	add	r3, r2
 8007918:	b29a      	uxth	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	80da      	strh	r2, [r3, #6]

}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	bc80      	pop	{r7}
 8007926:	4770      	bx	lr

08007928 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007932:	2180      	movs	r1, #128	@ 0x80
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fd1f 	bl	8008378 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800793a:	2100      	movs	r1, #0
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fd1b 	bl	8008378 <USBD_LL_StallEP>
}
 8007942:	bf00      	nop
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b086      	sub	sp, #24
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d032      	beq.n	80079c6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f834 	bl	80079ce <USBD_GetLen>
 8007966:	4603      	mov	r3, r0
 8007968:	3301      	adds	r3, #1
 800796a:	b29b      	uxth	r3, r3
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	b29a      	uxth	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	75fa      	strb	r2, [r7, #23]
 800797a:	461a      	mov	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4413      	add	r3, r2
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	7812      	ldrb	r2, [r2, #0]
 8007984:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	75fa      	strb	r2, [r7, #23]
 800798c:	461a      	mov	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4413      	add	r3, r2
 8007992:	2203      	movs	r2, #3
 8007994:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007996:	e012      	b.n	80079be <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	60fa      	str	r2, [r7, #12]
 800799e:	7dfa      	ldrb	r2, [r7, #23]
 80079a0:	1c51      	adds	r1, r2, #1
 80079a2:	75f9      	strb	r1, [r7, #23]
 80079a4:	4611      	mov	r1, r2
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	440a      	add	r2, r1
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	75fa      	strb	r2, [r7, #23]
 80079b4:	461a      	mov	r2, r3
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	4413      	add	r3, r2
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e8      	bne.n	8007998 <USBD_GetString+0x4e>
    }
  }
}
 80079c6:	bf00      	nop
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b085      	sub	sp, #20
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80079da:	e005      	b.n	80079e8 <USBD_GetLen+0x1a>
  {
    len++;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	3301      	adds	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3301      	adds	r3, #1
 80079e6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1f5      	bne.n	80079dc <USBD_GetLen+0xe>
  }

  return len;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr

080079fc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007a08:	2304      	movs	r3, #4
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	2181      	movs	r1, #129	@ 0x81
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fc6d 	bl	80082ee <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007a1a:	2010      	movs	r0, #16
 8007a1c:	f000 fd7a 	bl	8008514 <USBD_static_malloc>
 8007a20:	4602      	mov	r2, r0
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007a32:	2302      	movs	r3, #2
 8007a34:	e005      	b.n	8007a42 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007a56:	2181      	movs	r1, #129	@ 0x81
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fc6e 	bl	800833a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d009      	beq.n	8007a82 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fd59 	bl	800852c <USBD_static_free>
    pdev->pClassData = NULL;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_HID_Setup>:
  * @retval status
  */

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a9c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d045      	beq.n	8007b46 <USBD_HID_Setup+0xba>
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	f040 80d3 	bne.w	8007c66 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	3b02      	subs	r3, #2
 8007ac6:	2b09      	cmp	r3, #9
 8007ac8:	d835      	bhi.n	8007b36 <USBD_HID_Setup+0xaa>
 8007aca:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad0 <USBD_HID_Setup+0x44>)
 8007acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad0:	08007b27 	.word	0x08007b27
 8007ad4:	08007b07 	.word	0x08007b07
 8007ad8:	08007b37 	.word	0x08007b37
 8007adc:	08007b37 	.word	0x08007b37
 8007ae0:	08007b37 	.word	0x08007b37
 8007ae4:	08007b37 	.word	0x08007b37
 8007ae8:	08007b37 	.word	0x08007b37
 8007aec:	08007b37 	.word	0x08007b37
 8007af0:	08007b15 	.word	0x08007b15
 8007af4:	08007af9 	.word	0x08007af9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	885b      	ldrh	r3, [r3, #2]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	601a      	str	r2, [r3, #0]
          break;
 8007b04:	e01e      	b.n	8007b44 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f92f 	bl	8007d70 <USBD_CtlSendData>
          break;
 8007b12:	e017      	b.n	8007b44 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	885b      	ldrh	r3, [r3, #2]
 8007b18:	0a1b      	lsrs	r3, r3, #8
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	461a      	mov	r2, r3
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	605a      	str	r2, [r3, #4]
          break;
 8007b24:	e00e      	b.n	8007b44 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f91e 	bl	8007d70 <USBD_CtlSendData>
          break;
 8007b34:	e006      	b.n	8007b44 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff fef5 	bl	8007928 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b3e:	2302      	movs	r3, #2
 8007b40:	75fb      	strb	r3, [r7, #23]
          break;
 8007b42:	bf00      	nop
      }
      break;
 8007b44:	e096      	b.n	8007c74 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	785b      	ldrb	r3, [r3, #1]
 8007b4a:	2b0b      	cmp	r3, #11
 8007b4c:	f200 8083 	bhi.w	8007c56 <USBD_HID_Setup+0x1ca>
 8007b50:	a201      	add	r2, pc, #4	@ (adr r2, 8007b58 <USBD_HID_Setup+0xcc>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007b89 	.word	0x08007b89
 8007b5c:	08007c57 	.word	0x08007c57
 8007b60:	08007c57 	.word	0x08007c57
 8007b64:	08007c57 	.word	0x08007c57
 8007b68:	08007c57 	.word	0x08007c57
 8007b6c:	08007c57 	.word	0x08007c57
 8007b70:	08007bb1 	.word	0x08007bb1
 8007b74:	08007c57 	.word	0x08007c57
 8007b78:	08007c57 	.word	0x08007c57
 8007b7c:	08007c57 	.word	0x08007c57
 8007b80:	08007c09 	.word	0x08007c09
 8007b84:	08007c31 	.word	0x08007c31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d107      	bne.n	8007ba2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007b92:	f107 030e 	add.w	r3, r7, #14
 8007b96:	2202      	movs	r2, #2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f8e8 	bl	8007d70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ba0:	e060      	b.n	8007c64 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff febf 	bl	8007928 <USBD_CtlError>
            ret = USBD_FAIL;
 8007baa:	2302      	movs	r3, #2
 8007bac:	75fb      	strb	r3, [r7, #23]
          break;
 8007bae:	e059      	b.n	8007c64 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	885b      	ldrh	r3, [r3, #2]
 8007bb4:	0a1b      	lsrs	r3, r3, #8
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	2b22      	cmp	r3, #34	@ 0x22
 8007bba:	d108      	bne.n	8007bce <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	88db      	ldrh	r3, [r3, #6]
 8007bc0:	2b73      	cmp	r3, #115	@ 0x73
 8007bc2:	bf28      	it	cs
 8007bc4:	2373      	movcs	r3, #115	@ 0x73
 8007bc6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8007c80 <USBD_HID_Setup+0x1f4>)
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	e015      	b.n	8007bfa <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	885b      	ldrh	r3, [r3, #2]
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b21      	cmp	r3, #33	@ 0x21
 8007bd8:	d108      	bne.n	8007bec <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007bda:	4b2a      	ldr	r3, [pc, #168]	@ (8007c84 <USBD_HID_Setup+0x1f8>)
 8007bdc:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	88db      	ldrh	r3, [r3, #6]
 8007be2:	2b09      	cmp	r3, #9
 8007be4:	bf28      	it	cs
 8007be6:	2309      	movcs	r3, #9
 8007be8:	83fb      	strh	r3, [r7, #30]
 8007bea:	e006      	b.n	8007bfa <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff fe9a 	bl	8007928 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	75fb      	strb	r3, [r7, #23]
            break;
 8007bf8:	e034      	b.n	8007c64 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007bfa:	8bfb      	ldrh	r3, [r7, #30]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	69b9      	ldr	r1, [r7, #24]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f8b5 	bl	8007d70 <USBD_CtlSendData>
          break;
 8007c06:	e02d      	b.n	8007c64 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d107      	bne.n	8007c22 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	3308      	adds	r3, #8
 8007c16:	2201      	movs	r2, #1
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f8a8 	bl	8007d70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c20:	e020      	b.n	8007c64 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff fe7f 	bl	8007928 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c2e:	e019      	b.n	8007c64 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d106      	bne.n	8007c48 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	885b      	ldrh	r3, [r3, #2]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	461a      	mov	r2, r3
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c46:	e00d      	b.n	8007c64 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7ff fe6c 	bl	8007928 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c50:	2302      	movs	r3, #2
 8007c52:	75fb      	strb	r3, [r7, #23]
          break;
 8007c54:	e006      	b.n	8007c64 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff fe65 	bl	8007928 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c5e:	2302      	movs	r3, #2
 8007c60:	75fb      	strb	r3, [r7, #23]
          break;
 8007c62:	bf00      	nop
      }
      break;
 8007c64:	e006      	b.n	8007c74 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff fe5d 	bl	8007928 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c6e:	2302      	movs	r3, #2
 8007c70:	75fb      	strb	r3, [r7, #23]
      break;
 8007c72:	bf00      	nop
  }

  return ret;
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	200000c8 	.word	0x200000c8
 8007c84:	200000b0 	.word	0x200000b0

08007c88 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c9c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d10c      	bne.n	8007cc2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	7b1b      	ldrb	r3, [r3, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d108      	bne.n	8007cc2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	2181      	movs	r1, #129	@ 0x81
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fbe3 	bl	8008488 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2222      	movs	r2, #34	@ 0x22
 8007cd8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007cda:	4b03      	ldr	r3, [pc, #12]	@ (8007ce8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	20000044 	.word	0x20000044

08007cec <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2222      	movs	r2, #34	@ 0x22
 8007cf8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007cfa:	4b03      	ldr	r3, [pc, #12]	@ (8007d08 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	20000068 	.word	0x20000068

08007d0c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2222      	movs	r2, #34	@ 0x22
 8007d18:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007d1a:	4b03      	ldr	r3, [pc, #12]	@ (8007d28 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bc80      	pop	{r7}
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	2000008c 	.word	0x2000008c

08007d2c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d3e:	2200      	movs	r2, #0
 8007d40:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bc80      	pop	{r7}
 8007d4c:	4770      	bx	lr
	...

08007d50 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	220a      	movs	r2, #10
 8007d5c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007d5e:	4b03      	ldr	r3, [pc, #12]	@ (8007d6c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	200000bc 	.word	0x200000bc

08007d70 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d86:	88fa      	ldrh	r2, [r7, #6]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d8c:	88fa      	ldrh	r2, [r7, #6]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	2100      	movs	r1, #0
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fb75 	bl	8008488 <USBD_LL_Transmit>

  return USBD_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007db6:	88fb      	ldrh	r3, [r7, #6]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	2100      	movs	r1, #0
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 fb63 	bl	8008488 <USBD_LL_Transmit>

  return USBD_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dda:	88fb      	ldrh	r3, [r7, #6]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	2100      	movs	r1, #0
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 fb74 	bl	80084ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e00:	2300      	movs	r3, #0
 8007e02:	2200      	movs	r2, #0
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fb3e 	bl	8008488 <USBD_LL_Transmit>

  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2205      	movs	r2, #5
 8007e22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e26:	2300      	movs	r3, #0
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fb4e 	bl	80084ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e40:	2200      	movs	r2, #0
 8007e42:	490e      	ldr	r1, [pc, #56]	@ (8007e7c <MX_USB_DEVICE_Init+0x40>)
 8007e44:	480e      	ldr	r0, [pc, #56]	@ (8007e80 <MX_USB_DEVICE_Init+0x44>)
 8007e46:	f7fe fdc6 	bl	80069d6 <USBD_Init>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e50:	f7f8 fc95 	bl	800077e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007e54:	490b      	ldr	r1, [pc, #44]	@ (8007e84 <MX_USB_DEVICE_Init+0x48>)
 8007e56:	480a      	ldr	r0, [pc, #40]	@ (8007e80 <MX_USB_DEVICE_Init+0x44>)
 8007e58:	f7fe fde8 	bl	8006a2c <USBD_RegisterClass>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e62:	f7f8 fc8c 	bl	800077e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e66:	4806      	ldr	r0, [pc, #24]	@ (8007e80 <MX_USB_DEVICE_Init+0x44>)
 8007e68:	f7fe fdf9 	bl	8006a5e <USBD_Start>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007e72:	f7f8 fc84 	bl	800077e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e76:	bf00      	nop
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	2000013c 	.word	0x2000013c
 8007e80:	20000248 	.word	0x20000248
 8007e84:	2000000c 	.word	0x2000000c

08007e88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2212      	movs	r2, #18
 8007e98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e9a:	4b03      	ldr	r3, [pc, #12]	@ (8007ea8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bc80      	pop	{r7}
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	20000158 	.word	0x20000158

08007eac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2204      	movs	r2, #4
 8007ebc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ebe:	4b03      	ldr	r3, [pc, #12]	@ (8007ecc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bc80      	pop	{r7}
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	2000016c 	.word	0x2000016c

08007ed0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	6039      	str	r1, [r7, #0]
 8007eda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d105      	bne.n	8007eee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4907      	ldr	r1, [pc, #28]	@ (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ee6:	4808      	ldr	r0, [pc, #32]	@ (8007f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ee8:	f7ff fd2f 	bl	800794a <USBD_GetString>
 8007eec:	e004      	b.n	8007ef8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	4904      	ldr	r1, [pc, #16]	@ (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ef2:	4805      	ldr	r0, [pc, #20]	@ (8007f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ef4:	f7ff fd29 	bl	800794a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ef8:	4b02      	ldr	r3, [pc, #8]	@ (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	2000050c 	.word	0x2000050c
 8007f08:	08008630 	.word	0x08008630

08007f0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	6039      	str	r1, [r7, #0]
 8007f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	4904      	ldr	r1, [pc, #16]	@ (8007f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f1c:	4804      	ldr	r0, [pc, #16]	@ (8007f30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f1e:	f7ff fd14 	bl	800794a <USBD_GetString>
  return USBD_StrDesc;
 8007f22:	4b02      	ldr	r3, [pc, #8]	@ (8007f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	2000050c 	.word	0x2000050c
 8007f30:	08008640 	.word	0x08008640

08007f34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	221a      	movs	r2, #26
 8007f44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f46:	f000 f843 	bl	8007fd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f4a:	4b02      	ldr	r3, [pc, #8]	@ (8007f54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000170 	.word	0x20000170

08007f58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4907      	ldr	r1, [pc, #28]	@ (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f6e:	4808      	ldr	r0, [pc, #32]	@ (8007f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f70:	f7ff fceb 	bl	800794a <USBD_GetString>
 8007f74:	e004      	b.n	8007f80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4904      	ldr	r1, [pc, #16]	@ (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f7a:	4805      	ldr	r0, [pc, #20]	@ (8007f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f7c:	f7ff fce5 	bl	800794a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f80:	4b02      	ldr	r3, [pc, #8]	@ (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	2000050c 	.word	0x2000050c
 8007f90:	08008648 	.word	0x08008648

08007f94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d105      	bne.n	8007fb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	4907      	ldr	r1, [pc, #28]	@ (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007faa:	4808      	ldr	r0, [pc, #32]	@ (8007fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fac:	f7ff fccd 	bl	800794a <USBD_GetString>
 8007fb0:	e004      	b.n	8007fbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	4904      	ldr	r1, [pc, #16]	@ (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fb6:	4805      	ldr	r0, [pc, #20]	@ (8007fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fb8:	f7ff fcc7 	bl	800794a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fbc:	4b02      	ldr	r3, [pc, #8]	@ (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	2000050c 	.word	0x2000050c
 8007fcc:	08008654 	.word	0x08008654

08007fd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8008014 <Get_SerialNum+0x44>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8008018 <Get_SerialNum+0x48>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800801c <Get_SerialNum+0x4c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	4909      	ldr	r1, [pc, #36]	@ (8008020 <Get_SerialNum+0x50>)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f814 	bl	8008028 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008000:	2204      	movs	r2, #4
 8008002:	4908      	ldr	r1, [pc, #32]	@ (8008024 <Get_SerialNum+0x54>)
 8008004:	68b8      	ldr	r0, [r7, #8]
 8008006:	f000 f80f 	bl	8008028 <IntToUnicode>
  }
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	1ffff7e8 	.word	0x1ffff7e8
 8008018:	1ffff7ec 	.word	0x1ffff7ec
 800801c:	1ffff7f0 	.word	0x1ffff7f0
 8008020:	20000172 	.word	0x20000172
 8008024:	20000182 	.word	0x20000182

08008028 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
 800803e:	e027      	b.n	8008090 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	0f1b      	lsrs	r3, r3, #28
 8008044:	2b09      	cmp	r3, #9
 8008046:	d80b      	bhi.n	8008060 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	0f1b      	lsrs	r3, r3, #28
 800804c:	b2da      	uxtb	r2, r3
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	4619      	mov	r1, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	440b      	add	r3, r1
 8008058:	3230      	adds	r2, #48	@ 0x30
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e00a      	b.n	8008076 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	0f1b      	lsrs	r3, r3, #28
 8008064:	b2da      	uxtb	r2, r3
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	4619      	mov	r1, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	440b      	add	r3, r1
 8008070:	3237      	adds	r2, #55	@ 0x37
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	3301      	adds	r3, #1
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	4413      	add	r3, r2
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	3301      	adds	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]
 8008090:	7dfa      	ldrb	r2, [r7, #23]
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	429a      	cmp	r2, r3
 8008096:	d3d3      	bcc.n	8008040 <IntToUnicode+0x18>
  }
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bc80      	pop	{r7}
 80080a2:	4770      	bx	lr

080080a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a0d      	ldr	r2, [pc, #52]	@ (80080e8 <HAL_PCD_MspInit+0x44>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d113      	bne.n	80080de <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80080b6:	4b0d      	ldr	r3, [pc, #52]	@ (80080ec <HAL_PCD_MspInit+0x48>)
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	4a0c      	ldr	r2, [pc, #48]	@ (80080ec <HAL_PCD_MspInit+0x48>)
 80080bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80080c0:	61d3      	str	r3, [r2, #28]
 80080c2:	4b0a      	ldr	r3, [pc, #40]	@ (80080ec <HAL_PCD_MspInit+0x48>)
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80080ce:	2200      	movs	r2, #0
 80080d0:	2100      	movs	r1, #0
 80080d2:	2014      	movs	r0, #20
 80080d4:	f7f8 fdd3 	bl	8000c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80080d8:	2014      	movs	r0, #20
 80080da:	f7f8 fdec 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	40005c00 	.word	0x40005c00
 80080ec:	40021000 	.word	0x40021000

080080f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f7fe fcf1 	bl	8006aee <USBD_LL_SetupStage>
}
 800810c:	bf00      	nop
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	440b      	add	r3, r1
 8008134:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	4619      	mov	r1, r3
 800813e:	f7fe fd23 	bl	8006b88 <USBD_LL_DataOutStage>
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800815c:	78fa      	ldrb	r2, [r7, #3]
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	440b      	add	r3, r1
 800816a:	3324      	adds	r3, #36	@ 0x24
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	78fb      	ldrb	r3, [r7, #3]
 8008170:	4619      	mov	r1, r3
 8008172:	f7fe fd7a 	bl	8006c6a <USBD_LL_DataInStage>
}
 8008176:	bf00      	nop
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe fe8a 	bl	8006ea6 <USBD_LL_SOF>
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081a2:	2301      	movs	r3, #1
 80081a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	799b      	ldrb	r3, [r3, #6]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d001      	beq.n	80081b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80081ae:	f7f8 fae6 	bl	800077e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081b8:	7bfa      	ldrb	r2, [r7, #15]
 80081ba:	4611      	mov	r1, r2
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fe fe3a 	bl	8006e36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe fdf3 	bl	8006db4 <USBD_LL_Reset>
}
 80081ce:	bf00      	nop
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fe34 	bl	8006e54 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7a9b      	ldrb	r3, [r3, #10]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081f4:	4b04      	ldr	r3, [pc, #16]	@ (8008208 <HAL_PCD_SuspendCallback+0x30>)
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	4a03      	ldr	r2, [pc, #12]	@ (8008208 <HAL_PCD_SuspendCallback+0x30>)
 80081fa:	f043 0306 	orr.w	r3, r3, #6
 80081fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed00 	.word	0xe000ed00

0800820c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe fe2e 	bl	8006e7c <USBD_LL_Resume>
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008230:	4a1f      	ldr	r2, [pc, #124]	@ (80082b0 <USBD_LL_Init+0x88>)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a1d      	ldr	r2, [pc, #116]	@ (80082b0 <USBD_LL_Init+0x88>)
 800823c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008240:	4b1b      	ldr	r3, [pc, #108]	@ (80082b0 <USBD_LL_Init+0x88>)
 8008242:	4a1c      	ldr	r2, [pc, #112]	@ (80082b4 <USBD_LL_Init+0x8c>)
 8008244:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008246:	4b1a      	ldr	r3, [pc, #104]	@ (80082b0 <USBD_LL_Init+0x88>)
 8008248:	2208      	movs	r2, #8
 800824a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800824c:	4b18      	ldr	r3, [pc, #96]	@ (80082b0 <USBD_LL_Init+0x88>)
 800824e:	2202      	movs	r2, #2
 8008250:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008252:	4b17      	ldr	r3, [pc, #92]	@ (80082b0 <USBD_LL_Init+0x88>)
 8008254:	2200      	movs	r2, #0
 8008256:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008258:	4b15      	ldr	r3, [pc, #84]	@ (80082b0 <USBD_LL_Init+0x88>)
 800825a:	2200      	movs	r2, #0
 800825c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800825e:	4b14      	ldr	r3, [pc, #80]	@ (80082b0 <USBD_LL_Init+0x88>)
 8008260:	2200      	movs	r2, #0
 8008262:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008264:	4812      	ldr	r0, [pc, #72]	@ (80082b0 <USBD_LL_Init+0x88>)
 8008266:	f7f8 ffa8 	bl	80011ba <HAL_PCD_Init>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008270:	f7f8 fa85 	bl	800077e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800827a:	2318      	movs	r3, #24
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	f7fa fca2 	bl	8002bc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800828a:	2358      	movs	r3, #88	@ 0x58
 800828c:	2200      	movs	r2, #0
 800828e:	2180      	movs	r1, #128	@ 0x80
 8008290:	f7fa fc9a 	bl	8002bc8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800829a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800829e:	2200      	movs	r2, #0
 80082a0:	2181      	movs	r1, #129	@ 0x81
 80082a2:	f7fa fc91 	bl	8002bc8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	2000070c 	.word	0x2000070c
 80082b4:	40005c00 	.word	0x40005c00

080082b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f9 f869 	bl	80013a6 <HAL_PCD_Start>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 f93a 	bl	8008554 <USBD_Get_USB_Status>
 80082e0:	4603      	mov	r3, r0
 80082e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	461a      	mov	r2, r3
 80082fc:	4603      	mov	r3, r0
 80082fe:	70fb      	strb	r3, [r7, #3]
 8008300:	460b      	mov	r3, r1
 8008302:	70bb      	strb	r3, [r7, #2]
 8008304:	4613      	mov	r3, r2
 8008306:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008316:	78bb      	ldrb	r3, [r7, #2]
 8008318:	883a      	ldrh	r2, [r7, #0]
 800831a:	78f9      	ldrb	r1, [r7, #3]
 800831c:	f7f9 f9bd 	bl	800169a <HAL_PCD_EP_Open>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 f914 	bl	8008554 <USBD_Get_USB_Status>
 800832c:	4603      	mov	r3, r0
 800832e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008330:	7bbb      	ldrb	r3, [r7, #14]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008354:	78fa      	ldrb	r2, [r7, #3]
 8008356:	4611      	mov	r1, r2
 8008358:	4618      	mov	r0, r3
 800835a:	f7f9 f9fb 	bl	8001754 <HAL_PCD_EP_Close>
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	4618      	mov	r0, r3
 8008366:	f000 f8f5 	bl	8008554 <USBD_Get_USB_Status>
 800836a:	4603      	mov	r3, r0
 800836c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800836e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008392:	78fa      	ldrb	r2, [r7, #3]
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f7f9 fa8c 	bl	80018b4 <HAL_PCD_EP_SetStall>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f8d6 	bl	8008554 <USBD_Get_USB_Status>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7f9 facd 	bl	8001974 <HAL_PCD_EP_ClrStall>
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 f8b7 	bl	8008554 <USBD_Get_USB_Status>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008406:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800840c:	2b00      	cmp	r3, #0
 800840e:	da0b      	bge.n	8008428 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008416:	68f9      	ldr	r1, [r7, #12]
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	440b      	add	r3, r1
 8008422:	3312      	adds	r3, #18
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	e00b      	b.n	8008440 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800842e:	68f9      	ldr	r1, [r7, #12]
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	440b      	add	r3, r1
 800843a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800843e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	bc80      	pop	{r7}
 8008448:	4770      	bx	lr

0800844a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008464:	78fa      	ldrb	r2, [r7, #3]
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f7f9 f8f2 	bl	8001652 <HAL_PCD_SetAddress>
 800846e:	4603      	mov	r3, r0
 8008470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f86d 	bl	8008554 <USBD_Get_USB_Status>
 800847a:	4603      	mov	r3, r0
 800847c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800847e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	607a      	str	r2, [r7, #4]
 8008492:	461a      	mov	r2, r3
 8008494:	460b      	mov	r3, r1
 8008496:	72fb      	strb	r3, [r7, #11]
 8008498:	4613      	mov	r3, r2
 800849a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084aa:	893b      	ldrh	r3, [r7, #8]
 80084ac:	7af9      	ldrb	r1, [r7, #11]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	f7f9 f9c9 	bl	8001846 <HAL_PCD_EP_Transmit>
 80084b4:	4603      	mov	r3, r0
 80084b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 f84a 	bl	8008554 <USBD_Get_USB_Status>
 80084c0:	4603      	mov	r3, r0
 80084c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b086      	sub	sp, #24
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	461a      	mov	r2, r3
 80084da:	460b      	mov	r3, r1
 80084dc:	72fb      	strb	r3, [r7, #11]
 80084de:	4613      	mov	r3, r2
 80084e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084f0:	893b      	ldrh	r3, [r7, #8]
 80084f2:	7af9      	ldrb	r1, [r7, #11]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	f7f9 f975 	bl	80017e4 <HAL_PCD_EP_Receive>
 80084fa:	4603      	mov	r3, r0
 80084fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 f827 	bl	8008554 <USBD_Get_USB_Status>
 8008506:	4603      	mov	r3, r0
 8008508:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800850a:	7dbb      	ldrb	r3, [r7, #22]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800851c:	4b02      	ldr	r3, [pc, #8]	@ (8008528 <USBD_static_malloc+0x14>)
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr
 8008528:	200009e4 	.word	0x200009e4

0800852c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr

0800853e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	bc80      	pop	{r7}
 8008552:	4770      	bx	lr

08008554 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	2b03      	cmp	r3, #3
 8008566:	d817      	bhi.n	8008598 <USBD_Get_USB_Status+0x44>
 8008568:	a201      	add	r2, pc, #4	@ (adr r2, 8008570 <USBD_Get_USB_Status+0x1c>)
 800856a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856e:	bf00      	nop
 8008570:	08008581 	.word	0x08008581
 8008574:	08008587 	.word	0x08008587
 8008578:	0800858d 	.word	0x0800858d
 800857c:	08008593 	.word	0x08008593
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]
    break;
 8008584:	e00b      	b.n	800859e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008586:	2302      	movs	r3, #2
 8008588:	73fb      	strb	r3, [r7, #15]
    break;
 800858a:	e008      	b.n	800859e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800858c:	2301      	movs	r3, #1
 800858e:	73fb      	strb	r3, [r7, #15]
    break;
 8008590:	e005      	b.n	800859e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008592:	2302      	movs	r3, #2
 8008594:	73fb      	strb	r3, [r7, #15]
    break;
 8008596:	e002      	b.n	800859e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008598:	2302      	movs	r3, #2
 800859a:	73fb      	strb	r3, [r7, #15]
    break;
 800859c:	bf00      	nop
  }
  return usb_status;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bc80      	pop	{r7}
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop

080085ac <memset>:
 80085ac:	4603      	mov	r3, r0
 80085ae:	4402      	add	r2, r0
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d100      	bne.n	80085b6 <memset+0xa>
 80085b4:	4770      	bx	lr
 80085b6:	f803 1b01 	strb.w	r1, [r3], #1
 80085ba:	e7f9      	b.n	80085b0 <memset+0x4>

080085bc <__libc_init_array>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	2600      	movs	r6, #0
 80085c0:	4d0c      	ldr	r5, [pc, #48]	@ (80085f4 <__libc_init_array+0x38>)
 80085c2:	4c0d      	ldr	r4, [pc, #52]	@ (80085f8 <__libc_init_array+0x3c>)
 80085c4:	1b64      	subs	r4, r4, r5
 80085c6:	10a4      	asrs	r4, r4, #2
 80085c8:	42a6      	cmp	r6, r4
 80085ca:	d109      	bne.n	80085e0 <__libc_init_array+0x24>
 80085cc:	f000 f81a 	bl	8008604 <_init>
 80085d0:	2600      	movs	r6, #0
 80085d2:	4d0a      	ldr	r5, [pc, #40]	@ (80085fc <__libc_init_array+0x40>)
 80085d4:	4c0a      	ldr	r4, [pc, #40]	@ (8008600 <__libc_init_array+0x44>)
 80085d6:	1b64      	subs	r4, r4, r5
 80085d8:	10a4      	asrs	r4, r4, #2
 80085da:	42a6      	cmp	r6, r4
 80085dc:	d105      	bne.n	80085ea <__libc_init_array+0x2e>
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e4:	4798      	blx	r3
 80085e6:	3601      	adds	r6, #1
 80085e8:	e7ee      	b.n	80085c8 <__libc_init_array+0xc>
 80085ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ee:	4798      	blx	r3
 80085f0:	3601      	adds	r6, #1
 80085f2:	e7f2      	b.n	80085da <__libc_init_array+0x1e>
 80085f4:	08008690 	.word	0x08008690
 80085f8:	08008690 	.word	0x08008690
 80085fc:	08008690 	.word	0x08008690
 8008600:	08008694 	.word	0x08008694

08008604 <_init>:
 8008604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008606:	bf00      	nop
 8008608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860a:	bc08      	pop	{r3}
 800860c:	469e      	mov	lr, r3
 800860e:	4770      	bx	lr

08008610 <_fini>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	bf00      	nop
 8008614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008616:	bc08      	pop	{r3}
 8008618:	469e      	mov	lr, r3
 800861a:	4770      	bx	lr
