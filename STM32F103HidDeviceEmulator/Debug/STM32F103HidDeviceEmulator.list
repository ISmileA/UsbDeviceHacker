
STM32F103HidDeviceEmulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080087f4  080087f4  000097f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008868  08008868  0000a18c  2**0
                  CONTENTS
  4 .ARM          00000000  08008868  08008868  0000a18c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008868  08008868  0000a18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008868  08008868  00009868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800886c  0800886c  0000986c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08008870  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  2000018c  080089fc  0000a18c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  080089fc  0000aa1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a18c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116ee  00000000  00000000  0000a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003871  00000000  00000000  0001b8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  0001f118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4a  00000000  00000000  0001fef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5d6  00000000  00000000  00020942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fd0  00000000  00000000  0003af18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087222  00000000  00000000  00051ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d910a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034fc  00000000  00000000  000d9150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000dc64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000018c 	.word	0x2000018c
 8000128:	00000000 	.word	0x00000000
 800012c:	080087dc 	.word	0x080087dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000190 	.word	0x20000190
 8000148:	080087dc 	.word	0x080087dc

0800014c <AnimationSetup>:
#include "AnimationModule.h"

extern USBD_HandleTypeDef hUsbDeviceFS;
uint8_t time = 0;

void AnimationSetup(Action *act){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	785b      	ldrb	r3, [r3, #1]
 8000158:	2b01      	cmp	r3, #1
 800015a:	d002      	beq.n	8000162 <AnimationSetup+0x16>
 800015c:	2b02      	cmp	r3, #2
 800015e:	d009      	beq.n	8000174 <AnimationSetup+0x28>
				break;
		case(REMOVE_COMMAND):
				AnimationRemove();
				break;
	}
}
 8000160:	e00b      	b.n	800017a <AnimationSetup+0x2e>
				AnimationSet(act->data, act->length);
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	1cda      	adds	r2, r3, #3
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	789b      	ldrb	r3, [r3, #2]
 800016a:	4619      	mov	r1, r3
 800016c:	4610      	mov	r0, r2
 800016e:	f000 f809 	bl	8000184 <AnimationSet>
				break;
 8000172:	e002      	b.n	800017a <AnimationSetup+0x2e>
				AnimationRemove();
 8000174:	f000 f82e 	bl	80001d4 <AnimationRemove>
				break;
 8000178:	bf00      	nop
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
	...

08000184 <AnimationSet>:

void AnimationSet(uint8_t *data, uint8_t len){
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	70fb      	strb	r3, [r7, #3]
	animation.id = data[0];
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	781a      	ldrb	r2, [r3, #0]
 8000194:	4b0e      	ldr	r3, [pc, #56]	@ (80001d0 <AnimationSet+0x4c>)
 8000196:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<len-1; i++)
 8000198:	2300      	movs	r3, #0
 800019a:	73fb      	strb	r3, [r7, #15]
 800019c:	e00c      	b.n	80001b8 <AnimationSet+0x34>
		animation.data[i] = data[i+1];
 800019e:	7bfb      	ldrb	r3, [r7, #15]
 80001a0:	3301      	adds	r3, #1
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	441a      	add	r2, r3
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	7811      	ldrb	r1, [r2, #0]
 80001aa:	4a09      	ldr	r2, [pc, #36]	@ (80001d0 <AnimationSet+0x4c>)
 80001ac:	4413      	add	r3, r2
 80001ae:	460a      	mov	r2, r1
 80001b0:	705a      	strb	r2, [r3, #1]
	for(uint8_t i=0; i<len-1; i++)
 80001b2:	7bfb      	ldrb	r3, [r7, #15]
 80001b4:	3301      	adds	r3, #1
 80001b6:	73fb      	strb	r3, [r7, #15]
 80001b8:	7bfa      	ldrb	r2, [r7, #15]
 80001ba:	78fb      	ldrb	r3, [r7, #3]
 80001bc:	3b01      	subs	r3, #1
 80001be:	429a      	cmp	r2, r3
 80001c0:	dbed      	blt.n	800019e <AnimationSet+0x1a>
}
 80001c2:	bf00      	nop
 80001c4:	bf00      	nop
 80001c6:	3714      	adds	r7, #20
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	200001f8 	.word	0x200001f8

080001d4 <AnimationRemove>:

void AnimationRemove(){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	animation.id = 0;
 80001d8:	4b03      	ldr	r3, [pc, #12]	@ (80001e8 <AnimationRemove+0x14>)
 80001da:	2200      	movs	r2, #0
 80001dc:	701a      	strb	r2, [r3, #0]
}
 80001de:	bf00      	nop
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200001f8 	.word	0x200001f8

080001ec <Animate>:

void Animate(){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	switch(animation.id){
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <Animate+0x18>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d102      	bne.n	80001fe <Animate+0x12>
		case(MOUSE_MOVE_ANIMATION):
			MouseMoveAnimation();
 80001f8:	f000 f806 	bl	8000208 <MouseMoveAnimation>
			break;
 80001fc:	bf00      	nop
	}
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	200001f8 	.word	0x200001f8

08000208 <MouseMoveAnimation>:

void MouseMoveAnimation(){
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
	uint8_t	delay = 11-animation.data[2];
 800020e:	4b3c      	ldr	r3, [pc, #240]	@ (8000300 <MouseMoveAnimation+0xf8>)
 8000210:	78db      	ldrb	r3, [r3, #3]
 8000212:	f1c3 030b 	rsb	r3, r3, #11
 8000216:	71fb      	strb	r3, [r7, #7]
	if((HAL_GetTick()-time) >= 10){
 8000218:	f000 fd18 	bl	8000c4c <HAL_GetTick>
 800021c:	4603      	mov	r3, r0
 800021e:	4a39      	ldr	r2, [pc, #228]	@ (8000304 <MouseMoveAnimation+0xfc>)
 8000220:	7812      	ldrb	r2, [r2, #0]
 8000222:	1a9b      	subs	r3, r3, r2
 8000224:	2b09      	cmp	r3, #9
 8000226:	d967      	bls.n	80002f8 <MouseMoveAnimation+0xf0>
		uint8_t data_out[5] = {0x01, animation.data[1], 0, 0, 0};
 8000228:	2301      	movs	r3, #1
 800022a:	703b      	strb	r3, [r7, #0]
 800022c:	4b34      	ldr	r3, [pc, #208]	@ (8000300 <MouseMoveAnimation+0xf8>)
 800022e:	789b      	ldrb	r3, [r3, #2]
 8000230:	707b      	strb	r3, [r7, #1]
 8000232:	2300      	movs	r3, #0
 8000234:	70bb      	strb	r3, [r7, #2]
 8000236:	2300      	movs	r3, #0
 8000238:	70fb      	strb	r3, [r7, #3]
 800023a:	2300      	movs	r3, #0
 800023c:	713b      	strb	r3, [r7, #4]
		switch((char)animation.data[0]){
 800023e:	4b30      	ldr	r3, [pc, #192]	@ (8000300 <MouseMoveAnimation+0xf8>)
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	3b62      	subs	r3, #98	@ 0x62
 8000244:	2b12      	cmp	r3, #18
 8000246:	d84b      	bhi.n	80002e0 <MouseMoveAnimation+0xd8>
 8000248:	a201      	add	r2, pc, #4	@ (adr r2, 8000250 <MouseMoveAnimation+0x48>)
 800024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024e:	bf00      	nop
 8000250:	080002bf 	.word	0x080002bf
 8000254:	080002e1 	.word	0x080002e1
 8000258:	080002e1 	.word	0x080002e1
 800025c:	080002e1 	.word	0x080002e1
 8000260:	080002e1 	.word	0x080002e1
 8000264:	080002e1 	.word	0x080002e1
 8000268:	080002e1 	.word	0x080002e1
 800026c:	080002e1 	.word	0x080002e1
 8000270:	080002e1 	.word	0x080002e1
 8000274:	080002e1 	.word	0x080002e1
 8000278:	080002ad 	.word	0x080002ad
 800027c:	080002e1 	.word	0x080002e1
 8000280:	080002e1 	.word	0x080002e1
 8000284:	080002e1 	.word	0x080002e1
 8000288:	080002e1 	.word	0x080002e1
 800028c:	080002e1 	.word	0x080002e1
 8000290:	0800029d 	.word	0x0800029d
 8000294:	080002e1 	.word	0x080002e1
 8000298:	080002cf 	.word	0x080002cf
			case('r'):
				data_out[2] = 1+2*animation.data[2];
 800029c:	4b18      	ldr	r3, [pc, #96]	@ (8000300 <MouseMoveAnimation+0xf8>)
 800029e:	78db      	ldrb	r3, [r3, #3]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	3301      	adds	r3, #1
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	70bb      	strb	r3, [r7, #2]
				break;
 80002aa:	e019      	b.n	80002e0 <MouseMoveAnimation+0xd8>
			case('l'):
				data_out[2] = 254-2*animation.data[2];
 80002ac:	4b14      	ldr	r3, [pc, #80]	@ (8000300 <MouseMoveAnimation+0xf8>)
 80002ae:	78db      	ldrb	r3, [r3, #3]
 80002b0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	70bb      	strb	r3, [r7, #2]
				break;
 80002bc:	e010      	b.n	80002e0 <MouseMoveAnimation+0xd8>
			case('b'):
				data_out[3] = 1+2*animation.data[2];
 80002be:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <MouseMoveAnimation+0xf8>)
 80002c0:	78db      	ldrb	r3, [r3, #3]
 80002c2:	005b      	lsls	r3, r3, #1
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	3301      	adds	r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	70fb      	strb	r3, [r7, #3]
				break;
 80002cc:	e008      	b.n	80002e0 <MouseMoveAnimation+0xd8>
			case('t'):
				data_out[3] = 254-2*animation.data[2];
 80002ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <MouseMoveAnimation+0xf8>)
 80002d0:	78db      	ldrb	r3, [r3, #3]
 80002d2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	70fb      	strb	r3, [r7, #3]
				break;
 80002de:	bf00      	nop
		}
		USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80002e0:	463b      	mov	r3, r7
 80002e2:	2205      	movs	r2, #5
 80002e4:	4619      	mov	r1, r3
 80002e6:	4808      	ldr	r0, [pc, #32]	@ (8000308 <MouseMoveAnimation+0x100>)
 80002e8:	f007 fdba 	bl	8007e60 <USBD_HID_SendReport>
		time = HAL_GetTick();
 80002ec:	f000 fcae 	bl	8000c4c <HAL_GetTick>
 80002f0:	4603      	mov	r3, r0
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <MouseMoveAnimation+0xfc>)
 80002f6:	701a      	strb	r2, [r3, #0]
	}
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	200001f8 	.word	0x200001f8
 8000304:	200001a8 	.word	0x200001a8
 8000308:	2000026c 	.word	0x2000026c

0800030c <KeyboardSetup>:
 */

#include "KeyboardModule.h"
extern USBD_HandleTypeDef hUsbDeviceFS;

void KeyboardSetup(Action *act){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	785b      	ldrb	r3, [r3, #1]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d00c      	beq.n	8000336 <KeyboardSetup+0x2a>
 800031c:	2b03      	cmp	r3, #3
 800031e:	dc13      	bgt.n	8000348 <KeyboardSetup+0x3c>
 8000320:	2b01      	cmp	r3, #1
 8000322:	d002      	beq.n	800032a <KeyboardSetup+0x1e>
 8000324:	2b02      	cmp	r3, #2
 8000326:	d00c      	beq.n	8000342 <KeyboardSetup+0x36>
				break;
		case(REMOVE_COMMAND):
				KeyboardRemove();
				break;
	}
}
 8000328:	e00e      	b.n	8000348 <KeyboardSetup+0x3c>
				KeyboardSet(act->data);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3303      	adds	r3, #3
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f80e 	bl	8000350 <KeyboardSet>
				break;
 8000334:	e008      	b.n	8000348 <KeyboardSetup+0x3c>
				KeyboardClick(act->data);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3303      	adds	r3, #3
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f836 	bl	80003ac <KeyboardClick>
				break;
 8000340:	e002      	b.n	8000348 <KeyboardSetup+0x3c>
				KeyboardRemove();
 8000342:	f000 f865 	bl	8000410 <KeyboardRemove>
				break;
 8000346:	bf00      	nop
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <KeyboardSet>:

void KeyboardSet(uint8_t *data){
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 8000366:	2302      	movs	r3, #2
 8000368:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 800036a:	2300      	movs	r3, #0
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e00c      	b.n	800038a <KeyboardSet+0x3a>
		data_out[i+1] = data[i];
 8000370:	7dfb      	ldrb	r3, [r7, #23]
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	441a      	add	r2, r3
 8000376:	7dfb      	ldrb	r3, [r7, #23]
 8000378:	3301      	adds	r3, #1
 800037a:	7812      	ldrb	r2, [r2, #0]
 800037c:	3318      	adds	r3, #24
 800037e:	443b      	add	r3, r7
 8000380:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 8000384:	7dfb      	ldrb	r3, [r7, #23]
 8000386:	3301      	adds	r3, #1
 8000388:	75fb      	strb	r3, [r7, #23]
 800038a:	7dfb      	ldrb	r3, [r7, #23]
 800038c:	2b07      	cmp	r3, #7
 800038e:	d9ef      	bls.n	8000370 <KeyboardSet+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	2209      	movs	r2, #9
 8000396:	4619      	mov	r1, r3
 8000398:	4803      	ldr	r0, [pc, #12]	@ (80003a8 <KeyboardSet+0x58>)
 800039a:	f007 fd61 	bl	8007e60 <USBD_HID_SendReport>
}
 800039e:	bf00      	nop
 80003a0:	3718      	adds	r7, #24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000026c 	.word	0x2000026c

080003ac <KeyboardClick>:

void KeyboardClick(uint8_t *data){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 80003c2:	2302      	movs	r3, #2
 80003c4:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 80003c6:	2300      	movs	r3, #0
 80003c8:	75fb      	strb	r3, [r7, #23]
 80003ca:	e00c      	b.n	80003e6 <KeyboardClick+0x3a>
		data_out[i+1] = data[i];
 80003cc:	7dfb      	ldrb	r3, [r7, #23]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	441a      	add	r2, r3
 80003d2:	7dfb      	ldrb	r3, [r7, #23]
 80003d4:	3301      	adds	r3, #1
 80003d6:	7812      	ldrb	r2, [r2, #0]
 80003d8:	3318      	adds	r3, #24
 80003da:	443b      	add	r3, r7
 80003dc:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 80003e0:	7dfb      	ldrb	r3, [r7, #23]
 80003e2:	3301      	adds	r3, #1
 80003e4:	75fb      	strb	r3, [r7, #23]
 80003e6:	7dfb      	ldrb	r3, [r7, #23]
 80003e8:	2b07      	cmp	r3, #7
 80003ea:	d9ef      	bls.n	80003cc <KeyboardClick+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 80003ec:	f107 030c 	add.w	r3, r7, #12
 80003f0:	2209      	movs	r2, #9
 80003f2:	4619      	mov	r1, r3
 80003f4:	4805      	ldr	r0, [pc, #20]	@ (800040c <KeyboardClick+0x60>)
 80003f6:	f007 fd33 	bl	8007e60 <USBD_HID_SendReport>
	HAL_Delay(30);
 80003fa:	201e      	movs	r0, #30
 80003fc:	f000 fc30 	bl	8000c60 <HAL_Delay>
	KeyboardRemove();
 8000400:	f000 f806 	bl	8000410 <KeyboardRemove>
}
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000026c 	.word	0x2000026c

08000410 <KeyboardRemove>:

void KeyboardRemove(){
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
	uint8_t data_out[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 8000416:	4a07      	ldr	r2, [pc, #28]	@ (8000434 <KeyboardRemove+0x24>)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	ca07      	ldmia	r2, {r0, r1, r2}
 800041c:	c303      	stmia	r3!, {r0, r1}
 800041e:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2209      	movs	r2, #9
 8000424:	4619      	mov	r1, r3
 8000426:	4804      	ldr	r0, [pc, #16]	@ (8000438 <KeyboardRemove+0x28>)
 8000428:	f007 fd1a 	bl	8007e60 <USBD_HID_SendReport>
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	080087f4 	.word	0x080087f4
 8000438:	2000026c 	.word	0x2000026c

0800043c <MouseCommandSetup>:
 */

#include <MouseModule.h>
extern USBD_HandleTypeDef hUsbDeviceFS;

void MouseCommandSetup(Action *act){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	785b      	ldrb	r3, [r3, #1]
 8000448:	2b03      	cmp	r3, #3
 800044a:	d00c      	beq.n	8000466 <MouseCommandSetup+0x2a>
 800044c:	2b03      	cmp	r3, #3
 800044e:	dc13      	bgt.n	8000478 <MouseCommandSetup+0x3c>
 8000450:	2b01      	cmp	r3, #1
 8000452:	d002      	beq.n	800045a <MouseCommandSetup+0x1e>
 8000454:	2b02      	cmp	r3, #2
 8000456:	d00c      	beq.n	8000472 <MouseCommandSetup+0x36>
			break;
		case(REMOVE_COMMAND):
			MouseRemove();
			break;
	}
}
 8000458:	e00e      	b.n	8000478 <MouseCommandSetup+0x3c>
			MouseSet(act->data);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3303      	adds	r3, #3
 800045e:	4618      	mov	r0, r3
 8000460:	f000 f80e 	bl	8000480 <MouseSet>
			break;
 8000464:	e008      	b.n	8000478 <MouseCommandSetup+0x3c>
			MouseClick(act->data[0]);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	78db      	ldrb	r3, [r3, #3]
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f836 	bl	80004dc <MouseClick>
			break;
 8000470:	e002      	b.n	8000478 <MouseCommandSetup+0x3c>
			MouseRemove();
 8000472:	f000 f855 	bl	8000520 <MouseRemove>
			break;
 8000476:	bf00      	nop
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <MouseSet>:

void MouseSet(uint8_t *data){
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8000488:	4a12      	ldr	r2, [pc, #72]	@ (80004d4 <MouseSet+0x54>)
 800048a:	f107 0308 	add.w	r3, r7, #8
 800048e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000492:	6018      	str	r0, [r3, #0]
 8000494:	3304      	adds	r3, #4
 8000496:	7019      	strb	r1, [r3, #0]
	for(uint8_t i=0; i<4; i++)
 8000498:	2300      	movs	r3, #0
 800049a:	73fb      	strb	r3, [r7, #15]
 800049c:	e00c      	b.n	80004b8 <MouseSet+0x38>
		data_out[i+1] = data[i];
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	441a      	add	r2, r3
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	3301      	adds	r3, #1
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	3310      	adds	r3, #16
 80004ac:	443b      	add	r3, r7
 80004ae:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i=0; i<4; i++)
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	3301      	adds	r3, #1
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
 80004ba:	2b03      	cmp	r3, #3
 80004bc:	d9ef      	bls.n	800049e <MouseSet+0x1e>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	2205      	movs	r2, #5
 80004c4:	4619      	mov	r1, r3
 80004c6:	4804      	ldr	r0, [pc, #16]	@ (80004d8 <MouseSet+0x58>)
 80004c8:	f007 fcca 	bl	8007e60 <USBD_HID_SendReport>
}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	08008800 	.word	0x08008800
 80004d8:	2000026c 	.word	0x2000026c

080004dc <MouseClick>:

void MouseClick(uint8_t buttons){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[5] = {0x01, buttons, 0, 0, 0};
 80004e6:	2301      	movs	r3, #1
 80004e8:	723b      	strb	r3, [r7, #8]
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	727b      	strb	r3, [r7, #9]
 80004ee:	2300      	movs	r3, #0
 80004f0:	72bb      	strb	r3, [r7, #10]
 80004f2:	2300      	movs	r3, #0
 80004f4:	72fb      	strb	r3, [r7, #11]
 80004f6:	2300      	movs	r3, #0
 80004f8:	733b      	strb	r3, [r7, #12]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	2205      	movs	r2, #5
 8000500:	4619      	mov	r1, r3
 8000502:	4806      	ldr	r0, [pc, #24]	@ (800051c <MouseClick+0x40>)
 8000504:	f007 fcac 	bl	8007e60 <USBD_HID_SendReport>
	HAL_Delay(30);
 8000508:	201e      	movs	r0, #30
 800050a:	f000 fba9 	bl	8000c60 <HAL_Delay>
	MouseRemove();
 800050e:	f000 f807 	bl	8000520 <MouseRemove>
}
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	2000026c 	.word	0x2000026c

08000520 <MouseRemove>:

void MouseRemove(){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8000526:	4a08      	ldr	r2, [pc, #32]	@ (8000548 <MouseRemove+0x28>)
 8000528:	463b      	mov	r3, r7
 800052a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052e:	6018      	str	r0, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	7019      	strb	r1, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8000534:	463b      	mov	r3, r7
 8000536:	2205      	movs	r2, #5
 8000538:	4619      	mov	r1, r3
 800053a:	4804      	ldr	r0, [pc, #16]	@ (800054c <MouseRemove+0x2c>)
 800053c:	f007 fc90 	bl	8007e60 <USBD_HID_SendReport>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	08008800 	.word	0x08008800
 800054c:	2000026c 	.word	0x2000026c

08000550 <HAL_UART_RxCpltCallback>:
uint8_t length = 0;
uint8_t parsedData = 0;
uint8_t buffer[32] = {};
uint32_t timer = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	uint8_t byte = rxcall;
 8000558:	4b29      	ldr	r3, [pc, #164]	@ (8000600 <HAL_UART_RxCpltCallback+0xb0>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	73fb      	strb	r3, [r7, #15]
	if((HAL_GetTick()-timer) > 2){
 800055e:	f000 fb75 	bl	8000c4c <HAL_GetTick>
 8000562:	4602      	mov	r2, r0
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <HAL_UART_RxCpltCallback+0xb4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	2b02      	cmp	r3, #2
 800056c:	d905      	bls.n	800057a <HAL_UART_RxCpltCallback+0x2a>
		length = 0;
 800056e:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <HAL_UART_RxCpltCallback+0xb8>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		parsedData = 0;
 8000574:	4b25      	ldr	r3, [pc, #148]	@ (800060c <HAL_UART_RxCpltCallback+0xbc>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	}
	if(byte == HEADER || parsedData > 0){
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	2bc5      	cmp	r3, #197	@ 0xc5
 800057e:	d003      	beq.n	8000588 <HAL_UART_RxCpltCallback+0x38>
 8000580:	4b22      	ldr	r3, [pc, #136]	@ (800060c <HAL_UART_RxCpltCallback+0xbc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d02d      	beq.n	80005e4 <HAL_UART_RxCpltCallback+0x94>
		buffer[parsedData] = byte;
 8000588:	4b20      	ldr	r3, [pc, #128]	@ (800060c <HAL_UART_RxCpltCallback+0xbc>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	4a20      	ldr	r2, [pc, #128]	@ (8000610 <HAL_UART_RxCpltCallback+0xc0>)
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	5453      	strb	r3, [r2, r1]
		if(parsedData == 3)
 8000594:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <HAL_UART_RxCpltCallback+0xbc>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d102      	bne.n	80005a2 <HAL_UART_RxCpltCallback+0x52>
			length = byte;
 800059c:	4a1a      	ldr	r2, [pc, #104]	@ (8000608 <HAL_UART_RxCpltCallback+0xb8>)
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	7013      	strb	r3, [r2, #0]
		if(parsedData >= length+4){
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <HAL_UART_RxCpltCallback+0xb8>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	3303      	adds	r3, #3
 80005a8:	4a18      	ldr	r2, [pc, #96]	@ (800060c <HAL_UART_RxCpltCallback+0xbc>)
 80005aa:	7812      	ldrb	r2, [r2, #0]
 80005ac:	4293      	cmp	r3, r2
 80005ae:	da13      	bge.n	80005d8 <HAL_UART_RxCpltCallback+0x88>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b4:	4817      	ldr	r0, [pc, #92]	@ (8000614 <HAL_UART_RxCpltCallback+0xc4>)
 80005b6:	f000 fed3 	bl	8001360 <HAL_GPIO_TogglePin>
			ParsingData(buffer, parsedData+1);
 80005ba:	4b14      	ldr	r3, [pc, #80]	@ (800060c <HAL_UART_RxCpltCallback+0xbc>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	4812      	ldr	r0, [pc, #72]	@ (8000610 <HAL_UART_RxCpltCallback+0xc0>)
 80005c6:	f000 f885 	bl	80006d4 <ParsingData>
			length = 0;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <HAL_UART_RxCpltCallback+0xb8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
			parsedData = 0;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <HAL_UART_RxCpltCallback+0xbc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e005      	b.n	80005e4 <HAL_UART_RxCpltCallback+0x94>
		}else
			parsedData++;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <HAL_UART_RxCpltCallback+0xbc>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <HAL_UART_RxCpltCallback+0xbc>)
 80005e2:	701a      	strb	r2, [r3, #0]
	}
	timer = HAL_GetTick();
 80005e4:	f000 fb32 	bl	8000c4c <HAL_GetTick>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <HAL_UART_RxCpltCallback+0xb4>)
 80005ec:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart,&rxcall,1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	4903      	ldr	r1, [pc, #12]	@ (8000600 <HAL_UART_RxCpltCallback+0xb0>)
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f003 f9b7 	bl	8003966 <HAL_UART_Receive_IT>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200001d0 	.word	0x200001d0
 8000604:	200001cc 	.word	0x200001cc
 8000608:	200001a9 	.word	0x200001a9
 800060c:	200001aa 	.word	0x200001aa
 8000610:	200001ac 	.word	0x200001ac
 8000614:	40011000 	.word	0x40011000

08000618 <crc8>:
#ifndef INC_CRC8_H_
#define INC_CRC8_H_

#include "main.h"

uint8_t crc8(uint8_t *buffer, uint8_t size) {
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < size; i++) {
 8000628:	2300      	movs	r3, #0
 800062a:	73bb      	strb	r3, [r7, #14]
 800062c:	e027      	b.n	800067e <crc8+0x66>
		uint8_t data = buffer[i];
 800062e:	7bbb      	ldrb	r3, [r7, #14]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8000638:	2308      	movs	r3, #8
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	e019      	b.n	8000672 <crc8+0x5a>
		crc = ((crc ^ data) & 1) ? (crc >> 1) ^ 0x8C : (crc >> 1);
 800063e:	7bfa      	ldrb	r2, [r7, #15]
 8000640:	7b7b      	ldrb	r3, [r7, #13]
 8000642:	4053      	eors	r3, r2
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d007      	beq.n	800065e <crc8+0x46>
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	085b      	lsrs	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8000658:	43db      	mvns	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	e002      	b.n	8000664 <crc8+0x4c>
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	085b      	lsrs	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	73fb      	strb	r3, [r7, #15]
		data >>= 1;
 8000666:	7b7b      	ldrb	r3, [r7, #13]
 8000668:	085b      	lsrs	r3, r3, #1
 800066a:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	3b01      	subs	r3, #1
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	dce2      	bgt.n	800063e <crc8+0x26>
	for (uint8_t i = 0; i < size; i++) {
 8000678:	7bbb      	ldrb	r3, [r7, #14]
 800067a:	3301      	adds	r3, #1
 800067c:	73bb      	strb	r3, [r7, #14]
 800067e:	7bba      	ldrb	r2, [r7, #14]
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	429a      	cmp	r2, r3
 8000684:	d3d3      	bcc.n	800062e <crc8+0x16>
		}
	}
	return crc;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
	...

08000694 <answer>:
#include "UsartController.h"
#include "crc8.h"

extern UART_HandleTypeDef huart3;

void answer(uint8_t data){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[3] = {HEADER, data, 0};
 800069e:	23c5      	movs	r3, #197	@ 0xc5
 80006a0:	733b      	strb	r3, [r7, #12]
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	737b      	strb	r3, [r7, #13]
 80006a6:	2300      	movs	r3, #0
 80006a8:	73bb      	strb	r3, [r7, #14]
	data_out[2] = crc8(data_out, 2);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffb1 	bl	8000618 <crc8>
 80006b6:	4603      	mov	r3, r0
 80006b8:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, data_out, 3, 100);
 80006ba:	f107 010c 	add.w	r1, r7, #12
 80006be:	2364      	movs	r3, #100	@ 0x64
 80006c0:	2203      	movs	r2, #3
 80006c2:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <answer+0x3c>)
 80006c4:	f003 f8c4 	bl	8003850 <HAL_UART_Transmit>
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000021c 	.word	0x2000021c

080006d4 <ParsingData>:

#include "UsartRouter.h"
#include "crc8.h"
#include "UsartAnswerModule.h"

void ParsingData(uint8_t *buffer, uint8_t len){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
	if(buffer[0] == HEADER){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2bc5      	cmp	r3, #197	@ 0xc5
 80006e6:	d142      	bne.n	800076e <ParsingData+0x9a>
		if(buffer[3]+5 == len){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3303      	adds	r3, #3
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	1d5a      	adds	r2, r3, #5
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d13b      	bne.n	800076e <ParsingData+0x9a>
			if(crc8(buffer, buffer[3]+4) == buffer[buffer[3]+4]){
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3303      	adds	r3, #3
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	3304      	adds	r3, #4
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff88 	bl	8000618 <crc8>
 8000708:	4603      	mov	r3, r0
 800070a:	4619      	mov	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3303      	adds	r3, #3
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	3304      	adds	r3, #4
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4299      	cmp	r1, r3
 800071c:	d124      	bne.n	8000768 <ParsingData+0x94>
				answer(USART_OK);
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff ffb8 	bl	8000694 <answer>
				action.command = buffer[2];
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	789a      	ldrb	r2, [r3, #2]
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <ParsingData+0xa4>)
 800072a:	705a      	strb	r2, [r3, #1]
				action.length = buffer[3];
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78da      	ldrb	r2, [r3, #3]
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <ParsingData+0xa4>)
 8000732:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<action.length; i++){
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e00c      	b.n	8000754 <ParsingData+0x80>
					action.data[i] = buffer[i+4];
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	3304      	adds	r3, #4
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	441a      	add	r2, r3
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	7811      	ldrb	r1, [r2, #0]
 8000746:	4a0c      	ldr	r2, [pc, #48]	@ (8000778 <ParsingData+0xa4>)
 8000748:	4413      	add	r3, r2
 800074a:	460a      	mov	r2, r1
 800074c:	70da      	strb	r2, [r3, #3]
				for(uint8_t i=0; i<action.length; i++){
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	3301      	adds	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <ParsingData+0xa4>)
 8000756:	789b      	ldrb	r3, [r3, #2]
 8000758:	7bfa      	ldrb	r2, [r7, #15]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3ed      	bcc.n	800073a <ParsingData+0x66>
				}
				action.device = buffer[1];
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	785a      	ldrb	r2, [r3, #1]
 8000762:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <ParsingData+0xa4>)
 8000764:	701a      	strb	r2, [r3, #0]
			}else
				answer(USART_ERROR);
		}
	}
}
 8000766:	e002      	b.n	800076e <ParsingData+0x9a>
				answer(USART_ERROR);
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff ff93 	bl	8000694 <answer>
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001d4 	.word	0x200001d4

0800077c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <MX_GPIO_Init+0xa8>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a23      	ldr	r2, [pc, #140]	@ (8000824 <MX_GPIO_Init+0xa8>)
 8000796:	f043 0310 	orr.w	r3, r3, #16
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <MX_GPIO_Init+0xa8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0310 	and.w	r3, r3, #16
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_GPIO_Init+0xa8>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000824 <MX_GPIO_Init+0xa8>)
 80007ae:	f043 0320 	orr.w	r3, r3, #32
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_GPIO_Init+0xa8>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0320 	and.w	r3, r3, #32
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_GPIO_Init+0xa8>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a17      	ldr	r2, [pc, #92]	@ (8000824 <MX_GPIO_Init+0xa8>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <MX_GPIO_Init+0xa8>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_GPIO_Init+0xa8>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a11      	ldr	r2, [pc, #68]	@ (8000824 <MX_GPIO_Init+0xa8>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_GPIO_Init+0xa8>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0308 	and.w	r3, r3, #8
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f6:	480c      	ldr	r0, [pc, #48]	@ (8000828 <MX_GPIO_Init+0xac>)
 80007f8:	f000 fd9a 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2302      	movs	r3, #2
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4619      	mov	r1, r3
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_GPIO_Init+0xac>)
 8000816:	f000 fc07 	bl	8001028 <HAL_GPIO_Init>

}
 800081a:	bf00      	nop
 800081c:	3720      	adds	r7, #32
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000
 8000828:	40011000 	.word	0x40011000

0800082c <main>:
Animation animation = {0, {}};

void SystemClock_Config(void);

int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000830:	f000 f9b4 	bl	8000b9c <HAL_Init>
	SystemClock_Config();
 8000834:	f000 f834 	bl	80008a0 <SystemClock_Config>
	MX_GPIO_Init();
 8000838:	f7ff ffa0 	bl	800077c <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 800083c:	f007 fbea 	bl	8008014 <MX_USB_DEVICE_Init>
	MX_USART3_UART_Init();
 8000840:	f000 f908 	bl	8000a54 <MX_USART3_UART_Init>
	HAL_UART_Receive_IT(&huart3,&rxcall,1);
 8000844:	2201      	movs	r2, #1
 8000846:	4913      	ldr	r1, [pc, #76]	@ (8000894 <main+0x68>)
 8000848:	4813      	ldr	r0, [pc, #76]	@ (8000898 <main+0x6c>)
 800084a:	f003 f88c 	bl	8003966 <HAL_UART_Receive_IT>

	while (1)
	{
		switch(action.device){
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <main+0x70>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d014      	beq.n	8000880 <main+0x54>
 8000856:	2b03      	cmp	r3, #3
 8000858:	dc19      	bgt.n	800088e <main+0x62>
 800085a:	2b01      	cmp	r3, #1
 800085c:	d002      	beq.n	8000864 <main+0x38>
 800085e:	2b02      	cmp	r3, #2
 8000860:	d007      	beq.n	8000872 <main+0x46>
 8000862:	e014      	b.n	800088e <main+0x62>
			case(MOUSE):
				MouseCommandSetup(&action);
 8000864:	480d      	ldr	r0, [pc, #52]	@ (800089c <main+0x70>)
 8000866:	f7ff fde9 	bl	800043c <MouseCommandSetup>
				action.device = 0;
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <main+0x70>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
				break;
 8000870:	e00d      	b.n	800088e <main+0x62>
			case(KEYBOARD):
				KeyboardSetup(&action);
 8000872:	480a      	ldr	r0, [pc, #40]	@ (800089c <main+0x70>)
 8000874:	f7ff fd4a 	bl	800030c <KeyboardSetup>
				action.device = 0;
 8000878:	4b08      	ldr	r3, [pc, #32]	@ (800089c <main+0x70>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
				break;
 800087e:	e006      	b.n	800088e <main+0x62>
			case(ANIMATION):
				AnimationSetup(&action);
 8000880:	4806      	ldr	r0, [pc, #24]	@ (800089c <main+0x70>)
 8000882:	f7ff fc63 	bl	800014c <AnimationSetup>
				action.device = 0;
 8000886:	4b05      	ldr	r3, [pc, #20]	@ (800089c <main+0x70>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
				break;
 800088c:	bf00      	nop
		}
		Animate();
 800088e:	f7ff fcad 	bl	80001ec <Animate>
		switch(action.device){
 8000892:	e7dc      	b.n	800084e <main+0x22>
 8000894:	200001d0 	.word	0x200001d0
 8000898:	2000021c 	.word	0x2000021c
 800089c:	200001d4 	.word	0x200001d4

080008a0 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b094      	sub	sp, #80	@ 0x50
 80008a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008aa:	2228      	movs	r2, #40	@ 0x28
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f007 ff68 	bl	8008784 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008de:	2301      	movs	r3, #1
 80008e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80008f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fa94 	bl	8002e24 <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000902:	f000 f828 	bl	8000956 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000916:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2101      	movs	r1, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fd00 	bl	8003328 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x92>
	{
		Error_Handler();
 800092e:	f000 f812 	bl	8000956 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000932:	2310      	movs	r3, #16
 8000934:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000936:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800093a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fe80 	bl	8003644 <HAL_RCCEx_PeriphCLKConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xae>
	{
		Error_Handler();
 800094a:	f000 f804 	bl	8000956 <Error_Handler>
	}
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	@ 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <Error_Handler>:

void Error_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095a:	b672      	cpsid	i
}
 800095c:	bf00      	nop
  __disable_irq();
  while (1){}
 800095e:	bf00      	nop
 8000960:	e7fd      	b.n	800095e <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <HAL_MspInit+0x5c>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <HAL_MspInit+0x5c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6193      	str	r3, [r2, #24]
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_MspInit+0x5c>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <HAL_MspInit+0x5c>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a0e      	ldr	r2, [pc, #56]	@ (80009c0 <HAL_MspInit+0x5c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <HAL_MspInit+0x5c>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <HAL_MspInit+0x60>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <HAL_MspInit+0x60>)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010000 	.word	0x40010000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <MemManage_Handler+0x4>

080009e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <UsageFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f906 	bl	8000c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a26:	f000 fdd0 	bl	80015ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000730 	.word	0x20000730

08000a34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <USART3_IRQHandler+0x10>)
 8000a3a:	f002 ffb9 	bl	80039b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000021c 	.word	0x2000021c

08000a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <MX_USART3_UART_Init+0x50>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_USART3_UART_Init+0x4c>)
 8000a8c:	f002 fe90 	bl	80037b0 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a96:	f7ff ff5e 	bl	8000956 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000021c 	.word	0x2000021c
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a20      	ldr	r2, [pc, #128]	@ (8000b44 <HAL_UART_MspInit+0x9c>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d139      	bne.n	8000b3c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <HAL_UART_MspInit+0xa0>)
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	4a1e      	ldr	r2, [pc, #120]	@ (8000b48 <HAL_UART_MspInit+0xa0>)
 8000ace:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ad2:	61d3      	str	r3, [r2, #28]
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_UART_MspInit+0xa0>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_UART_MspInit+0xa0>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a18      	ldr	r2, [pc, #96]	@ (8000b48 <HAL_UART_MspInit+0xa0>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <HAL_UART_MspInit+0xa0>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000af8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000afc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <HAL_UART_MspInit+0xa4>)
 8000b0e:	f000 fa8b 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	4809      	ldr	r0, [pc, #36]	@ (8000b4c <HAL_UART_MspInit+0xa4>)
 8000b28:	f000 fa7e 	bl	8001028 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2027      	movs	r0, #39	@ 0x27
 8000b32:	f000 f990 	bl	8000e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b36:	2027      	movs	r0, #39	@ 0x27
 8000b38:	f000 f9a9 	bl	8000e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40004800 	.word	0x40004800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010c00 	.word	0x40010c00

08000b50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b50:	f7ff ff7a 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480b      	ldr	r0, [pc, #44]	@ (8000b84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b56:	490c      	ldr	r1, [pc, #48]	@ (8000b88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b58:	4a0c      	ldr	r2, [pc, #48]	@ (8000b8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a09      	ldr	r2, [pc, #36]	@ (8000b90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b6c:	4c09      	ldr	r4, [pc, #36]	@ (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f007 fe0b 	bl	8008794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7e:	f7ff fe55 	bl	800082c <main>
  bx lr
 8000b82:	4770      	bx	lr
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000b8c:	08008870 	.word	0x08008870
  ldr r2, =_sbss
 8000b90:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8000b94:	20000a1c 	.word	0x20000a1c

08000b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_2_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <HAL_Init+0x28>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	@ (8000bc4 <HAL_Init+0x28>)
 8000ba6:	f043 0310 	orr.w	r3, r3, #16
 8000baa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f947 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f000 f808 	bl	8000bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f7ff fed4 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <HAL_InitTick+0x54>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_InitTick+0x58>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f95f 	bl	8000eaa <HAL_SYSTICK_Config>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00e      	b.n	8000c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d80a      	bhi.n	8000c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f000 f927 	bl	8000e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c08:	4a06      	ldr	r2, [pc, #24]	@ (8000c24 <HAL_InitTick+0x5c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e000      	b.n	8000c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000004 	.word	0x20000004

08000c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_IncTick+0x1c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <HAL_IncTick+0x20>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a03      	ldr	r2, [pc, #12]	@ (8000c48 <HAL_IncTick+0x20>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000264 	.word	0x20000264

08000c4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b02      	ldr	r3, [pc, #8]	@ (8000c5c <HAL_GetTick+0x10>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	20000264 	.word	0x20000264

08000c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff fff0 	bl	8000c4c <HAL_GetTick>
 8000c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c78:	d005      	beq.n	8000c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <HAL_Delay+0x44>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c86:	bf00      	nop
 8000c88:	f7ff ffe0 	bl	8000c4c <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d8f7      	bhi.n	8000c88 <HAL_Delay+0x28>
  {
  }
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4906      	ldr	r1, [pc, #24]	@ (8000d40 <__NVIC_EnableIRQ+0x34>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	@ (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	@ (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	@ 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	@ 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e0c:	d301      	bcc.n	8000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00f      	b.n	8000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <SysTick_Config+0x40>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f7ff ff90 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <SysTick_Config+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <SysTick_Config+0x40>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff2d 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e68:	f7ff ff42 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	6978      	ldr	r0, [r7, #20]
 8000e74:	f7ff ff90 	bl	8000d98 <NVIC_EncodePriority>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff5f 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff35 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffa2 	bl	8000dfc <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d008      	beq.n	8000eec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2204      	movs	r2, #4
 8000ede:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e020      	b.n	8000f2e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 020e 	bic.w	r2, r2, #14
 8000efa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f14:	2101      	movs	r1, #1
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d005      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2204      	movs	r2, #4
 8000f54:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e051      	b.n	8001000 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 020e 	bic.w	r2, r2, #14
 8000f6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0201 	bic.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a22      	ldr	r2, [pc, #136]	@ (800100c <HAL_DMA_Abort_IT+0xd4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d029      	beq.n	8000fda <HAL_DMA_Abort_IT+0xa2>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a21      	ldr	r2, [pc, #132]	@ (8001010 <HAL_DMA_Abort_IT+0xd8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d022      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0x9e>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a1f      	ldr	r2, [pc, #124]	@ (8001014 <HAL_DMA_Abort_IT+0xdc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01a      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0x98>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001018 <HAL_DMA_Abort_IT+0xe0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d012      	beq.n	8000fca <HAL_DMA_Abort_IT+0x92>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800101c <HAL_DMA_Abort_IT+0xe4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00a      	beq.n	8000fc4 <HAL_DMA_Abort_IT+0x8c>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001020 <HAL_DMA_Abort_IT+0xe8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d102      	bne.n	8000fbe <HAL_DMA_Abort_IT+0x86>
 8000fb8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fbc:	e00e      	b.n	8000fdc <HAL_DMA_Abort_IT+0xa4>
 8000fbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fc2:	e00b      	b.n	8000fdc <HAL_DMA_Abort_IT+0xa4>
 8000fc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc8:	e008      	b.n	8000fdc <HAL_DMA_Abort_IT+0xa4>
 8000fca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fce:	e005      	b.n	8000fdc <HAL_DMA_Abort_IT+0xa4>
 8000fd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd4:	e002      	b.n	8000fdc <HAL_DMA_Abort_IT+0xa4>
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	e000      	b.n	8000fdc <HAL_DMA_Abort_IT+0xa4>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	4a11      	ldr	r2, [pc, #68]	@ (8001024 <HAL_DMA_Abort_IT+0xec>)
 8000fde:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	4798      	blx	r3
    } 
  }
  return status;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020008 	.word	0x40020008
 8001010:	4002001c 	.word	0x4002001c
 8001014:	40020030 	.word	0x40020030
 8001018:	40020044 	.word	0x40020044
 800101c:	40020058 	.word	0x40020058
 8001020:	4002006c 	.word	0x4002006c
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b08b      	sub	sp, #44	@ 0x2c
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	e169      	b.n	8001310 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800103c:	2201      	movs	r2, #1
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 8158 	bne.w	800130a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a9a      	ldr	r2, [pc, #616]	@ (80012c8 <HAL_GPIO_Init+0x2a0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d05e      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001064:	4a98      	ldr	r2, [pc, #608]	@ (80012c8 <HAL_GPIO_Init+0x2a0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d875      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 800106a:	4a98      	ldr	r2, [pc, #608]	@ (80012cc <HAL_GPIO_Init+0x2a4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d058      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001070:	4a96      	ldr	r2, [pc, #600]	@ (80012cc <HAL_GPIO_Init+0x2a4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d86f      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 8001076:	4a96      	ldr	r2, [pc, #600]	@ (80012d0 <HAL_GPIO_Init+0x2a8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d052      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 800107c:	4a94      	ldr	r2, [pc, #592]	@ (80012d0 <HAL_GPIO_Init+0x2a8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d869      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 8001082:	4a94      	ldr	r2, [pc, #592]	@ (80012d4 <HAL_GPIO_Init+0x2ac>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d04c      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001088:	4a92      	ldr	r2, [pc, #584]	@ (80012d4 <HAL_GPIO_Init+0x2ac>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d863      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 800108e:	4a92      	ldr	r2, [pc, #584]	@ (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d046      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001094:	4a90      	ldr	r2, [pc, #576]	@ (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d85d      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 800109a:	2b12      	cmp	r3, #18
 800109c:	d82a      	bhi.n	80010f4 <HAL_GPIO_Init+0xcc>
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d859      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 80010a2:	a201      	add	r2, pc, #4	@ (adr r2, 80010a8 <HAL_GPIO_Init+0x80>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	08001123 	.word	0x08001123
 80010ac:	080010fd 	.word	0x080010fd
 80010b0:	0800110f 	.word	0x0800110f
 80010b4:	08001151 	.word	0x08001151
 80010b8:	08001157 	.word	0x08001157
 80010bc:	08001157 	.word	0x08001157
 80010c0:	08001157 	.word	0x08001157
 80010c4:	08001157 	.word	0x08001157
 80010c8:	08001157 	.word	0x08001157
 80010cc:	08001157 	.word	0x08001157
 80010d0:	08001157 	.word	0x08001157
 80010d4:	08001157 	.word	0x08001157
 80010d8:	08001157 	.word	0x08001157
 80010dc:	08001157 	.word	0x08001157
 80010e0:	08001157 	.word	0x08001157
 80010e4:	08001157 	.word	0x08001157
 80010e8:	08001157 	.word	0x08001157
 80010ec:	08001105 	.word	0x08001105
 80010f0:	08001119 	.word	0x08001119
 80010f4:	4a79      	ldr	r2, [pc, #484]	@ (80012dc <HAL_GPIO_Init+0x2b4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010fa:	e02c      	b.n	8001156 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	623b      	str	r3, [r7, #32]
          break;
 8001102:	e029      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	3304      	adds	r3, #4
 800110a:	623b      	str	r3, [r7, #32]
          break;
 800110c:	e024      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	3308      	adds	r3, #8
 8001114:	623b      	str	r3, [r7, #32]
          break;
 8001116:	e01f      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	330c      	adds	r3, #12
 800111e:	623b      	str	r3, [r7, #32]
          break;
 8001120:	e01a      	b.n	8001158 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800112a:	2304      	movs	r3, #4
 800112c:	623b      	str	r3, [r7, #32]
          break;
 800112e:	e013      	b.n	8001158 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d105      	bne.n	8001144 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001138:	2308      	movs	r3, #8
 800113a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	611a      	str	r2, [r3, #16]
          break;
 8001142:	e009      	b.n	8001158 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001144:	2308      	movs	r3, #8
 8001146:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	615a      	str	r2, [r3, #20]
          break;
 800114e:	e003      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x130>
          break;
 8001156:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	2bff      	cmp	r3, #255	@ 0xff
 800115c:	d801      	bhi.n	8001162 <HAL_GPIO_Init+0x13a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	e001      	b.n	8001166 <HAL_GPIO_Init+0x13e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3304      	adds	r3, #4
 8001166:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2bff      	cmp	r3, #255	@ 0xff
 800116c:	d802      	bhi.n	8001174 <HAL_GPIO_Init+0x14c>
 800116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x152>
 8001174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001176:	3b08      	subs	r3, #8
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	210f      	movs	r1, #15
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	401a      	ands	r2, r3
 800118c:	6a39      	ldr	r1, [r7, #32]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80b1 	beq.w	800130a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011a8:	4b4d      	ldr	r3, [pc, #308]	@ (80012e0 <HAL_GPIO_Init+0x2b8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	@ (80012e0 <HAL_GPIO_Init+0x2b8>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b4a      	ldr	r3, [pc, #296]	@ (80012e0 <HAL_GPIO_Init+0x2b8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c0:	4a48      	ldr	r2, [pc, #288]	@ (80012e4 <HAL_GPIO_Init+0x2bc>)
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a40      	ldr	r2, [pc, #256]	@ (80012e8 <HAL_GPIO_Init+0x2c0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d013      	beq.n	8001214 <HAL_GPIO_Init+0x1ec>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a3f      	ldr	r2, [pc, #252]	@ (80012ec <HAL_GPIO_Init+0x2c4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d00d      	beq.n	8001210 <HAL_GPIO_Init+0x1e8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a3e      	ldr	r2, [pc, #248]	@ (80012f0 <HAL_GPIO_Init+0x2c8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d007      	beq.n	800120c <HAL_GPIO_Init+0x1e4>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a3d      	ldr	r2, [pc, #244]	@ (80012f4 <HAL_GPIO_Init+0x2cc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d101      	bne.n	8001208 <HAL_GPIO_Init+0x1e0>
 8001204:	2303      	movs	r3, #3
 8001206:	e006      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001208:	2304      	movs	r3, #4
 800120a:	e004      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 800120c:	2302      	movs	r3, #2
 800120e:	e002      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001214:	2300      	movs	r3, #0
 8001216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001218:	f002 0203 	and.w	r2, r2, #3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4093      	lsls	r3, r2
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001226:	492f      	ldr	r1, [pc, #188]	@ (80012e4 <HAL_GPIO_Init+0x2bc>)
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001240:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	492c      	ldr	r1, [pc, #176]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	608b      	str	r3, [r1, #8]
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800124e:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	43db      	mvns	r3, r3
 8001256:	4928      	ldr	r1, [pc, #160]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001258:	4013      	ands	r3, r2
 800125a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001268:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	4922      	ldr	r1, [pc, #136]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	60cb      	str	r3, [r1, #12]
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	43db      	mvns	r3, r3
 800127e:	491e      	ldr	r1, [pc, #120]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001280:	4013      	ands	r3, r2
 8001282:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4918      	ldr	r1, [pc, #96]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800129e:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4914      	ldr	r1, [pc, #80]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d021      	beq.n	80012fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	490e      	ldr	r1, [pc, #56]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
 80012c4:	e021      	b.n	800130a <HAL_GPIO_Init+0x2e2>
 80012c6:	bf00      	nop
 80012c8:	10320000 	.word	0x10320000
 80012cc:	10310000 	.word	0x10310000
 80012d0:	10220000 	.word	0x10220000
 80012d4:	10210000 	.word	0x10210000
 80012d8:	10120000 	.word	0x10120000
 80012dc:	10110000 	.word	0x10110000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000
 80012e8:	40010800 	.word	0x40010800
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40011000 	.word	0x40011000
 80012f4:	40011400 	.word	0x40011400
 80012f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_GPIO_Init+0x304>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	43db      	mvns	r3, r3
 8001304:	4909      	ldr	r1, [pc, #36]	@ (800132c <HAL_GPIO_Init+0x304>)
 8001306:	4013      	ands	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	3301      	adds	r3, #1
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	fa22 f303 	lsr.w	r3, r2, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	f47f ae8e 	bne.w	800103c <HAL_GPIO_Init+0x14>
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	372c      	adds	r7, #44	@ 0x2c
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800134c:	e003      	b.n	8001356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	611a      	str	r2, [r3, #16]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	43d9      	mvns	r1, r3
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	400b      	ands	r3, r1
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	611a      	str	r2, [r3, #16]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0e8      	b.n	8001576 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d106      	bne.n	80013be <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f006 ff5f 	bl	800827c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2203      	movs	r2, #3
 80013c2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 f87a 	bl	80044ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3304      	adds	r3, #4
 80013de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e0:	f003 f850 	bl	8004484 <USB_CoreInit>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2202      	movs	r2, #2
 80013ee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0bf      	b.n	8001576 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 f87e 	bl	80044fe <USB_SetCurrentMode>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0b0      	b.n	8001576 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e03e      	b.n	8001498 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	3311      	adds	r3, #17
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	3310      	adds	r3, #16
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3313      	adds	r3, #19
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	3320      	adds	r3, #32
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	3324      	adds	r3, #36	@ 0x24
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	3301      	adds	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3bb      	bcc.n	800141a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e044      	b.n	8001532 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	440b      	add	r3, r1
 80014cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	440b      	add	r3, r1
 800150e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	429a      	cmp	r2, r3
 800153a:	d3b5      	bcc.n	80014a8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3304      	adds	r3, #4
 8001544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001546:	f002 ffe6 	bl	8004516 <USB_DevInit>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e00c      	b.n	8001576 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f005 fa65 	bl	8006a3e <USB_DevDisconnect>

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_PCD_Start+0x16>
 8001590:	2302      	movs	r3, #2
 8001592:	e016      	b.n	80015c2 <HAL_PCD_Start+0x44>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 ff7c 	bl	800449e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80015a6:	2101      	movs	r1, #1
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f007 f8b4 	bl	8008716 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f005 fa39 	bl	8006a2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b088      	sub	sp, #32
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 fa3b 	bl	8006a52 <USB_ReadInterrupts>
 80015dc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fb03 	bl	8001bf4 <PCD_EP_ISR_Handler>

    return;
 80015ee:	e119      	b.n	8001824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d013      	beq.n	8001622 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001602:	b29a      	uxth	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800160c:	b292      	uxth	r2, r2
 800160e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f006 fead 	bl	8008372 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001618:	2100      	movs	r1, #0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f905 	bl	800182a <HAL_PCD_SetAddress>

    return;
 8001620:	e100      	b.n	8001824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00c      	beq.n	8001646 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001634:	b29a      	uxth	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800163e:	b292      	uxth	r2, r2
 8001640:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001644:	e0ee      	b.n	8001824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00c      	beq.n	800166a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001658:	b29a      	uxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001662:	b292      	uxth	r2, r2
 8001664:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001668:	e0dc      	b.n	8001824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d027      	beq.n	80016c4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0204 	bic.w	r2, r2, #4
 8001686:	b292      	uxth	r2, r2
 8001688:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001694:	b29a      	uxth	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0208 	bic.w	r2, r2, #8
 800169e:	b292      	uxth	r2, r2
 80016a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f006 fe9d 	bl	80083e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016bc:	b292      	uxth	r2, r2
 80016be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80016c2:	e0af      	b.n	8001824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8083 	beq.w	80017d6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	77fb      	strb	r3, [r7, #31]
 80016d4:	e010      	b.n	80016f8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	7ffb      	ldrb	r3, [r7, #31]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	441a      	add	r2, r3
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	8812      	ldrh	r2, [r2, #0]
 80016e6:	b292      	uxth	r2, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	3320      	adds	r3, #32
 80016ec:	443b      	add	r3, r7
 80016ee:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80016f2:	7ffb      	ldrb	r3, [r7, #31]
 80016f4:	3301      	adds	r3, #1
 80016f6:	77fb      	strb	r3, [r7, #31]
 80016f8:	7ffb      	ldrb	r3, [r7, #31]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	d9eb      	bls.n	80016d6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0201 	orr.w	r2, r2, #1
 8001710:	b292      	uxth	r2, r2
 8001712:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	b292      	uxth	r2, r2
 800172a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800172e:	bf00      	nop
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001738:	b29b      	uxth	r3, r3
 800173a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f6      	beq.n	8001730 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800174a:	b29a      	uxth	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001754:	b292      	uxth	r2, r2
 8001756:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800175a:	2300      	movs	r3, #0
 800175c:	77fb      	strb	r3, [r7, #31]
 800175e:	e00f      	b.n	8001780 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001760:	7ffb      	ldrb	r3, [r7, #31]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	4611      	mov	r1, r2
 8001768:	7ffa      	ldrb	r2, [r7, #31]
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	440a      	add	r2, r1
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	3320      	adds	r3, #32
 8001772:	443b      	add	r3, r7
 8001774:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001778:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	3301      	adds	r3, #1
 800177e:	77fb      	strb	r3, [r7, #31]
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	2b07      	cmp	r3, #7
 8001784:	d9ec      	bls.n	8001760 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800178e:	b29a      	uxth	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0208 	orr.w	r2, r2, #8
 8001798:	b292      	uxth	r2, r2
 800179a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017b0:	b292      	uxth	r2, r2
 80017b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0204 	orr.w	r2, r2, #4
 80017c8:	b292      	uxth	r2, r2
 80017ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f006 fdee 	bl	80083b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017d4:	e026      	b.n	8001824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00f      	beq.n	8001800 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017f2:	b292      	uxth	r2, r2
 80017f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f006 fdac 	bl	8008356 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017fe:	e011      	b.n	8001824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00c      	beq.n	8001824 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001812:	b29a      	uxth	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800181c:	b292      	uxth	r2, r2
 800181e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001822:	bf00      	nop
  }
}
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_PCD_SetAddress+0x1a>
 8001840:	2302      	movs	r3, #2
 8001842:	e012      	b.n	800186a <HAL_PCD_SetAddress+0x40>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f005 f8d2 	bl	8006a04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	4608      	mov	r0, r1
 800187c:	4611      	mov	r1, r2
 800187e:	461a      	mov	r2, r3
 8001880:	4603      	mov	r3, r0
 8001882:	70fb      	strb	r3, [r7, #3]
 8001884:	460b      	mov	r3, r1
 8001886:	803b      	strh	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001894:	2b00      	cmp	r3, #0
 8001896:	da0e      	bge.n	80018b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	f003 0207 	and.w	r2, r3, #7
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	3310      	adds	r3, #16
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	705a      	strb	r2, [r3, #1]
 80018b4:	e00e      	b.n	80018d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	f003 0207 	and.w	r2, r3, #7
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018e0:	883a      	ldrh	r2, [r7, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	78ba      	ldrb	r2, [r7, #2]
 80018ea:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018ec:	78bb      	ldrb	r3, [r7, #2]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d102      	bne.n	80018f8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_PCD_EP_Open+0x94>
 8001902:	2302      	movs	r3, #2
 8001904:	e00e      	b.n	8001924 <HAL_PCD_EP_Open+0xb2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68f9      	ldr	r1, [r7, #12]
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fe1b 	bl	8004550 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001922:	7afb      	ldrb	r3, [r7, #11]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800193c:	2b00      	cmp	r3, #0
 800193e:	da0e      	bge.n	800195e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	f003 0207 	and.w	r2, r3, #7
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	3310      	adds	r3, #16
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	705a      	strb	r2, [r3, #1]
 800195c:	e00e      	b.n	800197c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	f003 0207 	and.w	r2, r3, #7
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	b2da      	uxtb	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_PCD_EP_Close+0x6a>
 8001992:	2302      	movs	r3, #2
 8001994:	e00e      	b.n	80019b4 <HAL_PCD_EP_Close+0x88>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 f993 	bl	8004cd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	460b      	mov	r3, r1
 80019ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	f003 0207 	and.w	r2, r3, #7
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2200      	movs	r2, #0
 80019fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019fc:	7afb      	ldrb	r3, [r7, #11]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6979      	ldr	r1, [r7, #20]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fb4a 	bl	80050a8 <USB_EPStartXfer>

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2e:	7afb      	ldrb	r3, [r7, #11]
 8001a30:	f003 0207 	and.w	r2, r3, #7
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	3310      	adds	r3, #16
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4413      	add	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2201      	movs	r2, #1
 8001a68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a6a:	7afb      	ldrb	r3, [r7, #11]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6979      	ldr	r1, [r7, #20]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 fb13 	bl	80050a8 <USB_EPStartXfer>

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	7912      	ldrb	r2, [r2, #4]
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e04c      	b.n	8001b44 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0e      	bge.n	8001ad0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	f003 0207 	and.w	r2, r3, #7
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	3310      	adds	r3, #16
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	705a      	strb	r2, [r3, #1]
 8001ace:	e00c      	b.n	8001aea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_PCD_EP_SetStall+0x7e>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e01c      	b.n	8001b44 <HAL_PCD_EP_SetStall+0xb8>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 fe76 	bl	800680a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d108      	bne.n	8001b3a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f004 ff9b 	bl	8006a70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	7912      	ldrb	r2, [r2, #4]
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e040      	b.n	8001bec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	da0e      	bge.n	8001b90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	f003 0207 	and.w	r2, r3, #7
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	3310      	adds	r3, #16
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	705a      	strb	r2, [r3, #1]
 8001b8e:	e00e      	b.n	8001bae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 0207 	and.w	r2, r3, #7
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_PCD_EP_ClrStall+0x82>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e00e      	b.n	8001bec <HAL_PCD_EP_ClrStall+0xa0>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68f9      	ldr	r1, [r7, #12]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 fe64 	bl	80068aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b096      	sub	sp, #88	@ 0x58
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bfc:	e3bb      	b.n	8002376 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001c18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f040 8175 	bne.w	8001f0c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d14e      	bne.n	8001ccc <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c3e:	81fb      	strh	r3, [r7, #14]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	89fb      	ldrh	r3, [r7, #14]
 8001c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3310      	adds	r3, #16
 8001c56:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	441a      	add	r2, r3
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c90:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c92:	2100      	movs	r1, #0
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f006 fb44 	bl	8008322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7b5b      	ldrb	r3, [r3, #13]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8368 	beq.w	8002376 <PCD_EP_ISR_Handler+0x782>
 8001ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 8363 	bne.w	8002376 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7b5b      	ldrb	r3, [r3, #13]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	735a      	strb	r2, [r3, #13]
 8001cca:	e354      	b.n	8002376 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cd2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001cde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d034      	beq.n	8001d54 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3306      	adds	r3, #6
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d14:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d22:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d26:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	f004 fef1 	bl	8006b10 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	823b      	strh	r3, [r7, #16]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	8a3a      	ldrh	r2, [r7, #16]
 8001d44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d48:	b292      	uxth	r2, r2
 8001d4a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f006 fabb 	bl	80082c8 <HAL_PCD_SetupStageCallback>
 8001d52:	e310      	b.n	8002376 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d54:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f280 830c 	bge.w	8002376 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	83fb      	strh	r3, [r7, #30]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	8bfa      	ldrh	r2, [r7, #30]
 8001d74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	3306      	adds	r3, #6
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d019      	beq.n	8001de4 <PCD_EP_ISR_Handler+0x1f0>
 8001db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d015      	beq.n	8001de4 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbe:	6959      	ldr	r1, [r3, #20]
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	f004 fea1 	bl	8006b10 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	441a      	add	r2, r3
 8001dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dda:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f006 fa84 	bl	80082ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001dee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001df2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 82bd 	bne.w	8002376 <PCD_EP_ISR_Handler+0x782>
 8001dfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e00:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001e04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001e08:	f000 82b5 	beq.w	8002376 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4413      	add	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e42:	d91d      	bls.n	8001e80 <PCD_EP_ISR_Handler+0x28c>
 8001e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <PCD_EP_ISR_Handler+0x26a>
 8001e58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	029b      	lsls	r3, r3, #10
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	e026      	b.n	8001ece <PCD_EP_ISR_Handler+0x2da>
 8001e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10a      	bne.n	8001e9e <PCD_EP_ISR_Handler+0x2aa>
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	801a      	strh	r2, [r3, #0]
 8001e9c:	e017      	b.n	8001ece <PCD_EP_ISR_Handler+0x2da>
 8001e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <PCD_EP_ISR_Handler+0x2c4>
 8001eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ede:	827b      	strh	r3, [r7, #18]
 8001ee0:	8a7b      	ldrh	r3, [r7, #18]
 8001ee2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001ee6:	827b      	strh	r3, [r7, #18]
 8001ee8:	8a7b      	ldrh	r3, [r7, #18]
 8001eea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001eee:	827b      	strh	r3, [r7, #18]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	8a7b      	ldrh	r3, [r7, #18]
 8001ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	8013      	strh	r3, [r2, #0]
 8001f0a:	e234      	b.n	8002376 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f20:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f280 80fc 	bge.w	8002122 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f40:	4013      	ands	r3, r2
 8001f42:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001f58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f60:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f78:	7b1b      	ldrb	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d125      	bne.n	8001fca <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	3306      	adds	r3, #6
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fa6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001faa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8092 	beq.w	80020d8 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fba:	6959      	ldr	r1, [r3, #20]
 8001fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fbe:	88da      	ldrh	r2, [r3, #6]
 8001fc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fc4:	f004 fda4 	bl	8006b10 <USB_ReadPMA>
 8001fc8:	e086      	b.n	80020d8 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fcc:	78db      	ldrb	r3, [r3, #3]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d10a      	bne.n	8001fe8 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f9d9 	bl	8002392 <HAL_PCD_EP_DB_Receive>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001fe6:	e077      	b.n	80020d8 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002002:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	441a      	add	r2, r3
 8002014:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800201c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002024:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002028:	b29b      	uxth	r3, r3
 800202a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d024      	beq.n	8002090 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	3302      	adds	r3, #2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002072:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002076:	2b00      	cmp	r3, #0
 8002078:	d02e      	beq.n	80020d8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002080:	6959      	ldr	r1, [r3, #20]
 8002082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002084:	891a      	ldrh	r2, [r3, #8]
 8002086:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800208a:	f004 fd41 	bl	8006b10 <USB_ReadPMA>
 800208e:	e023      	b.n	80020d8 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002098:	b29b      	uxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	3306      	adds	r3, #6
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80020bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d009      	beq.n	80020d8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ca:	6959      	ldr	r1, [r3, #20]
 80020cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ce:	895a      	ldrh	r2, [r3, #10]
 80020d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020d4:	f004 fd1c 	bl	8006b10 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020e0:	441a      	add	r2, r3
 80020e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020ee:	441a      	add	r2, r3
 80020f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <PCD_EP_ISR_Handler+0x514>
 80020fc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d206      	bcs.n	8002116 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f006 f8ec 	bl	80082ec <HAL_PCD_DataOutStageCallback>
 8002114:	e005      	b.n	8002122 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800211c:	4618      	mov	r0, r3
 800211e:	f002 ffc3 	bl	80050a8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002122:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8123 	beq.w	8002376 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002130:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	3310      	adds	r3, #16
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800215a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800215e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	441a      	add	r2, r3
 8002170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800217c:	b29b      	uxth	r3, r3
 800217e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002182:	78db      	ldrb	r3, [r3, #3]
 8002184:	2b01      	cmp	r3, #1
 8002186:	f040 80a2 	bne.w	80022ce <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800218a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002192:	7b1b      	ldrb	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8093 	beq.w	80022c0 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800219a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800219e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d046      	beq.n	8002234 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d126      	bne.n	80021fc <PCD_EP_ISR_Handler+0x608>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	4413      	add	r3, r2
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	011a      	lsls	r2, r3, #4
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	4413      	add	r3, r2
 80021d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021d4:	623b      	str	r3, [r7, #32]
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	e061      	b.n	80022c0 <PCD_EP_ISR_Handler+0x6cc>
 80021fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d15d      	bne.n	80022c0 <PCD_EP_ISR_Handler+0x6cc>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002218:	4413      	add	r3, r2
 800221a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800221c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	011a      	lsls	r2, r3, #4
 8002222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002224:	4413      	add	r3, r2
 8002226:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800222c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222e:	2200      	movs	r2, #0
 8002230:	801a      	strh	r2, [r3, #0]
 8002232:	e045      	b.n	80022c0 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800223a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223c:	785b      	ldrb	r3, [r3, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d126      	bne.n	8002290 <PCD_EP_ISR_Handler+0x69c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	637b      	str	r3, [r7, #52]	@ 0x34
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002250:	b29b      	uxth	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002256:	4413      	add	r3, r2
 8002258:	637b      	str	r3, [r7, #52]	@ 0x34
 800225a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	011a      	lsls	r2, r3, #4
 8002260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002262:	4413      	add	r3, r2
 8002264:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002268:	633b      	str	r3, [r7, #48]	@ 0x30
 800226a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002274:	b29a      	uxth	r2, r3
 8002276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002278:	801a      	strh	r2, [r3, #0]
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002288:	b29a      	uxth	r2, r3
 800228a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228c:	801a      	strh	r2, [r3, #0]
 800228e:	e017      	b.n	80022c0 <PCD_EP_ISR_Handler+0x6cc>
 8002290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d113      	bne.n	80022c0 <PCD_EP_ISR_Handler+0x6cc>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a6:	4413      	add	r3, r2
 80022a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	011a      	lsls	r2, r3, #4
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	4413      	add	r3, r2
 80022b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022bc:	2200      	movs	r2, #0
 80022be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f006 f82b 	bl	8008322 <HAL_PCD_DataInStageCallback>
 80022cc:	e053      	b.n	8002376 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80022ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d146      	bne.n	8002368 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	3302      	adds	r3, #2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002302:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800230e:	429a      	cmp	r2, r3
 8002310:	d907      	bls.n	8002322 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800231a:	1ad2      	subs	r2, r2, r3
 800231c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800231e:	619a      	str	r2, [r3, #24]
 8002320:	e002      	b.n	8002328 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f005 fff3 	bl	8008322 <HAL_PCD_DataInStageCallback>
 800233c:	e01b      	b.n	8002376 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800233e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002346:	441a      	add	r2, r3
 8002348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800234c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002354:	441a      	add	r2, r3
 8002356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002358:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002360:	4618      	mov	r0, r3
 8002362:	f002 fea1 	bl	80050a8 <USB_EPStartXfer>
 8002366:	e006      	b.n	8002376 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002368:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800236c:	461a      	mov	r2, r3
 800236e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f91b 	bl	80025ac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800237e:	b29b      	uxth	r3, r3
 8002380:	b21b      	sxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	f6ff ac3b 	blt.w	8001bfe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3758      	adds	r7, #88	@ 0x58
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b088      	sub	sp, #32
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	4613      	mov	r3, r2
 800239e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d07e      	beq.n	80024a8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	3302      	adds	r3, #2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	8b7b      	ldrh	r3, [r7, #26]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d306      	bcc.n	80023ec <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	8b7b      	ldrh	r3, [r7, #26]
 80023e4:	1ad2      	subs	r2, r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	619a      	str	r2, [r3, #24]
 80023ea:	e002      	b.n	80023f2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d123      	bne.n	8002442 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002414:	833b      	strh	r3, [r7, #24]
 8002416:	8b3b      	ldrh	r3, [r7, #24]
 8002418:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800241c:	833b      	strh	r3, [r7, #24]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	441a      	add	r2, r3
 800242c:	8b3b      	ldrh	r3, [r7, #24]
 800242e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800243a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800243e:	b29b      	uxth	r3, r3
 8002440:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01f      	beq.n	800248c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002466:	82fb      	strh	r3, [r7, #22]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	441a      	add	r2, r3
 8002476:	8afb      	ldrh	r3, [r7, #22]
 8002478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800247c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002484:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002488:	b29b      	uxth	r3, r3
 800248a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800248c:	8b7b      	ldrh	r3, [r7, #26]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8087 	beq.w	80025a2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6959      	ldr	r1, [r3, #20]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	891a      	ldrh	r2, [r3, #8]
 80024a0:	8b7b      	ldrh	r3, [r7, #26]
 80024a2:	f004 fb35 	bl	8006b10 <USB_ReadPMA>
 80024a6:	e07c      	b.n	80025a2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	3306      	adds	r3, #6
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	8b7b      	ldrh	r3, [r7, #26]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d306      	bcc.n	80024ea <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	8b7b      	ldrh	r3, [r7, #26]
 80024e2:	1ad2      	subs	r2, r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	619a      	str	r2, [r3, #24]
 80024e8:	e002      	b.n	80024f0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d123      	bne.n	8002540 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800250e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002512:	83fb      	strh	r3, [r7, #30]
 8002514:	8bfb      	ldrh	r3, [r7, #30]
 8002516:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800251a:	83fb      	strh	r3, [r7, #30]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	441a      	add	r2, r3
 800252a:	8bfb      	ldrh	r3, [r7, #30]
 800252c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800253c:	b29b      	uxth	r3, r3
 800253e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d11f      	bne.n	800258a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002564:	83bb      	strh	r3, [r7, #28]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	441a      	add	r2, r3
 8002574:	8bbb      	ldrh	r3, [r7, #28]
 8002576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800257a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800257e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002582:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002586:	b29b      	uxth	r3, r3
 8002588:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800258a:	8b7b      	ldrh	r3, [r7, #26]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6959      	ldr	r1, [r3, #20]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	895a      	ldrh	r2, [r3, #10]
 800259c:	8b7b      	ldrh	r3, [r7, #26]
 800259e:	f004 fab7 	bl	8006b10 <USB_ReadPMA>
    }
  }

  return count;
 80025a2:	8b7b      	ldrh	r3, [r7, #26]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b0a4      	sub	sp, #144	@ 0x90
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	4613      	mov	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 81dd 	beq.w	8002980 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	3302      	adds	r3, #2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d907      	bls.n	800260e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002606:	1ad2      	subs	r2, r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	619a      	str	r2, [r3, #24]
 800260c:	e002      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f040 80b9 	bne.w	8002790 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d126      	bne.n	8002674 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800263a:	4413      	add	r3, r2
 800263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	011a      	lsls	r2, r3, #4
 8002644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002646:	4413      	add	r3, r2
 8002648:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002658:	b29a      	uxth	r2, r3
 800265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800266c:	b29a      	uxth	r2, r3
 800266e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002670:	801a      	strh	r2, [r3, #0]
 8002672:	e01a      	b.n	80026aa <HAL_PCD_EP_DB_Transmit+0xfe>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d116      	bne.n	80026aa <HAL_PCD_EP_DB_Transmit+0xfe>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	637b      	str	r3, [r7, #52]	@ 0x34
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002690:	4413      	add	r3, r2
 8002692:	637b      	str	r3, [r7, #52]	@ 0x34
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	011a      	lsls	r2, r3, #4
 800269a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269c:	4413      	add	r3, r2
 800269e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80026a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a6:	2200      	movs	r2, #0
 80026a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d126      	bne.n	8002706 <HAL_PCD_EP_DB_Transmit+0x15a>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	011a      	lsls	r2, r3, #4
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	4413      	add	r3, r2
 80026da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fe:	b29a      	uxth	r2, r3
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e017      	b.n	8002736 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d113      	bne.n	8002736 <HAL_PCD_EP_DB_Transmit+0x18a>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	4413      	add	r3, r2
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	011a      	lsls	r2, r3, #4
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	4413      	add	r3, r2
 800272a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	2200      	movs	r2, #0
 8002734:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4619      	mov	r1, r3
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f005 fdf0 	bl	8008322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 82fc 	beq.w	8002d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002768:	82fb      	strh	r3, [r7, #22]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	441a      	add	r2, r3
 8002778:	8afb      	ldrh	r3, [r7, #22]
 800277a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800277e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002782:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278a:	b29b      	uxth	r3, r3
 800278c:	8013      	strh	r3, [r2, #0]
 800278e:	e2da      	b.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d021      	beq.n	80027de <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	441a      	add	r2, r3
 80027c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80027ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027da:	b29b      	uxth	r3, r3
 80027dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	f040 82ae 	bne.w	8002d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027f2:	441a      	add	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002800:	441a      	add	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	429a      	cmp	r2, r3
 8002810:	d30b      	bcc.n	800282a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6a1a      	ldr	r2, [r3, #32]
 800281e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002822:	1ad2      	subs	r2, r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	621a      	str	r2, [r3, #32]
 8002828:	e017      	b.n	800285a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d108      	bne.n	8002844 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002832:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002836:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002842:	e00a      	b.n	800285a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2200      	movs	r2, #0
 8002858:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d165      	bne.n	800292e <HAL_PCD_EP_DB_Transmit+0x382>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002870:	b29b      	uxth	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002876:	4413      	add	r3, r2
 8002878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	011a      	lsls	r2, r3, #4
 8002880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002882:	4413      	add	r3, r2
 8002884:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002888:	63bb      	str	r3, [r7, #56]	@ 0x38
 800288a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002894:	b29a      	uxth	r2, r3
 8002896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800289e:	2b3e      	cmp	r3, #62	@ 0x3e
 80028a0:	d91d      	bls.n	80028de <HAL_PCD_EP_DB_Transmit+0x332>
 80028a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_PCD_EP_DB_Transmit+0x310>
 80028b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028b8:	3b01      	subs	r3, #1
 80028ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	029b      	lsls	r3, r3, #10
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	4313      	orrs	r3, r2
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028da:	801a      	strh	r2, [r3, #0]
 80028dc:	e044      	b.n	8002968 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <HAL_PCD_EP_DB_Transmit+0x350>
 80028e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	e035      	b.n	8002968 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002904:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002912:	3301      	adds	r3, #1
 8002914:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29a      	uxth	r2, r3
 800291c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800291e:	b29b      	uxth	r3, r3
 8002920:	029b      	lsls	r3, r3, #10
 8002922:	b29b      	uxth	r3, r3
 8002924:	4313      	orrs	r3, r2
 8002926:	b29a      	uxth	r2, r3
 8002928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	e01c      	b.n	8002968 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d118      	bne.n	8002968 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	647b      	str	r3, [r7, #68]	@ 0x44
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800294a:	4413      	add	r3, r2
 800294c:	647b      	str	r3, [r7, #68]	@ 0x44
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	011a      	lsls	r2, r3, #4
 8002954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002956:	4413      	add	r3, r2
 8002958:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800295c:	643b      	str	r3, [r7, #64]	@ 0x40
 800295e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002962:	b29a      	uxth	r2, r3
 8002964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002966:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6959      	ldr	r1, [r3, #20]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	891a      	ldrh	r2, [r3, #8]
 8002974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002978:	b29b      	uxth	r3, r3
 800297a:	f004 f884 	bl	8006a86 <USB_WritePMA>
 800297e:	e1e2      	b.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002988:	b29b      	uxth	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	3306      	adds	r3, #6
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d307      	bcc.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029c0:	1ad2      	subs	r2, r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	619a      	str	r2, [r3, #24]
 80029c6:	e002      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 80c0 	bne.w	8002b58 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d126      	bne.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x482>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029f4:	4413      	add	r3, r2
 80029f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	011a      	lsls	r2, r3, #4
 80029fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a00:	4413      	add	r3, r2
 8002a02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a16:	801a      	strh	r2, [r3, #0]
 8002a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a2a:	801a      	strh	r2, [r3, #0]
 8002a2c:	e01a      	b.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	785b      	ldrb	r3, [r3, #1]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d116      	bne.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a4a:	4413      	add	r3, r2
 8002a4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	011a      	lsls	r2, r3, #4
 8002a54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a56:	4413      	add	r3, r2
 8002a58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a60:	2200      	movs	r2, #0
 8002a62:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d12b      	bne.n	8002aca <HAL_PCD_EP_DB_Transmit+0x51e>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a86:	4413      	add	r3, r2
 8002a88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	011a      	lsls	r2, r3, #4
 8002a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a92:	4413      	add	r3, r2
 8002a94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aae:	801a      	strh	r2, [r3, #0]
 8002ab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ac6:	801a      	strh	r2, [r3, #0]
 8002ac8:	e017      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x54e>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d113      	bne.n	8002afa <HAL_PCD_EP_DB_Transmit+0x54e>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ae0:	4413      	add	r3, r2
 8002ae2:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	011a      	lsls	r2, r3, #4
 8002aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aec:	4413      	add	r3, r2
 8002aee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002af2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002af4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002af6:	2200      	movs	r2, #0
 8002af8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4619      	mov	r1, r3
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f005 fc0e 	bl	8008322 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f040 811a 	bne.w	8002d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	441a      	add	r2, r3
 8002b3e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	8013      	strh	r3, [r2, #0]
 8002b56:	e0f6      	b.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d121      	bne.n	8002ba6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	441a      	add	r2, r3
 8002b8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	f040 80ca 	bne.w	8002d46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bba:	441a      	add	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bc8:	441a      	add	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	6a1a      	ldr	r2, [r3, #32]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d30b      	bcc.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6a1a      	ldr	r2, [r3, #32]
 8002be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bea:	1ad2      	subs	r2, r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	621a      	str	r2, [r3, #32]
 8002bf0:	e017      	b.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002bfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002c0a:	e00a      	b.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d165      	bne.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x750>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c44:	4413      	add	r3, r2
 8002c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	011a      	lsls	r2, r3, #4
 8002c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c50:	4413      	add	r3, r2
 8002c52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c6e:	d91d      	bls.n	8002cac <HAL_PCD_EP_DB_Transmit+0x700>
 8002c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002c84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c86:	3b01      	subs	r3, #1
 8002c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	029b      	lsls	r3, r3, #10
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ca8:	801a      	strh	r2, [r3, #0]
 8002caa:	e041      	b.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x784>
 8002cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <HAL_PCD_EP_DB_Transmit+0x71e>
 8002cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cc6:	801a      	strh	r2, [r3, #0]
 8002cc8:	e032      	b.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x784>
 8002cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_PCD_EP_DB_Transmit+0x738>
 8002cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ce4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	029b      	lsls	r3, r3, #10
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	e019      	b.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x784>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	785b      	ldrb	r3, [r3, #1]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d115      	bne.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x784>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d12:	4413      	add	r3, r2
 8002d14:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	011a      	lsls	r2, r3, #4
 8002d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1e:	4413      	add	r3, r2
 8002d20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d24:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d2e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6959      	ldr	r1, [r3, #20]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	895a      	ldrh	r2, [r3, #10]
 8002d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f003 fea0 	bl	8006a86 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d60:	82bb      	strh	r3, [r7, #20]
 8002d62:	8abb      	ldrh	r3, [r7, #20]
 8002d64:	f083 0310 	eor.w	r3, r3, #16
 8002d68:	82bb      	strh	r3, [r7, #20]
 8002d6a:	8abb      	ldrh	r3, [r7, #20]
 8002d6c:	f083 0320 	eor.w	r3, r3, #32
 8002d70:	82bb      	strh	r3, [r7, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	441a      	add	r2, r3
 8002d80:	8abb      	ldrh	r3, [r7, #20]
 8002d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3790      	adds	r7, #144	@ 0x90
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	817b      	strh	r3, [r7, #10]
 8002dae:	4613      	mov	r3, r2
 8002db0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002db2:	897b      	ldrh	r3, [r7, #10]
 8002db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dbe:	897b      	ldrh	r3, [r7, #10]
 8002dc0:	f003 0207 	and.w	r2, r3, #7
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	3310      	adds	r3, #16
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e009      	b.n	8002dea <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dd6:	897a      	ldrh	r2, [r7, #10]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002dea:	893b      	ldrh	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2200      	movs	r2, #0
 8002df4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	80da      	strh	r2, [r3, #6]
 8002dfe:	e00b      	b.n	8002e18 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2201      	movs	r2, #1
 8002e04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e272      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8087 	beq.w	8002f52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e44:	4b92      	ldr	r3, [pc, #584]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d00c      	beq.n	8002e6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e50:	4b8f      	ldr	r3, [pc, #572]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d112      	bne.n	8002e82 <HAL_RCC_OscConfig+0x5e>
 8002e5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e68:	d10b      	bne.n	8002e82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6a:	4b89      	ldr	r3, [pc, #548]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d06c      	beq.n	8002f50 <HAL_RCC_OscConfig+0x12c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d168      	bne.n	8002f50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e24c      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x76>
 8002e8c:	4b80      	ldr	r3, [pc, #512]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a7f      	ldr	r2, [pc, #508]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	e02e      	b.n	8002ef8 <HAL_RCC_OscConfig+0xd4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x98>
 8002ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a7a      	ldr	r2, [pc, #488]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b78      	ldr	r3, [pc, #480]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a77      	ldr	r2, [pc, #476]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e01d      	b.n	8002ef8 <HAL_RCC_OscConfig+0xd4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xbc>
 8002ec6:	4b72      	ldr	r3, [pc, #456]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a71      	ldr	r2, [pc, #452]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0xd4>
 8002ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a6a      	ldr	r2, [pc, #424]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b68      	ldr	r3, [pc, #416]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a67      	ldr	r2, [pc, #412]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fd fea4 	bl	8000c4c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fd fea0 	bl	8000c4c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	@ 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e200      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0xe4>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fd fe90 	bl	8000c4c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fd fe8c 	bl	8000c4c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	@ 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e1ec      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	4b53      	ldr	r3, [pc, #332]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x10c>
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d063      	beq.n	8003026 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f6a:	4b49      	ldr	r3, [pc, #292]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d11c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x18c>
 8002f76:	4b46      	ldr	r3, [pc, #280]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d116      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	4b43      	ldr	r3, [pc, #268]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_RCC_OscConfig+0x176>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e1c0      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4939      	ldr	r1, [pc, #228]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	e03a      	b.n	8003026 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb8:	4b36      	ldr	r3, [pc, #216]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fd fe45 	bl	8000c4c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7fd fe41 	bl	8000c4c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e1a1      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4927      	ldr	r1, [pc, #156]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]
 8002ff8:	e015      	b.n	8003026 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	4b26      	ldr	r3, [pc, #152]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fd fe24 	bl	8000c4c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003008:	f7fd fe20 	bl	8000c4c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e180      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d03a      	beq.n	80030a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d019      	beq.n	800306e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303a:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <HAL_RCC_OscConfig+0x274>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7fd fe04 	bl	8000c4c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003048:	f7fd fe00 	bl	8000c4c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e160      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	4b0d      	ldr	r3, [pc, #52]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003066:	2001      	movs	r0, #1
 8003068:	f000 face 	bl	8003608 <RCC_Delay>
 800306c:	e01c      	b.n	80030a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306e:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <HAL_RCC_OscConfig+0x274>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003074:	f7fd fdea 	bl	8000c4c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307a:	e00f      	b.n	800309c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fd fde6 	bl	8000c4c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d908      	bls.n	800309c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e146      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	42420000 	.word	0x42420000
 8003098:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	4b92      	ldr	r3, [pc, #584]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e9      	bne.n	800307c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80a6 	beq.w	8003202 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ba:	4b8b      	ldr	r3, [pc, #556]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	4b88      	ldr	r3, [pc, #544]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4a87      	ldr	r2, [pc, #540]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	61d3      	str	r3, [r2, #28]
 80030d2:	4b85      	ldr	r3, [pc, #532]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030de:	2301      	movs	r3, #1
 80030e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	4b82      	ldr	r3, [pc, #520]	@ (80032ec <HAL_RCC_OscConfig+0x4c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d118      	bne.n	8003120 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ee:	4b7f      	ldr	r3, [pc, #508]	@ (80032ec <HAL_RCC_OscConfig+0x4c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7e      	ldr	r2, [pc, #504]	@ (80032ec <HAL_RCC_OscConfig+0x4c8>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fa:	f7fd fda7 	bl	8000c4c <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003102:	f7fd fda3 	bl	8000c4c <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b64      	cmp	r3, #100	@ 0x64
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e103      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	4b75      	ldr	r3, [pc, #468]	@ (80032ec <HAL_RCC_OscConfig+0x4c8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x312>
 8003128:	4b6f      	ldr	r3, [pc, #444]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4a6e      	ldr	r2, [pc, #440]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6213      	str	r3, [r2, #32]
 8003134:	e02d      	b.n	8003192 <HAL_RCC_OscConfig+0x36e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x334>
 800313e:	4b6a      	ldr	r3, [pc, #424]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4a69      	ldr	r2, [pc, #420]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6213      	str	r3, [r2, #32]
 800314a:	4b67      	ldr	r3, [pc, #412]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a66      	ldr	r2, [pc, #408]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f023 0304 	bic.w	r3, r3, #4
 8003154:	6213      	str	r3, [r2, #32]
 8003156:	e01c      	b.n	8003192 <HAL_RCC_OscConfig+0x36e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b05      	cmp	r3, #5
 800315e:	d10c      	bne.n	800317a <HAL_RCC_OscConfig+0x356>
 8003160:	4b61      	ldr	r3, [pc, #388]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4a60      	ldr	r2, [pc, #384]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	f043 0304 	orr.w	r3, r3, #4
 800316a:	6213      	str	r3, [r2, #32]
 800316c:	4b5e      	ldr	r3, [pc, #376]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4a5d      	ldr	r2, [pc, #372]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6213      	str	r3, [r2, #32]
 8003178:	e00b      	b.n	8003192 <HAL_RCC_OscConfig+0x36e>
 800317a:	4b5b      	ldr	r3, [pc, #364]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a5a      	ldr	r2, [pc, #360]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6213      	str	r3, [r2, #32]
 8003186:	4b58      	ldr	r3, [pc, #352]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4a57      	ldr	r2, [pc, #348]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d015      	beq.n	80031c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fd fd57 	bl	8000c4c <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fd fd53 	bl	8000c4c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0b1      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	4b4b      	ldr	r3, [pc, #300]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ee      	beq.n	80031a2 <HAL_RCC_OscConfig+0x37e>
 80031c4:	e014      	b.n	80031f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c6:	f7fd fd41 	bl	8000c4c <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fd fd3d 	bl	8000c4c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e09b      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e4:	4b40      	ldr	r3, [pc, #256]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ee      	bne.n	80031ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d105      	bne.n	8003202 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4b3c      	ldr	r3, [pc, #240]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a3b      	ldr	r2, [pc, #236]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003200:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8087 	beq.w	800331a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800320c:	4b36      	ldr	r3, [pc, #216]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d061      	beq.n	80032dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d146      	bne.n	80032ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	4b33      	ldr	r3, [pc, #204]	@ (80032f0 <HAL_RCC_OscConfig+0x4cc>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fd fd11 	bl	8000c4c <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7fd fd0d 	bl	8000c4c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e06d      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003240:	4b29      	ldr	r3, [pc, #164]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003254:	d108      	bne.n	8003268 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003256:	4b24      	ldr	r3, [pc, #144]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	4921      	ldr	r1, [pc, #132]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003268:	4b1f      	ldr	r3, [pc, #124]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a19      	ldr	r1, [r3, #32]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	430b      	orrs	r3, r1
 800327a:	491b      	ldr	r1, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003280:	4b1b      	ldr	r3, [pc, #108]	@ (80032f0 <HAL_RCC_OscConfig+0x4cc>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7fd fce1 	bl	8000c4c <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328e:	f7fd fcdd 	bl	8000c4c <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e03d      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a0:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x46a>
 80032ac:	e035      	b.n	800331a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <HAL_RCC_OscConfig+0x4cc>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fd fcca 	bl	8000c4c <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fd fcc6 	bl	8000c4c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e026      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x498>
 80032da:	e01e      	b.n	800331a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e019      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
 80032f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <HAL_RCC_OscConfig+0x500>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	429a      	cmp	r2, r3
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0d0      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b6a      	ldr	r3, [pc, #424]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d910      	bls.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b67      	ldr	r3, [pc, #412]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	4965      	ldr	r1, [pc, #404]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b63      	ldr	r3, [pc, #396]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b8      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003384:	4b59      	ldr	r3, [pc, #356]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a58      	ldr	r2, [pc, #352]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800338e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800339c:	4b53      	ldr	r3, [pc, #332]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a52      	ldr	r2, [pc, #328]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80033a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b50      	ldr	r3, [pc, #320]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	494d      	ldr	r1, [pc, #308]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d040      	beq.n	8003448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b47      	ldr	r3, [pc, #284]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d115      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07f      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b41      	ldr	r3, [pc, #260]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e073      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	4b3d      	ldr	r3, [pc, #244]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e06b      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b39      	ldr	r3, [pc, #228]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4936      	ldr	r1, [pc, #216]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003418:	f7fd fc18 	bl	8000c4c <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fd fc14 	bl	8000c4c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e053      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b27      	ldr	r3, [pc, #156]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d210      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b24      	ldr	r3, [pc, #144]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 0207 	bic.w	r2, r3, #7
 800345e:	4922      	ldr	r1, [pc, #136]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b20      	ldr	r3, [pc, #128]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e032      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003484:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4916      	ldr	r1, [pc, #88]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034a2:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	490e      	ldr	r1, [pc, #56]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034b6:	f000 f821 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 80034ba:	4602      	mov	r2, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	490a      	ldr	r1, [pc, #40]	@ (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	5ccb      	ldrb	r3, [r1, r3]
 80034ca:	fa22 f303 	lsr.w	r3, r2, r3
 80034ce:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <HAL_RCC_ClockConfig+0x1cc>)
 80034d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034d2:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_RCC_ClockConfig+0x1d0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd fb76 	bl	8000bc8 <HAL_InitTick>

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40022000 	.word	0x40022000
 80034ec:	40021000 	.word	0x40021000
 80034f0:	0800883c 	.word	0x0800883c
 80034f4:	20000000 	.word	0x20000000
 80034f8:	20000004 	.word	0x20000004

080034fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003516:	4b1e      	ldr	r3, [pc, #120]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x94>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b04      	cmp	r3, #4
 8003524:	d002      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x30>
 8003526:	2b08      	cmp	r3, #8
 8003528:	d003      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x36>
 800352a:	e027      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x98>)
 800352e:	613b      	str	r3, [r7, #16]
      break;
 8003530:	e027      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	0c9b      	lsrs	r3, r3, #18
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	4a17      	ldr	r2, [pc, #92]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x9c>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800354a:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x94>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	0c5b      	lsrs	r3, r3, #17
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	4a11      	ldr	r2, [pc, #68]	@ (800359c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a0d      	ldr	r2, [pc, #52]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x98>)
 800355e:	fb03 f202 	mul.w	r2, r3, r2
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e004      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a0c      	ldr	r2, [pc, #48]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	613b      	str	r3, [r7, #16]
      break;
 800357a:	e002      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800357c:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x98>)
 800357e:	613b      	str	r3, [r7, #16]
      break;
 8003580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003582:	693b      	ldr	r3, [r7, #16]
}
 8003584:	4618      	mov	r0, r3
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	007a1200 	.word	0x007a1200
 8003598:	08008854 	.word	0x08008854
 800359c:	08008864 	.word	0x08008864
 80035a0:	003d0900 	.word	0x003d0900

080035a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a8:	4b02      	ldr	r3, [pc, #8]	@ (80035b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	20000000 	.word	0x20000000

080035b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035bc:	f7ff fff2 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	4903      	ldr	r1, [pc, #12]	@ (80035dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ce:	5ccb      	ldrb	r3, [r1, r3]
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	0800884c 	.word	0x0800884c

080035e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035e4:	f7ff ffde 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0adb      	lsrs	r3, r3, #11
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4903      	ldr	r1, [pc, #12]	@ (8003604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	0800884c 	.word	0x0800884c

08003608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003610:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <RCC_Delay+0x34>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <RCC_Delay+0x38>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0a5b      	lsrs	r3, r3, #9
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003624:	bf00      	nop
  }
  while (Delay --);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1e5a      	subs	r2, r3, #1
 800362a:	60fa      	str	r2, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f9      	bne.n	8003624 <RCC_Delay+0x1c>
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	20000000 	.word	0x20000000
 8003640:	10624dd3 	.word	0x10624dd3

08003644 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d07d      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003660:	2300      	movs	r3, #0
 8003662:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003664:	4b4f      	ldr	r3, [pc, #316]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10d      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003670:	4b4c      	ldr	r3, [pc, #304]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	4a4b      	ldr	r2, [pc, #300]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367a:	61d3      	str	r3, [r2, #28]
 800367c:	4b49      	ldr	r3, [pc, #292]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	4b46      	ldr	r3, [pc, #280]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d118      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003698:	4b43      	ldr	r3, [pc, #268]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a42      	ldr	r2, [pc, #264]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a4:	f7fd fad2 	bl	8000c4c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036aa:	e008      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ac:	f7fd face 	bl	8000c4c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	@ 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e06d      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036be:	4b3a      	ldr	r3, [pc, #232]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ca:	4b36      	ldr	r3, [pc, #216]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d02e      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d027      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036e8:	4b2e      	ldr	r3, [pc, #184]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036f2:	4b2e      	ldr	r3, [pc, #184]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036f8:	4b2c      	ldr	r3, [pc, #176]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036fe:	4a29      	ldr	r2, [pc, #164]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d014      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7fd fa9d 	bl	8000c4c <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003714:	e00a      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fd fa99 	bl	8000c4c <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e036      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ee      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003738:	4b1a      	ldr	r3, [pc, #104]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4917      	ldr	r1, [pc, #92]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	4313      	orrs	r3, r2
 8003748:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800374a:	7dfb      	ldrb	r3, [r7, #23]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d105      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003750:	4b14      	ldr	r3, [pc, #80]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	4a13      	ldr	r2, [pc, #76]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003768:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	490b      	ldr	r1, [pc, #44]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	4904      	ldr	r1, [pc, #16]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40007000 	.word	0x40007000
 80037ac:	42420440 	.word	0x42420440

080037b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e042      	b.n	8003848 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd f966 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	@ 0x24
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fdb7 	bl	8004368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	@ 0x28
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b20      	cmp	r3, #32
 800386e:	d175      	bne.n	800395c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_UART_Transmit+0x2c>
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e06e      	b.n	800395e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2221      	movs	r2, #33	@ 0x21
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388e:	f7fd f9dd 	bl	8000c4c <HAL_GetTick>
 8003892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a8:	d108      	bne.n	80038bc <HAL_UART_Transmit+0x6c>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	e003      	b.n	80038c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038c4:	e02e      	b.n	8003924 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	@ 0x80
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fb1c 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e03a      	b.n	800395e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	3302      	adds	r3, #2
 8003902:	61bb      	str	r3, [r7, #24]
 8003904:	e007      	b.n	8003916 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1cb      	bne.n	80038c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2200      	movs	r2, #0
 8003936:	2140      	movs	r1, #64	@ 0x40
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fae8 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e006      	b.n	800395e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	4613      	mov	r3, r2
 8003972:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b20      	cmp	r3, #32
 800397e:	d112      	bne.n	80039a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Receive_IT+0x26>
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e00b      	b.n	80039a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	461a      	mov	r2, r3
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fb0f 	bl	8003fc0 <UART_Start_Receive_IT>
 80039a2:	4603      	mov	r3, r0
 80039a4:	e000      	b.n	80039a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
  }
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b0ba      	sub	sp, #232	@ 0xe8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10f      	bne.n	8003a16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_UART_IRQHandler+0x66>
 8003a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fbec 	bl	80041ec <UART_Receive_IT>
      return;
 8003a14:	e25b      	b.n	8003ece <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80de 	beq.w	8003bdc <HAL_UART_IRQHandler+0x22c>
 8003a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80d1 	beq.w	8003bdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00b      	beq.n	8003a5e <HAL_UART_IRQHandler+0xae>
 8003a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	f043 0201 	orr.w	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <HAL_UART_IRQHandler+0xd2>
 8003a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	f043 0202 	orr.w	r2, r3, #2
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xf6>
 8003a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	f043 0204 	orr.w	r2, r3, #4
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d011      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x126>
 8003ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d105      	bne.n	8003aca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	f043 0208 	orr.w	r2, r3, #8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 81f2 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_UART_IRQHandler+0x14e>
 8003aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fb77 	bl	80041ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <HAL_UART_IRQHandler+0x17a>
 8003b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d04f      	beq.n	8003bca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa81 	bl	8004032 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d041      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3314      	adds	r3, #20
 8003b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1d9      	bne.n	8003b3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d013      	beq.n	8003bba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b96:	4a7e      	ldr	r2, [pc, #504]	@ (8003d90 <HAL_UART_IRQHandler+0x3e0>)
 8003b98:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd f9ca 	bl	8000f38 <HAL_DMA_Abort_IT>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	e00e      	b.n	8003bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f993 	bl	8003ee6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	e00a      	b.n	8003bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f98f 	bl	8003ee6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	e006      	b.n	8003bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f98b 	bl	8003ee6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bd6:	e175      	b.n	8003ec4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	bf00      	nop
    return;
 8003bda:	e173      	b.n	8003ec4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	f040 814f 	bne.w	8003e84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8148 	beq.w	8003e84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8141 	beq.w	8003e84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80b6 	beq.w	8003d94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8145 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c46:	429a      	cmp	r2, r3
 8003c48:	f080 813e 	bcs.w	8003ec8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	f000 8088 	beq.w	8003d70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	330c      	adds	r3, #12
 8003c66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c8c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1d9      	bne.n	8003c60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cd0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e1      	bne.n	8003cac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3314      	adds	r3, #20
 8003cee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cf2:	e853 3f00 	ldrex	r3, [r3]
 8003cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e3      	bne.n	8003ce8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d40:	f023 0310 	bic.w	r3, r3, #16
 8003d44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d54:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e3      	bne.n	8003d2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd f8a9 	bl	8000ec2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8b6 	bl	8003ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d8c:	e09c      	b.n	8003ec8 <HAL_UART_IRQHandler+0x518>
 8003d8e:	bf00      	nop
 8003d90:	080040f7 	.word	0x080040f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 808e 	beq.w	8003ecc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8089 	beq.w	8003ecc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003dde:	647a      	str	r2, [r7, #68]	@ 0x44
 8003de0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003de4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e3      	bne.n	8003dba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	623b      	str	r3, [r7, #32]
   return(result);
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e16:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e3      	bne.n	8003df2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0310 	bic.w	r3, r3, #16
 8003e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e5c:	61fa      	str	r2, [r7, #28]
 8003e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	69b9      	ldr	r1, [r7, #24]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	617b      	str	r3, [r7, #20]
   return(result);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e3      	bne.n	8003e38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f83b 	bl	8003ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e82:	e023      	b.n	8003ecc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x4f4>
 8003e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f93e 	bl	800411e <UART_Transmit_IT>
    return;
 8003ea2:	e014      	b.n	8003ece <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <HAL_UART_IRQHandler+0x51e>
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f97d 	bl	80041bc <UART_EndTransmit_IT>
    return;
 8003ec2:	e004      	b.n	8003ece <HAL_UART_IRQHandler+0x51e>
    return;
 8003ec4:	bf00      	nop
 8003ec6:	e002      	b.n	8003ece <HAL_UART_IRQHandler+0x51e>
      return;
 8003ec8:	bf00      	nop
 8003eca:	e000      	b.n	8003ece <HAL_UART_IRQHandler+0x51e>
      return;
 8003ecc:	bf00      	nop
  }
}
 8003ece:	37e8      	adds	r7, #232	@ 0xe8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	e03b      	b.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d037      	beq.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f28:	f7fc fe90 	bl	8000c4c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	6a3a      	ldr	r2, [r7, #32]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d302      	bcc.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e03a      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d023      	beq.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b80      	cmp	r3, #128	@ 0x80
 8003f54:	d020      	beq.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b40      	cmp	r3, #64	@ 0x40
 8003f5a:	d01d      	beq.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d116      	bne.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f856 	bl	8004032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2208      	movs	r2, #8
 8003f8a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e00f      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d0b4      	beq.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	88fa      	ldrh	r2, [r7, #6]
 8003fde:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2222      	movs	r2, #34	@ 0x22
 8003fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004004:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0220 	orr.w	r2, r2, #32
 8004024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004032:	b480      	push	{r7}
 8004034:	b095      	sub	sp, #84	@ 0x54
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800404a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800405a:	643a      	str	r2, [r7, #64]	@ 0x40
 800405c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004060:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e5      	bne.n	800403a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3314      	adds	r3, #20
 8004074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	61fb      	str	r3, [r7, #28]
   return(result);
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3314      	adds	r3, #20
 800408c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800408e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e5      	bne.n	800406e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d119      	bne.n	80040de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0310 	bic.w	r3, r3, #16
 80040c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040ca:	61ba      	str	r2, [r7, #24]
 80040cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040ec:	bf00      	nop
 80040ee:	3754      	adds	r7, #84	@ 0x54
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff fee8 	bl	8003ee6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b21      	cmp	r3, #33	@ 0x21
 8004130:	d13e      	bne.n	80041b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800413a:	d114      	bne.n	8004166 <UART_Transmit_IT+0x48>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d110      	bne.n	8004166 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004158:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	1c9a      	adds	r2, r3, #2
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	621a      	str	r2, [r3, #32]
 8004164:	e008      	b.n	8004178 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	1c59      	adds	r1, r3, #1
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6211      	str	r1, [r2, #32]
 8004170:	781a      	ldrb	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29b      	uxth	r3, r3
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4619      	mov	r1, r3
 8004186:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10f      	bne.n	80041ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800419a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff fe79 	bl	8003ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	@ 0x30
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b22      	cmp	r3, #34	@ 0x22
 80041fe:	f040 80ae 	bne.w	800435e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800420a:	d117      	bne.n	800423c <UART_Receive_IT+0x50>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d113      	bne.n	800423c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422a:	b29a      	uxth	r2, r3
 800422c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	1c9a      	adds	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	629a      	str	r2, [r3, #40]	@ 0x28
 800423a:	e026      	b.n	800428a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800424e:	d007      	beq.n	8004260 <UART_Receive_IT+0x74>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <UART_Receive_IT+0x82>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	e008      	b.n	8004280 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800427a:	b2da      	uxtb	r2, r3
 800427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29b      	uxth	r3, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4619      	mov	r1, r3
 8004298:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800429a:	2b00      	cmp	r3, #0
 800429c:	d15d      	bne.n	800435a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0220 	bic.w	r2, r2, #32
 80042ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d135      	bne.n	8004350 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	613b      	str	r3, [r7, #16]
   return(result);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f023 0310 	bic.w	r3, r3, #16
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430a:	623a      	str	r2, [r7, #32]
 800430c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	69f9      	ldr	r1, [r7, #28]
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	61bb      	str	r3, [r7, #24]
   return(result);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e5      	bne.n	80042ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b10      	cmp	r3, #16
 800432a:	d10a      	bne.n	8004342 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fdd5 	bl	8003ef8 <HAL_UARTEx_RxEventCallback>
 800434e:	e002      	b.n	8004356 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fc f8fd 	bl	8000550 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e002      	b.n	8004360 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3730      	adds	r7, #48	@ 0x30
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043a2:	f023 030c 	bic.w	r3, r3, #12
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	430b      	orrs	r3, r1
 80043ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a2c      	ldr	r2, [pc, #176]	@ (800447c <UART_SetConfig+0x114>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d103      	bne.n	80043d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043d0:	f7ff f906 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	e002      	b.n	80043de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043d8:	f7ff f8ee 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 80043dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009a      	lsls	r2, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	4a22      	ldr	r2, [pc, #136]	@ (8004480 <UART_SetConfig+0x118>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	0119      	lsls	r1, r3, #4
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009a      	lsls	r2, r3, #2
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	fbb2 f2f3 	udiv	r2, r2, r3
 8004414:	4b1a      	ldr	r3, [pc, #104]	@ (8004480 <UART_SetConfig+0x118>)
 8004416:	fba3 0302 	umull	r0, r3, r3, r2
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	2064      	movs	r0, #100	@ 0x64
 800441e:	fb00 f303 	mul.w	r3, r0, r3
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	3332      	adds	r3, #50	@ 0x32
 8004428:	4a15      	ldr	r2, [pc, #84]	@ (8004480 <UART_SetConfig+0x118>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004434:	4419      	add	r1, r3
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009a      	lsls	r2, r3, #2
 8004440:	441a      	add	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	fbb2 f2f3 	udiv	r2, r2, r3
 800444c:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <UART_SetConfig+0x118>)
 800444e:	fba3 0302 	umull	r0, r3, r3, r2
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2064      	movs	r0, #100	@ 0x64
 8004456:	fb00 f303 	mul.w	r3, r0, r3
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	3332      	adds	r3, #50	@ 0x32
 8004460:	4a07      	ldr	r2, [pc, #28]	@ (8004480 <UART_SetConfig+0x118>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	f003 020f 	and.w	r2, r3, #15
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	440a      	add	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40013800 	.word	0x40013800
 8004480:	51eb851f 	.word	0x51eb851f

08004484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	4638      	mov	r0, r7
 800448e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr

0800449e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044ae:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80044b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr

080044ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044d2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80044d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	4013      	ands	r3, r2
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	4638      	mov	r0, r7
 8004520:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004550:	b480      	push	{r7}
 8004552:	b09d      	sub	sp, #116	@ 0x74
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004576:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	78db      	ldrb	r3, [r3, #3]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d81f      	bhi.n	80045c2 <USB_ActivateEndpoint+0x72>
 8004582:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <USB_ActivateEndpoint+0x38>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	08004599 	.word	0x08004599
 800458c:	080045b5 	.word	0x080045b5
 8004590:	080045cb 	.word	0x080045cb
 8004594:	080045a7 	.word	0x080045a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004598:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800459c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045a4:	e012      	b.n	80045cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045aa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80045ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045b2:	e00b      	b.n	80045cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80045c0:	e004      	b.n	80045cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80045c8:	e000      	b.n	80045cc <USB_ActivateEndpoint+0x7c>
      break;
 80045ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004604:	b29b      	uxth	r3, r3
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	441a      	add	r2, r3
 800461a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800461e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800462a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	7b1b      	ldrb	r3, [r3, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 8178 	bne.w	800492c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8084 	beq.w	800474e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004650:	b29b      	uxth	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	4413      	add	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	011a      	lsls	r2, r3, #4
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	88db      	ldrh	r3, [r3, #6]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	b29b      	uxth	r3, r3
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	827b      	strh	r3, [r7, #18]
 8004688:	8a7b      	ldrh	r3, [r7, #18]
 800468a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01b      	beq.n	80046ca <USB_ActivateEndpoint+0x17a>
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a8:	823b      	strh	r3, [r7, #16]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	441a      	add	r2, r3
 80046b4:	8a3b      	ldrh	r3, [r7, #16]
 80046b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	78db      	ldrb	r3, [r3, #3]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d020      	beq.n	8004714 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046e8:	81bb      	strh	r3, [r7, #12]
 80046ea:	89bb      	ldrh	r3, [r7, #12]
 80046ec:	f083 0320 	eor.w	r3, r3, #32
 80046f0:	81bb      	strh	r3, [r7, #12]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	89bb      	ldrh	r3, [r7, #12]
 80046fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800470a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]
 8004712:	e2d5      	b.n	8004cc0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800472a:	81fb      	strh	r3, [r7, #14]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	89fb      	ldrh	r3, [r7, #14]
 8004738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800473c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004748:	b29b      	uxth	r3, r3
 800474a:	8013      	strh	r3, [r2, #0]
 800474c:	e2b8      	b.n	8004cc0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	633b      	str	r3, [r7, #48]	@ 0x30
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004758:	b29b      	uxth	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475e:	4413      	add	r3, r2
 8004760:	633b      	str	r3, [r7, #48]	@ 0x30
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	011a      	lsls	r2, r3, #4
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	4413      	add	r3, r2
 800476c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	88db      	ldrh	r3, [r3, #6]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	b29b      	uxth	r3, r3
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004780:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478c:	b29b      	uxth	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	4413      	add	r3, r2
 8004794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	011a      	lsls	r2, r3, #4
 800479c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479e:	4413      	add	r3, r2
 80047a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	801a      	strh	r2, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80047bc:	d91d      	bls.n	80047fa <USB_ActivateEndpoint+0x2aa>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <USB_ActivateEndpoint+0x288>
 80047d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047d4:	3b01      	subs	r3, #1
 80047d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29a      	uxth	r2, r3
 80047de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4313      	orrs	r3, r2
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	e026      	b.n	8004848 <USB_ActivateEndpoint+0x2f8>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <USB_ActivateEndpoint+0x2c8>
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004810:	b29a      	uxth	r2, r3
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	e017      	b.n	8004848 <USB_ActivateEndpoint+0x2f8>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	085b      	lsrs	r3, r3, #1
 800481e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <USB_ActivateEndpoint+0x2e2>
 800482c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800482e:	3301      	adds	r3, #1
 8004830:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29a      	uxth	r2, r3
 8004838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800483a:	b29b      	uxth	r3, r3
 800483c:	029b      	lsls	r3, r3, #10
 800483e:	b29b      	uxth	r3, r3
 8004840:	4313      	orrs	r3, r2
 8004842:	b29a      	uxth	r2, r3
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004856:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01b      	beq.n	8004898 <USB_ActivateEndpoint+0x348>
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	843b      	strh	r3, [r7, #32]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	8c3b      	ldrh	r3, [r7, #32]
 8004884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800488c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004894:	b29b      	uxth	r3, r3
 8004896:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d124      	bne.n	80048ea <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b6:	83bb      	strh	r3, [r7, #28]
 80048b8:	8bbb      	ldrh	r3, [r7, #28]
 80048ba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048be:	83bb      	strh	r3, [r7, #28]
 80048c0:	8bbb      	ldrh	r3, [r7, #28]
 80048c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048c6:	83bb      	strh	r3, [r7, #28]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	441a      	add	r2, r3
 80048d2:	8bbb      	ldrh	r3, [r7, #28]
 80048d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	8013      	strh	r3, [r2, #0]
 80048e8:	e1ea      	b.n	8004cc0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004900:	83fb      	strh	r3, [r7, #30]
 8004902:	8bfb      	ldrh	r3, [r7, #30]
 8004904:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004908:	83fb      	strh	r3, [r7, #30]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	441a      	add	r2, r3
 8004914:	8bfb      	ldrh	r3, [r7, #30]
 8004916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800491a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800491e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004926:	b29b      	uxth	r3, r3
 8004928:	8013      	strh	r3, [r2, #0]
 800492a:	e1c9      	b.n	8004cc0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	78db      	ldrb	r3, [r3, #3]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d11e      	bne.n	8004972 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800495c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004964:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800496c:	b29b      	uxth	r3, r3
 800496e:	8013      	strh	r3, [r2, #0]
 8004970:	e01d      	b.n	80049ae <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004988:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	441a      	add	r2, r3
 8004996:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800499a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800499e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049be:	4413      	add	r3, r2
 80049c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	011a      	lsls	r2, r3, #4
 80049c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	891b      	ldrh	r3, [r3, #8]
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	b29b      	uxth	r3, r3
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f2:	4413      	add	r3, r2
 80049f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	011a      	lsls	r2, r3, #4
 80049fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004a04:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	895b      	ldrh	r3, [r3, #10]
 8004a0a:	085b      	lsrs	r3, r3, #1
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a14:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	785b      	ldrb	r3, [r3, #1]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 8093 	bne.w	8004b46 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004a30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01b      	beq.n	8004a74 <USB_ActivateEndpoint+0x524>
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a52:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	441a      	add	r2, r3
 8004a5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004a82:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01b      	beq.n	8004ac4 <USB_ActivateEndpoint+0x574>
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	441a      	add	r2, r3
 8004aae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004abc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ada:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004adc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004ade:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004ae2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ae4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004ae6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004aea:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	441a      	add	r2, r3
 8004af6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b22:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	8013      	strh	r3, [r2, #0]
 8004b44:	e0bc      	b.n	8004cc0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01d      	beq.n	8004b9e <USB_ActivateEndpoint+0x64e>
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b78:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004bae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01d      	beq.n	8004bf6 <USB_ActivateEndpoint+0x6a6>
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	78db      	ldrb	r3, [r3, #3]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d024      	beq.n	8004c48 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c14:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c1c:	f083 0320 	eor.w	r3, r3, #32
 8004c20:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]
 8004c46:	e01d      	b.n	8004c84 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	441a      	add	r2, r3
 8004c6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	441a      	add	r2, r3
 8004ca8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004cac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004cc0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3774      	adds	r7, #116	@ 0x74
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop

08004cd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b08d      	sub	sp, #52	@ 0x34
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	7b1b      	ldrb	r3, [r3, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 808e 	bne.w	8004e00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d044      	beq.n	8004d76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	81bb      	strh	r3, [r7, #12]
 8004cfa:	89bb      	ldrh	r3, [r7, #12]
 8004cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01b      	beq.n	8004d3c <USB_DeactivateEndpoint+0x6c>
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1a:	817b      	strh	r3, [r7, #10]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	441a      	add	r2, r3
 8004d26:	897b      	ldrh	r3, [r7, #10]
 8004d28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d52:	813b      	strh	r3, [r7, #8]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	893b      	ldrh	r3, [r7, #8]
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]
 8004d74:	e192      	b.n	800509c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	827b      	strh	r3, [r7, #18]
 8004d84:	8a7b      	ldrh	r3, [r7, #18]
 8004d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01b      	beq.n	8004dc6 <USB_DeactivateEndpoint+0xf6>
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da4:	823b      	strh	r3, [r7, #16]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	441a      	add	r2, r3
 8004db0:	8a3b      	ldrh	r3, [r7, #16]
 8004db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ddc:	81fb      	strh	r3, [r7, #14]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	89fb      	ldrh	r3, [r7, #14]
 8004dea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	8013      	strh	r3, [r2, #0]
 8004dfe:	e14d      	b.n	800509c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f040 80a5 	bne.w	8004f54 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	843b      	strh	r3, [r7, #32]
 8004e18:	8c3b      	ldrh	r3, [r7, #32]
 8004e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01b      	beq.n	8004e5a <USB_DeactivateEndpoint+0x18a>
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e38:	83fb      	strh	r3, [r7, #30]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	441a      	add	r2, r3
 8004e44:	8bfb      	ldrh	r3, [r7, #30]
 8004e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	83bb      	strh	r3, [r7, #28]
 8004e68:	8bbb      	ldrh	r3, [r7, #28]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01b      	beq.n	8004eaa <USB_DeactivateEndpoint+0x1da>
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e88:	837b      	strh	r3, [r7, #26]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	8b7b      	ldrh	r3, [r7, #26]
 8004e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ea2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec0:	833b      	strh	r3, [r7, #24]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	441a      	add	r2, r3
 8004ecc:	8b3b      	ldrh	r3, [r7, #24]
 8004ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef8:	82fb      	strh	r3, [r7, #22]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	8afb      	ldrh	r3, [r7, #22]
 8004f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f30:	82bb      	strh	r3, [r7, #20]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	8abb      	ldrh	r3, [r7, #20]
 8004f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	8013      	strh	r3, [r2, #0]
 8004f52:	e0a3      	b.n	800509c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004f62:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01b      	beq.n	8004fa4 <USB_DeactivateEndpoint+0x2d4>
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f82:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004fb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01b      	beq.n	8004ff4 <USB_DeactivateEndpoint+0x324>
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005020:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800503e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005042:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	441a      	add	r2, r3
 800504e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800505c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005060:	b29b      	uxth	r3, r3
 8005062:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800508c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005098:	b29b      	uxth	r3, r3
 800509a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3734      	adds	r7, #52	@ 0x34
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b0c2      	sub	sp, #264	@ 0x108
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050b6:	6018      	str	r0, [r3, #0]
 80050b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	f040 86b7 	bne.w	8005e42 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699a      	ldr	r2, [r3, #24]
 80050e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d908      	bls.n	8005102 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80050f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005100:	e007      	b.n	8005112 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	7b1b      	ldrb	r3, [r3, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d13a      	bne.n	8005198 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6959      	ldr	r1, [r3, #20]
 800512e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	88da      	ldrh	r2, [r3, #6]
 800513a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800513e:	b29b      	uxth	r3, r3
 8005140:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005144:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005148:	6800      	ldr	r0, [r0, #0]
 800514a:	f001 fc9c 	bl	8006a86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800514e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005152:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800515e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005168:	b29b      	uxth	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4413      	add	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	011a      	lsls	r2, r3, #4
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	f000 be1f 	b.w	8005dd6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	78db      	ldrb	r3, [r3, #3]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	f040 8462 	bne.w	8005a6e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6a1a      	ldr	r2, [r3, #32]
 80051b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	f240 83df 	bls.w	8005986 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ee:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80051f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	441a      	add	r2, r3
 800520c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005218:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800521c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005220:	b29b      	uxth	r3, r3
 8005222:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005234:	1ad2      	subs	r2, r2, r3
 8005236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 81c7 	beq.w	80055f8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800526a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	633b      	str	r3, [r7, #48]	@ 0x30
 8005276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d177      	bne.n	8005376 <USB_EPStartXfer+0x2ce>
 8005286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	4413      	add	r3, r2
 80052a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	011a      	lsls	r2, r3, #4
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	4413      	add	r3, r2
 80052bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	801a      	strh	r2, [r3, #0]
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80052d8:	d921      	bls.n	800531e <USB_EPStartXfer+0x276>
 80052da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <USB_EPStartXfer+0x252>
 80052f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80052f4:	3b01      	subs	r3, #1
 80052f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005304:	b29b      	uxth	r3, r3
 8005306:	029b      	lsls	r3, r3, #10
 8005308:	b29b      	uxth	r3, r3
 800530a:	4313      	orrs	r3, r2
 800530c:	b29b      	uxth	r3, r3
 800530e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005316:	b29a      	uxth	r2, r3
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e050      	b.n	80053c0 <USB_EPStartXfer+0x318>
 800531e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <USB_EPStartXfer+0x294>
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005334:	b29a      	uxth	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	e041      	b.n	80053c0 <USB_EPStartXfer+0x318>
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <USB_EPStartXfer+0x2b4>
 8005352:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005356:	3301      	adds	r3, #1
 8005358:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29a      	uxth	r2, r3
 8005362:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005366:	b29b      	uxth	r3, r3
 8005368:	029b      	lsls	r3, r3, #10
 800536a:	b29b      	uxth	r3, r3
 800536c:	4313      	orrs	r3, r2
 800536e:	b29a      	uxth	r2, r3
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	e024      	b.n	80053c0 <USB_EPStartXfer+0x318>
 8005376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	785b      	ldrb	r3, [r3, #1]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d11c      	bne.n	80053c0 <USB_EPStartXfer+0x318>
 8005386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005394:	b29b      	uxth	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539a:	4413      	add	r3, r2
 800539c:	633b      	str	r3, [r7, #48]	@ 0x30
 800539e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	011a      	lsls	r2, r3, #4
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	4413      	add	r3, r2
 80053b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	895b      	ldrh	r3, [r3, #10]
 80053cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6959      	ldr	r1, [r3, #20]
 80053dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053ee:	6800      	ldr	r0, [r0, #0]
 80053f0:	f001 fb49 	bl	8006a86 <USB_WritePMA>
            ep->xfer_buff += len;
 80053f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695a      	ldr	r2, [r3, #20]
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005404:	441a      	add	r2, r3
 8005406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6a1a      	ldr	r2, [r3, #32]
 800541e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	429a      	cmp	r2, r3
 800542c:	d90f      	bls.n	800544e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800542e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	621a      	str	r2, [r3, #32]
 800544c:	e00e      	b.n	800546c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800544e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800545e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2200      	movs	r2, #0
 800546a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800546c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d177      	bne.n	800556c <USB_EPStartXfer+0x4c4>
 800547c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005496:	b29b      	uxth	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	4413      	add	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	011a      	lsls	r2, r3, #4
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	4413      	add	r3, r2
 80054b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80054ce:	d921      	bls.n	8005514 <USB_EPStartXfer+0x46c>
 80054d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <USB_EPStartXfer+0x448>
 80054e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ea:	3b01      	subs	r3, #1
 80054ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	b29b      	uxth	r3, r3
 8005500:	4313      	orrs	r3, r2
 8005502:	b29b      	uxth	r3, r3
 8005504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550c:	b29a      	uxth	r2, r3
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	801a      	strh	r2, [r3, #0]
 8005512:	e056      	b.n	80055c2 <USB_EPStartXfer+0x51a>
 8005514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <USB_EPStartXfer+0x48a>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552a:	b29a      	uxth	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	e047      	b.n	80055c2 <USB_EPStartXfer+0x51a>
 8005532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800553c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d004      	beq.n	8005552 <USB_EPStartXfer+0x4aa>
 8005548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800554c:	3301      	adds	r3, #1
 800554e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29a      	uxth	r2, r3
 8005558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800555c:	b29b      	uxth	r3, r3
 800555e:	029b      	lsls	r3, r3, #10
 8005560:	b29b      	uxth	r3, r3
 8005562:	4313      	orrs	r3, r2
 8005564:	b29a      	uxth	r2, r3
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	801a      	strh	r2, [r3, #0]
 800556a:	e02a      	b.n	80055c2 <USB_EPStartXfer+0x51a>
 800556c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d122      	bne.n	80055c2 <USB_EPStartXfer+0x51a>
 800557c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	623b      	str	r3, [r7, #32]
 8005588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005596:	b29b      	uxth	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	4413      	add	r3, r2
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	011a      	lsls	r2, r3, #4
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	4413      	add	r3, r2
 80055b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055bc:	b29a      	uxth	r2, r3
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	891b      	ldrh	r3, [r3, #8]
 80055ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6959      	ldr	r1, [r3, #20]
 80055de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055f0:	6800      	ldr	r0, [r0, #0]
 80055f2:	f001 fa48 	bl	8006a86 <USB_WritePMA>
 80055f6:	e3ee      	b.n	8005dd6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d177      	bne.n	80056f8 <USB_EPStartXfer+0x650>
 8005608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005618:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005628:	4413      	add	r3, r2
 800562a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800562c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	011a      	lsls	r2, r3, #4
 800563a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800563c:	4413      	add	r3, r2
 800563e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005642:	647b      	str	r3, [r7, #68]	@ 0x44
 8005644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800564e:	b29a      	uxth	r2, r3
 8005650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005652:	801a      	strh	r2, [r3, #0]
 8005654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005658:	2b3e      	cmp	r3, #62	@ 0x3e
 800565a:	d921      	bls.n	80056a0 <USB_EPStartXfer+0x5f8>
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566a:	f003 031f 	and.w	r3, r3, #31
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <USB_EPStartXfer+0x5d4>
 8005672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005676:	3b01      	subs	r3, #1
 8005678:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800567c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29a      	uxth	r2, r3
 8005682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005686:	b29b      	uxth	r3, r3
 8005688:	029b      	lsls	r3, r3, #10
 800568a:	b29b      	uxth	r3, r3
 800568c:	4313      	orrs	r3, r2
 800568e:	b29b      	uxth	r3, r3
 8005690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005698:	b29a      	uxth	r2, r3
 800569a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800569c:	801a      	strh	r2, [r3, #0]
 800569e:	e056      	b.n	800574e <USB_EPStartXfer+0x6a6>
 80056a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <USB_EPStartXfer+0x616>
 80056a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	e047      	b.n	800574e <USB_EPStartXfer+0x6a6>
 80056be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <USB_EPStartXfer+0x636>
 80056d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056d8:	3301      	adds	r3, #1
 80056da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	029b      	lsls	r3, r3, #10
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	4313      	orrs	r3, r2
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056f4:	801a      	strh	r2, [r3, #0]
 80056f6:	e02a      	b.n	800574e <USB_EPStartXfer+0x6a6>
 80056f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d122      	bne.n	800574e <USB_EPStartXfer+0x6a6>
 8005708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	653b      	str	r3, [r7, #80]	@ 0x50
 8005714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005722:	b29b      	uxth	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005728:	4413      	add	r3, r2
 800572a:	653b      	str	r3, [r7, #80]	@ 0x50
 800572c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	011a      	lsls	r2, r3, #4
 800573a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800573c:	4413      	add	r3, r2
 800573e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005748:	b29a      	uxth	r2, r3
 800574a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800574c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800574e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	891b      	ldrh	r3, [r3, #8]
 800575a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800575e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6959      	ldr	r1, [r3, #20]
 800576a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576e:	b29b      	uxth	r3, r3
 8005770:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005774:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005778:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800577c:	6800      	ldr	r0, [r0, #0]
 800577e:	f001 f982 	bl	8006a86 <USB_WritePMA>
            ep->xfer_buff += len;
 8005782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005792:	441a      	add	r2, r3
 8005794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d90f      	bls.n	80057dc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6a1a      	ldr	r2, [r3, #32]
 80057c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057cc:	1ad2      	subs	r2, r2, r3
 80057ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	621a      	str	r2, [r3, #32]
 80057da:	e00e      	b.n	80057fa <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80057dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80057ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2200      	movs	r2, #0
 80057f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	643b      	str	r3, [r7, #64]	@ 0x40
 8005806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d177      	bne.n	8005906 <USB_EPStartXfer+0x85e>
 8005816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005830:	b29b      	uxth	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	4413      	add	r3, r2
 8005838:	63bb      	str	r3, [r7, #56]	@ 0x38
 800583a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	011a      	lsls	r2, r3, #4
 8005848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584a:	4413      	add	r3, r2
 800584c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005850:	637b      	str	r3, [r7, #52]	@ 0x34
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800585c:	b29a      	uxth	r2, r3
 800585e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005866:	2b3e      	cmp	r3, #62	@ 0x3e
 8005868:	d921      	bls.n	80058ae <USB_EPStartXfer+0x806>
 800586a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2b00      	cmp	r3, #0
 800587e:	d104      	bne.n	800588a <USB_EPStartXfer+0x7e2>
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	3b01      	subs	r3, #1
 8005886:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800588a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29a      	uxth	r2, r3
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29b      	uxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b29b      	uxth	r3, r3
 800589e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	e050      	b.n	8005950 <USB_EPStartXfer+0x8a8>
 80058ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <USB_EPStartXfer+0x824>
 80058b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	e041      	b.n	8005950 <USB_EPStartXfer+0x8a8>
 80058cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <USB_EPStartXfer+0x844>
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e6:	3301      	adds	r3, #1
 80058e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	029b      	lsls	r3, r3, #10
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	4313      	orrs	r3, r2
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e024      	b.n	8005950 <USB_EPStartXfer+0x8a8>
 8005906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d11c      	bne.n	8005950 <USB_EPStartXfer+0x8a8>
 8005916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800592a:	4413      	add	r3, r2
 800592c:	643b      	str	r3, [r7, #64]	@ 0x40
 800592e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	011a      	lsls	r2, r3, #4
 800593c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800593e:	4413      	add	r3, r2
 8005940:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594a:	b29a      	uxth	r2, r3
 800594c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800594e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	895b      	ldrh	r3, [r3, #10]
 800595c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6959      	ldr	r1, [r3, #20]
 800596c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005970:	b29b      	uxth	r3, r3
 8005972:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005976:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800597a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800597e:	6800      	ldr	r0, [r0, #0]
 8005980:	f001 f881 	bl	8006a86 <USB_WritePMA>
 8005984:	e227      	b.n	8005dd6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80059b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059bc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80059c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	441a      	add	r2, r3
 80059da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80059de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a12:	4413      	add	r3, r2
 8005a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	011a      	lsls	r2, r3, #4
 8005a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a26:	4413      	add	r3, r2
 8005a28:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	891b      	ldrh	r3, [r3, #8]
 8005a44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6959      	ldr	r1, [r3, #20]
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a5e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a62:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a66:	6800      	ldr	r0, [r0, #0]
 8005a68:	f001 f80d 	bl	8006a86 <USB_WritePMA>
 8005a6c:	e1b3      	b.n	8005dd6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a1a      	ldr	r2, [r3, #32]
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 80c6 	beq.w	8005c40 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d177      	bne.n	8005bc0 <USB_EPStartXfer+0xb18>
 8005ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005af0:	4413      	add	r3, r2
 8005af2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	011a      	lsls	r2, r3, #4
 8005b02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b04:	4413      	add	r3, r2
 8005b06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b20:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b22:	d921      	bls.n	8005b68 <USB_EPStartXfer+0xac0>
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <USB_EPStartXfer+0xa9c>
 8005b3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4313      	orrs	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b64:	801a      	strh	r2, [r3, #0]
 8005b66:	e050      	b.n	8005c0a <USB_EPStartXfer+0xb62>
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <USB_EPStartXfer+0xade>
 8005b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	e041      	b.n	8005c0a <USB_EPStartXfer+0xb62>
 8005b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <USB_EPStartXfer+0xafe>
 8005b9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	e024      	b.n	8005c0a <USB_EPStartXfer+0xb62>
 8005bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d11c      	bne.n	8005c0a <USB_EPStartXfer+0xb62>
 8005bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005be4:	4413      	add	r3, r2
 8005be6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	011a      	lsls	r2, r3, #4
 8005bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	895b      	ldrh	r3, [r3, #10]
 8005c16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6959      	ldr	r1, [r3, #20]
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c38:	6800      	ldr	r0, [r0, #0]
 8005c3a:	f000 ff24 	bl	8006a86 <USB_WritePMA>
 8005c3e:	e0ca      	b.n	8005dd6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d177      	bne.n	8005d40 <USB_EPStartXfer+0xc98>
 8005c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c70:	4413      	add	r3, r2
 8005c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	011a      	lsls	r2, r3, #4
 8005c82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ca2:	d921      	bls.n	8005ce8 <USB_EPStartXfer+0xc40>
 8005ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <USB_EPStartXfer+0xc1c>
 8005cba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	029b      	lsls	r3, r3, #10
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	e05c      	b.n	8005da2 <USB_EPStartXfer+0xcfa>
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <USB_EPStartXfer+0xc5e>
 8005cf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	e04d      	b.n	8005da2 <USB_EPStartXfer+0xcfa>
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <USB_EPStartXfer+0xc7e>
 8005d1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d20:	3301      	adds	r3, #1
 8005d22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	029b      	lsls	r3, r3, #10
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	4313      	orrs	r3, r2
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	e030      	b.n	8005da2 <USB_EPStartXfer+0xcfa>
 8005d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	785b      	ldrb	r3, [r3, #1]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d128      	bne.n	8005da2 <USB_EPStartXfer+0xcfa>
 8005d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d74:	4413      	add	r3, r2
 8005d76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	011a      	lsls	r2, r3, #4
 8005d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005da0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	891b      	ldrh	r3, [r3, #8]
 8005dae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6959      	ldr	r1, [r3, #20]
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005dc8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005dcc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005dd0:	6800      	ldr	r0, [r0, #0]
 8005dd2:	f000 fe58 	bl	8006a86 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dfc:	817b      	strh	r3, [r7, #10]
 8005dfe:	897b      	ldrh	r3, [r7, #10]
 8005e00:	f083 0310 	eor.w	r3, r3, #16
 8005e04:	817b      	strh	r3, [r7, #10]
 8005e06:	897b      	ldrh	r3, [r7, #10]
 8005e08:	f083 0320 	eor.w	r3, r3, #32
 8005e0c:	817b      	strh	r3, [r7, #10]
 8005e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	441a      	add	r2, r3
 8005e28:	897b      	ldrh	r3, [r7, #10]
 8005e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8013      	strh	r3, [r2, #0]
 8005e3e:	f000 bcde 	b.w	80067fe <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	7b1b      	ldrb	r3, [r3, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f040 80bb 	bne.w	8005fca <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d917      	bls.n	8005ea0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699a      	ldr	r2, [r3, #24]
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e90:	1ad2      	subs	r2, r2, r3
 8005e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	619a      	str	r2, [r3, #24]
 8005e9e:	e00e      	b.n	8005ebe <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	011a      	lsls	r2, r3, #4
 8005ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005efa:	4413      	add	r3, r2
 8005efc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f1e:	d924      	bls.n	8005f6a <USB_EPStartXfer+0xec2>
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <USB_EPStartXfer+0xe98>
 8005f36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	029b      	lsls	r3, r3, #10
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	4313      	orrs	r3, r2
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	f000 bc10 	b.w	800678a <USB_EPStartXfer+0x16e2>
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10c      	bne.n	8005f8c <USB_EPStartXfer+0xee4>
 8005f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	e3fe      	b.n	800678a <USB_EPStartXfer+0x16e2>
 8005f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <USB_EPStartXfer+0xf04>
 8005fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	029b      	lsls	r3, r3, #10
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	e3df      	b.n	800678a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	78db      	ldrb	r3, [r3, #3]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	f040 8218 	bne.w	800640c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f040 809d 	bne.w	8006128 <USB_EPStartXfer+0x1080>
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800600a:	b29b      	uxth	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006012:	4413      	add	r3, r2
 8006014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	011a      	lsls	r2, r3, #4
 8006026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800602a:	4413      	add	r3, r2
 800602c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006030:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006040:	b29a      	uxth	r2, r3
 8006042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b3e      	cmp	r3, #62	@ 0x3e
 8006056:	d92b      	bls.n	80060b0 <USB_EPStartXfer+0x1008>
 8006058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800606a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <USB_EPStartXfer+0xfe0>
 800607e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006082:	3b01      	subs	r3, #1
 8006084:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29a      	uxth	r2, r3
 8006090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006094:	b29b      	uxth	r3, r3
 8006096:	029b      	lsls	r3, r3, #10
 8006098:	b29b      	uxth	r3, r3
 800609a:	4313      	orrs	r3, r2
 800609c:	b29b      	uxth	r3, r3
 800609e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	e070      	b.n	8006192 <USB_EPStartXfer+0x10ea>
 80060b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10c      	bne.n	80060da <USB_EPStartXfer+0x1032>
 80060c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e05b      	b.n	8006192 <USB_EPStartXfer+0x10ea>
 80060da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <USB_EPStartXfer+0x1062>
 8006100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006104:	3301      	adds	r3, #1
 8006106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800610a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29a      	uxth	r2, r3
 8006112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006116:	b29b      	uxth	r3, r3
 8006118:	029b      	lsls	r3, r3, #10
 800611a:	b29b      	uxth	r3, r3
 800611c:	4313      	orrs	r3, r2
 800611e:	b29a      	uxth	r2, r3
 8006120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	e034      	b.n	8006192 <USB_EPStartXfer+0x10ea>
 8006128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d12c      	bne.n	8006192 <USB_EPStartXfer+0x10ea>
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006154:	b29b      	uxth	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800615c:	4413      	add	r3, r2
 800615e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	011a      	lsls	r2, r3, #4
 8006170:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006174:	4413      	add	r3, r2
 8006176:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800617a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800617e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	b29a      	uxth	r2, r3
 800618c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80061a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f040 809d 	bne.w	80062ec <USB_EPStartXfer+0x1244>
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061d6:	4413      	add	r3, r2
 80061d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	011a      	lsls	r2, r3, #4
 80061ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061ee:	4413      	add	r3, r2
 80061f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006204:	b29a      	uxth	r2, r3
 8006206:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800620a:	801a      	strh	r2, [r3, #0]
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b3e      	cmp	r3, #62	@ 0x3e
 800621a:	d92b      	bls.n	8006274 <USB_EPStartXfer+0x11cc>
 800621c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800622e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2b00      	cmp	r3, #0
 8006240:	d104      	bne.n	800624c <USB_EPStartXfer+0x11a4>
 8006242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006246:	3b01      	subs	r3, #1
 8006248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800624c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29a      	uxth	r2, r3
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006258:	b29b      	uxth	r3, r3
 800625a:	029b      	lsls	r3, r3, #10
 800625c:	b29b      	uxth	r3, r3
 800625e:	4313      	orrs	r3, r2
 8006260:	b29b      	uxth	r3, r3
 8006262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626a:	b29a      	uxth	r2, r3
 800626c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	e069      	b.n	8006348 <USB_EPStartXfer+0x12a0>
 8006274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10c      	bne.n	800629e <USB_EPStartXfer+0x11f6>
 8006284:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e054      	b.n	8006348 <USB_EPStartXfer+0x12a0>
 800629e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <USB_EPStartXfer+0x1226>
 80062c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c8:	3301      	adds	r3, #1
 80062ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062da:	b29b      	uxth	r3, r3
 80062dc:	029b      	lsls	r3, r3, #10
 80062de:	b29b      	uxth	r3, r3
 80062e0:	4313      	orrs	r3, r2
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	e02d      	b.n	8006348 <USB_EPStartXfer+0x12a0>
 80062ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	785b      	ldrb	r3, [r3, #1]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d125      	bne.n	8006348 <USB_EPStartXfer+0x12a0>
 80062fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800630a:	b29b      	uxth	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006312:	4413      	add	r3, r2
 8006314:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	011a      	lsls	r2, r3, #4
 8006326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800632a:	4413      	add	r3, r2
 800632c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006330:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	b29a      	uxth	r2, r3
 8006342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006346:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8218 	beq.w	800678a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800635a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800637a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800637e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <USB_EPStartXfer+0x12ea>
 8006386:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800638a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10d      	bne.n	80063ae <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006392:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800639a:	2b00      	cmp	r3, #0
 800639c:	f040 81f5 	bne.w	800678a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80063a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f040 81ee 	bne.w	800678a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80063d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80063f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006402:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]
 800640a:	e1be      	b.n	800678a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800640c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	78db      	ldrb	r3, [r3, #3]
 8006418:	2b01      	cmp	r3, #1
 800641a:	f040 81b4 	bne.w	8006786 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800641e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	429a      	cmp	r2, r3
 8006438:	d917      	bls.n	800646a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800643a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800644a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645a:	1ad2      	subs	r2, r2, r3
 800645c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	619a      	str	r2, [r3, #24]
 8006468:	e00e      	b.n	8006488 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800646a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800647a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2200      	movs	r2, #0
 8006486:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 8085 	bne.w	80065a4 <USB_EPStartXfer+0x14fc>
 800649a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064be:	4413      	add	r3, r2
 80064c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	011a      	lsls	r2, r3, #4
 80064d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80064fa:	d923      	bls.n	8006544 <USB_EPStartXfer+0x149c>
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006500:	095b      	lsrs	r3, r3, #5
 8006502:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	2b00      	cmp	r3, #0
 8006510:	d104      	bne.n	800651c <USB_EPStartXfer+0x1474>
 8006512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006516:	3b01      	subs	r3, #1
 8006518:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800651c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29a      	uxth	r2, r3
 8006524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006528:	b29b      	uxth	r3, r3
 800652a:	029b      	lsls	r3, r3, #10
 800652c:	b29b      	uxth	r3, r3
 800652e:	4313      	orrs	r3, r2
 8006530:	b29b      	uxth	r3, r3
 8006532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653a:	b29a      	uxth	r2, r3
 800653c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006540:	801a      	strh	r2, [r3, #0]
 8006542:	e060      	b.n	8006606 <USB_EPStartXfer+0x155e>
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10c      	bne.n	8006566 <USB_EPStartXfer+0x14be>
 800654c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655c:	b29a      	uxth	r2, r3
 800655e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006562:	801a      	strh	r2, [r3, #0]
 8006564:	e04f      	b.n	8006606 <USB_EPStartXfer+0x155e>
 8006566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656a:	085b      	lsrs	r3, r3, #1
 800656c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d004      	beq.n	8006586 <USB_EPStartXfer+0x14de>
 800657c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006580:	3301      	adds	r3, #1
 8006582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b29a      	uxth	r2, r3
 800658e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006592:	b29b      	uxth	r3, r3
 8006594:	029b      	lsls	r3, r3, #10
 8006596:	b29b      	uxth	r3, r3
 8006598:	4313      	orrs	r3, r2
 800659a:	b29a      	uxth	r2, r3
 800659c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	e030      	b.n	8006606 <USB_EPStartXfer+0x155e>
 80065a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d128      	bne.n	8006606 <USB_EPStartXfer+0x155e>
 80065b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065d8:	4413      	add	r3, r2
 80065da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	011a      	lsls	r2, r3, #4
 80065ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065f0:	4413      	add	r3, r2
 80065f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fe:	b29a      	uxth	r2, r3
 8006600:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006604:	801a      	strh	r2, [r3, #0]
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 8085 	bne.w	8006730 <USB_EPStartXfer+0x1688>
 8006626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006638:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006642:	b29b      	uxth	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800664a:	4413      	add	r3, r2
 800664c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	011a      	lsls	r2, r3, #4
 800665e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006662:	4413      	add	r3, r2
 8006664:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006668:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800666c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006678:	b29a      	uxth	r2, r3
 800667a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006684:	2b3e      	cmp	r3, #62	@ 0x3e
 8006686:	d923      	bls.n	80066d0 <USB_EPStartXfer+0x1628>
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006696:	f003 031f 	and.w	r3, r3, #31
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <USB_EPStartXfer+0x1600>
 800669e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066a2:	3b01      	subs	r3, #1
 80066a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	029b      	lsls	r3, r3, #10
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b29b      	uxth	r3, r3
 80066be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066cc:	801a      	strh	r2, [r3, #0]
 80066ce:	e05c      	b.n	800678a <USB_EPStartXfer+0x16e2>
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10c      	bne.n	80066f2 <USB_EPStartXfer+0x164a>
 80066d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	e04b      	b.n	800678a <USB_EPStartXfer+0x16e2>
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <USB_EPStartXfer+0x166a>
 8006708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800670c:	3301      	adds	r3, #1
 800670e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29a      	uxth	r2, r3
 800671a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800671e:	b29b      	uxth	r3, r3
 8006720:	029b      	lsls	r3, r3, #10
 8006722:	b29b      	uxth	r3, r3
 8006724:	4313      	orrs	r3, r2
 8006726:	b29a      	uxth	r2, r3
 8006728:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	e02c      	b.n	800678a <USB_EPStartXfer+0x16e2>
 8006730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d124      	bne.n	800678a <USB_EPStartXfer+0x16e2>
 8006740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006756:	4413      	add	r3, r2
 8006758:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800675c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	011a      	lsls	r2, r3, #4
 800676a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800676e:	4413      	add	r3, r2
 8006770:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006774:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677c:	b29a      	uxth	r2, r3
 800677e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	e001      	b.n	800678a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e03a      	b.n	8006800 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80067cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	441a      	add	r2, r3
 80067e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	785b      	ldrb	r3, [r3, #1]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d020      	beq.n	800685e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800682e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006832:	81bb      	strh	r3, [r7, #12]
 8006834:	89bb      	ldrh	r3, [r7, #12]
 8006836:	f083 0310 	eor.w	r3, r3, #16
 800683a:	81bb      	strh	r3, [r7, #12]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	441a      	add	r2, r3
 8006846:	89bb      	ldrh	r3, [r7, #12]
 8006848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800684c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006858:	b29b      	uxth	r3, r3
 800685a:	8013      	strh	r3, [r2, #0]
 800685c:	e01f      	b.n	800689e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006874:	81fb      	strh	r3, [r7, #14]
 8006876:	89fb      	ldrh	r3, [r7, #14]
 8006878:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800687c:	81fb      	strh	r3, [r7, #14]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	89fb      	ldrh	r3, [r7, #14]
 800688a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800688e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689a:	b29b      	uxth	r3, r3
 800689c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	4770      	bx	lr

080068aa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	7b1b      	ldrb	r3, [r3, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 809d 	bne.w	80069f8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d04c      	beq.n	8006960 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	823b      	strh	r3, [r7, #16]
 80068d4:	8a3b      	ldrh	r3, [r7, #16]
 80068d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01b      	beq.n	8006916 <USB_EPClearStall+0x6c>
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f4:	81fb      	strh	r3, [r7, #14]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	89fb      	ldrh	r3, [r7, #14]
 8006902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800690a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800690e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006912:	b29b      	uxth	r3, r3
 8006914:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	78db      	ldrb	r3, [r3, #3]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d06c      	beq.n	80069f8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006934:	81bb      	strh	r3, [r7, #12]
 8006936:	89bb      	ldrh	r3, [r7, #12]
 8006938:	f083 0320 	eor.w	r3, r3, #32
 800693c:	81bb      	strh	r3, [r7, #12]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	441a      	add	r2, r3
 8006948:	89bb      	ldrh	r3, [r7, #12]
 800694a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800694e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800695a:	b29b      	uxth	r3, r3
 800695c:	8013      	strh	r3, [r2, #0]
 800695e:	e04b      	b.n	80069f8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	82fb      	strh	r3, [r7, #22]
 800696e:	8afb      	ldrh	r3, [r7, #22]
 8006970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01b      	beq.n	80069b0 <USB_EPClearStall+0x106>
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800698e:	82bb      	strh	r3, [r7, #20]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	441a      	add	r2, r3
 800699a:	8abb      	ldrh	r3, [r7, #20]
 800699c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c6:	827b      	strh	r3, [r7, #18]
 80069c8:	8a7b      	ldrh	r3, [r7, #18]
 80069ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069ce:	827b      	strh	r3, [r7, #18]
 80069d0:	8a7b      	ldrh	r3, [r7, #18]
 80069d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069d6:	827b      	strh	r3, [r7, #18]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	441a      	add	r2, r3
 80069e2:	8a7b      	ldrh	r3, [r7, #18]
 80069e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2280      	movs	r2, #128	@ 0x80
 8006a1a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr

08006a2a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr

08006a3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a64:	68fb      	ldr	r3, [r7, #12]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b08b      	sub	sp, #44	@ 0x2c
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	4611      	mov	r1, r2
 8006a92:	461a      	mov	r2, r3
 8006a94:	460b      	mov	r3, r1
 8006a96:	80fb      	strh	r3, [r7, #6]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a9c:	88bb      	ldrh	r3, [r7, #4]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	085b      	lsrs	r3, r3, #1
 8006aa2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	005a      	lsls	r2, r3, #1
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ab8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006abe:	e01e      	b.n	8006afe <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	b21a      	sxth	r2, r3
 8006ad0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	b21b      	sxth	r3, r3
 8006ad8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	8a7a      	ldrh	r2, [r7, #18]
 8006ade:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	3302      	adds	r3, #2
 8006ae4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	3302      	adds	r3, #2
 8006aea:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	3301      	adds	r3, #1
 8006af0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	3301      	adds	r3, #1
 8006af6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	3b01      	subs	r3, #1
 8006afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1dd      	bne.n	8006ac0 <USB_WritePMA+0x3a>
  }
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	372c      	adds	r7, #44	@ 0x2c
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b08b      	sub	sp, #44	@ 0x2c
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	460b      	mov	r3, r1
 8006b20:	80fb      	strh	r3, [r7, #6]
 8006b22:	4613      	mov	r3, r2
 8006b24:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b26:	88bb      	ldrh	r3, [r7, #4]
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	005a      	lsls	r2, r3, #1
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b42:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b48:	e01b      	b.n	8006b82 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	3302      	adds	r3, #2
 8006b56:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	3301      	adds	r3, #1
 8006b64:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	0a1b      	lsrs	r3, r3, #8
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	3301      	adds	r3, #1
 8006b74:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	3302      	adds	r3, #2
 8006b7a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e0      	bne.n	8006b4a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b88:	88bb      	ldrh	r3, [r7, #4]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d007      	beq.n	8006ba4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	701a      	strb	r2, [r3, #0]
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	372c      	adds	r7, #44	@ 0x2c
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bc80      	pop	{r7}
 8006bac:	4770      	bx	lr

08006bae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e01a      	b.n	8006bfc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	79fa      	ldrb	r2, [r7, #7]
 8006bf2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f001 fc03 	bl	8008400 <USBD_LL_Init>

  return USBD_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d006      	beq.n	8006c26 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
 8006c24:	e001      	b.n	8006c2a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006c26:	2302      	movs	r3, #2
 8006c28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr

08006c36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 fc26 	bl	8008490 <USBD_LL_Start>

  return USBD_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr

08006c62 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00c      	beq.n	8006c96 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	78fa      	ldrb	r2, [r7, #3]
 8006c86:	4611      	mov	r1, r2
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fed8 	bl	8007a8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006cec:	461a      	mov	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d016      	beq.n	8006d30 <USBD_LL_SetupStage+0x6a>
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d81c      	bhi.n	8006d40 <USBD_LL_SetupStage+0x7a>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <USBD_LL_SetupStage+0x4a>
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d008      	beq.n	8006d20 <USBD_LL_SetupStage+0x5a>
 8006d0e:	e017      	b.n	8006d40 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f9cb 	bl	80070b4 <USBD_StdDevReq>
      break;
 8006d1e:	e01a      	b.n	8006d56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fa2d 	bl	8007188 <USBD_StdItfReq>
      break;
 8006d2e:	e012      	b.n	8006d56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fa6d 	bl	8007218 <USBD_StdEPReq>
      break;
 8006d3e:	e00a      	b.n	8006d56 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006d46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fbfe 	bl	8008550 <USBD_LL_StallEP>
      break;
 8006d54:	bf00      	nop
  }

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d14b      	bne.n	8006e0c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006d7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d134      	bne.n	8006df0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d919      	bls.n	8006dc6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	1ad2      	subs	r2, r2, r3
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d203      	bcs.n	8006db4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	e002      	b.n	8006dba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f001 f8f0 	bl	8007fa4 <USBD_CtlContinueRx>
 8006dc4:	e038      	b.n	8006e38 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d105      	bne.n	8006de8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f001 f8ed 	bl	8007fc8 <USBD_CtlSendStatus>
 8006dee:	e023      	b.n	8006e38 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	d11e      	bne.n	8006e38 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006e02:	2100      	movs	r1, #0
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f001 fba3 	bl	8008550 <USBD_LL_StallEP>
 8006e0a:	e015      	b.n	8006e38 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00d      	beq.n	8006e34 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d108      	bne.n	8006e34 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	7afa      	ldrb	r2, [r7, #11]
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	4798      	blx	r3
 8006e32:	e001      	b.n	8006e38 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e34:	2302      	movs	r3, #2
 8006e36:	e000      	b.n	8006e3a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b086      	sub	sp, #24
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	607a      	str	r2, [r7, #4]
 8006e4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e50:	7afb      	ldrb	r3, [r7, #11]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d17f      	bne.n	8006f56 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3314      	adds	r3, #20
 8006e5a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d15c      	bne.n	8006f20 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d915      	bls.n	8006e9e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	1ad2      	subs	r2, r2, r3
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f001 f878 	bl	8007f80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e90:	2300      	movs	r3, #0
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f001 fc05 	bl	80086a6 <USBD_LL_PrepareReceive>
 8006e9c:	e04e      	b.n	8006f3c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	6912      	ldr	r2, [r2, #16]
 8006ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006eaa:	fb01 f202 	mul.w	r2, r1, r2
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d11c      	bne.n	8006eee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d316      	bcc.n	8006eee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d20f      	bcs.n	8006eee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f001 f854 	bl	8007f80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f001 fbdd 	bl	80086a6 <USBD_LL_PrepareReceive>
 8006eec:	e026      	b.n	8006f3c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d105      	bne.n	8006f10 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006f10:	2180      	movs	r1, #128	@ 0x80
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f001 fb1c 	bl	8008550 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f001 f868 	bl	8007fee <USBD_CtlReceiveStatus>
 8006f1e:	e00d      	b.n	8006f3c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d004      	beq.n	8006f34 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d103      	bne.n	8006f3c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006f34:	2180      	movs	r1, #128	@ 0x80
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f001 fb0a 	bl	8008550 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d11d      	bne.n	8006f82 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f7ff fe81 	bl	8006c4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006f54:	e015      	b.n	8006f82 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00d      	beq.n	8006f7e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d108      	bne.n	8006f7e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	7afa      	ldrb	r2, [r7, #11]
 8006f76:	4611      	mov	r1, r2
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	4798      	blx	r3
 8006f7c:	e001      	b.n	8006f82 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e000      	b.n	8006f84 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f94:	2340      	movs	r3, #64	@ 0x40
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fa93 	bl	80084c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2240      	movs	r2, #64	@ 0x40
 8006fac:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fb0:	2340      	movs	r3, #64	@ 0x40
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2180      	movs	r1, #128	@ 0x80
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 fa85 	bl	80084c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2240      	movs	r2, #64	@ 0x40
 8006fc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d009      	beq.n	8007004 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6852      	ldr	r2, [r2, #4]
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	4611      	mov	r1, r2
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
  }

  return USBD_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	78fa      	ldrb	r2, [r7, #3]
 800701e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2204      	movs	r2, #4
 8007044:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007062:	2b04      	cmp	r3, #4
 8007064:	d105      	bne.n	8007072 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr

0800707e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800708c:	2b03      	cmp	r3, #3
 800708e:	d10b      	bne.n	80070a8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070ca:	2b40      	cmp	r3, #64	@ 0x40
 80070cc:	d005      	beq.n	80070da <USBD_StdDevReq+0x26>
 80070ce:	2b40      	cmp	r3, #64	@ 0x40
 80070d0:	d84f      	bhi.n	8007172 <USBD_StdDevReq+0xbe>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <USBD_StdDevReq+0x36>
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	d14b      	bne.n	8007172 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
      break;
 80070e8:	e048      	b.n	800717c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	785b      	ldrb	r3, [r3, #1]
 80070ee:	2b09      	cmp	r3, #9
 80070f0:	d839      	bhi.n	8007166 <USBD_StdDevReq+0xb2>
 80070f2:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <USBD_StdDevReq+0x44>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	08007149 	.word	0x08007149
 80070fc:	0800715d 	.word	0x0800715d
 8007100:	08007167 	.word	0x08007167
 8007104:	08007153 	.word	0x08007153
 8007108:	08007167 	.word	0x08007167
 800710c:	0800712b 	.word	0x0800712b
 8007110:	08007121 	.word	0x08007121
 8007114:	08007167 	.word	0x08007167
 8007118:	0800713f 	.word	0x0800713f
 800711c:	08007135 	.word	0x08007135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f9dc 	bl	80074e0 <USBD_GetDescriptor>
          break;
 8007128:	e022      	b.n	8007170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fb3f 	bl	80077b0 <USBD_SetAddress>
          break;
 8007132:	e01d      	b.n	8007170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fb7e 	bl	8007838 <USBD_SetConfig>
          break;
 800713c:	e018      	b.n	8007170 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fc07 	bl	8007954 <USBD_GetConfig>
          break;
 8007146:	e013      	b.n	8007170 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fc37 	bl	80079be <USBD_GetStatus>
          break;
 8007150:	e00e      	b.n	8007170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fc65 	bl	8007a24 <USBD_SetFeature>
          break;
 800715a:	e009      	b.n	8007170 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fc74 	bl	8007a4c <USBD_ClrFeature>
          break;
 8007164:	e004      	b.n	8007170 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fcc9 	bl	8007b00 <USBD_CtlError>
          break;
 800716e:	bf00      	nop
      }
      break;
 8007170:	e004      	b.n	800717c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fcc3 	bl	8007b00 <USBD_CtlError>
      break;
 800717a:	bf00      	nop
  }

  return ret;
 800717c:	7bfb      	ldrb	r3, [r7, #15]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop

08007188 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800719e:	2b40      	cmp	r3, #64	@ 0x40
 80071a0:	d005      	beq.n	80071ae <USBD_StdItfReq+0x26>
 80071a2:	2b40      	cmp	r3, #64	@ 0x40
 80071a4:	d82e      	bhi.n	8007204 <USBD_StdItfReq+0x7c>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <USBD_StdItfReq+0x26>
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d12a      	bne.n	8007204 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071b4:	3b01      	subs	r3, #1
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d81d      	bhi.n	80071f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	889b      	ldrh	r3, [r3, #4]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d813      	bhi.n	80071ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	88db      	ldrh	r3, [r3, #6]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d110      	bne.n	8007200 <USBD_StdItfReq+0x78>
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10d      	bne.n	8007200 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 feef 	bl	8007fc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071ea:	e009      	b.n	8007200 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fc86 	bl	8007b00 <USBD_CtlError>
          break;
 80071f4:	e004      	b.n	8007200 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fc81 	bl	8007b00 <USBD_CtlError>
          break;
 80071fe:	e000      	b.n	8007202 <USBD_StdItfReq+0x7a>
          break;
 8007200:	bf00      	nop
      }
      break;
 8007202:	e004      	b.n	800720e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fc7a 	bl	8007b00 <USBD_CtlError>
      break;
 800720c:	bf00      	nop
  }

  return USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	889b      	ldrh	r3, [r3, #4]
 800722a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007234:	2b40      	cmp	r3, #64	@ 0x40
 8007236:	d007      	beq.n	8007248 <USBD_StdEPReq+0x30>
 8007238:	2b40      	cmp	r3, #64	@ 0x40
 800723a:	f200 8146 	bhi.w	80074ca <USBD_StdEPReq+0x2b2>
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <USBD_StdEPReq+0x40>
 8007242:	2b20      	cmp	r3, #32
 8007244:	f040 8141 	bne.w	80074ca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
      break;
 8007256:	e13d      	b.n	80074d4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007260:	2b20      	cmp	r3, #32
 8007262:	d10a      	bne.n	800727a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	4798      	blx	r3
 8007272:	4603      	mov	r3, r0
 8007274:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	e12d      	b.n	80074d6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	785b      	ldrb	r3, [r3, #1]
 800727e:	2b03      	cmp	r3, #3
 8007280:	d007      	beq.n	8007292 <USBD_StdEPReq+0x7a>
 8007282:	2b03      	cmp	r3, #3
 8007284:	f300 811b 	bgt.w	80074be <USBD_StdEPReq+0x2a6>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d072      	beq.n	8007372 <USBD_StdEPReq+0x15a>
 800728c:	2b01      	cmp	r3, #1
 800728e:	d03a      	beq.n	8007306 <USBD_StdEPReq+0xee>
 8007290:	e115      	b.n	80074be <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007298:	2b02      	cmp	r3, #2
 800729a:	d002      	beq.n	80072a2 <USBD_StdEPReq+0x8a>
 800729c:	2b03      	cmp	r3, #3
 800729e:	d015      	beq.n	80072cc <USBD_StdEPReq+0xb4>
 80072a0:	e02b      	b.n	80072fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00c      	beq.n	80072c2 <USBD_StdEPReq+0xaa>
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	2b80      	cmp	r3, #128	@ 0x80
 80072ac:	d009      	beq.n	80072c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 f94c 	bl	8008550 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072b8:	2180      	movs	r1, #128	@ 0x80
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 f948 	bl	8008550 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072c0:	e020      	b.n	8007304 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fc1b 	bl	8007b00 <USBD_CtlError>
              break;
 80072ca:	e01b      	b.n	8007304 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	885b      	ldrh	r3, [r3, #2]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10e      	bne.n	80072f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00b      	beq.n	80072f2 <USBD_StdEPReq+0xda>
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b80      	cmp	r3, #128	@ 0x80
 80072de:	d008      	beq.n	80072f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	88db      	ldrh	r3, [r3, #6]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 f92f 	bl	8008550 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fe68 	bl	8007fc8 <USBD_CtlSendStatus>

              break;
 80072f8:	e004      	b.n	8007304 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fbff 	bl	8007b00 <USBD_CtlError>
              break;
 8007302:	bf00      	nop
          }
          break;
 8007304:	e0e0      	b.n	80074c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800730c:	2b02      	cmp	r3, #2
 800730e:	d002      	beq.n	8007316 <USBD_StdEPReq+0xfe>
 8007310:	2b03      	cmp	r3, #3
 8007312:	d015      	beq.n	8007340 <USBD_StdEPReq+0x128>
 8007314:	e026      	b.n	8007364 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <USBD_StdEPReq+0x11e>
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	2b80      	cmp	r3, #128	@ 0x80
 8007320:	d009      	beq.n	8007336 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 f912 	bl	8008550 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800732c:	2180      	movs	r1, #128	@ 0x80
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 f90e 	bl	8008550 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007334:	e01c      	b.n	8007370 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fbe1 	bl	8007b00 <USBD_CtlError>
              break;
 800733e:	e017      	b.n	8007370 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	885b      	ldrh	r3, [r3, #2]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d112      	bne.n	800736e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 f919 	bl	800858e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fe33 	bl	8007fc8 <USBD_CtlSendStatus>
              }
              break;
 8007362:	e004      	b.n	800736e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fbca 	bl	8007b00 <USBD_CtlError>
              break;
 800736c:	e000      	b.n	8007370 <USBD_StdEPReq+0x158>
              break;
 800736e:	bf00      	nop
          }
          break;
 8007370:	e0aa      	b.n	80074c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007378:	2b02      	cmp	r3, #2
 800737a:	d002      	beq.n	8007382 <USBD_StdEPReq+0x16a>
 800737c:	2b03      	cmp	r3, #3
 800737e:	d032      	beq.n	80073e6 <USBD_StdEPReq+0x1ce>
 8007380:	e097      	b.n	80074b2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d007      	beq.n	8007398 <USBD_StdEPReq+0x180>
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	2b80      	cmp	r3, #128	@ 0x80
 800738c:	d004      	beq.n	8007398 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fbb5 	bl	8007b00 <USBD_CtlError>
                break;
 8007396:	e091      	b.n	80074bc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800739c:	2b00      	cmp	r3, #0
 800739e:	da0b      	bge.n	80073b8 <USBD_StdEPReq+0x1a0>
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	3310      	adds	r3, #16
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	4413      	add	r3, r2
 80073b4:	3304      	adds	r3, #4
 80073b6:	e00b      	b.n	80073d0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	4413      	add	r3, r2
 80073ce:	3304      	adds	r3, #4
 80073d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2202      	movs	r2, #2
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fdb2 	bl	8007f48 <USBD_CtlSendData>
              break;
 80073e4:	e06a      	b.n	80074bc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	da11      	bge.n	8007412 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	f003 020f 	and.w	r2, r3, #15
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	440b      	add	r3, r1
 8007400:	3318      	adds	r3, #24
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d117      	bne.n	8007438 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fb78 	bl	8007b00 <USBD_CtlError>
                  break;
 8007410:	e054      	b.n	80074bc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	f003 020f 	and.w	r2, r3, #15
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fb65 	bl	8007b00 <USBD_CtlError>
                  break;
 8007436:	e041      	b.n	80074bc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800743c:	2b00      	cmp	r3, #0
 800743e:	da0b      	bge.n	8007458 <USBD_StdEPReq+0x240>
 8007440:	7bbb      	ldrb	r3, [r7, #14]
 8007442:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	3310      	adds	r3, #16
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	4413      	add	r3, r2
 8007454:	3304      	adds	r3, #4
 8007456:	e00b      	b.n	8007470 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	3304      	adds	r3, #4
 8007470:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <USBD_StdEPReq+0x266>
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b80      	cmp	r3, #128	@ 0x80
 800747c:	d103      	bne.n	8007486 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e00e      	b.n	80074a4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 f89e 	bl	80085cc <USBD_LL_IsStallEP>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2201      	movs	r2, #1
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	e002      	b.n	80074a4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2202      	movs	r2, #2
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fd4c 	bl	8007f48 <USBD_CtlSendData>
              break;
 80074b0:	e004      	b.n	80074bc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fb23 	bl	8007b00 <USBD_CtlError>
              break;
 80074ba:	bf00      	nop
          }
          break;
 80074bc:	e004      	b.n	80074c8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fb1d 	bl	8007b00 <USBD_CtlError>
          break;
 80074c6:	bf00      	nop
      }
      break;
 80074c8:	e004      	b.n	80074d4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fb17 	bl	8007b00 <USBD_CtlError>
      break;
 80074d2:	bf00      	nop
  }

  return ret;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	885b      	ldrh	r3, [r3, #2]
 80074fa:	0a1b      	lsrs	r3, r3, #8
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	2b06      	cmp	r3, #6
 8007502:	f200 8128 	bhi.w	8007756 <USBD_GetDescriptor+0x276>
 8007506:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <USBD_GetDescriptor+0x2c>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007529 	.word	0x08007529
 8007510:	08007541 	.word	0x08007541
 8007514:	08007581 	.word	0x08007581
 8007518:	08007757 	.word	0x08007757
 800751c:	08007757 	.word	0x08007757
 8007520:	080076f7 	.word	0x080076f7
 8007524:	08007723 	.word	0x08007723
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7c12      	ldrb	r2, [r2, #16]
 8007534:	f107 0108 	add.w	r1, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
      break;
 800753e:	e112      	b.n	8007766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	7c1b      	ldrb	r3, [r3, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10d      	bne.n	8007564 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800754e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007550:	f107 0208 	add.w	r2, r7, #8
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	2202      	movs	r2, #2
 8007560:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007562:	e100      	b.n	8007766 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	f107 0208 	add.w	r2, r7, #8
 8007570:	4610      	mov	r0, r2
 8007572:	4798      	blx	r3
 8007574:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3301      	adds	r3, #1
 800757a:	2202      	movs	r2, #2
 800757c:	701a      	strb	r2, [r3, #0]
      break;
 800757e:	e0f2      	b.n	8007766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	885b      	ldrh	r3, [r3, #2]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b05      	cmp	r3, #5
 8007588:	f200 80ac 	bhi.w	80076e4 <USBD_GetDescriptor+0x204>
 800758c:	a201      	add	r2, pc, #4	@ (adr r2, 8007594 <USBD_GetDescriptor+0xb4>)
 800758e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007592:	bf00      	nop
 8007594:	080075ad 	.word	0x080075ad
 8007598:	080075e1 	.word	0x080075e1
 800759c:	08007615 	.word	0x08007615
 80075a0:	08007649 	.word	0x08007649
 80075a4:	0800767d 	.word	0x0800767d
 80075a8:	080076b1 	.word	0x080076b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	7c12      	ldrb	r2, [r2, #16]
 80075c4:	f107 0108 	add.w	r1, r7, #8
 80075c8:	4610      	mov	r0, r2
 80075ca:	4798      	blx	r3
 80075cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ce:	e091      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa94 	bl	8007b00 <USBD_CtlError>
            err++;
 80075d8:	7afb      	ldrb	r3, [r7, #11]
 80075da:	3301      	adds	r3, #1
 80075dc:	72fb      	strb	r3, [r7, #11]
          break;
 80075de:	e089      	b.n	80076f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	7c12      	ldrb	r2, [r2, #16]
 80075f8:	f107 0108 	add.w	r1, r7, #8
 80075fc:	4610      	mov	r0, r2
 80075fe:	4798      	blx	r3
 8007600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007602:	e077      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa7a 	bl	8007b00 <USBD_CtlError>
            err++;
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	3301      	adds	r3, #1
 8007610:	72fb      	strb	r3, [r7, #11]
          break;
 8007612:	e06f      	b.n	80076f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	7c12      	ldrb	r2, [r2, #16]
 800762c:	f107 0108 	add.w	r1, r7, #8
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
 8007634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007636:	e05d      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fa60 	bl	8007b00 <USBD_CtlError>
            err++;
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	3301      	adds	r3, #1
 8007644:	72fb      	strb	r3, [r7, #11]
          break;
 8007646:	e055      	b.n	80076f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7c12      	ldrb	r2, [r2, #16]
 8007660:	f107 0108 	add.w	r1, r7, #8
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800766a:	e043      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa46 	bl	8007b00 <USBD_CtlError>
            err++;
 8007674:	7afb      	ldrb	r3, [r7, #11]
 8007676:	3301      	adds	r3, #1
 8007678:	72fb      	strb	r3, [r7, #11]
          break;
 800767a:	e03b      	b.n	80076f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7c12      	ldrb	r2, [r2, #16]
 8007694:	f107 0108 	add.w	r1, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769e:	e029      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa2c 	bl	8007b00 <USBD_CtlError>
            err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
          break;
 80076ae:	e021      	b.n	80076f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	7c12      	ldrb	r2, [r2, #16]
 80076c8:	f107 0108 	add.w	r1, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d2:	e00f      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa12 	bl	8007b00 <USBD_CtlError>
            err++;
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	3301      	adds	r3, #1
 80076e0:	72fb      	strb	r3, [r7, #11]
          break;
 80076e2:	e007      	b.n	80076f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa0a 	bl	8007b00 <USBD_CtlError>
          err++;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	3301      	adds	r3, #1
 80076f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80076f2:	e038      	b.n	8007766 <USBD_GetDescriptor+0x286>
 80076f4:	e037      	b.n	8007766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	7c1b      	ldrb	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007706:	f107 0208 	add.w	r2, r7, #8
 800770a:	4610      	mov	r0, r2
 800770c:	4798      	blx	r3
 800770e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007710:	e029      	b.n	8007766 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f9f3 	bl	8007b00 <USBD_CtlError>
        err++;
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	3301      	adds	r3, #1
 800771e:	72fb      	strb	r3, [r7, #11]
      break;
 8007720:	e021      	b.n	8007766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	7c1b      	ldrb	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10d      	bne.n	8007746 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007732:	f107 0208 	add.w	r2, r7, #8
 8007736:	4610      	mov	r0, r2
 8007738:	4798      	blx	r3
 800773a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3301      	adds	r3, #1
 8007740:	2207      	movs	r2, #7
 8007742:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007744:	e00f      	b.n	8007766 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f9d9 	bl	8007b00 <USBD_CtlError>
        err++;
 800774e:	7afb      	ldrb	r3, [r7, #11]
 8007750:	3301      	adds	r3, #1
 8007752:	72fb      	strb	r3, [r7, #11]
      break;
 8007754:	e007      	b.n	8007766 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f9d1 	bl	8007b00 <USBD_CtlError>
      err++;
 800775e:	7afb      	ldrb	r3, [r7, #11]
 8007760:	3301      	adds	r3, #1
 8007762:	72fb      	strb	r3, [r7, #11]
      break;
 8007764:	bf00      	nop
  }

  if (err != 0U)
 8007766:	7afb      	ldrb	r3, [r7, #11]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d11c      	bne.n	80077a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800776c:	893b      	ldrh	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d011      	beq.n	8007796 <USBD_GetDescriptor+0x2b6>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	88db      	ldrh	r3, [r3, #6]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00d      	beq.n	8007796 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	88da      	ldrh	r2, [r3, #6]
 800777e:	893b      	ldrh	r3, [r7, #8]
 8007780:	4293      	cmp	r3, r2
 8007782:	bf28      	it	cs
 8007784:	4613      	movcs	r3, r2
 8007786:	b29b      	uxth	r3, r3
 8007788:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800778a:	893b      	ldrh	r3, [r7, #8]
 800778c:	461a      	mov	r2, r3
 800778e:	68f9      	ldr	r1, [r7, #12]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fbd9 	bl	8007f48 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	88db      	ldrh	r3, [r3, #6]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d104      	bne.n	80077a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fc12 	bl	8007fc8 <USBD_CtlSendStatus>
 80077a4:	e000      	b.n	80077a8 <USBD_GetDescriptor+0x2c8>
    return;
 80077a6:	bf00      	nop
    }
  }
}
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop

080077b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	889b      	ldrh	r3, [r3, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d130      	bne.n	8007824 <USBD_SetAddress+0x74>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	88db      	ldrh	r3, [r3, #6]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d12c      	bne.n	8007824 <USBD_SetAddress+0x74>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	885b      	ldrh	r3, [r3, #2]
 80077ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80077d0:	d828      	bhi.n	8007824 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	885b      	ldrh	r3, [r3, #2]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d104      	bne.n	80077f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f988 	bl	8007b00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f0:	e01d      	b.n	800782e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	7bfa      	ldrb	r2, [r7, #15]
 80077f6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 ff0f 	bl	8008622 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fbdf 	bl	8007fc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d004      	beq.n	800781a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007818:	e009      	b.n	800782e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007822:	e004      	b.n	800782e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f96a 	bl	8007b00 <USBD_CtlError>
  }
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	885b      	ldrh	r3, [r3, #2]
 8007846:	b2da      	uxtb	r2, r3
 8007848:	4b41      	ldr	r3, [pc, #260]	@ (8007950 <USBD_SetConfig+0x118>)
 800784a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800784c:	4b40      	ldr	r3, [pc, #256]	@ (8007950 <USBD_SetConfig+0x118>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d904      	bls.n	800785e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f952 	bl	8007b00 <USBD_CtlError>
 800785c:	e075      	b.n	800794a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007864:	2b02      	cmp	r3, #2
 8007866:	d002      	beq.n	800786e <USBD_SetConfig+0x36>
 8007868:	2b03      	cmp	r3, #3
 800786a:	d023      	beq.n	80078b4 <USBD_SetConfig+0x7c>
 800786c:	e062      	b.n	8007934 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800786e:	4b38      	ldr	r3, [pc, #224]	@ (8007950 <USBD_SetConfig+0x118>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01a      	beq.n	80078ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007876:	4b36      	ldr	r3, [pc, #216]	@ (8007950 <USBD_SetConfig+0x118>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2203      	movs	r2, #3
 8007884:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007888:	4b31      	ldr	r3, [pc, #196]	@ (8007950 <USBD_SetConfig+0x118>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff f9e7 	bl	8006c62 <USBD_SetClassConfig>
 8007894:	4603      	mov	r3, r0
 8007896:	2b02      	cmp	r3, #2
 8007898:	d104      	bne.n	80078a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f92f 	bl	8007b00 <USBD_CtlError>
            return;
 80078a2:	e052      	b.n	800794a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fb8f 	bl	8007fc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80078aa:	e04e      	b.n	800794a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fb8b 	bl	8007fc8 <USBD_CtlSendStatus>
        break;
 80078b2:	e04a      	b.n	800794a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80078b4:	4b26      	ldr	r3, [pc, #152]	@ (8007950 <USBD_SetConfig+0x118>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d112      	bne.n	80078e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80078c4:	4b22      	ldr	r3, [pc, #136]	@ (8007950 <USBD_SetConfig+0x118>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80078ce:	4b20      	ldr	r3, [pc, #128]	@ (8007950 <USBD_SetConfig+0x118>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff f9e3 	bl	8006ca0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fb74 	bl	8007fc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80078e0:	e033      	b.n	800794a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80078e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007950 <USBD_SetConfig+0x118>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d01d      	beq.n	800792c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff f9d1 	bl	8006ca0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80078fe:	4b14      	ldr	r3, [pc, #80]	@ (8007950 <USBD_SetConfig+0x118>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007908:	4b11      	ldr	r3, [pc, #68]	@ (8007950 <USBD_SetConfig+0x118>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7ff f9a7 	bl	8006c62 <USBD_SetClassConfig>
 8007914:	4603      	mov	r3, r0
 8007916:	2b02      	cmp	r3, #2
 8007918:	d104      	bne.n	8007924 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f8ef 	bl	8007b00 <USBD_CtlError>
            return;
 8007922:	e012      	b.n	800794a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fb4f 	bl	8007fc8 <USBD_CtlSendStatus>
        break;
 800792a:	e00e      	b.n	800794a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fb4b 	bl	8007fc8 <USBD_CtlSendStatus>
        break;
 8007932:	e00a      	b.n	800794a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f8e2 	bl	8007b00 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800793c:	4b04      	ldr	r3, [pc, #16]	@ (8007950 <USBD_SetConfig+0x118>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff f9ac 	bl	8006ca0 <USBD_ClrClassConfig>
        break;
 8007948:	bf00      	nop
    }
  }
}
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000268 	.word	0x20000268

08007954 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	88db      	ldrh	r3, [r3, #6]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d004      	beq.n	8007970 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f8c9 	bl	8007b00 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800796e:	e022      	b.n	80079b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007976:	2b02      	cmp	r3, #2
 8007978:	dc02      	bgt.n	8007980 <USBD_GetConfig+0x2c>
 800797a:	2b00      	cmp	r3, #0
 800797c:	dc03      	bgt.n	8007986 <USBD_GetConfig+0x32>
 800797e:	e015      	b.n	80079ac <USBD_GetConfig+0x58>
 8007980:	2b03      	cmp	r3, #3
 8007982:	d00b      	beq.n	800799c <USBD_GetConfig+0x48>
 8007984:	e012      	b.n	80079ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3308      	adds	r3, #8
 8007990:	2201      	movs	r2, #1
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fad7 	bl	8007f48 <USBD_CtlSendData>
        break;
 800799a:	e00c      	b.n	80079b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	2201      	movs	r2, #1
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 facf 	bl	8007f48 <USBD_CtlSendData>
        break;
 80079aa:	e004      	b.n	80079b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f8a6 	bl	8007b00 <USBD_CtlError>
        break;
 80079b4:	bf00      	nop
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ce:	3b01      	subs	r3, #1
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d81e      	bhi.n	8007a12 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	88db      	ldrh	r3, [r3, #6]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d004      	beq.n	80079e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f88e 	bl	8007b00 <USBD_CtlError>
        break;
 80079e4:	e01a      	b.n	8007a1c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f043 0202 	orr.w	r2, r3, #2
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	330c      	adds	r3, #12
 8007a06:	2202      	movs	r2, #2
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa9c 	bl	8007f48 <USBD_CtlSendData>
      break;
 8007a10:	e004      	b.n	8007a1c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f873 	bl	8007b00 <USBD_CtlError>
      break;
 8007a1a:	bf00      	nop
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	885b      	ldrh	r3, [r3, #2]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d106      	bne.n	8007a44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fac2 	bl	8007fc8 <USBD_CtlSendStatus>
  }
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d80b      	bhi.n	8007a7a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d10c      	bne.n	8007a84 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 faa8 	bl	8007fc8 <USBD_CtlSendStatus>
      }
      break;
 8007a78:	e004      	b.n	8007a84 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f83f 	bl	8007b00 <USBD_CtlError>
      break;
 8007a82:	e000      	b.n	8007a86 <USBD_ClrFeature+0x3a>
      break;
 8007a84:	bf00      	nop
  }
}
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	785a      	ldrb	r2, [r3, #1]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	3302      	adds	r3, #2
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	3303      	adds	r3, #3
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	021b      	lsls	r3, r3, #8
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	4413      	add	r3, r2
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	3305      	adds	r3, #5
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	4413      	add	r3, r2
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	3306      	adds	r3, #6
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	3307      	adds	r3, #7
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	021b      	lsls	r3, r3, #8
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	4413      	add	r3, r2
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	80da      	strh	r2, [r3, #6]

}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr

08007b00 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007b0a:	2180      	movs	r1, #128	@ 0x80
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fd1f 	bl	8008550 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007b12:	2100      	movs	r1, #0
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fd1b 	bl	8008550 <USBD_LL_StallEP>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b086      	sub	sp, #24
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d032      	beq.n	8007b9e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f834 	bl	8007ba6 <USBD_GetLen>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	3301      	adds	r3, #1
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	75fa      	strb	r2, [r7, #23]
 8007b52:	461a      	mov	r2, r3
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4413      	add	r3, r2
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	75fa      	strb	r2, [r7, #23]
 8007b64:	461a      	mov	r2, r3
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4413      	add	r3, r2
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b6e:	e012      	b.n	8007b96 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	60fa      	str	r2, [r7, #12]
 8007b76:	7dfa      	ldrb	r2, [r7, #23]
 8007b78:	1c51      	adds	r1, r2, #1
 8007b7a:	75f9      	strb	r1, [r7, #23]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	440a      	add	r2, r1
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	75fa      	strb	r2, [r7, #23]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	4413      	add	r3, r2
 8007b92:	2200      	movs	r2, #0
 8007b94:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e8      	bne.n	8007b70 <USBD_GetString+0x4e>
    }
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b085      	sub	sp, #20
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007bb2:	e005      	b.n	8007bc0 <USBD_GetLen+0x1a>
  {
    len++;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1f5      	bne.n	8007bb4 <USBD_GetLen+0xe>
  }

  return len;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr

08007bd4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007be0:	2304      	movs	r3, #4
 8007be2:	2203      	movs	r2, #3
 8007be4:	2181      	movs	r1, #129	@ 0x81
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fc6d 	bl	80084c6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007bf2:	2010      	movs	r0, #16
 8007bf4:	f000 fd7a 	bl	80086ec <USBD_static_malloc>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	e005      	b.n	8007c1a <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c14:	2200      	movs	r2, #0
 8007c16:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007c2e:	2181      	movs	r1, #129	@ 0x81
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fc6e 	bl	8008512 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 fd59 	bl	8008704 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_HID_Setup>:
  * @retval status
  */

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c74:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d045      	beq.n	8007d1e <USBD_HID_Setup+0xba>
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	f040 80d3 	bne.w	8007e3e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	785b      	ldrb	r3, [r3, #1]
 8007c9c:	3b02      	subs	r3, #2
 8007c9e:	2b09      	cmp	r3, #9
 8007ca0:	d835      	bhi.n	8007d0e <USBD_HID_Setup+0xaa>
 8007ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca8 <USBD_HID_Setup+0x44>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007cff 	.word	0x08007cff
 8007cac:	08007cdf 	.word	0x08007cdf
 8007cb0:	08007d0f 	.word	0x08007d0f
 8007cb4:	08007d0f 	.word	0x08007d0f
 8007cb8:	08007d0f 	.word	0x08007d0f
 8007cbc:	08007d0f 	.word	0x08007d0f
 8007cc0:	08007d0f 	.word	0x08007d0f
 8007cc4:	08007d0f 	.word	0x08007d0f
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007cd1 	.word	0x08007cd1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	885b      	ldrh	r3, [r3, #2]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	601a      	str	r2, [r3, #0]
          break;
 8007cdc:	e01e      	b.n	8007d1c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f92f 	bl	8007f48 <USBD_CtlSendData>
          break;
 8007cea:	e017      	b.n	8007d1c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	885b      	ldrh	r3, [r3, #2]
 8007cf0:	0a1b      	lsrs	r3, r3, #8
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	605a      	str	r2, [r3, #4]
          break;
 8007cfc:	e00e      	b.n	8007d1c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	3304      	adds	r3, #4
 8007d02:	2201      	movs	r2, #1
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f91e 	bl	8007f48 <USBD_CtlSendData>
          break;
 8007d0c:	e006      	b.n	8007d1c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff fef5 	bl	8007b00 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d16:	2302      	movs	r3, #2
 8007d18:	75fb      	strb	r3, [r7, #23]
          break;
 8007d1a:	bf00      	nop
      }
      break;
 8007d1c:	e096      	b.n	8007e4c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	2b0b      	cmp	r3, #11
 8007d24:	f200 8083 	bhi.w	8007e2e <USBD_HID_Setup+0x1ca>
 8007d28:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <USBD_HID_Setup+0xcc>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d61 	.word	0x08007d61
 8007d34:	08007e2f 	.word	0x08007e2f
 8007d38:	08007e2f 	.word	0x08007e2f
 8007d3c:	08007e2f 	.word	0x08007e2f
 8007d40:	08007e2f 	.word	0x08007e2f
 8007d44:	08007e2f 	.word	0x08007e2f
 8007d48:	08007d89 	.word	0x08007d89
 8007d4c:	08007e2f 	.word	0x08007e2f
 8007d50:	08007e2f 	.word	0x08007e2f
 8007d54:	08007e2f 	.word	0x08007e2f
 8007d58:	08007de1 	.word	0x08007de1
 8007d5c:	08007e09 	.word	0x08007e09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d107      	bne.n	8007d7a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007d6a:	f107 030e 	add.w	r3, r7, #14
 8007d6e:	2202      	movs	r2, #2
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8e8 	bl	8007f48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d78:	e060      	b.n	8007e3c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff febf 	bl	8007b00 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d82:	2302      	movs	r3, #2
 8007d84:	75fb      	strb	r3, [r7, #23]
          break;
 8007d86:	e059      	b.n	8007e3c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	885b      	ldrh	r3, [r3, #2]
 8007d8c:	0a1b      	lsrs	r3, r3, #8
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b22      	cmp	r3, #34	@ 0x22
 8007d92:	d108      	bne.n	8007da6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	88db      	ldrh	r3, [r3, #6]
 8007d98:	2b73      	cmp	r3, #115	@ 0x73
 8007d9a:	bf28      	it	cs
 8007d9c:	2373      	movcs	r3, #115	@ 0x73
 8007d9e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007da0:	4b2d      	ldr	r3, [pc, #180]	@ (8007e58 <USBD_HID_Setup+0x1f4>)
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	e015      	b.n	8007dd2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	885b      	ldrh	r3, [r3, #2]
 8007daa:	0a1b      	lsrs	r3, r3, #8
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2b21      	cmp	r3, #33	@ 0x21
 8007db0:	d108      	bne.n	8007dc4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007db2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e5c <USBD_HID_Setup+0x1f8>)
 8007db4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	88db      	ldrh	r3, [r3, #6]
 8007dba:	2b09      	cmp	r3, #9
 8007dbc:	bf28      	it	cs
 8007dbe:	2309      	movcs	r3, #9
 8007dc0:	83fb      	strh	r3, [r7, #30]
 8007dc2:	e006      	b.n	8007dd2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff fe9a 	bl	8007b00 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	75fb      	strb	r3, [r7, #23]
            break;
 8007dd0:	e034      	b.n	8007e3c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007dd2:	8bfb      	ldrh	r3, [r7, #30]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	69b9      	ldr	r1, [r7, #24]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f8b5 	bl	8007f48 <USBD_CtlSendData>
          break;
 8007dde:	e02d      	b.n	8007e3c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d107      	bne.n	8007dfa <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3308      	adds	r3, #8
 8007dee:	2201      	movs	r2, #1
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f8a8 	bl	8007f48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007df8:	e020      	b.n	8007e3c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff fe7f 	bl	8007b00 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e02:	2302      	movs	r3, #2
 8007e04:	75fb      	strb	r3, [r7, #23]
          break;
 8007e06:	e019      	b.n	8007e3c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d106      	bne.n	8007e20 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	885b      	ldrh	r3, [r3, #2]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e1e:	e00d      	b.n	8007e3c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff fe6c 	bl	8007b00 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e28:	2302      	movs	r3, #2
 8007e2a:	75fb      	strb	r3, [r7, #23]
          break;
 8007e2c:	e006      	b.n	8007e3c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff fe65 	bl	8007b00 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e36:	2302      	movs	r3, #2
 8007e38:	75fb      	strb	r3, [r7, #23]
          break;
 8007e3a:	bf00      	nop
      }
      break;
 8007e3c:	e006      	b.n	8007e4c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff fe5d 	bl	8007b00 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e46:	2302      	movs	r3, #2
 8007e48:	75fb      	strb	r3, [r7, #23]
      break;
 8007e4a:	bf00      	nop
  }

  return ret;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3720      	adds	r7, #32
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	200000c8 	.word	0x200000c8
 8007e5c:	200000b0 	.word	0x200000b0

08007e60 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e74:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d10c      	bne.n	8007e9a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	7b1b      	ldrb	r3, [r3, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d108      	bne.n	8007e9a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	2181      	movs	r1, #129	@ 0x81
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fbe3 	bl	8008660 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2222      	movs	r2, #34	@ 0x22
 8007eb0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007eb2:	4b03      	ldr	r3, [pc, #12]	@ (8007ec0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bc80      	pop	{r7}
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20000044 	.word	0x20000044

08007ec4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2222      	movs	r2, #34	@ 0x22
 8007ed0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007ed2:	4b03      	ldr	r3, [pc, #12]	@ (8007ee0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	20000068 	.word	0x20000068

08007ee4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2222      	movs	r2, #34	@ 0x22
 8007ef0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007ef2:	4b03      	ldr	r3, [pc, #12]	@ (8007f00 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	2000008c 	.word	0x2000008c

08007f04 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f16:	2200      	movs	r2, #0
 8007f18:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr
	...

08007f28 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	220a      	movs	r2, #10
 8007f34:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007f36:	4b03      	ldr	r3, [pc, #12]	@ (8007f44 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	200000bc 	.word	0x200000bc

08007f48 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	4613      	mov	r3, r2
 8007f54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007f5e:	88fa      	ldrh	r2, [r7, #6]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f64:	88fa      	ldrh	r2, [r7, #6]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	2100      	movs	r1, #0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fb75 	bl	8008660 <USBD_LL_Transmit>

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f8e:	88fb      	ldrh	r3, [r7, #6]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	2100      	movs	r1, #0
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 fb63 	bl	8008660 <USBD_LL_Transmit>

  return USBD_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 fb74 	bl	80086a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2204      	movs	r2, #4
 8007fd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fb3e 	bl	8008660 <USBD_LL_Transmit>

  return USBD_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ffe:	2300      	movs	r3, #0
 8008000:	2200      	movs	r2, #0
 8008002:	2100      	movs	r1, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fb4e 	bl	80086a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008018:	2200      	movs	r2, #0
 800801a:	490e      	ldr	r1, [pc, #56]	@ (8008054 <MX_USB_DEVICE_Init+0x40>)
 800801c:	480e      	ldr	r0, [pc, #56]	@ (8008058 <MX_USB_DEVICE_Init+0x44>)
 800801e:	f7fe fdc6 	bl	8006bae <USBD_Init>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008028:	f7f8 fc95 	bl	8000956 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800802c:	490b      	ldr	r1, [pc, #44]	@ (800805c <MX_USB_DEVICE_Init+0x48>)
 800802e:	480a      	ldr	r0, [pc, #40]	@ (8008058 <MX_USB_DEVICE_Init+0x44>)
 8008030:	f7fe fde8 	bl	8006c04 <USBD_RegisterClass>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800803a:	f7f8 fc8c 	bl	8000956 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800803e:	4806      	ldr	r0, [pc, #24]	@ (8008058 <MX_USB_DEVICE_Init+0x44>)
 8008040:	f7fe fdf9 	bl	8006c36 <USBD_Start>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800804a:	f7f8 fc84 	bl	8000956 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800804e:	bf00      	nop
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	2000013c 	.word	0x2000013c
 8008058:	2000026c 	.word	0x2000026c
 800805c:	2000000c 	.word	0x2000000c

08008060 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	4603      	mov	r3, r0
 8008068:	6039      	str	r1, [r7, #0]
 800806a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2212      	movs	r2, #18
 8008070:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008072:	4b03      	ldr	r3, [pc, #12]	@ (8008080 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000158 	.word	0x20000158

08008084 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	6039      	str	r1, [r7, #0]
 800808e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2204      	movs	r2, #4
 8008094:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008096:	4b03      	ldr	r3, [pc, #12]	@ (80080a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	2000016c 	.word	0x2000016c

080080a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	4907      	ldr	r1, [pc, #28]	@ (80080dc <USBD_FS_ProductStrDescriptor+0x34>)
 80080be:	4808      	ldr	r0, [pc, #32]	@ (80080e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80080c0:	f7ff fd2f 	bl	8007b22 <USBD_GetString>
 80080c4:	e004      	b.n	80080d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4904      	ldr	r1, [pc, #16]	@ (80080dc <USBD_FS_ProductStrDescriptor+0x34>)
 80080ca:	4805      	ldr	r0, [pc, #20]	@ (80080e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80080cc:	f7ff fd29 	bl	8007b22 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080d0:	4b02      	ldr	r3, [pc, #8]	@ (80080dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000530 	.word	0x20000530
 80080e0:	08008808 	.word	0x08008808

080080e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	6039      	str	r1, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	4904      	ldr	r1, [pc, #16]	@ (8008104 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080f4:	4804      	ldr	r0, [pc, #16]	@ (8008108 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080f6:	f7ff fd14 	bl	8007b22 <USBD_GetString>
  return USBD_StrDesc;
 80080fa:	4b02      	ldr	r3, [pc, #8]	@ (8008104 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20000530 	.word	0x20000530
 8008108:	08008818 	.word	0x08008818

0800810c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	221a      	movs	r2, #26
 800811c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800811e:	f000 f843 	bl	80081a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008122:	4b02      	ldr	r3, [pc, #8]	@ (800812c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20000170 	.word	0x20000170

08008130 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	4907      	ldr	r1, [pc, #28]	@ (8008164 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008146:	4808      	ldr	r0, [pc, #32]	@ (8008168 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008148:	f7ff fceb 	bl	8007b22 <USBD_GetString>
 800814c:	e004      	b.n	8008158 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	4904      	ldr	r1, [pc, #16]	@ (8008164 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008152:	4805      	ldr	r0, [pc, #20]	@ (8008168 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008154:	f7ff fce5 	bl	8007b22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008158:	4b02      	ldr	r3, [pc, #8]	@ (8008164 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000530 	.word	0x20000530
 8008168:	08008820 	.word	0x08008820

0800816c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	6039      	str	r1, [r7, #0]
 8008176:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d105      	bne.n	800818a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	4907      	ldr	r1, [pc, #28]	@ (80081a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008182:	4808      	ldr	r0, [pc, #32]	@ (80081a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008184:	f7ff fccd 	bl	8007b22 <USBD_GetString>
 8008188:	e004      	b.n	8008194 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	4904      	ldr	r1, [pc, #16]	@ (80081a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800818e:	4805      	ldr	r0, [pc, #20]	@ (80081a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008190:	f7ff fcc7 	bl	8007b22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008194:	4b02      	ldr	r3, [pc, #8]	@ (80081a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	20000530 	.word	0x20000530
 80081a4:	0800882c 	.word	0x0800882c

080081a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081ae:	4b0f      	ldr	r3, [pc, #60]	@ (80081ec <Get_SerialNum+0x44>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081b4:	4b0e      	ldr	r3, [pc, #56]	@ (80081f0 <Get_SerialNum+0x48>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081ba:	4b0e      	ldr	r3, [pc, #56]	@ (80081f4 <Get_SerialNum+0x4c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4413      	add	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081ce:	2208      	movs	r2, #8
 80081d0:	4909      	ldr	r1, [pc, #36]	@ (80081f8 <Get_SerialNum+0x50>)
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 f814 	bl	8008200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081d8:	2204      	movs	r2, #4
 80081da:	4908      	ldr	r1, [pc, #32]	@ (80081fc <Get_SerialNum+0x54>)
 80081dc:	68b8      	ldr	r0, [r7, #8]
 80081de:	f000 f80f 	bl	8008200 <IntToUnicode>
  }
}
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	1ffff7e8 	.word	0x1ffff7e8
 80081f0:	1ffff7ec 	.word	0x1ffff7ec
 80081f4:	1ffff7f0 	.word	0x1ffff7f0
 80081f8:	20000172 	.word	0x20000172
 80081fc:	20000182 	.word	0x20000182

08008200 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]
 8008216:	e027      	b.n	8008268 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	0f1b      	lsrs	r3, r3, #28
 800821c:	2b09      	cmp	r3, #9
 800821e:	d80b      	bhi.n	8008238 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	0f1b      	lsrs	r3, r3, #28
 8008224:	b2da      	uxtb	r2, r3
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	4619      	mov	r1, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	440b      	add	r3, r1
 8008230:	3230      	adds	r2, #48	@ 0x30
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	e00a      	b.n	800824e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	0f1b      	lsrs	r3, r3, #28
 800823c:	b2da      	uxtb	r2, r3
 800823e:	7dfb      	ldrb	r3, [r7, #23]
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	4619      	mov	r1, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	440b      	add	r3, r1
 8008248:	3237      	adds	r2, #55	@ 0x37
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	3301      	adds	r3, #1
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	4413      	add	r3, r2
 800825e:	2200      	movs	r2, #0
 8008260:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008262:	7dfb      	ldrb	r3, [r7, #23]
 8008264:	3301      	adds	r3, #1
 8008266:	75fb      	strb	r3, [r7, #23]
 8008268:	7dfa      	ldrb	r2, [r7, #23]
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	429a      	cmp	r2, r3
 800826e:	d3d3      	bcc.n	8008218 <IntToUnicode+0x18>
  }
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a0d      	ldr	r2, [pc, #52]	@ (80082c0 <HAL_PCD_MspInit+0x44>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d113      	bne.n	80082b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800828e:	4b0d      	ldr	r3, [pc, #52]	@ (80082c4 <HAL_PCD_MspInit+0x48>)
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	4a0c      	ldr	r2, [pc, #48]	@ (80082c4 <HAL_PCD_MspInit+0x48>)
 8008294:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008298:	61d3      	str	r3, [r2, #28]
 800829a:	4b0a      	ldr	r3, [pc, #40]	@ (80082c4 <HAL_PCD_MspInit+0x48>)
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80082a6:	2200      	movs	r2, #0
 80082a8:	2100      	movs	r1, #0
 80082aa:	2014      	movs	r0, #20
 80082ac:	f7f8 fdd3 	bl	8000e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80082b0:	2014      	movs	r0, #20
 80082b2:	f7f8 fdec 	bl	8000e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	40005c00 	.word	0x40005c00
 80082c4:	40021000 	.word	0x40021000

080082c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80082dc:	4619      	mov	r1, r3
 80082de:	4610      	mov	r0, r2
 80082e0:	f7fe fcf1 	bl	8006cc6 <USBD_LL_SetupStage>
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80082fe:	78fa      	ldrb	r2, [r7, #3]
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	4613      	mov	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	440b      	add	r3, r1
 800830c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	78fb      	ldrb	r3, [r7, #3]
 8008314:	4619      	mov	r1, r3
 8008316:	f7fe fd23 	bl	8006d60 <USBD_LL_DataOutStage>
}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	440b      	add	r3, r1
 8008342:	3324      	adds	r3, #36	@ 0x24
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	4619      	mov	r1, r3
 800834a:	f7fe fd7a 	bl	8006e42 <USBD_LL_DataInStage>
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe fe8a 	bl	800707e <USBD_LL_SOF>
}
 800836a:	bf00      	nop
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800837a:	2301      	movs	r3, #1
 800837c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	799b      	ldrb	r3, [r3, #6]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d001      	beq.n	800838a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008386:	f7f8 fae6 	bl	8000956 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008390:	7bfa      	ldrb	r2, [r7, #15]
 8008392:	4611      	mov	r1, r2
 8008394:	4618      	mov	r0, r3
 8008396:	f7fe fe3a 	bl	800700e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fdf3 	bl	8006f8c <USBD_LL_Reset>
}
 80083a6:	bf00      	nop
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fe34 	bl	800702c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	7a9b      	ldrb	r3, [r3, #10]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083cc:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <HAL_PCD_SuspendCallback+0x30>)
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	4a03      	ldr	r2, [pc, #12]	@ (80083e0 <HAL_PCD_SuspendCallback+0x30>)
 80083d2:	f043 0306 	orr.w	r3, r3, #6
 80083d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	e000ed00 	.word	0xe000ed00

080083e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fe2e 	bl	8007054 <USBD_LL_Resume>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008408:	4a1f      	ldr	r2, [pc, #124]	@ (8008488 <USBD_LL_Init+0x88>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <USBD_LL_Init+0x88>)
 8008414:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008418:	4b1b      	ldr	r3, [pc, #108]	@ (8008488 <USBD_LL_Init+0x88>)
 800841a:	4a1c      	ldr	r2, [pc, #112]	@ (800848c <USBD_LL_Init+0x8c>)
 800841c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800841e:	4b1a      	ldr	r3, [pc, #104]	@ (8008488 <USBD_LL_Init+0x88>)
 8008420:	2208      	movs	r2, #8
 8008422:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008424:	4b18      	ldr	r3, [pc, #96]	@ (8008488 <USBD_LL_Init+0x88>)
 8008426:	2202      	movs	r2, #2
 8008428:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800842a:	4b17      	ldr	r3, [pc, #92]	@ (8008488 <USBD_LL_Init+0x88>)
 800842c:	2200      	movs	r2, #0
 800842e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008430:	4b15      	ldr	r3, [pc, #84]	@ (8008488 <USBD_LL_Init+0x88>)
 8008432:	2200      	movs	r2, #0
 8008434:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008436:	4b14      	ldr	r3, [pc, #80]	@ (8008488 <USBD_LL_Init+0x88>)
 8008438:	2200      	movs	r2, #0
 800843a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800843c:	4812      	ldr	r0, [pc, #72]	@ (8008488 <USBD_LL_Init+0x88>)
 800843e:	f7f8 ffa8 	bl	8001392 <HAL_PCD_Init>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008448:	f7f8 fa85 	bl	8000956 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008452:	2318      	movs	r3, #24
 8008454:	2200      	movs	r2, #0
 8008456:	2100      	movs	r1, #0
 8008458:	f7fa fca2 	bl	8002da0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008462:	2358      	movs	r3, #88	@ 0x58
 8008464:	2200      	movs	r2, #0
 8008466:	2180      	movs	r1, #128	@ 0x80
 8008468:	f7fa fc9a 	bl	8002da0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008472:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008476:	2200      	movs	r2, #0
 8008478:	2181      	movs	r1, #129	@ 0x81
 800847a:	f7fa fc91 	bl	8002da0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20000730 	.word	0x20000730
 800848c:	40005c00 	.word	0x40005c00

08008490 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7f9 f869 	bl	800157e <HAL_PCD_Start>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f93a 	bl	800872c <USBD_Get_USB_Status>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	4608      	mov	r0, r1
 80084d0:	4611      	mov	r1, r2
 80084d2:	461a      	mov	r2, r3
 80084d4:	4603      	mov	r3, r0
 80084d6:	70fb      	strb	r3, [r7, #3]
 80084d8:	460b      	mov	r3, r1
 80084da:	70bb      	strb	r3, [r7, #2]
 80084dc:	4613      	mov	r3, r2
 80084de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084ee:	78bb      	ldrb	r3, [r7, #2]
 80084f0:	883a      	ldrh	r2, [r7, #0]
 80084f2:	78f9      	ldrb	r1, [r7, #3]
 80084f4:	f7f9 f9bd 	bl	8001872 <HAL_PCD_EP_Open>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f914 	bl	800872c <USBD_Get_USB_Status>
 8008504:	4603      	mov	r3, r0
 8008506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008508:	7bbb      	ldrb	r3, [r7, #14]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f7f9 f9fb 	bl	800192c <HAL_PCD_EP_Close>
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 f8f5 	bl	800872c <USBD_Get_USB_Status>
 8008542:	4603      	mov	r3, r0
 8008544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008546:	7bbb      	ldrb	r3, [r7, #14]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800856a:	78fa      	ldrb	r2, [r7, #3]
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f7f9 fa8c 	bl	8001a8c <HAL_PCD_EP_SetStall>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f8d6 	bl	800872c <USBD_Get_USB_Status>
 8008580:	4603      	mov	r3, r0
 8008582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008584:	7bbb      	ldrb	r3, [r7, #14]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	460b      	mov	r3, r1
 8008598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7f9 facd 	bl	8001b4c <HAL_PCD_EP_ClrStall>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f8b7 	bl	800872c <USBD_Get_USB_Status>
 80085be:	4603      	mov	r3, r0
 80085c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	da0b      	bge.n	8008600 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085ee:	68f9      	ldr	r1, [r7, #12]
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	440b      	add	r3, r1
 80085fa:	3312      	adds	r3, #18
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	e00b      	b.n	8008618 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	4613      	mov	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	440b      	add	r3, r1
 8008612:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008616:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr

08008622 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	460b      	mov	r3, r1
 800862c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800863c:	78fa      	ldrb	r2, [r7, #3]
 800863e:	4611      	mov	r1, r2
 8008640:	4618      	mov	r0, r3
 8008642:	f7f9 f8f2 	bl	800182a <HAL_PCD_SetAddress>
 8008646:	4603      	mov	r3, r0
 8008648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 f86d 	bl	800872c <USBD_Get_USB_Status>
 8008652:	4603      	mov	r3, r0
 8008654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008656:	7bbb      	ldrb	r3, [r7, #14]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	607a      	str	r2, [r7, #4]
 800866a:	461a      	mov	r2, r3
 800866c:	460b      	mov	r3, r1
 800866e:	72fb      	strb	r3, [r7, #11]
 8008670:	4613      	mov	r3, r2
 8008672:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008682:	893b      	ldrh	r3, [r7, #8]
 8008684:	7af9      	ldrb	r1, [r7, #11]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	f7f9 f9c9 	bl	8001a1e <HAL_PCD_EP_Transmit>
 800868c:	4603      	mov	r3, r0
 800868e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	4618      	mov	r0, r3
 8008694:	f000 f84a 	bl	800872c <USBD_Get_USB_Status>
 8008698:	4603      	mov	r3, r0
 800869a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800869c:	7dbb      	ldrb	r3, [r7, #22]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b086      	sub	sp, #24
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	461a      	mov	r2, r3
 80086b2:	460b      	mov	r3, r1
 80086b4:	72fb      	strb	r3, [r7, #11]
 80086b6:	4613      	mov	r3, r2
 80086b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086c8:	893b      	ldrh	r3, [r7, #8]
 80086ca:	7af9      	ldrb	r1, [r7, #11]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	f7f9 f975 	bl	80019bc <HAL_PCD_EP_Receive>
 80086d2:	4603      	mov	r3, r0
 80086d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f827 	bl	800872c <USBD_Get_USB_Status>
 80086de:	4603      	mov	r3, r0
 80086e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086f4:	4b02      	ldr	r3, [pc, #8]	@ (8008700 <USBD_static_malloc+0x14>)
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr
 8008700:	20000a08 	.word	0x20000a08

08008704 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]

}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr

08008716 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	460b      	mov	r3, r1
 8008720:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	2b03      	cmp	r3, #3
 800873e:	d817      	bhi.n	8008770 <USBD_Get_USB_Status+0x44>
 8008740:	a201      	add	r2, pc, #4	@ (adr r2, 8008748 <USBD_Get_USB_Status+0x1c>)
 8008742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008746:	bf00      	nop
 8008748:	08008759 	.word	0x08008759
 800874c:	0800875f 	.word	0x0800875f
 8008750:	08008765 	.word	0x08008765
 8008754:	0800876b 	.word	0x0800876b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	73fb      	strb	r3, [r7, #15]
    break;
 800875c:	e00b      	b.n	8008776 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800875e:	2302      	movs	r3, #2
 8008760:	73fb      	strb	r3, [r7, #15]
    break;
 8008762:	e008      	b.n	8008776 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008764:	2301      	movs	r3, #1
 8008766:	73fb      	strb	r3, [r7, #15]
    break;
 8008768:	e005      	b.n	8008776 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800876a:	2302      	movs	r3, #2
 800876c:	73fb      	strb	r3, [r7, #15]
    break;
 800876e:	e002      	b.n	8008776 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008770:	2302      	movs	r3, #2
 8008772:	73fb      	strb	r3, [r7, #15]
    break;
 8008774:	bf00      	nop
  }
  return usb_status;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop

08008784 <memset>:
 8008784:	4603      	mov	r3, r0
 8008786:	4402      	add	r2, r0
 8008788:	4293      	cmp	r3, r2
 800878a:	d100      	bne.n	800878e <memset+0xa>
 800878c:	4770      	bx	lr
 800878e:	f803 1b01 	strb.w	r1, [r3], #1
 8008792:	e7f9      	b.n	8008788 <memset+0x4>

08008794 <__libc_init_array>:
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	2600      	movs	r6, #0
 8008798:	4d0c      	ldr	r5, [pc, #48]	@ (80087cc <__libc_init_array+0x38>)
 800879a:	4c0d      	ldr	r4, [pc, #52]	@ (80087d0 <__libc_init_array+0x3c>)
 800879c:	1b64      	subs	r4, r4, r5
 800879e:	10a4      	asrs	r4, r4, #2
 80087a0:	42a6      	cmp	r6, r4
 80087a2:	d109      	bne.n	80087b8 <__libc_init_array+0x24>
 80087a4:	f000 f81a 	bl	80087dc <_init>
 80087a8:	2600      	movs	r6, #0
 80087aa:	4d0a      	ldr	r5, [pc, #40]	@ (80087d4 <__libc_init_array+0x40>)
 80087ac:	4c0a      	ldr	r4, [pc, #40]	@ (80087d8 <__libc_init_array+0x44>)
 80087ae:	1b64      	subs	r4, r4, r5
 80087b0:	10a4      	asrs	r4, r4, #2
 80087b2:	42a6      	cmp	r6, r4
 80087b4:	d105      	bne.n	80087c2 <__libc_init_array+0x2e>
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087bc:	4798      	blx	r3
 80087be:	3601      	adds	r6, #1
 80087c0:	e7ee      	b.n	80087a0 <__libc_init_array+0xc>
 80087c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c6:	4798      	blx	r3
 80087c8:	3601      	adds	r6, #1
 80087ca:	e7f2      	b.n	80087b2 <__libc_init_array+0x1e>
 80087cc:	08008868 	.word	0x08008868
 80087d0:	08008868 	.word	0x08008868
 80087d4:	08008868 	.word	0x08008868
 80087d8:	0800886c 	.word	0x0800886c

080087dc <_init>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	bf00      	nop
 80087e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e2:	bc08      	pop	{r3}
 80087e4:	469e      	mov	lr, r3
 80087e6:	4770      	bx	lr

080087e8 <_fini>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	bf00      	nop
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr
