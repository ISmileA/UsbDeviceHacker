
STM32F103HidDeviceEmulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080088e0  080088e0  000098e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008960  08008960  0000a190  2**0
                  CONTENTS
  4 .ARM          00000000  08008960  08008960  0000a190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008960  08008960  0000a190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008964  08008964  00009964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08008968  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  20000190  08008af8  0000a190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c04  08008af8  0000ac04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001179d  00000000  00000000  0000a1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b9  00000000  00000000  0001b956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001f210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a51  00000000  00000000  0001fff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e9  00000000  00000000  00020a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017048  00000000  00000000  0003b032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008726c  00000000  00000000  0005207a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d92e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  000d932c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000dc84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	080088c8 	.word	0x080088c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	080088c8 	.word	0x080088c8

0800014c <AnimationSetup>:
extern USBD_HandleTypeDef hUsbDeviceFS;
uint32_t time = 0;
uint8_t flag = 1;
uint16_t data_set = 0;

void AnimationSetup(Action *act){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	785b      	ldrb	r3, [r3, #1]
 8000158:	2b01      	cmp	r3, #1
 800015a:	d002      	beq.n	8000162 <AnimationSetup+0x16>
 800015c:	2b02      	cmp	r3, #2
 800015e:	d009      	beq.n	8000174 <AnimationSetup+0x28>
				break;
		case(REMOVE_COMMAND):
				AnimationRemove();
				break;
	}
}
 8000160:	e00b      	b.n	800017a <AnimationSetup+0x2e>
				AnimationSet(act->data, act->length);
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	1cda      	adds	r2, r3, #3
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	789b      	ldrb	r3, [r3, #2]
 800016a:	4619      	mov	r1, r3
 800016c:	4610      	mov	r0, r2
 800016e:	f000 f809 	bl	8000184 <AnimationSet>
				break;
 8000172:	e002      	b.n	800017a <AnimationSetup+0x2e>
				AnimationRemove();
 8000174:	f000 f838 	bl	80001e8 <AnimationRemove>
				break;
 8000178:	bf00      	nop
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
	...

08000184 <AnimationSet>:

void AnimationSet(uint8_t *data, uint8_t len){
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	70fb      	strb	r3, [r7, #3]
	flag = 1;
 8000190:	4b13      	ldr	r3, [pc, #76]	@ (80001e0 <AnimationSet+0x5c>)
 8000192:	2201      	movs	r2, #1
 8000194:	701a      	strb	r2, [r3, #0]
	animation.id = data[0];
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	781a      	ldrb	r2, [r3, #0]
 800019a:	4b12      	ldr	r3, [pc, #72]	@ (80001e4 <AnimationSet+0x60>)
 800019c:	701a      	strb	r2, [r3, #0]
	animation.length = len-1;
 800019e:	78fb      	ldrb	r3, [r7, #3]
 80001a0:	3b01      	subs	r3, #1
 80001a2:	b2da      	uxtb	r2, r3
 80001a4:	4b0f      	ldr	r3, [pc, #60]	@ (80001e4 <AnimationSet+0x60>)
 80001a6:	705a      	strb	r2, [r3, #1]
	for(uint8_t i=0; i<len-1; i++)
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
 80001ac:	e00c      	b.n	80001c8 <AnimationSet+0x44>
		animation.data[i] = data[i+1];
 80001ae:	7bfb      	ldrb	r3, [r7, #15]
 80001b0:	3301      	adds	r3, #1
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	441a      	add	r2, r3
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	7811      	ldrb	r1, [r2, #0]
 80001ba:	4a0a      	ldr	r2, [pc, #40]	@ (80001e4 <AnimationSet+0x60>)
 80001bc:	4413      	add	r3, r2
 80001be:	460a      	mov	r2, r1
 80001c0:	709a      	strb	r2, [r3, #2]
	for(uint8_t i=0; i<len-1; i++)
 80001c2:	7bfb      	ldrb	r3, [r7, #15]
 80001c4:	3301      	adds	r3, #1
 80001c6:	73fb      	strb	r3, [r7, #15]
 80001c8:	7bfa      	ldrb	r2, [r7, #15]
 80001ca:	78fb      	ldrb	r3, [r7, #3]
 80001cc:	3b01      	subs	r3, #1
 80001ce:	429a      	cmp	r2, r3
 80001d0:	dbed      	blt.n	80001ae <AnimationSet+0x2a>
}
 80001d2:	bf00      	nop
 80001d4:	bf00      	nop
 80001d6:	3714      	adds	r7, #20
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	20000000 	.word	0x20000000
 80001e4:	20000200 	.word	0x20000200

080001e8 <AnimationRemove>:

void AnimationRemove(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	animation.id = 0;
 80001ec:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <AnimationRemove+0x14>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000200 	.word	0x20000200

08000200 <Animate>:

void Animate(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	switch(animation.id){
 8000204:	4b07      	ldr	r3, [pc, #28]	@ (8000224 <Animate+0x24>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b01      	cmp	r3, #1
 800020a:	d002      	beq.n	8000212 <Animate+0x12>
 800020c:	2b02      	cmp	r3, #2
 800020e:	d003      	beq.n	8000218 <Animate+0x18>
			break;
		case(KEYBOARD_TEXT_ANIMATION):
			KeyboardTextAnimation();
			break;
	}
}
 8000210:	e005      	b.n	800021e <Animate+0x1e>
			MouseMoveAnimation();
 8000212:	f000 f809 	bl	8000228 <MouseMoveAnimation>
			break;
 8000216:	e002      	b.n	800021e <Animate+0x1e>
			KeyboardTextAnimation();
 8000218:	f000 f882 	bl	8000320 <KeyboardTextAnimation>
			break;
 800021c:	bf00      	nop
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000200 	.word	0x20000200

08000228 <MouseMoveAnimation>:

void MouseMoveAnimation(){
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
	if((HAL_GetTick()-time) >= 10){
 800022e:	f000 fd83 	bl	8000d38 <HAL_GetTick>
 8000232:	4602      	mov	r2, r0
 8000234:	4b37      	ldr	r3, [pc, #220]	@ (8000314 <MouseMoveAnimation+0xec>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	1ad3      	subs	r3, r2, r3
 800023a:	2b09      	cmp	r3, #9
 800023c:	d965      	bls.n	800030a <MouseMoveAnimation+0xe2>
		uint8_t data_out[5] = {0x01, animation.data[1], 0, 0, 0};
 800023e:	2301      	movs	r3, #1
 8000240:	703b      	strb	r3, [r7, #0]
 8000242:	4b35      	ldr	r3, [pc, #212]	@ (8000318 <MouseMoveAnimation+0xf0>)
 8000244:	78db      	ldrb	r3, [r3, #3]
 8000246:	707b      	strb	r3, [r7, #1]
 8000248:	2300      	movs	r3, #0
 800024a:	70bb      	strb	r3, [r7, #2]
 800024c:	2300      	movs	r3, #0
 800024e:	70fb      	strb	r3, [r7, #3]
 8000250:	2300      	movs	r3, #0
 8000252:	713b      	strb	r3, [r7, #4]
		switch((char)animation.data[0]){
 8000254:	4b30      	ldr	r3, [pc, #192]	@ (8000318 <MouseMoveAnimation+0xf0>)
 8000256:	789b      	ldrb	r3, [r3, #2]
 8000258:	3b62      	subs	r3, #98	@ 0x62
 800025a:	2b12      	cmp	r3, #18
 800025c:	d84a      	bhi.n	80002f4 <MouseMoveAnimation+0xcc>
 800025e:	a201      	add	r2, pc, #4	@ (adr r2, 8000264 <MouseMoveAnimation+0x3c>)
 8000260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000264:	080002d3 	.word	0x080002d3
 8000268:	080002f5 	.word	0x080002f5
 800026c:	080002f5 	.word	0x080002f5
 8000270:	080002f5 	.word	0x080002f5
 8000274:	080002f5 	.word	0x080002f5
 8000278:	080002f5 	.word	0x080002f5
 800027c:	080002f5 	.word	0x080002f5
 8000280:	080002f5 	.word	0x080002f5
 8000284:	080002f5 	.word	0x080002f5
 8000288:	080002f5 	.word	0x080002f5
 800028c:	080002c1 	.word	0x080002c1
 8000290:	080002f5 	.word	0x080002f5
 8000294:	080002f5 	.word	0x080002f5
 8000298:	080002f5 	.word	0x080002f5
 800029c:	080002f5 	.word	0x080002f5
 80002a0:	080002f5 	.word	0x080002f5
 80002a4:	080002b1 	.word	0x080002b1
 80002a8:	080002f5 	.word	0x080002f5
 80002ac:	080002e3 	.word	0x080002e3
			case('r'):
				data_out[2] = 1+2*animation.data[2];
 80002b0:	4b19      	ldr	r3, [pc, #100]	@ (8000318 <MouseMoveAnimation+0xf0>)
 80002b2:	791b      	ldrb	r3, [r3, #4]
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	3301      	adds	r3, #1
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	70bb      	strb	r3, [r7, #2]
				break;
 80002be:	e019      	b.n	80002f4 <MouseMoveAnimation+0xcc>
			case('l'):
				data_out[2] = 254-2*animation.data[2];
 80002c0:	4b15      	ldr	r3, [pc, #84]	@ (8000318 <MouseMoveAnimation+0xf0>)
 80002c2:	791b      	ldrb	r3, [r3, #4]
 80002c4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	70bb      	strb	r3, [r7, #2]
				break;
 80002d0:	e010      	b.n	80002f4 <MouseMoveAnimation+0xcc>
			case('b'):
				data_out[3] = 1+2*animation.data[2];
 80002d2:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MouseMoveAnimation+0xf0>)
 80002d4:	791b      	ldrb	r3, [r3, #4]
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	3301      	adds	r3, #1
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	70fb      	strb	r3, [r7, #3]
				break;
 80002e0:	e008      	b.n	80002f4 <MouseMoveAnimation+0xcc>
			case('t'):
				data_out[3] = 254-2*animation.data[2];
 80002e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000318 <MouseMoveAnimation+0xf0>)
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	70fb      	strb	r3, [r7, #3]
				break;
 80002f2:	bf00      	nop
		}
		USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80002f4:	463b      	mov	r3, r7
 80002f6:	2205      	movs	r2, #5
 80002f8:	4619      	mov	r1, r3
 80002fa:	4808      	ldr	r0, [pc, #32]	@ (800031c <MouseMoveAnimation+0xf4>)
 80002fc:	f007 fe26 	bl	8007f4c <USBD_HID_SendReport>
		time = HAL_GetTick();
 8000300:	f000 fd1a 	bl	8000d38 <HAL_GetTick>
 8000304:	4603      	mov	r3, r0
 8000306:	4a03      	ldr	r2, [pc, #12]	@ (8000314 <MouseMoveAnimation+0xec>)
 8000308:	6013      	str	r3, [r2, #0]
	}
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200001ac 	.word	0x200001ac
 8000318:	20000200 	.word	0x20000200
 800031c:	20000454 	.word	0x20000454

08000320 <KeyboardTextAnimation>:
void KeyboardTextAnimation(){
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
	if((HAL_GetTick()-time) > 5){
 8000326:	f000 fd07 	bl	8000d38 <HAL_GetTick>
 800032a:	4602      	mov	r2, r0
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <KeyboardTextAnimation+0xc0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	2b05      	cmp	r3, #5
 8000334:	d950      	bls.n	80003d8 <KeyboardTextAnimation+0xb8>
		if(flag){
 8000336:	4b2b      	ldr	r3, [pc, #172]	@ (80003e4 <KeyboardTextAnimation+0xc4>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d047      	beq.n	80003ce <KeyboardTextAnimation+0xae>
			uint8_t data_out[9] = {0x02, animation.data[data_set+1], 0, animation.data[data_set], 0, 0, 0, 0, 0};
 800033e:	2302      	movs	r3, #2
 8000340:	733b      	strb	r3, [r7, #12]
 8000342:	4b29      	ldr	r3, [pc, #164]	@ (80003e8 <KeyboardTextAnimation+0xc8>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	3301      	adds	r3, #1
 8000348:	4a28      	ldr	r2, [pc, #160]	@ (80003ec <KeyboardTextAnimation+0xcc>)
 800034a:	4413      	add	r3, r2
 800034c:	789b      	ldrb	r3, [r3, #2]
 800034e:	737b      	strb	r3, [r7, #13]
 8000350:	2300      	movs	r3, #0
 8000352:	73bb      	strb	r3, [r7, #14]
 8000354:	4b24      	ldr	r3, [pc, #144]	@ (80003e8 <KeyboardTextAnimation+0xc8>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	4b24      	ldr	r3, [pc, #144]	@ (80003ec <KeyboardTextAnimation+0xcc>)
 800035c:	4413      	add	r3, r2
 800035e:	789b      	ldrb	r3, [r3, #2]
 8000360:	73fb      	strb	r3, [r7, #15]
 8000362:	2300      	movs	r3, #0
 8000364:	743b      	strb	r3, [r7, #16]
 8000366:	2300      	movs	r3, #0
 8000368:	747b      	strb	r3, [r7, #17]
 800036a:	2300      	movs	r3, #0
 800036c:	74bb      	strb	r3, [r7, #18]
 800036e:	2300      	movs	r3, #0
 8000370:	74fb      	strb	r3, [r7, #19]
 8000372:	2300      	movs	r3, #0
 8000374:	753b      	strb	r3, [r7, #20]
			data_set+=2;
 8000376:	4b1c      	ldr	r3, [pc, #112]	@ (80003e8 <KeyboardTextAnimation+0xc8>)
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	3302      	adds	r3, #2
 800037c:	b29a      	uxth	r2, r3
 800037e:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <KeyboardTextAnimation+0xc8>)
 8000380:	801a      	strh	r2, [r3, #0]
			if(data_set >= animation.length-1){
 8000382:	4b19      	ldr	r3, [pc, #100]	@ (80003e8 <KeyboardTextAnimation+0xc8>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	461a      	mov	r2, r3
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <KeyboardTextAnimation+0xcc>)
 800038a:	785b      	ldrb	r3, [r3, #1]
 800038c:	3b01      	subs	r3, #1
 800038e:	429a      	cmp	r2, r3
 8000390:	db05      	blt.n	800039e <KeyboardTextAnimation+0x7e>
				data_set = 0;
 8000392:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <KeyboardTextAnimation+0xc8>)
 8000394:	2200      	movs	r2, #0
 8000396:	801a      	strh	r2, [r3, #0]
				flag = 0;
 8000398:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <KeyboardTextAnimation+0xc4>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
			}
			USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 800039e:	f107 030c 	add.w	r3, r7, #12
 80003a2:	2209      	movs	r2, #9
 80003a4:	4619      	mov	r1, r3
 80003a6:	4812      	ldr	r0, [pc, #72]	@ (80003f0 <KeyboardTextAnimation+0xd0>)
 80003a8:	f007 fdd0 	bl	8007f4c <USBD_HID_SendReport>
			HAL_Delay(30);
 80003ac:	201e      	movs	r0, #30
 80003ae:	f000 fccd 	bl	8000d4c <HAL_Delay>
			uint8_t data_res[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 80003b2:	4a10      	ldr	r2, [pc, #64]	@ (80003f4 <KeyboardTextAnimation+0xd4>)
 80003b4:	463b      	mov	r3, r7
 80003b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80003b8:	c303      	stmia	r3!, {r0, r1}
 80003ba:	701a      	strb	r2, [r3, #0]
			USBD_HID_SendReport(&hUsbDeviceFS, data_res, 9);
 80003bc:	463b      	mov	r3, r7
 80003be:	2209      	movs	r2, #9
 80003c0:	4619      	mov	r1, r3
 80003c2:	480b      	ldr	r0, [pc, #44]	@ (80003f0 <KeyboardTextAnimation+0xd0>)
 80003c4:	f007 fdc2 	bl	8007f4c <USBD_HID_SendReport>
			HAL_Delay(30);
 80003c8:	201e      	movs	r0, #30
 80003ca:	f000 fcbf 	bl	8000d4c <HAL_Delay>
		}
		time = HAL_GetTick();
 80003ce:	f000 fcb3 	bl	8000d38 <HAL_GetTick>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a02      	ldr	r2, [pc, #8]	@ (80003e0 <KeyboardTextAnimation+0xc0>)
 80003d6:	6013      	str	r3, [r2, #0]
	}
}
 80003d8:	bf00      	nop
 80003da:	3718      	adds	r7, #24
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	200001ac 	.word	0x200001ac
 80003e4:	20000000 	.word	0x20000000
 80003e8:	200001b0 	.word	0x200001b0
 80003ec:	20000200 	.word	0x20000200
 80003f0:	20000454 	.word	0x20000454
 80003f4:	080088e0 	.word	0x080088e0

080003f8 <KeyboardSetup>:
 */

#include "KeyboardModule.h"
extern USBD_HandleTypeDef hUsbDeviceFS;

void KeyboardSetup(Action *act){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	785b      	ldrb	r3, [r3, #1]
 8000404:	2b03      	cmp	r3, #3
 8000406:	d00c      	beq.n	8000422 <KeyboardSetup+0x2a>
 8000408:	2b03      	cmp	r3, #3
 800040a:	dc13      	bgt.n	8000434 <KeyboardSetup+0x3c>
 800040c:	2b01      	cmp	r3, #1
 800040e:	d002      	beq.n	8000416 <KeyboardSetup+0x1e>
 8000410:	2b02      	cmp	r3, #2
 8000412:	d00c      	beq.n	800042e <KeyboardSetup+0x36>
				break;
		case(REMOVE_COMMAND):
				KeyboardRemove();
				break;
	}
}
 8000414:	e00e      	b.n	8000434 <KeyboardSetup+0x3c>
				KeyboardSet(act->data);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3303      	adds	r3, #3
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f80e 	bl	800043c <KeyboardSet>
				break;
 8000420:	e008      	b.n	8000434 <KeyboardSetup+0x3c>
				KeyboardClick(act->data);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3303      	adds	r3, #3
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f836 	bl	8000498 <KeyboardClick>
				break;
 800042c:	e002      	b.n	8000434 <KeyboardSetup+0x3c>
				KeyboardRemove();
 800042e:	f000 f865 	bl	80004fc <KeyboardRemove>
				break;
 8000432:	bf00      	nop
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <KeyboardSet>:

void KeyboardSet(uint8_t *data){
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 8000452:	2302      	movs	r3, #2
 8000454:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 8000456:	2300      	movs	r3, #0
 8000458:	75fb      	strb	r3, [r7, #23]
 800045a:	e00c      	b.n	8000476 <KeyboardSet+0x3a>
		data_out[i+1] = data[i];
 800045c:	7dfb      	ldrb	r3, [r7, #23]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	441a      	add	r2, r3
 8000462:	7dfb      	ldrb	r3, [r7, #23]
 8000464:	3301      	adds	r3, #1
 8000466:	7812      	ldrb	r2, [r2, #0]
 8000468:	3318      	adds	r3, #24
 800046a:	443b      	add	r3, r7
 800046c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 8000470:	7dfb      	ldrb	r3, [r7, #23]
 8000472:	3301      	adds	r3, #1
 8000474:	75fb      	strb	r3, [r7, #23]
 8000476:	7dfb      	ldrb	r3, [r7, #23]
 8000478:	2b07      	cmp	r3, #7
 800047a:	d9ef      	bls.n	800045c <KeyboardSet+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 800047c:	f107 030c 	add.w	r3, r7, #12
 8000480:	2209      	movs	r2, #9
 8000482:	4619      	mov	r1, r3
 8000484:	4803      	ldr	r0, [pc, #12]	@ (8000494 <KeyboardSet+0x58>)
 8000486:	f007 fd61 	bl	8007f4c <USBD_HID_SendReport>
}
 800048a:	bf00      	nop
 800048c:	3718      	adds	r7, #24
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000454 	.word	0x20000454

08000498 <KeyboardClick>:

void KeyboardClick(uint8_t *data){
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 80004ae:	2302      	movs	r3, #2
 80004b0:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 80004b2:	2300      	movs	r3, #0
 80004b4:	75fb      	strb	r3, [r7, #23]
 80004b6:	e00c      	b.n	80004d2 <KeyboardClick+0x3a>
		data_out[i+1] = data[i];
 80004b8:	7dfb      	ldrb	r3, [r7, #23]
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	441a      	add	r2, r3
 80004be:	7dfb      	ldrb	r3, [r7, #23]
 80004c0:	3301      	adds	r3, #1
 80004c2:	7812      	ldrb	r2, [r2, #0]
 80004c4:	3318      	adds	r3, #24
 80004c6:	443b      	add	r3, r7
 80004c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 80004cc:	7dfb      	ldrb	r3, [r7, #23]
 80004ce:	3301      	adds	r3, #1
 80004d0:	75fb      	strb	r3, [r7, #23]
 80004d2:	7dfb      	ldrb	r3, [r7, #23]
 80004d4:	2b07      	cmp	r3, #7
 80004d6:	d9ef      	bls.n	80004b8 <KeyboardClick+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 80004d8:	f107 030c 	add.w	r3, r7, #12
 80004dc:	2209      	movs	r2, #9
 80004de:	4619      	mov	r1, r3
 80004e0:	4805      	ldr	r0, [pc, #20]	@ (80004f8 <KeyboardClick+0x60>)
 80004e2:	f007 fd33 	bl	8007f4c <USBD_HID_SendReport>
	HAL_Delay(30);
 80004e6:	201e      	movs	r0, #30
 80004e8:	f000 fc30 	bl	8000d4c <HAL_Delay>
	KeyboardRemove();
 80004ec:	f000 f806 	bl	80004fc <KeyboardRemove>
}
 80004f0:	bf00      	nop
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000454 	.word	0x20000454

080004fc <KeyboardRemove>:

void KeyboardRemove(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
	uint8_t data_out[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 8000502:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <KeyboardRemove+0x24>)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	ca07      	ldmia	r2, {r0, r1, r2}
 8000508:	c303      	stmia	r3!, {r0, r1}
 800050a:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2209      	movs	r2, #9
 8000510:	4619      	mov	r1, r3
 8000512:	4804      	ldr	r0, [pc, #16]	@ (8000524 <KeyboardRemove+0x28>)
 8000514:	f007 fd1a 	bl	8007f4c <USBD_HID_SendReport>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	080088ec 	.word	0x080088ec
 8000524:	20000454 	.word	0x20000454

08000528 <MouseCommandSetup>:
 */

#include <MouseModule.h>
extern USBD_HandleTypeDef hUsbDeviceFS;

void MouseCommandSetup(Action *act){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	785b      	ldrb	r3, [r3, #1]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d00c      	beq.n	8000552 <MouseCommandSetup+0x2a>
 8000538:	2b03      	cmp	r3, #3
 800053a:	dc13      	bgt.n	8000564 <MouseCommandSetup+0x3c>
 800053c:	2b01      	cmp	r3, #1
 800053e:	d002      	beq.n	8000546 <MouseCommandSetup+0x1e>
 8000540:	2b02      	cmp	r3, #2
 8000542:	d00c      	beq.n	800055e <MouseCommandSetup+0x36>
			break;
		case(REMOVE_COMMAND):
			MouseRemove();
			break;
	}
}
 8000544:	e00e      	b.n	8000564 <MouseCommandSetup+0x3c>
			MouseSet(act->data);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3303      	adds	r3, #3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f80e 	bl	800056c <MouseSet>
			break;
 8000550:	e008      	b.n	8000564 <MouseCommandSetup+0x3c>
			MouseClick(act->data[0]);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	78db      	ldrb	r3, [r3, #3]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f836 	bl	80005c8 <MouseClick>
			break;
 800055c:	e002      	b.n	8000564 <MouseCommandSetup+0x3c>
			MouseRemove();
 800055e:	f000 f855 	bl	800060c <MouseRemove>
			break;
 8000562:	bf00      	nop
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <MouseSet>:

void MouseSet(uint8_t *data){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8000574:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <MouseSet+0x54>)
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800057e:	6018      	str	r0, [r3, #0]
 8000580:	3304      	adds	r3, #4
 8000582:	7019      	strb	r1, [r3, #0]
	for(uint8_t i=0; i<4; i++)
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
 8000588:	e00c      	b.n	80005a4 <MouseSet+0x38>
		data_out[i+1] = data[i];
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	441a      	add	r2, r3
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	3301      	adds	r3, #1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	3310      	adds	r3, #16
 8000598:	443b      	add	r3, r7
 800059a:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i=0; i<4; i++)
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	3301      	adds	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d9ef      	bls.n	800058a <MouseSet+0x1e>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	2205      	movs	r2, #5
 80005b0:	4619      	mov	r1, r3
 80005b2:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <MouseSet+0x58>)
 80005b4:	f007 fcca 	bl	8007f4c <USBD_HID_SendReport>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	080088f8 	.word	0x080088f8
 80005c4:	20000454 	.word	0x20000454

080005c8 <MouseClick>:

void MouseClick(uint8_t buttons){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[5] = {0x01, buttons, 0, 0, 0};
 80005d2:	2301      	movs	r3, #1
 80005d4:	723b      	strb	r3, [r7, #8]
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	727b      	strb	r3, [r7, #9]
 80005da:	2300      	movs	r3, #0
 80005dc:	72bb      	strb	r3, [r7, #10]
 80005de:	2300      	movs	r3, #0
 80005e0:	72fb      	strb	r3, [r7, #11]
 80005e2:	2300      	movs	r3, #0
 80005e4:	733b      	strb	r3, [r7, #12]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	2205      	movs	r2, #5
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MouseClick+0x40>)
 80005f0:	f007 fcac 	bl	8007f4c <USBD_HID_SendReport>
	HAL_Delay(30);
 80005f4:	201e      	movs	r0, #30
 80005f6:	f000 fba9 	bl	8000d4c <HAL_Delay>
	MouseRemove();
 80005fa:	f000 f807 	bl	800060c <MouseRemove>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000454 	.word	0x20000454

0800060c <MouseRemove>:

void MouseRemove(){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8000612:	4a08      	ldr	r2, [pc, #32]	@ (8000634 <MouseRemove+0x28>)
 8000614:	463b      	mov	r3, r7
 8000616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061a:	6018      	str	r0, [r3, #0]
 800061c:	3304      	adds	r3, #4
 800061e:	7019      	strb	r1, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8000620:	463b      	mov	r3, r7
 8000622:	2205      	movs	r2, #5
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	@ (8000638 <MouseRemove+0x2c>)
 8000628:	f007 fc90 	bl	8007f4c <USBD_HID_SendReport>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	080088f8 	.word	0x080088f8
 8000638:	20000454 	.word	0x20000454

0800063c <HAL_UART_RxCpltCallback>:
uint8_t length = 0;
uint8_t parsedData = 0;
uint8_t buffer[32] = {};
uint32_t timer = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint8_t byte = rxcall;
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <HAL_UART_RxCpltCallback+0xb0>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	73fb      	strb	r3, [r7, #15]
	if((HAL_GetTick()-timer) > 2){
 800064a:	f000 fb75 	bl	8000d38 <HAL_GetTick>
 800064e:	4602      	mov	r2, r0
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <HAL_UART_RxCpltCallback+0xb4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d905      	bls.n	8000666 <HAL_UART_RxCpltCallback+0x2a>
		length = 0;
 800065a:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <HAL_UART_RxCpltCallback+0xb8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		parsedData = 0;
 8000660:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <HAL_UART_RxCpltCallback+0xbc>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
	}
	if(byte == HEADER || parsedData > 0){
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2bc5      	cmp	r3, #197	@ 0xc5
 800066a:	d003      	beq.n	8000674 <HAL_UART_RxCpltCallback+0x38>
 800066c:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <HAL_UART_RxCpltCallback+0xbc>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d02d      	beq.n	80006d0 <HAL_UART_RxCpltCallback+0x94>
		buffer[parsedData] = byte;
 8000674:	4b20      	ldr	r3, [pc, #128]	@ (80006f8 <HAL_UART_RxCpltCallback+0xbc>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	4a20      	ldr	r2, [pc, #128]	@ (80006fc <HAL_UART_RxCpltCallback+0xc0>)
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	5453      	strb	r3, [r2, r1]
		if(parsedData == 3)
 8000680:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <HAL_UART_RxCpltCallback+0xbc>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d102      	bne.n	800068e <HAL_UART_RxCpltCallback+0x52>
			length = byte;
 8000688:	4a1a      	ldr	r2, [pc, #104]	@ (80006f4 <HAL_UART_RxCpltCallback+0xb8>)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	7013      	strb	r3, [r2, #0]
		if(parsedData >= length+4){
 800068e:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <HAL_UART_RxCpltCallback+0xb8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	3303      	adds	r3, #3
 8000694:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <HAL_UART_RxCpltCallback+0xbc>)
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	4293      	cmp	r3, r2
 800069a:	da13      	bge.n	80006c4 <HAL_UART_RxCpltCallback+0x88>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800069c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a0:	4817      	ldr	r0, [pc, #92]	@ (8000700 <HAL_UART_RxCpltCallback+0xc4>)
 80006a2:	f000 fed3 	bl	800144c <HAL_GPIO_TogglePin>
			ParsingData(buffer, parsedData+1);
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <HAL_UART_RxCpltCallback+0xbc>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	4812      	ldr	r0, [pc, #72]	@ (80006fc <HAL_UART_RxCpltCallback+0xc0>)
 80006b2:	f000 f885 	bl	80007c0 <ParsingData>
			length = 0;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <HAL_UART_RxCpltCallback+0xb8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
			parsedData = 0;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <HAL_UART_RxCpltCallback+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e005      	b.n	80006d0 <HAL_UART_RxCpltCallback+0x94>
		}else
			parsedData++;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <HAL_UART_RxCpltCallback+0xbc>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <HAL_UART_RxCpltCallback+0xbc>)
 80006ce:	701a      	strb	r2, [r3, #0]
	}
	timer = HAL_GetTick();
 80006d0:	f000 fb32 	bl	8000d38 <HAL_GetTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a06      	ldr	r2, [pc, #24]	@ (80006f0 <HAL_UART_RxCpltCallback+0xb4>)
 80006d8:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart,&rxcall,1);
 80006da:	2201      	movs	r2, #1
 80006dc:	4903      	ldr	r1, [pc, #12]	@ (80006ec <HAL_UART_RxCpltCallback+0xb0>)
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f003 f9b7 	bl	8003a52 <HAL_UART_Receive_IT>
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200001d8 	.word	0x200001d8
 80006f0:	200001d4 	.word	0x200001d4
 80006f4:	200001b2 	.word	0x200001b2
 80006f8:	200001b3 	.word	0x200001b3
 80006fc:	200001b4 	.word	0x200001b4
 8000700:	40011000 	.word	0x40011000

08000704 <crc8>:
#ifndef INC_CRC8_H_
#define INC_CRC8_H_

#include "main.h"

uint8_t crc8(uint8_t *buffer, uint8_t size) {
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < size; i++) {
 8000714:	2300      	movs	r3, #0
 8000716:	73bb      	strb	r3, [r7, #14]
 8000718:	e027      	b.n	800076a <crc8+0x66>
		uint8_t data = buffer[i];
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8000724:	2308      	movs	r3, #8
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e019      	b.n	800075e <crc8+0x5a>
		crc = ((crc ^ data) & 1) ? (crc >> 1) ^ 0x8C : (crc >> 1);
 800072a:	7bfa      	ldrb	r2, [r7, #15]
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	4053      	eors	r3, r2
 8000730:	b2db      	uxtb	r3, r3
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	2b00      	cmp	r3, #0
 8000738:	d007      	beq.n	800074a <crc8+0x46>
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	085b      	lsrs	r3, r3, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8000744:	43db      	mvns	r3, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	e002      	b.n	8000750 <crc8+0x4c>
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	085b      	lsrs	r3, r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	73fb      	strb	r3, [r7, #15]
		data >>= 1;
 8000752:	7b7b      	ldrb	r3, [r7, #13]
 8000754:	085b      	lsrs	r3, r3, #1
 8000756:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	3b01      	subs	r3, #1
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2b00      	cmp	r3, #0
 8000762:	dce2      	bgt.n	800072a <crc8+0x26>
	for (uint8_t i = 0; i < size; i++) {
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	3301      	adds	r3, #1
 8000768:	73bb      	strb	r3, [r7, #14]
 800076a:	7bba      	ldrb	r2, [r7, #14]
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	429a      	cmp	r2, r3
 8000770:	d3d3      	bcc.n	800071a <crc8+0x16>
		}
	}
	return crc;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
	...

08000780 <answer>:
#include "UsartController.h"
#include "crc8.h"

extern UART_HandleTypeDef huart3;

void answer(uint8_t data){
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[3] = {HEADER, data, 0};
 800078a:	23c5      	movs	r3, #197	@ 0xc5
 800078c:	733b      	strb	r3, [r7, #12]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	737b      	strb	r3, [r7, #13]
 8000792:	2300      	movs	r3, #0
 8000794:	73bb      	strb	r3, [r7, #14]
	data_out[2] = crc8(data_out, 2);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2102      	movs	r1, #2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffb1 	bl	8000704 <crc8>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, data_out, 3, 100);
 80007a6:	f107 010c 	add.w	r1, r7, #12
 80007aa:	2364      	movs	r3, #100	@ 0x64
 80007ac:	2203      	movs	r2, #3
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <answer+0x3c>)
 80007b0:	f003 f8c4 	bl	800393c <HAL_UART_Transmit>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000404 	.word	0x20000404

080007c0 <ParsingData>:

#include "UsartRouter.h"
#include "crc8.h"
#include "UsartAnswerModule.h"

void ParsingData(uint8_t *buffer, uint8_t len){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
	if(buffer[0] == HEADER){
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2bc5      	cmp	r3, #197	@ 0xc5
 80007d2:	d142      	bne.n	800085a <ParsingData+0x9a>
		if(buffer[3]+5 == len){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3303      	adds	r3, #3
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	1d5a      	adds	r2, r3, #5
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d13b      	bne.n	800085a <ParsingData+0x9a>
			if(crc8(buffer, buffer[3]+4) == buffer[buffer[3]+4]){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3303      	adds	r3, #3
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3304      	adds	r3, #4
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff88 	bl	8000704 <crc8>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4619      	mov	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3303      	adds	r3, #3
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	3304      	adds	r3, #4
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4299      	cmp	r1, r3
 8000808:	d124      	bne.n	8000854 <ParsingData+0x94>
				answer(USART_OK);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff ffb8 	bl	8000780 <answer>
				action.command = buffer[2];
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	789a      	ldrb	r2, [r3, #2]
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <ParsingData+0xa4>)
 8000816:	705a      	strb	r2, [r3, #1]
				action.length = buffer[3];
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	78da      	ldrb	r2, [r3, #3]
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <ParsingData+0xa4>)
 800081e:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<action.length; i++){
 8000820:	2300      	movs	r3, #0
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	e00c      	b.n	8000840 <ParsingData+0x80>
					action.data[i] = buffer[i+4];
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3304      	adds	r3, #4
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	441a      	add	r2, r3
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	7811      	ldrb	r1, [r2, #0]
 8000832:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <ParsingData+0xa4>)
 8000834:	4413      	add	r3, r2
 8000836:	460a      	mov	r2, r1
 8000838:	70da      	strb	r2, [r3, #3]
				for(uint8_t i=0; i<action.length; i++){
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	3301      	adds	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <ParsingData+0xa4>)
 8000842:	789b      	ldrb	r3, [r3, #2]
 8000844:	7bfa      	ldrb	r2, [r7, #15]
 8000846:	429a      	cmp	r2, r3
 8000848:	d3ed      	bcc.n	8000826 <ParsingData+0x66>
				}
				action.device = buffer[1];
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	785a      	ldrb	r2, [r3, #1]
 800084e:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <ParsingData+0xa4>)
 8000850:	701a      	strb	r2, [r3, #0]
			}else
				answer(USART_ERROR);
		}
	}
}
 8000852:	e002      	b.n	800085a <ParsingData+0x9a>
				answer(USART_ERROR);
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff ff93 	bl	8000780 <answer>
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001dc 	.word	0x200001dc

08000868 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_GPIO_Init+0xa8>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a23      	ldr	r2, [pc, #140]	@ (8000910 <MX_GPIO_Init+0xa8>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_GPIO_Init+0xa8>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0310 	and.w	r3, r3, #16
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000894:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <MX_GPIO_Init+0xa8>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a1d      	ldr	r2, [pc, #116]	@ (8000910 <MX_GPIO_Init+0xa8>)
 800089a:	f043 0320 	orr.w	r3, r3, #32
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <MX_GPIO_Init+0xa8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0320 	and.w	r3, r3, #32
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <MX_GPIO_Init+0xa8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a17      	ldr	r2, [pc, #92]	@ (8000910 <MX_GPIO_Init+0xa8>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_GPIO_Init+0xa8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_GPIO_Init+0xa8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a11      	ldr	r2, [pc, #68]	@ (8000910 <MX_GPIO_Init+0xa8>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_GPIO_Init+0xa8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e2:	480c      	ldr	r0, [pc, #48]	@ (8000914 <MX_GPIO_Init+0xac>)
 80008e4:	f000 fd9a 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_GPIO_Init+0xac>)
 8000902:	f000 fc07 	bl	8001114 <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000
 8000914:	40011000 	.word	0x40011000

08000918 <main>:
Animation animation = {0, 0, {}};

void SystemClock_Config(void);

int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	HAL_Init();
 800091c:	f000 f9b4 	bl	8000c88 <HAL_Init>
	SystemClock_Config();
 8000920:	f000 f834 	bl	800098c <SystemClock_Config>
	MX_GPIO_Init();
 8000924:	f7ff ffa0 	bl	8000868 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000928:	f007 fbea 	bl	8008100 <MX_USB_DEVICE_Init>
	MX_USART3_UART_Init();
 800092c:	f000 f908 	bl	8000b40 <MX_USART3_UART_Init>
	HAL_UART_Receive_IT(&huart3,&rxcall,1);
 8000930:	2201      	movs	r2, #1
 8000932:	4913      	ldr	r1, [pc, #76]	@ (8000980 <main+0x68>)
 8000934:	4813      	ldr	r0, [pc, #76]	@ (8000984 <main+0x6c>)
 8000936:	f003 f88c 	bl	8003a52 <HAL_UART_Receive_IT>

	while (1)
	{
		switch(action.device){
 800093a:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <main+0x70>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b03      	cmp	r3, #3
 8000940:	d014      	beq.n	800096c <main+0x54>
 8000942:	2b03      	cmp	r3, #3
 8000944:	dc19      	bgt.n	800097a <main+0x62>
 8000946:	2b01      	cmp	r3, #1
 8000948:	d002      	beq.n	8000950 <main+0x38>
 800094a:	2b02      	cmp	r3, #2
 800094c:	d007      	beq.n	800095e <main+0x46>
 800094e:	e014      	b.n	800097a <main+0x62>
			case(MOUSE):
				MouseCommandSetup(&action);
 8000950:	480d      	ldr	r0, [pc, #52]	@ (8000988 <main+0x70>)
 8000952:	f7ff fde9 	bl	8000528 <MouseCommandSetup>
				action.device = 0;
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <main+0x70>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
				break;
 800095c:	e00d      	b.n	800097a <main+0x62>
			case(KEYBOARD):
				KeyboardSetup(&action);
 800095e:	480a      	ldr	r0, [pc, #40]	@ (8000988 <main+0x70>)
 8000960:	f7ff fd4a 	bl	80003f8 <KeyboardSetup>
				action.device = 0;
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <main+0x70>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
				break;
 800096a:	e006      	b.n	800097a <main+0x62>
			case(ANIMATION):
				AnimationSetup(&action);
 800096c:	4806      	ldr	r0, [pc, #24]	@ (8000988 <main+0x70>)
 800096e:	f7ff fbed 	bl	800014c <AnimationSetup>
				action.device = 0;
 8000972:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <main+0x70>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
				break;
 8000978:	bf00      	nop
		}
		Animate();
 800097a:	f7ff fc41 	bl	8000200 <Animate>
		switch(action.device){
 800097e:	e7dc      	b.n	800093a <main+0x22>
 8000980:	200001d8 	.word	0x200001d8
 8000984:	20000404 	.word	0x20000404
 8000988:	200001dc 	.word	0x200001dc

0800098c <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	@ 0x50
 8000990:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000996:	2228      	movs	r2, #40	@ 0x28
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f007 ff68 	bl	8008870 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009bc:	2301      	movs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009d6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80009dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fa94 	bl	8002f10 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80009ee:	f000 f828 	bl	8000a42 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a02:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fd00 	bl	8003414 <HAL_RCC_ClockConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000a1a:	f000 f812 	bl	8000a42 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a1e:	2310      	movs	r3, #16
 8000a20:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000a22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a26:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fe80 	bl	8003730 <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000a36:	f000 f804 	bl	8000a42 <Error_Handler>
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	@ 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <Error_Handler>:

void Error_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a46:	b672      	cpsid	i
}
 8000a48:	bf00      	nop
  __disable_irq();
  while (1){}
 8000a4a:	bf00      	nop
 8000a4c:	e7fd      	b.n	8000a4a <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a14      	ldr	r2, [pc, #80]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_MspInit+0x60>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <HAL_MspInit+0x60>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f906 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b12:	f000 fdd0 	bl	80016b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000918 	.word	0x20000918

08000b20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <USART3_IRQHandler+0x10>)
 8000b26:	f002 ffb9 	bl	8003a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000404 	.word	0x20000404

08000b34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <MX_USART3_UART_Init+0x50>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <MX_USART3_UART_Init+0x4c>)
 8000b78:	f002 fe90 	bl	800389c <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b82:	f7ff ff5e 	bl	8000a42 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000404 	.word	0x20000404
 8000b90:	40004800 	.word	0x40004800

08000b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a20      	ldr	r2, [pc, #128]	@ (8000c30 <HAL_UART_MspInit+0x9c>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d139      	bne.n	8000c28 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bbe:	61d3      	str	r3, [r2, #28]
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bd2:	f043 0308 	orr.w	r3, r3, #8
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0308 	and.w	r3, r3, #8
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480f      	ldr	r0, [pc, #60]	@ (8000c38 <HAL_UART_MspInit+0xa4>)
 8000bfa:	f000 fa8b 	bl	8001114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <HAL_UART_MspInit+0xa4>)
 8000c14:	f000 fa7e 	bl	8001114 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	2027      	movs	r0, #39	@ 0x27
 8000c1e:	f000 f990 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c22:	2027      	movs	r0, #39	@ 0x27
 8000c24:	f000 f9a9 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40004800 	.word	0x40004800
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c3c:	f7ff ff7a 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c42:	490c      	ldr	r1, [pc, #48]	@ (8000c74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c44:	4a0c      	ldr	r2, [pc, #48]	@ (8000c78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a09      	ldr	r2, [pc, #36]	@ (8000c7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c58:	4c09      	ldr	r4, [pc, #36]	@ (8000c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c66:	f007 fe0b 	bl	8008880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c6a:	f7ff fe55 	bl	8000918 <main>
  bx lr
 8000c6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000c78:	08008968 	.word	0x08008968
  ldr r2, =_sbss
 8000c7c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000c80:	20000c04 	.word	0x20000c04

08000c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_2_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <HAL_Init+0x28>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	@ (8000cb0 <HAL_Init+0x28>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f947 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fed4 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40022000 	.word	0x40022000

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f95f 	bl	8000f96 <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f927 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	@ (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000004 	.word	0x20000004
 8000d0c:	2000000c 	.word	0x2000000c
 8000d10:	20000008 	.word	0x20000008

08000d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <HAL_IncTick+0x1c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a03      	ldr	r2, [pc, #12]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	2000000c 	.word	0x2000000c
 8000d34:	2000044c 	.word	0x2000044c

08000d38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	@ (8000d48 <HAL_GetTick+0x10>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	2000044c 	.word	0x2000044c

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff fff0 	bl	8000d38 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d005      	beq.n	8000d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <HAL_Delay+0x44>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d72:	bf00      	nop
 8000d74:	f7ff ffe0 	bl	8000d38 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8f7      	bhi.n	8000d74 <HAL_Delay+0x28>
  {
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000000c 	.word	0x2000000c

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4906      	ldr	r1, [pc, #24]	@ (8000e2c <__NVIC_EnableIRQ+0x34>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	@ (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	@ 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	@ 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff90 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff2d 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff42 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff90 	bl	8000e84 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5f 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff35 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d008      	beq.n	8000fd8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2204      	movs	r2, #4
 8000fca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e020      	b.n	800101a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 020e 	bic.w	r2, r2, #14
 8000fe6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0201 	bic.w	r2, r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001000:	2101      	movs	r1, #1
 8001002:	fa01 f202 	lsl.w	r2, r1, r2
 8001006:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001018:	7bfb      	ldrb	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d005      	beq.n	8001048 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2204      	movs	r2, #4
 8001040:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e051      	b.n	80010ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 020e 	bic.w	r2, r2, #14
 8001056:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a22      	ldr	r2, [pc, #136]	@ (80010f8 <HAL_DMA_Abort_IT+0xd4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d029      	beq.n	80010c6 <HAL_DMA_Abort_IT+0xa2>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <HAL_DMA_Abort_IT+0xd8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d022      	beq.n	80010c2 <HAL_DMA_Abort_IT+0x9e>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <HAL_DMA_Abort_IT+0xdc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d01a      	beq.n	80010bc <HAL_DMA_Abort_IT+0x98>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1e      	ldr	r2, [pc, #120]	@ (8001104 <HAL_DMA_Abort_IT+0xe0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d012      	beq.n	80010b6 <HAL_DMA_Abort_IT+0x92>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1c      	ldr	r2, [pc, #112]	@ (8001108 <HAL_DMA_Abort_IT+0xe4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00a      	beq.n	80010b0 <HAL_DMA_Abort_IT+0x8c>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a1b      	ldr	r2, [pc, #108]	@ (800110c <HAL_DMA_Abort_IT+0xe8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d102      	bne.n	80010aa <HAL_DMA_Abort_IT+0x86>
 80010a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010a8:	e00e      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010ae:	e00b      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b4:	e008      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ba:	e005      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c0:	e002      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010c2:	2310      	movs	r3, #16
 80010c4:	e000      	b.n	80010c8 <HAL_DMA_Abort_IT+0xa4>
 80010c6:	2301      	movs	r3, #1
 80010c8:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <HAL_DMA_Abort_IT+0xec>)
 80010ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	4798      	blx	r3
    } 
  }
  return status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40020008 	.word	0x40020008
 80010fc:	4002001c 	.word	0x4002001c
 8001100:	40020030 	.word	0x40020030
 8001104:	40020044 	.word	0x40020044
 8001108:	40020058 	.word	0x40020058
 800110c:	4002006c 	.word	0x4002006c
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b08b      	sub	sp, #44	@ 0x2c
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001126:	e169      	b.n	80013fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001128:	2201      	movs	r2, #1
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 8158 	bne.w	80013f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4a9a      	ldr	r2, [pc, #616]	@ (80013b4 <HAL_GPIO_Init+0x2a0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d05e      	beq.n	800120e <HAL_GPIO_Init+0xfa>
 8001150:	4a98      	ldr	r2, [pc, #608]	@ (80013b4 <HAL_GPIO_Init+0x2a0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d875      	bhi.n	8001242 <HAL_GPIO_Init+0x12e>
 8001156:	4a98      	ldr	r2, [pc, #608]	@ (80013b8 <HAL_GPIO_Init+0x2a4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d058      	beq.n	800120e <HAL_GPIO_Init+0xfa>
 800115c:	4a96      	ldr	r2, [pc, #600]	@ (80013b8 <HAL_GPIO_Init+0x2a4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d86f      	bhi.n	8001242 <HAL_GPIO_Init+0x12e>
 8001162:	4a96      	ldr	r2, [pc, #600]	@ (80013bc <HAL_GPIO_Init+0x2a8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d052      	beq.n	800120e <HAL_GPIO_Init+0xfa>
 8001168:	4a94      	ldr	r2, [pc, #592]	@ (80013bc <HAL_GPIO_Init+0x2a8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d869      	bhi.n	8001242 <HAL_GPIO_Init+0x12e>
 800116e:	4a94      	ldr	r2, [pc, #592]	@ (80013c0 <HAL_GPIO_Init+0x2ac>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d04c      	beq.n	800120e <HAL_GPIO_Init+0xfa>
 8001174:	4a92      	ldr	r2, [pc, #584]	@ (80013c0 <HAL_GPIO_Init+0x2ac>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d863      	bhi.n	8001242 <HAL_GPIO_Init+0x12e>
 800117a:	4a92      	ldr	r2, [pc, #584]	@ (80013c4 <HAL_GPIO_Init+0x2b0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d046      	beq.n	800120e <HAL_GPIO_Init+0xfa>
 8001180:	4a90      	ldr	r2, [pc, #576]	@ (80013c4 <HAL_GPIO_Init+0x2b0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d85d      	bhi.n	8001242 <HAL_GPIO_Init+0x12e>
 8001186:	2b12      	cmp	r3, #18
 8001188:	d82a      	bhi.n	80011e0 <HAL_GPIO_Init+0xcc>
 800118a:	2b12      	cmp	r3, #18
 800118c:	d859      	bhi.n	8001242 <HAL_GPIO_Init+0x12e>
 800118e:	a201      	add	r2, pc, #4	@ (adr r2, 8001194 <HAL_GPIO_Init+0x80>)
 8001190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001194:	0800120f 	.word	0x0800120f
 8001198:	080011e9 	.word	0x080011e9
 800119c:	080011fb 	.word	0x080011fb
 80011a0:	0800123d 	.word	0x0800123d
 80011a4:	08001243 	.word	0x08001243
 80011a8:	08001243 	.word	0x08001243
 80011ac:	08001243 	.word	0x08001243
 80011b0:	08001243 	.word	0x08001243
 80011b4:	08001243 	.word	0x08001243
 80011b8:	08001243 	.word	0x08001243
 80011bc:	08001243 	.word	0x08001243
 80011c0:	08001243 	.word	0x08001243
 80011c4:	08001243 	.word	0x08001243
 80011c8:	08001243 	.word	0x08001243
 80011cc:	08001243 	.word	0x08001243
 80011d0:	08001243 	.word	0x08001243
 80011d4:	08001243 	.word	0x08001243
 80011d8:	080011f1 	.word	0x080011f1
 80011dc:	08001205 	.word	0x08001205
 80011e0:	4a79      	ldr	r2, [pc, #484]	@ (80013c8 <HAL_GPIO_Init+0x2b4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011e6:	e02c      	b.n	8001242 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	623b      	str	r3, [r7, #32]
          break;
 80011ee:	e029      	b.n	8001244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	3304      	adds	r3, #4
 80011f6:	623b      	str	r3, [r7, #32]
          break;
 80011f8:	e024      	b.n	8001244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	3308      	adds	r3, #8
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e01f      	b.n	8001244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	330c      	adds	r3, #12
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	e01a      	b.n	8001244 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001216:	2304      	movs	r3, #4
 8001218:	623b      	str	r3, [r7, #32]
          break;
 800121a:	e013      	b.n	8001244 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d105      	bne.n	8001230 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001224:	2308      	movs	r3, #8
 8001226:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	611a      	str	r2, [r3, #16]
          break;
 800122e:	e009      	b.n	8001244 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001230:	2308      	movs	r3, #8
 8001232:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	615a      	str	r2, [r3, #20]
          break;
 800123a:	e003      	b.n	8001244 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
          break;
 8001240:	e000      	b.n	8001244 <HAL_GPIO_Init+0x130>
          break;
 8001242:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2bff      	cmp	r3, #255	@ 0xff
 8001248:	d801      	bhi.n	800124e <HAL_GPIO_Init+0x13a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	e001      	b.n	8001252 <HAL_GPIO_Init+0x13e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3304      	adds	r3, #4
 8001252:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2bff      	cmp	r3, #255	@ 0xff
 8001258:	d802      	bhi.n	8001260 <HAL_GPIO_Init+0x14c>
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	e002      	b.n	8001266 <HAL_GPIO_Init+0x152>
 8001260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001262:	3b08      	subs	r3, #8
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	210f      	movs	r1, #15
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	401a      	ands	r2, r3
 8001278:	6a39      	ldr	r1, [r7, #32]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	431a      	orrs	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80b1 	beq.w	80013f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001294:	4b4d      	ldr	r3, [pc, #308]	@ (80013cc <HAL_GPIO_Init+0x2b8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a4c      	ldr	r2, [pc, #304]	@ (80013cc <HAL_GPIO_Init+0x2b8>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b4a      	ldr	r3, [pc, #296]	@ (80013cc <HAL_GPIO_Init+0x2b8>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012ac:	4a48      	ldr	r2, [pc, #288]	@ (80013d0 <HAL_GPIO_Init+0x2bc>)
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4013      	ands	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a40      	ldr	r2, [pc, #256]	@ (80013d4 <HAL_GPIO_Init+0x2c0>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d013      	beq.n	8001300 <HAL_GPIO_Init+0x1ec>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a3f      	ldr	r2, [pc, #252]	@ (80013d8 <HAL_GPIO_Init+0x2c4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d00d      	beq.n	80012fc <HAL_GPIO_Init+0x1e8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a3e      	ldr	r2, [pc, #248]	@ (80013dc <HAL_GPIO_Init+0x2c8>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d007      	beq.n	80012f8 <HAL_GPIO_Init+0x1e4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a3d      	ldr	r2, [pc, #244]	@ (80013e0 <HAL_GPIO_Init+0x2cc>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d101      	bne.n	80012f4 <HAL_GPIO_Init+0x1e0>
 80012f0:	2303      	movs	r3, #3
 80012f2:	e006      	b.n	8001302 <HAL_GPIO_Init+0x1ee>
 80012f4:	2304      	movs	r3, #4
 80012f6:	e004      	b.n	8001302 <HAL_GPIO_Init+0x1ee>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_Init+0x1ee>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <HAL_GPIO_Init+0x1ee>
 8001300:	2300      	movs	r3, #0
 8001302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001304:	f002 0203 	and.w	r2, r2, #3
 8001308:	0092      	lsls	r2, r2, #2
 800130a:	4093      	lsls	r3, r2
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001312:	492f      	ldr	r1, [pc, #188]	@ (80013d0 <HAL_GPIO_Init+0x2bc>)
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800132c:	4b2d      	ldr	r3, [pc, #180]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	492c      	ldr	r1, [pc, #176]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	608b      	str	r3, [r1, #8]
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800133a:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	43db      	mvns	r3, r3
 8001342:	4928      	ldr	r1, [pc, #160]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 8001344:	4013      	ands	r3, r2
 8001346:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	4922      	ldr	r1, [pc, #136]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	60cb      	str	r3, [r1, #12]
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	43db      	mvns	r3, r3
 800136a:	491e      	ldr	r1, [pc, #120]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 800136c:	4013      	ands	r3, r2
 800136e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4918      	ldr	r1, [pc, #96]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	43db      	mvns	r3, r3
 8001392:	4914      	ldr	r1, [pc, #80]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 8001394:	4013      	ands	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d021      	beq.n	80013e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	490e      	ldr	r1, [pc, #56]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e021      	b.n	80013f6 <HAL_GPIO_Init+0x2e2>
 80013b2:	bf00      	nop
 80013b4:	10320000 	.word	0x10320000
 80013b8:	10310000 	.word	0x10310000
 80013bc:	10220000 	.word	0x10220000
 80013c0:	10210000 	.word	0x10210000
 80013c4:	10120000 	.word	0x10120000
 80013c8:	10110000 	.word	0x10110000
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010000 	.word	0x40010000
 80013d4:	40010800 	.word	0x40010800
 80013d8:	40010c00 	.word	0x40010c00
 80013dc:	40011000 	.word	0x40011000
 80013e0:	40011400 	.word	0x40011400
 80013e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_GPIO_Init+0x304>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	4909      	ldr	r1, [pc, #36]	@ (8001418 <HAL_GPIO_Init+0x304>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	3301      	adds	r3, #1
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001402:	fa22 f303 	lsr.w	r3, r2, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	f47f ae8e 	bne.w	8001128 <HAL_GPIO_Init+0x14>
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	372c      	adds	r7, #44	@ 0x2c
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001438:	e003      	b.n	8001442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	041a      	lsls	r2, r3, #16
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	611a      	str	r2, [r3, #16]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43d9      	mvns	r1, r3
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	400b      	ands	r3, r1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	611a      	str	r2, [r3, #16]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0e8      	b.n	8001662 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d106      	bne.n	80014aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f006 ff5f 	bl	8008368 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2203      	movs	r2, #3
 80014ae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 f87a 	bl	80045b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3304      	adds	r3, #4
 80014ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014cc:	f003 f850 	bl	8004570 <USB_CoreInit>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2202      	movs	r2, #2
 80014da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0bf      	b.n	8001662 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 f87e 	bl	80045ea <USB_SetCurrentMode>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0b0      	b.n	8001662 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e03e      	b.n	8001584 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	3311      	adds	r3, #17
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	440b      	add	r3, r1
 8001528:	3310      	adds	r3, #16
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	440b      	add	r3, r1
 800153c:	3313      	adds	r3, #19
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	440b      	add	r3, r1
 8001550:	3320      	adds	r3, #32
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	3324      	adds	r3, #36	@ 0x24
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	3301      	adds	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	791b      	ldrb	r3, [r3, #4]
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	429a      	cmp	r2, r3
 800158c:	d3bb      	bcc.n	8001506 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e044      	b.n	800161e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	3301      	adds	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	791b      	ldrb	r3, [r3, #4]
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	429a      	cmp	r2, r3
 8001626:	d3b5      	bcc.n	8001594 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3304      	adds	r3, #4
 8001630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001632:	f002 ffe6 	bl	8004602 <USB_DevInit>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e00c      	b.n	8001662 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f005 fa65 	bl	8006b2a <USB_DevDisconnect>

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_PCD_Start+0x16>
 800167c:	2302      	movs	r3, #2
 800167e:	e016      	b.n	80016ae <HAL_PCD_Start+0x44>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f002 ff7c 	bl	800458a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001692:	2101      	movs	r1, #1
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f007 f8b4 	bl	8008802 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 fa39 	bl	8006b16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b088      	sub	sp, #32
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f005 fa3b 	bl	8006b3e <USB_ReadInterrupts>
 80016c8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fb03 	bl	8001ce0 <PCD_EP_ISR_Handler>

    return;
 80016da:	e119      	b.n	8001910 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d013      	beq.n	800170e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016f8:	b292      	uxth	r2, r2
 80016fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f006 fead 	bl	800845e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001704:	2100      	movs	r1, #0
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f905 	bl	8001916 <HAL_PCD_SetAddress>

    return;
 800170c:	e100      	b.n	8001910 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00c      	beq.n	8001732 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001720:	b29a      	uxth	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800172a:	b292      	uxth	r2, r2
 800172c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001730:	e0ee      	b.n	8001910 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00c      	beq.n	8001756 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001744:	b29a      	uxth	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800174e:	b292      	uxth	r2, r2
 8001750:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001754:	e0dc      	b.n	8001910 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d027      	beq.n	80017b0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0204 	bic.w	r2, r2, #4
 8001772:	b292      	uxth	r2, r2
 8001774:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001780:	b29a      	uxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0208 	bic.w	r2, r2, #8
 800178a:	b292      	uxth	r2, r2
 800178c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f006 fe9d 	bl	80084d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800179e:	b29a      	uxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017a8:	b292      	uxth	r2, r2
 80017aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80017ae:	e0af      	b.n	8001910 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8083 	beq.w	80018c2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80017bc:	2300      	movs	r3, #0
 80017be:	77fb      	strb	r3, [r7, #31]
 80017c0:	e010      	b.n	80017e4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	7ffb      	ldrb	r3, [r7, #31]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	441a      	add	r2, r3
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
 80017d0:	8812      	ldrh	r2, [r2, #0]
 80017d2:	b292      	uxth	r2, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	3320      	adds	r3, #32
 80017d8:	443b      	add	r3, r7
 80017da:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80017de:	7ffb      	ldrb	r3, [r7, #31]
 80017e0:	3301      	adds	r3, #1
 80017e2:	77fb      	strb	r3, [r7, #31]
 80017e4:	7ffb      	ldrb	r3, [r7, #31]
 80017e6:	2b07      	cmp	r3, #7
 80017e8:	d9eb      	bls.n	80017c2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0201 	orr.w	r2, r2, #1
 80017fc:	b292      	uxth	r2, r2
 80017fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	b292      	uxth	r2, r2
 8001816:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800181a:	bf00      	nop
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001824:	b29b      	uxth	r3, r3
 8001826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f6      	beq.n	800181c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001836:	b29a      	uxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001840:	b292      	uxth	r2, r2
 8001842:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	77fb      	strb	r3, [r7, #31]
 800184a:	e00f      	b.n	800186c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800184c:	7ffb      	ldrb	r3, [r7, #31]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	4611      	mov	r1, r2
 8001854:	7ffa      	ldrb	r2, [r7, #31]
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	440a      	add	r2, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	3320      	adds	r3, #32
 800185e:	443b      	add	r3, r7
 8001860:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001864:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001866:	7ffb      	ldrb	r3, [r7, #31]
 8001868:	3301      	adds	r3, #1
 800186a:	77fb      	strb	r3, [r7, #31]
 800186c:	7ffb      	ldrb	r3, [r7, #31]
 800186e:	2b07      	cmp	r3, #7
 8001870:	d9ec      	bls.n	800184c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800187a:	b29a      	uxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0208 	orr.w	r2, r2, #8
 8001884:	b292      	uxth	r2, r2
 8001886:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001892:	b29a      	uxth	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800189c:	b292      	uxth	r2, r2
 800189e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0204 	orr.w	r2, r2, #4
 80018b4:	b292      	uxth	r2, r2
 80018b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f006 fdee 	bl	800849c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80018c0:	e026      	b.n	8001910 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00f      	beq.n	80018ec <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018de:	b292      	uxth	r2, r2
 80018e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f006 fdac 	bl	8008442 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80018ea:	e011      	b.n	8001910 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00c      	beq.n	8001910 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018fe:	b29a      	uxth	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001908:	b292      	uxth	r2, r2
 800190a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800190e:	bf00      	nop
  }
}
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_PCD_SetAddress+0x1a>
 800192c:	2302      	movs	r3, #2
 800192e:	e012      	b.n	8001956 <HAL_PCD_SetAddress+0x40>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f005 f8d2 	bl	8006af0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	4608      	mov	r0, r1
 8001968:	4611      	mov	r1, r2
 800196a:	461a      	mov	r2, r3
 800196c:	4603      	mov	r3, r0
 800196e:	70fb      	strb	r3, [r7, #3]
 8001970:	460b      	mov	r3, r1
 8001972:	803b      	strh	r3, [r7, #0]
 8001974:	4613      	mov	r3, r2
 8001976:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800197c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001980:	2b00      	cmp	r3, #0
 8001982:	da0e      	bge.n	80019a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	f003 0207 	and.w	r2, r3, #7
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	3310      	adds	r3, #16
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	705a      	strb	r2, [r3, #1]
 80019a0:	e00e      	b.n	80019c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	f003 0207 	and.w	r2, r3, #7
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019cc:	883a      	ldrh	r2, [r7, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	78ba      	ldrb	r2, [r7, #2]
 80019d6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019d8:	78bb      	ldrb	r3, [r7, #2]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d102      	bne.n	80019e4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_PCD_EP_Open+0x94>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e00e      	b.n	8001a10 <HAL_PCD_EP_Open+0xb2>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fe1b 	bl	800463c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001a0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da0e      	bge.n	8001a4a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	f003 0207 	and.w	r2, r3, #7
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	3310      	adds	r3, #16
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	705a      	strb	r2, [r3, #1]
 8001a48:	e00e      	b.n	8001a68 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f003 0207 	and.w	r2, r3, #7
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_PCD_EP_Close+0x6a>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e00e      	b.n	8001aa0 <HAL_PCD_EP_Close+0x88>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68f9      	ldr	r1, [r7, #12]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 f993 	bl	8004dbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	f003 0207 	and.w	r2, r3, #7
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	4413      	add	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6979      	ldr	r1, [r7, #20]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fb4a 	bl	8005194 <USB_EPStartXfer>

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	460b      	mov	r3, r1
 8001b18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	f003 0207 	and.w	r2, r3, #7
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	3310      	adds	r3, #16
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2201      	movs	r2, #1
 8001b54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6979      	ldr	r1, [r7, #20]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fb13 	bl	8005194 <USB_EPStartXfer>

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	7912      	ldrb	r2, [r2, #4]
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e04c      	b.n	8001c30 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	da0e      	bge.n	8001bbc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	f003 0207 	and.w	r2, r3, #7
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	3310      	adds	r3, #16
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	705a      	strb	r2, [r3, #1]
 8001bba:	e00c      	b.n	8001bd6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_PCD_EP_SetStall+0x7e>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e01c      	b.n	8001c30 <HAL_PCD_EP_SetStall+0xb8>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68f9      	ldr	r1, [r7, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f004 fe76 	bl	80068f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d108      	bne.n	8001c26 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f004 ff9b 	bl	8006b5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	7912      	ldrb	r2, [r2, #4]
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e040      	b.n	8001cd8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da0e      	bge.n	8001c7c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	f003 0207 	and.w	r2, r3, #7
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	3310      	adds	r3, #16
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	705a      	strb	r2, [r3, #1]
 8001c7a:	e00e      	b.n	8001c9a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 0207 	and.w	r2, r3, #7
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_PCD_EP_ClrStall+0x82>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e00e      	b.n	8001cd8 <HAL_PCD_EP_ClrStall+0xa0>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 fe64 	bl	8006996 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b096      	sub	sp, #88	@ 0x58
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ce8:	e3bb      	b.n	8002462 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cf2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001cf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001d04:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f040 8175 	bne.w	8001ff8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d14e      	bne.n	8001db8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d2a:	81fb      	strh	r3, [r7, #14]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	89fb      	ldrh	r3, [r7, #14]
 8001d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3310      	adds	r3, #16
 8001d42:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	441a      	add	r2, r3
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f006 fb44 	bl	800840e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7b5b      	ldrb	r3, [r3, #13]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8368 	beq.w	8002462 <PCD_EP_ISR_Handler+0x782>
 8001d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 8363 	bne.w	8002462 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7b5b      	ldrb	r3, [r3, #13]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	735a      	strb	r2, [r3, #13]
 8001db6:	e354      	b.n	8002462 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dbe:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001dca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d034      	beq.n	8001e40 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	3306      	adds	r3, #6
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e00:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e12:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f004 fef1 	bl	8006bfc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e26:	4013      	ands	r3, r2
 8001e28:	823b      	strh	r3, [r7, #16]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	8a3a      	ldrh	r2, [r7, #16]
 8001e30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e34:	b292      	uxth	r2, r2
 8001e36:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f006 fabb 	bl	80083b4 <HAL_PCD_SetupStageCallback>
 8001e3e:	e310      	b.n	8002462 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e40:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f280 830c 	bge.w	8002462 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e56:	4013      	ands	r3, r2
 8001e58:	83fb      	strh	r3, [r7, #30]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	8bfa      	ldrh	r2, [r7, #30]
 8001e60:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e64:	b292      	uxth	r2, r2
 8001e66:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3306      	adds	r3, #6
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d019      	beq.n	8001ed0 <PCD_EP_ISR_Handler+0x1f0>
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d015      	beq.n	8001ed0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eaa:	6959      	ldr	r1, [r3, #20]
 8001eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f004 fea1 	bl	8006bfc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	441a      	add	r2, r3
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f006 fa84 	bl	80083d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001eda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 82bd 	bne.w	8002462 <PCD_EP_ISR_Handler+0x782>
 8001ee8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001eec:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001ef0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001ef4:	f000 82b5 	beq.w	8002462 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f2e:	d91d      	bls.n	8001f6c <PCD_EP_ISR_Handler+0x28c>
 8001f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <PCD_EP_ISR_Handler+0x26a>
 8001f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f46:	3b01      	subs	r3, #1
 8001f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	029b      	lsls	r3, r3, #10
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	801a      	strh	r2, [r3, #0]
 8001f6a:	e026      	b.n	8001fba <PCD_EP_ISR_Handler+0x2da>
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10a      	bne.n	8001f8a <PCD_EP_ISR_Handler+0x2aa>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	e017      	b.n	8001fba <PCD_EP_ISR_Handler+0x2da>
 8001f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	085b      	lsrs	r3, r3, #1
 8001f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <PCD_EP_ISR_Handler+0x2c4>
 8001f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	029b      	lsls	r3, r3, #10
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fca:	827b      	strh	r3, [r7, #18]
 8001fcc:	8a7b      	ldrh	r3, [r7, #18]
 8001fce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001fd2:	827b      	strh	r3, [r7, #18]
 8001fd4:	8a7b      	ldrh	r3, [r7, #18]
 8001fd6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fda:	827b      	strh	r3, [r7, #18]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	8a7b      	ldrh	r3, [r7, #18]
 8001fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	8013      	strh	r3, [r2, #0]
 8001ff6:	e234      	b.n	8002462 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800200c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002010:	2b00      	cmp	r3, #0
 8002012:	f280 80fc 	bge.w	800220e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	b29a      	uxth	r2, r3
 8002028:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800202c:	4013      	ands	r3, r2
 800202e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002044:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002048:	b292      	uxth	r2, r2
 800204a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800204c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002064:	7b1b      	ldrb	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d125      	bne.n	80020b6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	3306      	adds	r3, #6
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002092:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002096:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8092 	beq.w	80021c4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a6:	6959      	ldr	r1, [r3, #20]
 80020a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020aa:	88da      	ldrh	r2, [r3, #6]
 80020ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020b0:	f004 fda4 	bl	8006bfc <USB_ReadPMA>
 80020b4:	e086      	b.n	80021c4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b8:	78db      	ldrb	r3, [r3, #3]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d10a      	bne.n	80020d4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020c2:	461a      	mov	r2, r3
 80020c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f9d9 	bl	800247e <HAL_PCD_EP_DB_Receive>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80020d2:	e077      	b.n	80021c4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ee:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	441a      	add	r2, r3
 8002100:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800210c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002110:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002114:	b29b      	uxth	r3, r3
 8002116:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d024      	beq.n	800217c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	3302      	adds	r3, #2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800215a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800215e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d02e      	beq.n	80021c4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800216c:	6959      	ldr	r1, [r3, #20]
 800216e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002170:	891a      	ldrh	r2, [r3, #8]
 8002172:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002176:	f004 fd41 	bl	8006bfc <USB_ReadPMA>
 800217a:	e023      	b.n	80021c4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002184:	b29b      	uxth	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	3306      	adds	r3, #6
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80021a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b6:	6959      	ldr	r1, [r3, #20]
 80021b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ba:	895a      	ldrh	r2, [r3, #10]
 80021bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021c0:	f004 fd1c 	bl	8006bfc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80021c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021cc:	441a      	add	r2, r3
 80021ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021da:	441a      	add	r2, r3
 80021dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021de:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <PCD_EP_ISR_Handler+0x514>
 80021e8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80021ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d206      	bcs.n	8002202 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f006 f8ec 	bl	80083d8 <HAL_PCD_DataOutStageCallback>
 8002200:	e005      	b.n	800220e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002208:	4618      	mov	r0, r3
 800220a:	f002 ffc3 	bl	8005194 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800220e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8123 	beq.w	8002462 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800221c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	3310      	adds	r3, #16
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800224a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	441a      	add	r2, r3
 800225c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002268:	b29b      	uxth	r3, r3
 800226a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800226c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226e:	78db      	ldrb	r3, [r3, #3]
 8002270:	2b01      	cmp	r3, #1
 8002272:	f040 80a2 	bne.w	80023ba <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800227c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227e:	7b1b      	ldrb	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8093 	beq.w	80023ac <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002286:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800228a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d046      	beq.n	8002320 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d126      	bne.n	80022e8 <PCD_EP_ISR_Handler+0x608>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	4413      	add	r3, r2
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	011a      	lsls	r2, r3, #4
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	4413      	add	r3, r2
 80022bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	801a      	strh	r2, [r3, #0]
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	e061      	b.n	80023ac <PCD_EP_ISR_Handler+0x6cc>
 80022e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d15d      	bne.n	80023ac <PCD_EP_ISR_Handler+0x6cc>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022fe:	b29b      	uxth	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002304:	4413      	add	r3, r2
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	011a      	lsls	r2, r3, #4
 800230e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002310:	4413      	add	r3, r2
 8002312:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231a:	2200      	movs	r2, #0
 800231c:	801a      	strh	r2, [r3, #0]
 800231e:	e045      	b.n	80023ac <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d126      	bne.n	800237c <PCD_EP_ISR_Handler+0x69c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002342:	4413      	add	r3, r2
 8002344:	637b      	str	r3, [r7, #52]	@ 0x34
 8002346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	011a      	lsls	r2, r3, #4
 800234c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234e:	4413      	add	r3, r2
 8002350:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002354:	633b      	str	r3, [r7, #48]	@ 0x30
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002360:	b29a      	uxth	r2, r3
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	801a      	strh	r2, [r3, #0]
 8002366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002374:	b29a      	uxth	r2, r3
 8002376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	e017      	b.n	80023ac <PCD_EP_ISR_Handler+0x6cc>
 800237c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237e:	785b      	ldrb	r3, [r3, #1]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d113      	bne.n	80023ac <PCD_EP_ISR_Handler+0x6cc>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800238c:	b29b      	uxth	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002392:	4413      	add	r3, r2
 8002394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	011a      	lsls	r2, r3, #4
 800239c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800239e:	4413      	add	r3, r2
 80023a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a8:	2200      	movs	r2, #0
 80023aa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f006 f82b 	bl	800840e <HAL_PCD_DataInStageCallback>
 80023b8:	e053      	b.n	8002462 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80023ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d146      	bne.n	8002454 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	3302      	adds	r3, #2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80023f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d907      	bls.n	800240e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80023fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002406:	1ad2      	subs	r2, r2, r3
 8002408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800240a:	619a      	str	r2, [r3, #24]
 800240c:	e002      	b.n	8002414 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800240e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800241c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f005 fff3 	bl	800840e <HAL_PCD_DataInStageCallback>
 8002428:	e01b      	b.n	8002462 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002432:	441a      	add	r2, r3
 8002434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002436:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002440:	441a      	add	r2, r3
 8002442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002444:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800244c:	4618      	mov	r0, r3
 800244e:	f002 fea1 	bl	8005194 <USB_EPStartXfer>
 8002452:	e006      	b.n	8002462 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002454:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002458:	461a      	mov	r2, r3
 800245a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f91b 	bl	8002698 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800246a:	b29b      	uxth	r3, r3
 800246c:	b21b      	sxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	f6ff ac3b 	blt.w	8001cea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3758      	adds	r7, #88	@ 0x58
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b088      	sub	sp, #32
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	4613      	mov	r3, r2
 800248a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d07e      	beq.n	8002594 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	3302      	adds	r3, #2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	8b7b      	ldrh	r3, [r7, #26]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d306      	bcc.n	80024d8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	8b7b      	ldrh	r3, [r7, #26]
 80024d0:	1ad2      	subs	r2, r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	619a      	str	r2, [r3, #24]
 80024d6:	e002      	b.n	80024de <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d123      	bne.n	800252e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002500:	833b      	strh	r3, [r7, #24]
 8002502:	8b3b      	ldrh	r3, [r7, #24]
 8002504:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002508:	833b      	strh	r3, [r7, #24]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	441a      	add	r2, r3
 8002518:	8b3b      	ldrh	r3, [r7, #24]
 800251a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800251e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800252a:	b29b      	uxth	r3, r3
 800252c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01f      	beq.n	8002578 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	b29b      	uxth	r3, r3
 800254a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800254e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002552:	82fb      	strh	r3, [r7, #22]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	441a      	add	r2, r3
 8002562:	8afb      	ldrh	r3, [r7, #22]
 8002564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800256c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002570:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002574:	b29b      	uxth	r3, r3
 8002576:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002578:	8b7b      	ldrh	r3, [r7, #26]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8087 	beq.w	800268e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6959      	ldr	r1, [r3, #20]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	891a      	ldrh	r2, [r3, #8]
 800258c:	8b7b      	ldrh	r3, [r7, #26]
 800258e:	f004 fb35 	bl	8006bfc <USB_ReadPMA>
 8002592:	e07c      	b.n	800268e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	3306      	adds	r3, #6
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	8b7b      	ldrh	r3, [r7, #26]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d306      	bcc.n	80025d6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	8b7b      	ldrh	r3, [r7, #26]
 80025ce:	1ad2      	subs	r2, r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	619a      	str	r2, [r3, #24]
 80025d4:	e002      	b.n	80025dc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d123      	bne.n	800262c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fe:	83fb      	strh	r3, [r7, #30]
 8002600:	8bfb      	ldrh	r3, [r7, #30]
 8002602:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002606:	83fb      	strh	r3, [r7, #30]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	8bfb      	ldrh	r3, [r7, #30]
 8002618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800261c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002628:	b29b      	uxth	r3, r3
 800262a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11f      	bne.n	8002676 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800264c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002650:	83bb      	strh	r3, [r7, #28]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	441a      	add	r2, r3
 8002660:	8bbb      	ldrh	r3, [r7, #28]
 8002662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800266a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800266e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002672:	b29b      	uxth	r3, r3
 8002674:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002676:	8b7b      	ldrh	r3, [r7, #26]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	6959      	ldr	r1, [r3, #20]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	895a      	ldrh	r2, [r3, #10]
 8002688:	8b7b      	ldrh	r3, [r7, #26]
 800268a:	f004 fab7 	bl	8006bfc <USB_ReadPMA>
    }
  }

  return count;
 800268e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b0a4      	sub	sp, #144	@ 0x90
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 81dd 	beq.w	8002a6c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	3302      	adds	r3, #2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026da:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d907      	bls.n	80026fa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026f2:	1ad2      	subs	r2, r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	619a      	str	r2, [r3, #24]
 80026f8:	e002      	b.n	8002700 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 80b9 	bne.w	800287c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	785b      	ldrb	r3, [r3, #1]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d126      	bne.n	8002760 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002720:	b29b      	uxth	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002726:	4413      	add	r3, r2
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	011a      	lsls	r2, r3, #4
 8002730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002732:	4413      	add	r3, r2
 8002734:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800273a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002744:	b29a      	uxth	r2, r3
 8002746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002758:	b29a      	uxth	r2, r3
 800275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275c:	801a      	strh	r2, [r3, #0]
 800275e:	e01a      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	785b      	ldrb	r3, [r3, #1]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d116      	bne.n	8002796 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	637b      	str	r3, [r7, #52]	@ 0x34
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800277c:	4413      	add	r3, r2
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	011a      	lsls	r2, r3, #4
 8002786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002788:	4413      	add	r3, r2
 800278a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800278e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002792:	2200      	movs	r2, #0
 8002794:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	785b      	ldrb	r3, [r3, #1]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d126      	bne.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x15a>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	011a      	lsls	r2, r3, #4
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	e017      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x18a>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	785b      	ldrb	r3, [r3, #1]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d113      	bne.n	8002822 <HAL_PCD_EP_DB_Transmit+0x18a>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	4413      	add	r3, r2
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	011a      	lsls	r2, r3, #4
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	4413      	add	r3, r2
 8002816:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800281a:	623b      	str	r3, [r7, #32]
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	2200      	movs	r2, #0
 8002820:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f005 fdf0 	bl	800840e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 82fc 	beq.w	8002e32 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002854:	82fb      	strh	r3, [r7, #22]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	441a      	add	r2, r3
 8002864:	8afb      	ldrh	r3, [r7, #22]
 8002866:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800286a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800286e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002876:	b29b      	uxth	r3, r3
 8002878:	8013      	strh	r3, [r2, #0]
 800287a:	e2da      	b.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d021      	beq.n	80028ca <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800289c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80028b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	f040 82ae 	bne.w	8002e32 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028de:	441a      	add	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028ec:	441a      	add	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	6a1a      	ldr	r2, [r3, #32]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d30b      	bcc.n	8002916 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	6a1a      	ldr	r2, [r3, #32]
 800290a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800290e:	1ad2      	subs	r2, r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	621a      	str	r2, [r3, #32]
 8002914:	e017      	b.n	8002946 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d108      	bne.n	8002930 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800291e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002922:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800292e:	e00a      	b.n	8002946 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	785b      	ldrb	r3, [r3, #1]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d165      	bne.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x382>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800295c:	b29b      	uxth	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002962:	4413      	add	r3, r2
 8002964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	011a      	lsls	r2, r3, #4
 800296c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800296e:	4413      	add	r3, r2
 8002970:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002974:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002980:	b29a      	uxth	r2, r3
 8002982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002984:	801a      	strh	r2, [r3, #0]
 8002986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800298a:	2b3e      	cmp	r3, #62	@ 0x3e
 800298c:	d91d      	bls.n	80029ca <HAL_PCD_EP_DB_Transmit+0x332>
 800298e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <HAL_PCD_EP_DB_Transmit+0x310>
 80029a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029a4:	3b01      	subs	r3, #1
 80029a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	029b      	lsls	r3, r3, #10
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c6:	801a      	strh	r2, [r3, #0]
 80029c8:	e044      	b.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80029ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_PCD_EP_DB_Transmit+0x350>
 80029d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	e035      	b.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80029e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x36a>
 80029fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029fe:	3301      	adds	r3, #1
 8002a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	029b      	lsls	r3, r3, #10
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	4313      	orrs	r3, r2
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a16:	801a      	strh	r2, [r3, #0]
 8002a18:	e01c      	b.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d118      	bne.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a36:	4413      	add	r3, r2
 8002a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	011a      	lsls	r2, r3, #4
 8002a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a42:	4413      	add	r3, r2
 8002a44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a52:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	6959      	ldr	r1, [r3, #20]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	891a      	ldrh	r2, [r3, #8]
 8002a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f004 f884 	bl	8006b72 <USB_WritePMA>
 8002a6a:	e1e2      	b.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3306      	adds	r3, #6
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a94:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d307      	bcc.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	699a      	ldr	r2, [r3, #24]
 8002aa8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002aac:	1ad2      	subs	r2, r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	619a      	str	r2, [r3, #24]
 8002ab2:	e002      	b.n	8002aba <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 80c0 	bne.w	8002c44 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	785b      	ldrb	r3, [r3, #1]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d126      	bne.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x482>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ae0:	4413      	add	r3, r2
 8002ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	011a      	lsls	r2, r3, #4
 8002aea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aec:	4413      	add	r3, r2
 8002aee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002af2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002af4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	e01a      	b.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	785b      	ldrb	r3, [r3, #1]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d116      	bne.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b36:	4413      	add	r3, r2
 8002b38:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	011a      	lsls	r2, r3, #4
 8002b40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b42:	4413      	add	r3, r2
 8002b44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b48:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	785b      	ldrb	r3, [r3, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d12b      	bne.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b72:	4413      	add	r3, r2
 8002b74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	011a      	lsls	r2, r3, #4
 8002b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b7e:	4413      	add	r3, r2
 8002b80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	e017      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d113      	bne.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bcc:	4413      	add	r3, r2
 8002bce:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	011a      	lsls	r2, r3, #4
 8002bd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bd8:	4413      	add	r3, r2
 8002bda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002bde:	673b      	str	r3, [r7, #112]	@ 0x70
 8002be0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002be2:	2200      	movs	r2, #0
 8002be4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f005 fc0e 	bl	800840e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 811a 	bne.w	8002e32 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c18:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	8013      	strh	r3, [r2, #0]
 8002c42:	e0f6      	b.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d121      	bne.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c68:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f040 80ca 	bne.w	8002e32 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ca6:	441a      	add	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d30b      	bcc.n	8002cde <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cd6:	1ad2      	subs	r2, r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	621a      	str	r2, [r3, #32]
 8002cdc:	e017      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d108      	bne.n	8002cf8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002ce6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002cf6:	e00a      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d165      	bne.n	8002de8 <HAL_PCD_EP_DB_Transmit+0x750>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d30:	4413      	add	r3, r2
 8002d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	011a      	lsls	r2, r3, #4
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d58:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d5a:	d91d      	bls.n	8002d98 <HAL_PCD_EP_DB_Transmit+0x700>
 8002d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002d70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d72:	3b01      	subs	r3, #1
 8002d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	029b      	lsls	r3, r3, #10
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	e041      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x784>
 8002d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002db2:	801a      	strh	r2, [r3, #0]
 8002db4:	e032      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x784>
 8002db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x738>
 8002dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dcc:	3301      	adds	r3, #1
 8002dce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4313      	orrs	r3, r2
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002de4:	801a      	strh	r2, [r3, #0]
 8002de6:	e019      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x784>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d115      	bne.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x784>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfe:	4413      	add	r3, r2
 8002e00:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	011a      	lsls	r2, r3, #4
 8002e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e10:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e1a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	6959      	ldr	r1, [r3, #20]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	895a      	ldrh	r2, [r3, #10]
 8002e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f003 fea0 	bl	8006b72 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e4c:	82bb      	strh	r3, [r7, #20]
 8002e4e:	8abb      	ldrh	r3, [r7, #20]
 8002e50:	f083 0310 	eor.w	r3, r3, #16
 8002e54:	82bb      	strh	r3, [r7, #20]
 8002e56:	8abb      	ldrh	r3, [r7, #20]
 8002e58:	f083 0320 	eor.w	r3, r3, #32
 8002e5c:	82bb      	strh	r3, [r7, #20]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	441a      	add	r2, r3
 8002e6c:	8abb      	ldrh	r3, [r7, #20]
 8002e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3790      	adds	r7, #144	@ 0x90
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	817b      	strh	r3, [r7, #10]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	897b      	ldrh	r3, [r7, #10]
 8002eac:	f003 0207 	and.w	r2, r3, #7
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	3310      	adds	r3, #16
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e009      	b.n	8002ed6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ec2:	897a      	ldrh	r2, [r7, #10]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ed6:	893b      	ldrh	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d107      	bne.n	8002eec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	80da      	strh	r2, [r3, #6]
 8002eea:	e00b      	b.n	8002f04 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e272      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8087 	beq.w	800303e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f30:	4b92      	ldr	r3, [pc, #584]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d00c      	beq.n	8002f56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f3c:	4b8f      	ldr	r3, [pc, #572]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d112      	bne.n	8002f6e <HAL_RCC_OscConfig+0x5e>
 8002f48:	4b8c      	ldr	r3, [pc, #560]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f54:	d10b      	bne.n	8002f6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f56:	4b89      	ldr	r3, [pc, #548]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d06c      	beq.n	800303c <HAL_RCC_OscConfig+0x12c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d168      	bne.n	800303c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e24c      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x76>
 8002f78:	4b80      	ldr	r3, [pc, #512]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a7f      	ldr	r2, [pc, #508]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e02e      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x98>
 8002f8e:	4b7b      	ldr	r3, [pc, #492]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7a      	ldr	r2, [pc, #488]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b78      	ldr	r3, [pc, #480]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a77      	ldr	r2, [pc, #476]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e01d      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0xbc>
 8002fb2:	4b72      	ldr	r3, [pc, #456]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a71      	ldr	r2, [pc, #452]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6e      	ldr	r2, [pc, #440]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002fcc:	4b6b      	ldr	r3, [pc, #428]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6a      	ldr	r2, [pc, #424]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b68      	ldr	r3, [pc, #416]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a67      	ldr	r2, [pc, #412]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fe2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fd fea4 	bl	8000d38 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fd fea0 	bl	8000d38 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	@ 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e200      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b5d      	ldr	r3, [pc, #372]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xe4>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fd fe90 	bl	8000d38 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301c:	f7fd fe8c 	bl	8000d38 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	@ 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1ec      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	4b53      	ldr	r3, [pc, #332]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x10c>
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d063      	beq.n	8003112 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800304a:	4b4c      	ldr	r3, [pc, #304]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003056:	4b49      	ldr	r3, [pc, #292]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b08      	cmp	r3, #8
 8003060:	d11c      	bne.n	800309c <HAL_RCC_OscConfig+0x18c>
 8003062:	4b46      	ldr	r3, [pc, #280]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	4b43      	ldr	r3, [pc, #268]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x176>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e1c0      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b3d      	ldr	r3, [pc, #244]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4939      	ldr	r1, [pc, #228]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309a:	e03a      	b.n	8003112 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a4:	4b36      	ldr	r3, [pc, #216]	@ (8003180 <HAL_RCC_OscConfig+0x270>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fd fe45 	bl	8000d38 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fd fe41 	bl	8000d38 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e1a1      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b2a      	ldr	r3, [pc, #168]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4927      	ldr	r1, [pc, #156]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
 80030e4:	e015      	b.n	8003112 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b26      	ldr	r3, [pc, #152]	@ (8003180 <HAL_RCC_OscConfig+0x270>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fd fe24 	bl	8000d38 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f4:	f7fd fe20 	bl	8000d38 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e180      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	4b1d      	ldr	r3, [pc, #116]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d03a      	beq.n	8003194 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d019      	beq.n	800315a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003126:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <HAL_RCC_OscConfig+0x274>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312c:	f7fd fe04 	bl	8000d38 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003134:	f7fd fe00 	bl	8000d38 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e160      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <HAL_RCC_OscConfig+0x26c>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003152:	2001      	movs	r0, #1
 8003154:	f000 face 	bl	80036f4 <RCC_Delay>
 8003158:	e01c      	b.n	8003194 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315a:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <HAL_RCC_OscConfig+0x274>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003160:	f7fd fdea 	bl	8000d38 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003166:	e00f      	b.n	8003188 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003168:	f7fd fde6 	bl	8000d38 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d908      	bls.n	8003188 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e146      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	42420000 	.word	0x42420000
 8003184:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	4b92      	ldr	r3, [pc, #584]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e9      	bne.n	8003168 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a6 	beq.w	80032ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	4b8b      	ldr	r3, [pc, #556]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10d      	bne.n	80031ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	4b88      	ldr	r3, [pc, #544]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4a87      	ldr	r2, [pc, #540]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	61d3      	str	r3, [r2, #28]
 80031be:	4b85      	ldr	r3, [pc, #532]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b82      	ldr	r3, [pc, #520]	@ (80033d8 <HAL_RCC_OscConfig+0x4c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4b7f      	ldr	r3, [pc, #508]	@ (80033d8 <HAL_RCC_OscConfig+0x4c8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7e      	ldr	r2, [pc, #504]	@ (80033d8 <HAL_RCC_OscConfig+0x4c8>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e6:	f7fd fda7 	bl	8000d38 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fd fda3 	bl	8000d38 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b64      	cmp	r3, #100	@ 0x64
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e103      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	4b75      	ldr	r3, [pc, #468]	@ (80033d8 <HAL_RCC_OscConfig+0x4c8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x312>
 8003214:	4b6f      	ldr	r3, [pc, #444]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a6e      	ldr	r2, [pc, #440]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e02d      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x334>
 800322a:	4b6a      	ldr	r3, [pc, #424]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a69      	ldr	r2, [pc, #420]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	4b67      	ldr	r3, [pc, #412]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a66      	ldr	r2, [pc, #408]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6213      	str	r3, [r2, #32]
 8003242:	e01c      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b05      	cmp	r3, #5
 800324a:	d10c      	bne.n	8003266 <HAL_RCC_OscConfig+0x356>
 800324c:	4b61      	ldr	r3, [pc, #388]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a60      	ldr	r2, [pc, #384]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	f043 0304 	orr.w	r3, r3, #4
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	4b5e      	ldr	r3, [pc, #376]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a5d      	ldr	r2, [pc, #372]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	e00b      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003266:	4b5b      	ldr	r3, [pc, #364]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a5a      	ldr	r2, [pc, #360]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	6213      	str	r3, [r2, #32]
 8003272:	4b58      	ldr	r3, [pc, #352]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4a57      	ldr	r2, [pc, #348]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	f023 0304 	bic.w	r3, r3, #4
 800327c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d015      	beq.n	80032b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fd fd57 	bl	8000d38 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fd fd53 	bl	8000d38 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e0b1      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a4:	4b4b      	ldr	r3, [pc, #300]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ee      	beq.n	800328e <HAL_RCC_OscConfig+0x37e>
 80032b0:	e014      	b.n	80032dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b2:	f7fd fd41 	bl	8000d38 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fd fd3d 	bl	8000d38 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e09b      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d0:	4b40      	ldr	r3, [pc, #256]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ee      	bne.n	80032ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e2:	4b3c      	ldr	r3, [pc, #240]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a3b      	ldr	r2, [pc, #236]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8087 	beq.w	8003406 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f8:	4b36      	ldr	r3, [pc, #216]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d061      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d146      	bne.n	800339a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330c:	4b33      	ldr	r3, [pc, #204]	@ (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fd fd11 	bl	8000d38 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331a:	f7fd fd0d 	bl	8000d38 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e06d      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800332c:	4b29      	ldr	r3, [pc, #164]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003340:	d108      	bne.n	8003354 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003342:	4b24      	ldr	r3, [pc, #144]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	4921      	ldr	r1, [pc, #132]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003354:	4b1f      	ldr	r3, [pc, #124]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a19      	ldr	r1, [r3, #32]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	430b      	orrs	r3, r1
 8003366:	491b      	ldr	r1, [pc, #108]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800336c:	4b1b      	ldr	r3, [pc, #108]	@ (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fd fce1 	bl	8000d38 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337a:	f7fd fcdd 	bl	8000d38 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e03d      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800338c:	4b11      	ldr	r3, [pc, #68]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x46a>
 8003398:	e035      	b.n	8003406 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fd fcca 	bl	8000d38 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd fcc6 	bl	8000d38 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e026      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ba:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x498>
 80033c6:	e01e      	b.n	8003406 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e019      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40007000 	.word	0x40007000
 80033dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <HAL_RCC_OscConfig+0x500>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0d0      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b6a      	ldr	r3, [pc, #424]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b67      	ldr	r3, [pc, #412]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	4965      	ldr	r1, [pc, #404]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b63      	ldr	r3, [pc, #396]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b8      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b59      	ldr	r3, [pc, #356]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a58      	ldr	r2, [pc, #352]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800347a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b53      	ldr	r3, [pc, #332]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a52      	ldr	r2, [pc, #328]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003492:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b50      	ldr	r3, [pc, #320]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	494d      	ldr	r1, [pc, #308]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d040      	beq.n	8003534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b47      	ldr	r3, [pc, #284]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d115      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e07f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b41      	ldr	r3, [pc, #260]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e073      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3d      	ldr	r3, [pc, #244]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06b      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b39      	ldr	r3, [pc, #228]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4936      	ldr	r1, [pc, #216]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7fd fc18 	bl	8000d38 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fd fc14 	bl	8000d38 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e053      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2d      	ldr	r3, [pc, #180]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b27      	ldr	r3, [pc, #156]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d210      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b24      	ldr	r3, [pc, #144]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 0207 	bic.w	r2, r3, #7
 800354a:	4922      	ldr	r1, [pc, #136]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4916      	ldr	r1, [pc, #88]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800358e:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490e      	ldr	r1, [pc, #56]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f821 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490a      	ldr	r1, [pc, #40]	@ (80035dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	4a09      	ldr	r2, [pc, #36]	@ (80035e0 <HAL_RCC_ClockConfig+0x1cc>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035be:	4b09      	ldr	r3, [pc, #36]	@ (80035e4 <HAL_RCC_ClockConfig+0x1d0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fb76 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40022000 	.word	0x40022000
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08008934 	.word	0x08008934
 80035e0:	20000004 	.word	0x20000004
 80035e4:	20000008 	.word	0x20000008

080035e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003602:	4b1e      	ldr	r3, [pc, #120]	@ (800367c <HAL_RCC_GetSysClockFreq+0x94>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b04      	cmp	r3, #4
 8003610:	d002      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x30>
 8003612:	2b08      	cmp	r3, #8
 8003614:	d003      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x36>
 8003616:	e027      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003618:	4b19      	ldr	r3, [pc, #100]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x98>)
 800361a:	613b      	str	r3, [r7, #16]
      break;
 800361c:	e027      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	0c9b      	lsrs	r3, r3, #18
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	4a17      	ldr	r2, [pc, #92]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003628:	5cd3      	ldrb	r3, [r2, r3]
 800362a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003636:	4b11      	ldr	r3, [pc, #68]	@ (800367c <HAL_RCC_GetSysClockFreq+0x94>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	0c5b      	lsrs	r3, r3, #17
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	4a11      	ldr	r2, [pc, #68]	@ (8003688 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003642:	5cd3      	ldrb	r3, [r2, r3]
 8003644:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a0d      	ldr	r2, [pc, #52]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x98>)
 800364a:	fb03 f202 	mul.w	r2, r3, r2
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e004      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a0c      	ldr	r2, [pc, #48]	@ (800368c <HAL_RCC_GetSysClockFreq+0xa4>)
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	613b      	str	r3, [r7, #16]
      break;
 8003666:	e002      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x98>)
 800366a:	613b      	str	r3, [r7, #16]
      break;
 800366c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366e:	693b      	ldr	r3, [r7, #16]
}
 8003670:	4618      	mov	r0, r3
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	007a1200 	.word	0x007a1200
 8003684:	0800894c 	.word	0x0800894c
 8003688:	0800895c 	.word	0x0800895c
 800368c:	003d0900 	.word	0x003d0900

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b02      	ldr	r3, [pc, #8]	@ (80036a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	20000004 	.word	0x20000004

080036a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036a8:	f7ff fff2 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4903      	ldr	r1, [pc, #12]	@ (80036c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	08008944 	.word	0x08008944

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d0:	f7ff ffde 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	0adb      	lsrs	r3, r3, #11
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4903      	ldr	r1, [pc, #12]	@ (80036f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	08008944 	.word	0x08008944

080036f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <RCC_Delay+0x34>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0a      	ldr	r2, [pc, #40]	@ (800372c <RCC_Delay+0x38>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0a5b      	lsrs	r3, r3, #9
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003710:	bf00      	nop
  }
  while (Delay --);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1e5a      	subs	r2, r3, #1
 8003716:	60fa      	str	r2, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f9      	bne.n	8003710 <RCC_Delay+0x1c>
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000004 	.word	0x20000004
 800372c:	10624dd3 	.word	0x10624dd3

08003730 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d07d      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800374c:	2300      	movs	r3, #0
 800374e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003750:	4b4f      	ldr	r3, [pc, #316]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10d      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375c:	4b4c      	ldr	r3, [pc, #304]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	4a4b      	ldr	r2, [pc, #300]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003766:	61d3      	str	r3, [r2, #28]
 8003768:	4b49      	ldr	r3, [pc, #292]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003778:	4b46      	ldr	r3, [pc, #280]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d118      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003784:	4b43      	ldr	r3, [pc, #268]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a42      	ldr	r2, [pc, #264]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800378e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003790:	f7fd fad2 	bl	8000d38 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	e008      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003798:	f7fd face 	bl	8000d38 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	@ 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e06d      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037b6:	4b36      	ldr	r3, [pc, #216]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02e      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d027      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037de:	4b2e      	ldr	r3, [pc, #184]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ea:	4a29      	ldr	r2, [pc, #164]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d014      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fd fa9d 	bl	8000d38 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fd fa99 	bl	8000d38 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e036      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	4b1d      	ldr	r3, [pc, #116]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ee      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003824:	4b1a      	ldr	r3, [pc, #104]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4917      	ldr	r1, [pc, #92]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	4313      	orrs	r3, r2
 8003834:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383c:	4b14      	ldr	r3, [pc, #80]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4a13      	ldr	r2, [pc, #76]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003846:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003854:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	490b      	ldr	r1, [pc, #44]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003872:	4b07      	ldr	r3, [pc, #28]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4904      	ldr	r1, [pc, #16]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	40007000 	.word	0x40007000
 8003898:	42420440 	.word	0x42420440

0800389c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e042      	b.n	8003934 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd f966 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	@ 0x24
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fdb7 	bl	8004454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	@ 0x28
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	d175      	bne.n	8003a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_UART_Transmit+0x2c>
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e06e      	b.n	8003a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2221      	movs	r2, #33	@ 0x21
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800397a:	f7fd f9dd 	bl	8000d38 <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003994:	d108      	bne.n	80039a8 <HAL_UART_Transmit+0x6c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e003      	b.n	80039b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039b0:	e02e      	b.n	8003a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2180      	movs	r1, #128	@ 0x80
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fb1c 	bl	8003ffa <UART_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e03a      	b.n	8003a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10b      	bne.n	80039f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	3302      	adds	r3, #2
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e007      	b.n	8003a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3301      	adds	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1cb      	bne.n	80039b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	2140      	movs	r1, #64	@ 0x40
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fae8 	bl	8003ffa <UART_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e006      	b.n	8003a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e000      	b.n	8003a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a48:	2302      	movs	r3, #2
  }
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d112      	bne.n	8003a92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_UART_Receive_IT+0x26>
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e00b      	b.n	8003a94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	461a      	mov	r2, r3
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fb0f 	bl	80040ac <UART_Start_Receive_IT>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	e000      	b.n	8003a94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b0ba      	sub	sp, #232	@ 0xe8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10f      	bne.n	8003b02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_UART_IRQHandler+0x66>
 8003aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fbec 	bl	80042d8 <UART_Receive_IT>
      return;
 8003b00:	e25b      	b.n	8003fba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80de 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x22c>
 8003b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80d1 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_UART_IRQHandler+0xae>
 8003b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_UART_IRQHandler+0xd2>
 8003b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f043 0202 	orr.w	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_UART_IRQHandler+0xf6>
 8003b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	f043 0204 	orr.w	r2, r3, #4
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d011      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x126>
 8003b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d105      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	f043 0208 	orr.w	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 81f2 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_UART_IRQHandler+0x14e>
 8003bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 fb77 	bl	80042d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <HAL_UART_IRQHandler+0x17a>
 8003c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d04f      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa81 	bl	800411e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d041      	beq.n	8003cae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3314      	adds	r3, #20
 8003c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1d9      	bne.n	8003c2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d013      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c82:	4a7e      	ldr	r2, [pc, #504]	@ (8003e7c <HAL_UART_IRQHandler+0x3e0>)
 8003c84:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd f9ca 	bl	8001024 <HAL_DMA_Abort_IT>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e00e      	b.n	8003cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f993 	bl	8003fd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e00a      	b.n	8003cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f98f 	bl	8003fd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e006      	b.n	8003cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f98b 	bl	8003fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003cc2:	e175      	b.n	8003fb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	bf00      	nop
    return;
 8003cc6:	e173      	b.n	8003fb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f040 814f 	bne.w	8003f70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8148 	beq.w	8003f70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8141 	beq.w	8003f70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80b6 	beq.w	8003e80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8145 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d32:	429a      	cmp	r2, r3
 8003d34:	f080 813e 	bcs.w	8003fb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	f000 8088 	beq.w	8003e5c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d78:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d84:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1d9      	bne.n	8003d4c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3314      	adds	r3, #20
 8003d9e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3314      	adds	r3, #20
 8003db8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dbc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003dc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003dc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003dce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e1      	bne.n	8003d98 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3314      	adds	r3, #20
 8003dda:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003de4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3314      	adds	r3, #20
 8003df4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003df8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003dfe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e3      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e2c:	f023 0310 	bic.w	r3, r3, #16
 8003e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e3e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e40:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e3      	bne.n	8003e1a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd f8a9 	bl	8000fae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f8b6 	bl	8003fe4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e78:	e09c      	b.n	8003fb4 <HAL_UART_IRQHandler+0x518>
 8003e7a:	bf00      	nop
 8003e7c:	080041e3 	.word	0x080041e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 808e 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8089 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003eca:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ecc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ed0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e3      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3314      	adds	r3, #20
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	623b      	str	r3, [r7, #32]
   return(result);
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f02:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e3      	bne.n	8003ede <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0310 	bic.w	r3, r3, #16
 8003f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f48:	61fa      	str	r2, [r7, #28]
 8003f4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	69b9      	ldr	r1, [r7, #24]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	617b      	str	r3, [r7, #20]
   return(result);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e3      	bne.n	8003f24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f66:	4619      	mov	r1, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f83b 	bl	8003fe4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f6e:	e023      	b.n	8003fb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <HAL_UART_IRQHandler+0x4f4>
 8003f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f93e 	bl	800420a <UART_Transmit_IT>
    return;
 8003f8e:	e014      	b.n	8003fba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00e      	beq.n	8003fba <HAL_UART_IRQHandler+0x51e>
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f97d 	bl	80042a8 <UART_EndTransmit_IT>
    return;
 8003fae:	e004      	b.n	8003fba <HAL_UART_IRQHandler+0x51e>
    return;
 8003fb0:	bf00      	nop
 8003fb2:	e002      	b.n	8003fba <HAL_UART_IRQHandler+0x51e>
      return;
 8003fb4:	bf00      	nop
 8003fb6:	e000      	b.n	8003fba <HAL_UART_IRQHandler+0x51e>
      return;
 8003fb8:	bf00      	nop
  }
}
 8003fba:	37e8      	adds	r7, #232	@ 0xe8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400a:	e03b      	b.n	8004084 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d037      	beq.n	8004084 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004014:	f7fc fe90 	bl	8000d38 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	6a3a      	ldr	r2, [r7, #32]
 8004020:	429a      	cmp	r2, r3
 8004022:	d302      	bcc.n	800402a <UART_WaitOnFlagUntilTimeout+0x30>
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e03a      	b.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d023      	beq.n	8004084 <UART_WaitOnFlagUntilTimeout+0x8a>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b80      	cmp	r3, #128	@ 0x80
 8004040:	d020      	beq.n	8004084 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b40      	cmp	r3, #64	@ 0x40
 8004046:	d01d      	beq.n	8004084 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b08      	cmp	r3, #8
 8004054:	d116      	bne.n	8004084 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f856 	bl	800411e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2208      	movs	r2, #8
 8004076:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e00f      	b.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	429a      	cmp	r2, r3
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d0b4      	beq.n	800400c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	88fa      	ldrh	r2, [r7, #6]
 80040ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2222      	movs	r2, #34	@ 0x22
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0201 	orr.w	r2, r2, #1
 8004100:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0220 	orr.w	r2, r2, #32
 8004110:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800411e:	b480      	push	{r7}
 8004120:	b095      	sub	sp, #84	@ 0x54
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800413c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004146:	643a      	str	r2, [r7, #64]	@ 0x40
 8004148:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800414c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3314      	adds	r3, #20
 8004160:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	61fb      	str	r3, [r7, #28]
   return(result);
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800417a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800417c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e5      	bne.n	800415a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	2b01      	cmp	r3, #1
 8004194:	d119      	bne.n	80041ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f023 0310 	bic.w	r3, r3, #16
 80041ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041b6:	61ba      	str	r2, [r7, #24]
 80041b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6979      	ldr	r1, [r7, #20]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	613b      	str	r3, [r7, #16]
   return(result);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e5      	bne.n	8004196 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041d8:	bf00      	nop
 80041da:	3754      	adds	r7, #84	@ 0x54
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7ff fee8 	bl	8003fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b21      	cmp	r3, #33	@ 0x21
 800421c:	d13e      	bne.n	800429c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004226:	d114      	bne.n	8004252 <UART_Transmit_IT+0x48>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d110      	bne.n	8004252 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004244:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	1c9a      	adds	r2, r3, #2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	621a      	str	r2, [r3, #32]
 8004250:	e008      	b.n	8004264 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	1c59      	adds	r1, r3, #1
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6211      	str	r1, [r2, #32]
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29b      	uxth	r3, r3
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4619      	mov	r1, r3
 8004272:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10f      	bne.n	8004298 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004286:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004296:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff fe79 	bl	8003fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	@ 0x30
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b22      	cmp	r3, #34	@ 0x22
 80042ea:	f040 80ae 	bne.w	800444a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f6:	d117      	bne.n	8004328 <UART_Receive_IT+0x50>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d113      	bne.n	8004328 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	b29a      	uxth	r2, r3
 8004318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	1c9a      	adds	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	629a      	str	r2, [r3, #40]	@ 0x28
 8004326:	e026      	b.n	8004376 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433a:	d007      	beq.n	800434c <UART_Receive_IT+0x74>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <UART_Receive_IT+0x82>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	b2da      	uxtb	r2, r3
 8004354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e008      	b.n	800436c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004366:	b2da      	uxtb	r2, r3
 8004368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29b      	uxth	r3, r3
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	4619      	mov	r1, r3
 8004384:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004386:	2b00      	cmp	r3, #0
 8004388:	d15d      	bne.n	8004446 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0220 	bic.w	r2, r2, #32
 8004398:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d135      	bne.n	800443c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	330c      	adds	r3, #12
 80043dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	613b      	str	r3, [r7, #16]
   return(result);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f023 0310 	bic.w	r3, r3, #16
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f6:	623a      	str	r2, [r7, #32]
 80043f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	69f9      	ldr	r1, [r7, #28]
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	61bb      	str	r3, [r7, #24]
   return(result);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e5      	bne.n	80043d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b10      	cmp	r3, #16
 8004416:	d10a      	bne.n	800442e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fdd5 	bl	8003fe4 <HAL_UARTEx_RxEventCallback>
 800443a:	e002      	b.n	8004442 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fc f8fd 	bl	800063c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e002      	b.n	800444c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e000      	b.n	800444c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800444a:	2302      	movs	r3, #2
  }
}
 800444c:	4618      	mov	r0, r3
 800444e:	3730      	adds	r7, #48	@ 0x30
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800448e:	f023 030c 	bic.w	r3, r3, #12
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	430b      	orrs	r3, r1
 800449a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004568 <UART_SetConfig+0x114>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d103      	bne.n	80044c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044bc:	f7ff f906 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	e002      	b.n	80044ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7ff f8ee 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 80044c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e0:	4a22      	ldr	r2, [pc, #136]	@ (800456c <UART_SetConfig+0x118>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	0119      	lsls	r1, r3, #4
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009a      	lsls	r2, r3, #2
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004500:	4b1a      	ldr	r3, [pc, #104]	@ (800456c <UART_SetConfig+0x118>)
 8004502:	fba3 0302 	umull	r0, r3, r3, r2
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2064      	movs	r0, #100	@ 0x64
 800450a:	fb00 f303 	mul.w	r3, r0, r3
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	3332      	adds	r3, #50	@ 0x32
 8004514:	4a15      	ldr	r2, [pc, #84]	@ (800456c <UART_SetConfig+0x118>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004520:	4419      	add	r1, r3
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009a      	lsls	r2, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	fbb2 f2f3 	udiv	r2, r2, r3
 8004538:	4b0c      	ldr	r3, [pc, #48]	@ (800456c <UART_SetConfig+0x118>)
 800453a:	fba3 0302 	umull	r0, r3, r3, r2
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2064      	movs	r0, #100	@ 0x64
 8004542:	fb00 f303 	mul.w	r3, r0, r3
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	3332      	adds	r3, #50	@ 0x32
 800454c:	4a07      	ldr	r2, [pc, #28]	@ (800456c <UART_SetConfig+0x118>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	440a      	add	r2, r1
 800455e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40013800 	.word	0x40013800
 800456c:	51eb851f 	.word	0x51eb851f

08004570 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	4638      	mov	r0, r7
 800457a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800459a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800459e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045be:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80045c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	4013      	ands	r3, r2
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	4638      	mov	r0, r7
 800460c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800463c:	b480      	push	{r7}
 800463e:	b09d      	sub	sp, #116	@ 0x74
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800465e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004662:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	78db      	ldrb	r3, [r3, #3]
 800466a:	2b03      	cmp	r3, #3
 800466c:	d81f      	bhi.n	80046ae <USB_ActivateEndpoint+0x72>
 800466e:	a201      	add	r2, pc, #4	@ (adr r2, 8004674 <USB_ActivateEndpoint+0x38>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	08004685 	.word	0x08004685
 8004678:	080046a1 	.word	0x080046a1
 800467c:	080046b7 	.word	0x080046b7
 8004680:	08004693 	.word	0x08004693
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004684:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004688:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800468c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004690:	e012      	b.n	80046b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004692:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004696:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800469a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800469e:	e00b      	b.n	80046b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80046ac:	e004      	b.n	80046b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80046b4:	e000      	b.n	80046b8 <USB_ActivateEndpoint+0x7c>
      break;
 80046b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800470a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800470e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800471a:	b29b      	uxth	r3, r3
 800471c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	7b1b      	ldrb	r3, [r3, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 8178 	bne.w	8004a18 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8084 	beq.w	800483a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800473c:	b29b      	uxth	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	4413      	add	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	011a      	lsls	r2, r3, #4
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	88db      	ldrh	r3, [r3, #6]
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	b29b      	uxth	r3, r3
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	827b      	strh	r3, [r7, #18]
 8004774:	8a7b      	ldrh	r3, [r7, #18]
 8004776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01b      	beq.n	80047b6 <USB_ActivateEndpoint+0x17a>
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004794:	823b      	strh	r3, [r7, #16]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	8a3b      	ldrh	r3, [r7, #16]
 80047a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	78db      	ldrb	r3, [r3, #3]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d020      	beq.n	8004800 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d4:	81bb      	strh	r3, [r7, #12]
 80047d6:	89bb      	ldrh	r3, [r7, #12]
 80047d8:	f083 0320 	eor.w	r3, r3, #32
 80047dc:	81bb      	strh	r3, [r7, #12]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	89bb      	ldrh	r3, [r7, #12]
 80047ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	8013      	strh	r3, [r2, #0]
 80047fe:	e2d5      	b.n	8004dac <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004816:	81fb      	strh	r3, [r7, #14]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	89fb      	ldrh	r3, [r7, #14]
 8004824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800482c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004834:	b29b      	uxth	r3, r3
 8004836:	8013      	strh	r3, [r2, #0]
 8004838:	e2b8      	b.n	8004dac <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	633b      	str	r3, [r7, #48]	@ 0x30
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004844:	b29b      	uxth	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	4413      	add	r3, r2
 800484c:	633b      	str	r3, [r7, #48]	@ 0x30
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	011a      	lsls	r2, r3, #4
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	4413      	add	r3, r2
 8004858:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	88db      	ldrh	r3, [r3, #6]
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	b29b      	uxth	r3, r3
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004878:	b29b      	uxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487e:	4413      	add	r3, r2
 8004880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	011a      	lsls	r2, r3, #4
 8004888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488a:	4413      	add	r3, r2
 800488c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800489c:	b29a      	uxth	r2, r3
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80048a8:	d91d      	bls.n	80048e6 <USB_ActivateEndpoint+0x2aa>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <USB_ActivateEndpoint+0x288>
 80048be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048c0:	3b01      	subs	r3, #1
 80048c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	029b      	lsls	r3, r3, #10
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048de:	b29a      	uxth	r2, r3
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	e026      	b.n	8004934 <USB_ActivateEndpoint+0x2f8>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <USB_ActivateEndpoint+0x2c8>
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	801a      	strh	r2, [r3, #0]
 8004902:	e017      	b.n	8004934 <USB_ActivateEndpoint+0x2f8>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <USB_ActivateEndpoint+0x2e2>
 8004918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800491a:	3301      	adds	r3, #1
 800491c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29a      	uxth	r2, r3
 8004924:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004926:	b29b      	uxth	r3, r3
 8004928:	029b      	lsls	r3, r3, #10
 800492a:	b29b      	uxth	r3, r3
 800492c:	4313      	orrs	r3, r2
 800492e:	b29a      	uxth	r2, r3
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004942:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01b      	beq.n	8004984 <USB_ActivateEndpoint+0x348>
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004962:	843b      	strh	r3, [r7, #32]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	8c3b      	ldrh	r3, [r7, #32]
 8004970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004978:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800497c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004980:	b29b      	uxth	r3, r3
 8004982:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d124      	bne.n	80049d6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29b      	uxth	r3, r3
 800499a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800499e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a2:	83bb      	strh	r3, [r7, #28]
 80049a4:	8bbb      	ldrh	r3, [r7, #28]
 80049a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049aa:	83bb      	strh	r3, [r7, #28]
 80049ac:	8bbb      	ldrh	r3, [r7, #28]
 80049ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049b2:	83bb      	strh	r3, [r7, #28]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	8bbb      	ldrh	r3, [r7, #28]
 80049c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	8013      	strh	r3, [r2, #0]
 80049d4:	e1ea      	b.n	8004dac <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ec:	83fb      	strh	r3, [r7, #30]
 80049ee:	8bfb      	ldrh	r3, [r7, #30]
 80049f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049f4:	83fb      	strh	r3, [r7, #30]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	441a      	add	r2, r3
 8004a00:	8bfb      	ldrh	r3, [r7, #30]
 8004a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8013      	strh	r3, [r2, #0]
 8004a16:	e1c9      	b.n	8004dac <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	78db      	ldrb	r3, [r3, #3]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d11e      	bne.n	8004a5e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a36:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	441a      	add	r2, r3
 8004a44:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a50:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	8013      	strh	r3, [r2, #0]
 8004a5c:	e01d      	b.n	8004a9a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a74:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aaa:	4413      	add	r3, r2
 8004aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	011a      	lsls	r2, r3, #4
 8004ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004abc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	891b      	ldrh	r3, [r3, #8]
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004acc:	801a      	strh	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ade:	4413      	add	r3, r2
 8004ae0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	011a      	lsls	r2, r3, #4
 8004ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004af0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	895b      	ldrh	r3, [r3, #10]
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b00:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	785b      	ldrb	r3, [r3, #1]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 8093 	bne.w	8004c32 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004b1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01b      	beq.n	8004b60 <USB_ActivateEndpoint+0x524>
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	441a      	add	r2, r3
 8004b4a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004b6e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01b      	beq.n	8004bb0 <USB_ActivateEndpoint+0x574>
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ba8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004bc8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004bca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004bce:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004bd0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004bd2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004bd6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	441a      	add	r2, r3
 8004be2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004be4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004be8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]
 8004c30:	e0bc      	b.n	8004dac <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01d      	beq.n	8004c8a <USB_ActivateEndpoint+0x64e>
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c64:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004c9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01d      	beq.n	8004ce2 <USB_ActivateEndpoint+0x6a6>
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cbc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	78db      	ldrb	r3, [r3, #3]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d024      	beq.n	8004d34 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d00:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d08:	f083 0320 	eor.w	r3, r3, #32
 8004d0c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	441a      	add	r2, r3
 8004d1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	8013      	strh	r3, [r2, #0]
 8004d32:	e01d      	b.n	8004d70 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d4a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	441a      	add	r2, r3
 8004d58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004d98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004dac:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3774      	adds	r7, #116	@ 0x74
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop

08004dbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b08d      	sub	sp, #52	@ 0x34
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	7b1b      	ldrb	r3, [r3, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f040 808e 	bne.w	8004eec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d044      	beq.n	8004e62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	81bb      	strh	r3, [r7, #12]
 8004de6:	89bb      	ldrh	r3, [r7, #12]
 8004de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <USB_DeactivateEndpoint+0x6c>
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e06:	817b      	strh	r3, [r7, #10]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	441a      	add	r2, r3
 8004e12:	897b      	ldrh	r3, [r7, #10]
 8004e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e3e:	813b      	strh	r3, [r7, #8]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	893b      	ldrh	r3, [r7, #8]
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]
 8004e60:	e192      	b.n	8005188 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	827b      	strh	r3, [r7, #18]
 8004e70:	8a7b      	ldrh	r3, [r7, #18]
 8004e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01b      	beq.n	8004eb2 <USB_DeactivateEndpoint+0xf6>
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e90:	823b      	strh	r3, [r7, #16]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	441a      	add	r2, r3
 8004e9c:	8a3b      	ldrh	r3, [r7, #16]
 8004e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec8:	81fb      	strh	r3, [r7, #14]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	89fb      	ldrh	r3, [r7, #14]
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]
 8004eea:	e14d      	b.n	8005188 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 80a5 	bne.w	8005040 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	843b      	strh	r3, [r7, #32]
 8004f04:	8c3b      	ldrh	r3, [r7, #32]
 8004f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01b      	beq.n	8004f46 <USB_DeactivateEndpoint+0x18a>
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f24:	83fb      	strh	r3, [r7, #30]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	8bfb      	ldrh	r3, [r7, #30]
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	83bb      	strh	r3, [r7, #28]
 8004f54:	8bbb      	ldrh	r3, [r7, #28]
 8004f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01b      	beq.n	8004f96 <USB_DeactivateEndpoint+0x1da>
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f74:	837b      	strh	r3, [r7, #26]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	441a      	add	r2, r3
 8004f80:	8b7b      	ldrh	r3, [r7, #26]
 8004f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fac:	833b      	strh	r3, [r7, #24]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	441a      	add	r2, r3
 8004fb8:	8b3b      	ldrh	r3, [r7, #24]
 8004fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe4:	82fb      	strh	r3, [r7, #22]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	8afb      	ldrh	r3, [r7, #22]
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800501c:	82bb      	strh	r3, [r7, #20]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	8abb      	ldrh	r3, [r7, #20]
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]
 800503e:	e0a3      	b.n	8005188 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800504e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01b      	beq.n	8005090 <USB_DeactivateEndpoint+0x2d4>
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800506a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	441a      	add	r2, r3
 800507a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800507c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005084:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800509e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80050a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <USB_DeactivateEndpoint+0x324>
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80050cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050dc:	b29b      	uxth	r3, r3
 80050de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800510c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005114:	b29b      	uxth	r3, r3
 8005116:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800512a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800512e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005166:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800517c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005184:	b29b      	uxth	r3, r3
 8005186:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3734      	adds	r7, #52	@ 0x34
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b0c2      	sub	sp, #264	@ 0x108
 8005198:	af00      	add	r7, sp, #0
 800519a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051a2:	6018      	str	r0, [r3, #0]
 80051a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ac:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	f040 86b7 	bne.w	8005f2e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d908      	bls.n	80051ee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80051dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80051ec:	e007      	b.n	80051fe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80051ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80051fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	7b1b      	ldrb	r3, [r3, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d13a      	bne.n	8005284 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800520e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6959      	ldr	r1, [r3, #20]
 800521a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	88da      	ldrh	r2, [r3, #6]
 8005226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522a:	b29b      	uxth	r3, r3
 800522c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005230:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005234:	6800      	ldr	r0, [r0, #0]
 8005236:	f001 fc9c 	bl	8006b72 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800523a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005254:	b29b      	uxth	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	011a      	lsls	r2, r3, #4
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	f000 be1f 	b.w	8005ec2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	78db      	ldrb	r3, [r3, #3]
 8005290:	2b02      	cmp	r3, #2
 8005292:	f040 8462 	bne.w	8005b5a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6a1a      	ldr	r2, [r3, #32]
 80052a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	f240 83df 	bls.w	8005a72 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052da:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80052de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80052fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005304:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800530c:	b29b      	uxth	r3, r3
 800530e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6a1a      	ldr	r2, [r3, #32]
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005320:	1ad2      	subs	r2, r2, r3
 8005322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800532e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800533c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 81c7 	beq.w	80056e4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	633b      	str	r3, [r7, #48]	@ 0x30
 8005362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	785b      	ldrb	r3, [r3, #1]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d177      	bne.n	8005462 <USB_EPStartXfer+0x2ce>
 8005372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005376:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800537e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800538c:	b29b      	uxth	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005392:	4413      	add	r3, r2
 8005394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	011a      	lsls	r2, r3, #4
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	4413      	add	r3, r2
 80053a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80053c4:	d921      	bls.n	800540a <USB_EPStartXfer+0x276>
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <USB_EPStartXfer+0x252>
 80053dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80053e0:	3b01      	subs	r3, #1
 80053e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	029b      	lsls	r3, r3, #10
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005402:	b29a      	uxth	r2, r3
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	e050      	b.n	80054ac <USB_EPStartXfer+0x318>
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <USB_EPStartXfer+0x294>
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005420:	b29a      	uxth	r2, r3
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	e041      	b.n	80054ac <USB_EPStartXfer+0x318>
 8005428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <USB_EPStartXfer+0x2b4>
 800543e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005442:	3301      	adds	r3, #1
 8005444:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29a      	uxth	r2, r3
 800544e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005452:	b29b      	uxth	r3, r3
 8005454:	029b      	lsls	r3, r3, #10
 8005456:	b29b      	uxth	r3, r3
 8005458:	4313      	orrs	r3, r2
 800545a:	b29a      	uxth	r2, r3
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e024      	b.n	80054ac <USB_EPStartXfer+0x318>
 8005462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d11c      	bne.n	80054ac <USB_EPStartXfer+0x318>
 8005472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005476:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005480:	b29b      	uxth	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	4413      	add	r3, r2
 8005488:	633b      	str	r3, [r7, #48]	@ 0x30
 800548a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	011a      	lsls	r2, r3, #4
 8005498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549a:	4413      	add	r3, r2
 800549c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	895b      	ldrh	r3, [r3, #10]
 80054b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6959      	ldr	r1, [r3, #20]
 80054c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054d2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054d6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	f001 fb49 	bl	8006b72 <USB_WritePMA>
            ep->xfer_buff += len;
 80054e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695a      	ldr	r2, [r3, #20]
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f0:	441a      	add	r2, r3
 80054f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	429a      	cmp	r2, r3
 8005518:	d90f      	bls.n	800553a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800551a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6a1a      	ldr	r2, [r3, #32]
 8005526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552a:	1ad2      	subs	r2, r2, r3
 800552c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	621a      	str	r2, [r3, #32]
 8005538:	e00e      	b.n	8005558 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800553a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800554a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2200      	movs	r2, #0
 8005556:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d177      	bne.n	8005658 <USB_EPStartXfer+0x4c4>
 8005568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005582:	b29b      	uxth	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	4413      	add	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	011a      	lsls	r2, r3, #4
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	4413      	add	r3, r2
 800559e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80055ba:	d921      	bls.n	8005600 <USB_EPStartXfer+0x46c>
 80055bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <USB_EPStartXfer+0x448>
 80055d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d6:	3b01      	subs	r3, #1
 80055d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	029b      	lsls	r3, r3, #10
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	4313      	orrs	r3, r2
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	e056      	b.n	80056ae <USB_EPStartXfer+0x51a>
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <USB_EPStartXfer+0x48a>
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005616:	b29a      	uxth	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	e047      	b.n	80056ae <USB_EPStartXfer+0x51a>
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <USB_EPStartXfer+0x4aa>
 8005634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005638:	3301      	adds	r3, #1
 800563a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29a      	uxth	r2, r3
 8005644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005648:	b29b      	uxth	r3, r3
 800564a:	029b      	lsls	r3, r3, #10
 800564c:	b29b      	uxth	r3, r3
 800564e:	4313      	orrs	r3, r2
 8005650:	b29a      	uxth	r2, r3
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	801a      	strh	r2, [r3, #0]
 8005656:	e02a      	b.n	80056ae <USB_EPStartXfer+0x51a>
 8005658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d122      	bne.n	80056ae <USB_EPStartXfer+0x51a>
 8005668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005682:	b29b      	uxth	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	4413      	add	r3, r2
 800568a:	623b      	str	r3, [r7, #32]
 800568c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	011a      	lsls	r2, r3, #4
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	4413      	add	r3, r2
 800569e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	891b      	ldrh	r3, [r3, #8]
 80056ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6959      	ldr	r1, [r3, #20]
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056dc:	6800      	ldr	r0, [r0, #0]
 80056de:	f001 fa48 	bl	8006b72 <USB_WritePMA>
 80056e2:	e3ee      	b.n	8005ec2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d177      	bne.n	80057e4 <USB_EPStartXfer+0x650>
 80056f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005704:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005714:	4413      	add	r3, r2
 8005716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	011a      	lsls	r2, r3, #4
 8005726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005728:	4413      	add	r3, r2
 800572a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800572e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800573a:	b29a      	uxth	r2, r3
 800573c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800573e:	801a      	strh	r2, [r3, #0]
 8005740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005744:	2b3e      	cmp	r3, #62	@ 0x3e
 8005746:	d921      	bls.n	800578c <USB_EPStartXfer+0x5f8>
 8005748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	2b00      	cmp	r3, #0
 800575c:	d104      	bne.n	8005768 <USB_EPStartXfer+0x5d4>
 800575e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005762:	3b01      	subs	r3, #1
 8005764:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29a      	uxth	r2, r3
 800576e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005772:	b29b      	uxth	r3, r3
 8005774:	029b      	lsls	r3, r3, #10
 8005776:	b29b      	uxth	r3, r3
 8005778:	4313      	orrs	r3, r2
 800577a:	b29b      	uxth	r3, r3
 800577c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005784:	b29a      	uxth	r2, r3
 8005786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	e056      	b.n	800583a <USB_EPStartXfer+0x6a6>
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <USB_EPStartXfer+0x616>
 8005794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e047      	b.n	800583a <USB_EPStartXfer+0x6a6>
 80057aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ae:	085b      	lsrs	r3, r3, #1
 80057b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <USB_EPStartXfer+0x636>
 80057c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057c4:	3301      	adds	r3, #1
 80057c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	029b      	lsls	r3, r3, #10
 80057d8:	b29b      	uxth	r3, r3
 80057da:	4313      	orrs	r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	e02a      	b.n	800583a <USB_EPStartXfer+0x6a6>
 80057e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d122      	bne.n	800583a <USB_EPStartXfer+0x6a6>
 80057f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005804:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800580e:	b29b      	uxth	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005814:	4413      	add	r3, r2
 8005816:	653b      	str	r3, [r7, #80]	@ 0x50
 8005818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	011a      	lsls	r2, r3, #4
 8005826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005828:	4413      	add	r3, r2
 800582a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800582e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005834:	b29a      	uxth	r2, r3
 8005836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005838:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800583a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	891b      	ldrh	r3, [r3, #8]
 8005846:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800584a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6959      	ldr	r1, [r3, #20]
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585a:	b29b      	uxth	r3, r3
 800585c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005860:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005864:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005868:	6800      	ldr	r0, [r0, #0]
 800586a:	f001 f982 	bl	8006b72 <USB_WritePMA>
            ep->xfer_buff += len;
 800586e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695a      	ldr	r2, [r3, #20]
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587e:	441a      	add	r2, r3
 8005880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800588c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6a1a      	ldr	r2, [r3, #32]
 8005898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d90f      	bls.n	80058c8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80058a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b8:	1ad2      	subs	r2, r2, r3
 80058ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	621a      	str	r2, [r3, #32]
 80058c6:	e00e      	b.n	80058e6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80058c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80058d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d177      	bne.n	80059f2 <USB_EPStartXfer+0x85e>
 8005902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800590e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005912:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800591c:	b29b      	uxth	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005922:	4413      	add	r3, r2
 8005924:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	011a      	lsls	r2, r3, #4
 8005934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005936:	4413      	add	r3, r2
 8005938:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800593c:	637b      	str	r3, [r7, #52]	@ 0x34
 800593e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005948:	b29a      	uxth	r2, r3
 800594a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005952:	2b3e      	cmp	r3, #62	@ 0x3e
 8005954:	d921      	bls.n	800599a <USB_EPStartXfer+0x806>
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	2b00      	cmp	r3, #0
 800596a:	d104      	bne.n	8005976 <USB_EPStartXfer+0x7e2>
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	3b01      	subs	r3, #1
 8005972:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29a      	uxth	r2, r3
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	b29b      	uxth	r3, r3
 8005982:	029b      	lsls	r3, r3, #10
 8005984:	b29b      	uxth	r3, r3
 8005986:	4313      	orrs	r3, r2
 8005988:	b29b      	uxth	r3, r3
 800598a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005992:	b29a      	uxth	r2, r3
 8005994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005996:	801a      	strh	r2, [r3, #0]
 8005998:	e050      	b.n	8005a3c <USB_EPStartXfer+0x8a8>
 800599a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <USB_EPStartXfer+0x824>
 80059a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b4:	801a      	strh	r2, [r3, #0]
 80059b6:	e041      	b.n	8005a3c <USB_EPStartXfer+0x8a8>
 80059b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d004      	beq.n	80059d8 <USB_EPStartXfer+0x844>
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d2:	3301      	adds	r3, #1
 80059d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29a      	uxth	r2, r3
 80059de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	029b      	lsls	r3, r3, #10
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	4313      	orrs	r3, r2
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e024      	b.n	8005a3c <USB_EPStartXfer+0x8a8>
 80059f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d11c      	bne.n	8005a3c <USB_EPStartXfer+0x8a8>
 8005a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a16:	4413      	add	r3, r2
 8005a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	011a      	lsls	r2, r3, #4
 8005a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	895b      	ldrh	r3, [r3, #10]
 8005a48:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6959      	ldr	r1, [r3, #20]
 8005a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a62:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a66:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a6a:	6800      	ldr	r0, [r0, #0]
 8005a6c:	f001 f881 	bl	8006b72 <USB_WritePMA>
 8005a70:	e227      	b.n	8005ec2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005afe:	4413      	add	r3, r2
 8005b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	011a      	lsls	r2, r3, #4
 8005b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b12:	4413      	add	r3, r2
 8005b14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	891b      	ldrh	r3, [r3, #8]
 8005b30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6959      	ldr	r1, [r3, #20]
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b4a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b4e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b52:	6800      	ldr	r0, [r0, #0]
 8005b54:	f001 f80d 	bl	8006b72 <USB_WritePMA>
 8005b58:	e1b3      	b.n	8005ec2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a1a      	ldr	r2, [r3, #32]
 8005b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6a:	1ad2      	subs	r2, r2, r3
 8005b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80c6 	beq.w	8005d2c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d177      	bne.n	8005cac <USB_EPStartXfer+0xb18>
 8005bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bdc:	4413      	add	r3, r2
 8005bde:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	011a      	lsls	r2, r3, #4
 8005bee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c0e:	d921      	bls.n	8005c54 <USB_EPStartXfer+0xac0>
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <USB_EPStartXfer+0xa9c>
 8005c26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	029b      	lsls	r3, r3, #10
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	4313      	orrs	r3, r2
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	e050      	b.n	8005cf6 <USB_EPStartXfer+0xb62>
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <USB_EPStartXfer+0xade>
 8005c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e041      	b.n	8005cf6 <USB_EPStartXfer+0xb62>
 8005c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <USB_EPStartXfer+0xafe>
 8005c88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	029b      	lsls	r3, r3, #10
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	e024      	b.n	8005cf6 <USB_EPStartXfer+0xb62>
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d11c      	bne.n	8005cf6 <USB_EPStartXfer+0xb62>
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cd0:	4413      	add	r3, r2
 8005cd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	011a      	lsls	r2, r3, #4
 8005ce2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cf4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	895b      	ldrh	r3, [r3, #10]
 8005d02:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6959      	ldr	r1, [r3, #20]
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d1c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d20:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d24:	6800      	ldr	r0, [r0, #0]
 8005d26:	f000 ff24 	bl	8006b72 <USB_WritePMA>
 8005d2a:	e0ca      	b.n	8005ec2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d177      	bne.n	8005e2c <USB_EPStartXfer+0xc98>
 8005d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d5c:	4413      	add	r3, r2
 8005d5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	011a      	lsls	r2, r3, #4
 8005d6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d70:	4413      	add	r3, r2
 8005d72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d8e:	d921      	bls.n	8005dd4 <USB_EPStartXfer+0xc40>
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <USB_EPStartXfer+0xc1c>
 8005da6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005daa:	3b01      	subs	r3, #1
 8005dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005db0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dd0:	801a      	strh	r2, [r3, #0]
 8005dd2:	e05c      	b.n	8005e8e <USB_EPStartXfer+0xcfa>
 8005dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <USB_EPStartXfer+0xc5e>
 8005ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e04d      	b.n	8005e8e <USB_EPStartXfer+0xcfa>
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d004      	beq.n	8005e12 <USB_EPStartXfer+0xc7e>
 8005e08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	029b      	lsls	r3, r3, #10
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	4313      	orrs	r3, r2
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e28:	801a      	strh	r2, [r3, #0]
 8005e2a:	e030      	b.n	8005e8e <USB_EPStartXfer+0xcfa>
 8005e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d128      	bne.n	8005e8e <USB_EPStartXfer+0xcfa>
 8005e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e60:	4413      	add	r3, r2
 8005e62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	011a      	lsls	r2, r3, #4
 8005e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e78:	4413      	add	r3, r2
 8005e7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	891b      	ldrh	r3, [r3, #8]
 8005e9a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6959      	ldr	r1, [r3, #20]
 8005eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005eb4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005eb8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f000 fe58 	bl	8006b72 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee8:	817b      	strh	r3, [r7, #10]
 8005eea:	897b      	ldrh	r3, [r7, #10]
 8005eec:	f083 0310 	eor.w	r3, r3, #16
 8005ef0:	817b      	strh	r3, [r7, #10]
 8005ef2:	897b      	ldrh	r3, [r7, #10]
 8005ef4:	f083 0320 	eor.w	r3, r3, #32
 8005ef8:	817b      	strh	r3, [r7, #10]
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	441a      	add	r2, r3
 8005f14:	897b      	ldrh	r3, [r7, #10]
 8005f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	8013      	strh	r3, [r2, #0]
 8005f2a:	f000 bcde 	b.w	80068ea <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	7b1b      	ldrb	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f040 80bb 	bne.w	80060b6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d917      	bls.n	8005f8c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699a      	ldr	r2, [r3, #24]
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7c:	1ad2      	subs	r2, r2, r3
 8005f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	619a      	str	r2, [r3, #24]
 8005f8a:	e00e      	b.n	8005faa <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005fce:	4413      	add	r3, r2
 8005fd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	011a      	lsls	r2, r3, #4
 8005fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006008:	2b3e      	cmp	r3, #62	@ 0x3e
 800600a:	d924      	bls.n	8006056 <USB_EPStartXfer+0xec2>
 800600c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <USB_EPStartXfer+0xe98>
 8006022:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006026:	3b01      	subs	r3, #1
 8006028:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800602c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006038:	b29b      	uxth	r3, r3
 800603a:	029b      	lsls	r3, r3, #10
 800603c:	b29b      	uxth	r3, r3
 800603e:	4313      	orrs	r3, r2
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604a:	b29a      	uxth	r2, r3
 800604c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	f000 bc10 	b.w	8006876 <USB_EPStartXfer+0x16e2>
 8006056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10c      	bne.n	8006078 <USB_EPStartXfer+0xee4>
 800605e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606e:	b29a      	uxth	r2, r3
 8006070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	e3fe      	b.n	8006876 <USB_EPStartXfer+0x16e2>
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <USB_EPStartXfer+0xf04>
 800608e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006092:	3301      	adds	r3, #1
 8006094:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006098:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29a      	uxth	r2, r3
 80060a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	029b      	lsls	r3, r3, #10
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	4313      	orrs	r3, r2
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	e3df      	b.n	8006876 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80060b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	78db      	ldrb	r3, [r3, #3]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	f040 8218 	bne.w	80064f8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f040 809d 	bne.w	8006214 <USB_EPStartXfer+0x1080>
 80060da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060fe:	4413      	add	r3, r2
 8006100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	011a      	lsls	r2, r3, #4
 8006112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006116:	4413      	add	r3, r2
 8006118:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800611c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800612c:	b29a      	uxth	r2, r3
 800612e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006132:	801a      	strh	r2, [r3, #0]
 8006134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b3e      	cmp	r3, #62	@ 0x3e
 8006142:	d92b      	bls.n	800619c <USB_EPStartXfer+0x1008>
 8006144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	2b00      	cmp	r3, #0
 8006168:	d104      	bne.n	8006174 <USB_EPStartXfer+0xfe0>
 800616a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616e:	3b01      	subs	r3, #1
 8006170:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29a      	uxth	r2, r3
 800617c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006180:	b29b      	uxth	r3, r3
 8006182:	029b      	lsls	r3, r3, #10
 8006184:	b29b      	uxth	r3, r3
 8006186:	4313      	orrs	r3, r2
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006192:	b29a      	uxth	r2, r3
 8006194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	e070      	b.n	800627e <USB_EPStartXfer+0x10ea>
 800619c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10c      	bne.n	80061c6 <USB_EPStartXfer+0x1032>
 80061ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	e05b      	b.n	800627e <USB_EPStartXfer+0x10ea>
 80061c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <USB_EPStartXfer+0x1062>
 80061ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f0:	3301      	adds	r3, #1
 80061f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006202:	b29b      	uxth	r3, r3
 8006204:	029b      	lsls	r3, r3, #10
 8006206:	b29b      	uxth	r3, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	b29a      	uxth	r2, r3
 800620c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	e034      	b.n	800627e <USB_EPStartXfer+0x10ea>
 8006214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d12c      	bne.n	800627e <USB_EPStartXfer+0x10ea>
 8006224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006240:	b29b      	uxth	r3, r3
 8006242:	461a      	mov	r2, r3
 8006244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006248:	4413      	add	r3, r2
 800624a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800624e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	011a      	lsls	r2, r3, #4
 800625c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006260:	4413      	add	r3, r2
 8006262:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006266:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	b29a      	uxth	r2, r3
 8006278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800627c:	801a      	strh	r2, [r3, #0]
 800627e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800628c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f040 809d 	bne.w	80063d8 <USB_EPStartXfer+0x1244>
 800629e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062c2:	4413      	add	r3, r2
 80062c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	011a      	lsls	r2, r3, #4
 80062d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062da:	4413      	add	r3, r2
 80062dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b3e      	cmp	r3, #62	@ 0x3e
 8006306:	d92b      	bls.n	8006360 <USB_EPStartXfer+0x11cc>
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800631a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <USB_EPStartXfer+0x11a4>
 800632e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006332:	3b01      	subs	r3, #1
 8006334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29a      	uxth	r2, r3
 8006340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006344:	b29b      	uxth	r3, r3
 8006346:	029b      	lsls	r3, r3, #10
 8006348:	b29b      	uxth	r3, r3
 800634a:	4313      	orrs	r3, r2
 800634c:	b29b      	uxth	r3, r3
 800634e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006356:	b29a      	uxth	r2, r3
 8006358:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	e069      	b.n	8006434 <USB_EPStartXfer+0x12a0>
 8006360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10c      	bne.n	800638a <USB_EPStartXfer+0x11f6>
 8006370:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800637c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006380:	b29a      	uxth	r2, r3
 8006382:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	e054      	b.n	8006434 <USB_EPStartXfer+0x12a0>
 800638a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	085b      	lsrs	r3, r3, #1
 8006398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <USB_EPStartXfer+0x1226>
 80063b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b4:	3301      	adds	r3, #1
 80063b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	029b      	lsls	r3, r3, #10
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	4313      	orrs	r3, r2
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d4:	801a      	strh	r2, [r3, #0]
 80063d6:	e02d      	b.n	8006434 <USB_EPStartXfer+0x12a0>
 80063d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d125      	bne.n	8006434 <USB_EPStartXfer+0x12a0>
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063fe:	4413      	add	r3, r2
 8006400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	011a      	lsls	r2, r3, #4
 8006412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006416:	4413      	add	r3, r2
 8006418:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800641c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	b29a      	uxth	r2, r3
 800642e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006432:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 8218 	beq.w	8006876 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006466:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800646a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <USB_EPStartXfer+0x12ea>
 8006472:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10d      	bne.n	800649a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800647e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 81f5 	bne.w	8006876 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800648c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 81ee 	bne.w	8006876 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800649a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80064c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80064e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	8013      	strh	r3, [r2, #0]
 80064f6:	e1be      	b.n	8006876 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	78db      	ldrb	r3, [r3, #3]
 8006504:	2b01      	cmp	r3, #1
 8006506:	f040 81b4 	bne.w	8006872 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800650a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	429a      	cmp	r2, r3
 8006524:	d917      	bls.n	8006556 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800654c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	619a      	str	r2, [r3, #24]
 8006554:	e00e      	b.n	8006574 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2200      	movs	r2, #0
 8006572:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 8085 	bne.w	8006690 <USB_EPStartXfer+0x14fc>
 8006586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065aa:	4413      	add	r3, r2
 80065ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	011a      	lsls	r2, r3, #4
 80065be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065c2:	4413      	add	r3, r2
 80065c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d8:	b29a      	uxth	r2, r3
 80065da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065de:	801a      	strh	r2, [r3, #0]
 80065e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80065e6:	d923      	bls.n	8006630 <USB_EPStartXfer+0x149c>
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <USB_EPStartXfer+0x1474>
 80065fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006602:	3b01      	subs	r3, #1
 8006604:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29a      	uxth	r2, r3
 8006610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006614:	b29b      	uxth	r3, r3
 8006616:	029b      	lsls	r3, r3, #10
 8006618:	b29b      	uxth	r3, r3
 800661a:	4313      	orrs	r3, r2
 800661c:	b29b      	uxth	r3, r3
 800661e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006626:	b29a      	uxth	r2, r3
 8006628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	e060      	b.n	80066f2 <USB_EPStartXfer+0x155e>
 8006630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10c      	bne.n	8006652 <USB_EPStartXfer+0x14be>
 8006638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006648:	b29a      	uxth	r2, r3
 800664a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e04f      	b.n	80066f2 <USB_EPStartXfer+0x155e>
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <USB_EPStartXfer+0x14de>
 8006668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800666c:	3301      	adds	r3, #1
 800666e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29a      	uxth	r2, r3
 800667a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800667e:	b29b      	uxth	r3, r3
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	b29b      	uxth	r3, r3
 8006684:	4313      	orrs	r3, r2
 8006686:	b29a      	uxth	r2, r3
 8006688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	e030      	b.n	80066f2 <USB_EPStartXfer+0x155e>
 8006690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d128      	bne.n	80066f2 <USB_EPStartXfer+0x155e>
 80066a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80066ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066bc:	b29b      	uxth	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066c4:	4413      	add	r3, r2
 80066c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80066ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	011a      	lsls	r2, r3, #4
 80066d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066dc:	4413      	add	r3, r2
 80066de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f040 8085 	bne.w	800681c <USB_EPStartXfer+0x1688>
 8006712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672e:	b29b      	uxth	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006736:	4413      	add	r3, r2
 8006738:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800673c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	011a      	lsls	r2, r3, #4
 800674a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800674e:	4413      	add	r3, r2
 8006750:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006764:	b29a      	uxth	r2, r3
 8006766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006770:	2b3e      	cmp	r3, #62	@ 0x3e
 8006772:	d923      	bls.n	80067bc <USB_EPStartXfer+0x1628>
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800677e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <USB_EPStartXfer+0x1600>
 800678a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800678e:	3b01      	subs	r3, #1
 8006790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006794:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29a      	uxth	r2, r3
 800679c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	029b      	lsls	r3, r3, #10
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	4313      	orrs	r3, r2
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	e05c      	b.n	8006876 <USB_EPStartXfer+0x16e2>
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10c      	bne.n	80067de <USB_EPStartXfer+0x164a>
 80067c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067da:	801a      	strh	r2, [r3, #0]
 80067dc:	e04b      	b.n	8006876 <USB_EPStartXfer+0x16e2>
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d004      	beq.n	80067fe <USB_EPStartXfer+0x166a>
 80067f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067f8:	3301      	adds	r3, #1
 80067fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29a      	uxth	r2, r3
 8006806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800680a:	b29b      	uxth	r3, r3
 800680c:	029b      	lsls	r3, r3, #10
 800680e:	b29b      	uxth	r3, r3
 8006810:	4313      	orrs	r3, r2
 8006812:	b29a      	uxth	r2, r3
 8006814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	e02c      	b.n	8006876 <USB_EPStartXfer+0x16e2>
 800681c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d124      	bne.n	8006876 <USB_EPStartXfer+0x16e2>
 800682c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800683a:	b29b      	uxth	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006842:	4413      	add	r3, r2
 8006844:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	011a      	lsls	r2, r3, #4
 8006856:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800685a:	4413      	add	r3, r2
 800685c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006860:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006868:	b29a      	uxth	r2, r3
 800686a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	e001      	b.n	8006876 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e03a      	b.n	80068ec <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80068a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80068a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80068ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80068b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80068b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	441a      	add	r2, r3
 80068d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d020      	beq.n	800694a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800691a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800691e:	81bb      	strh	r3, [r7, #12]
 8006920:	89bb      	ldrh	r3, [r7, #12]
 8006922:	f083 0310 	eor.w	r3, r3, #16
 8006926:	81bb      	strh	r3, [r7, #12]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	89bb      	ldrh	r3, [r7, #12]
 8006934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006944:	b29b      	uxth	r3, r3
 8006946:	8013      	strh	r3, [r2, #0]
 8006948:	e01f      	b.n	800698a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800695c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006960:	81fb      	strh	r3, [r7, #14]
 8006962:	89fb      	ldrh	r3, [r7, #14]
 8006964:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006968:	81fb      	strh	r3, [r7, #14]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	441a      	add	r2, r3
 8006974:	89fb      	ldrh	r3, [r7, #14]
 8006976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800697a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800697e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006996:	b480      	push	{r7}
 8006998:	b087      	sub	sp, #28
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	7b1b      	ldrb	r3, [r3, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f040 809d 	bne.w	8006ae4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d04c      	beq.n	8006a4c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	823b      	strh	r3, [r7, #16]
 80069c0:	8a3b      	ldrh	r3, [r7, #16]
 80069c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d01b      	beq.n	8006a02 <USB_EPClearStall+0x6c>
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e0:	81fb      	strh	r3, [r7, #14]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	89fb      	ldrh	r3, [r7, #14]
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	78db      	ldrb	r3, [r3, #3]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d06c      	beq.n	8006ae4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a20:	81bb      	strh	r3, [r7, #12]
 8006a22:	89bb      	ldrh	r3, [r7, #12]
 8006a24:	f083 0320 	eor.w	r3, r3, #32
 8006a28:	81bb      	strh	r3, [r7, #12]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	441a      	add	r2, r3
 8006a34:	89bb      	ldrh	r3, [r7, #12]
 8006a36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	8013      	strh	r3, [r2, #0]
 8006a4a:	e04b      	b.n	8006ae4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	82fb      	strh	r3, [r7, #22]
 8006a5a:	8afb      	ldrh	r3, [r7, #22]
 8006a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01b      	beq.n	8006a9c <USB_EPClearStall+0x106>
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7a:	82bb      	strh	r3, [r7, #20]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	441a      	add	r2, r3
 8006a86:	8abb      	ldrh	r3, [r7, #20]
 8006a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab2:	827b      	strh	r3, [r7, #18]
 8006ab4:	8a7b      	ldrh	r3, [r7, #18]
 8006ab6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006aba:	827b      	strh	r3, [r7, #18]
 8006abc:	8a7b      	ldrh	r3, [r7, #18]
 8006abe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ac2:	827b      	strh	r3, [r7, #18]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	441a      	add	r2, r3
 8006ace:	8a7b      	ldrh	r3, [r7, #18]
 8006ad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d103      	bne.n	8006b0a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2280      	movs	r2, #128	@ 0x80
 8006b06:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr

08006b3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b50:	68fb      	ldr	r3, [r7, #12]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b08b      	sub	sp, #44	@ 0x2c
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	461a      	mov	r2, r3
 8006b80:	460b      	mov	r3, r1
 8006b82:	80fb      	strh	r3, [r7, #6]
 8006b84:	4613      	mov	r3, r2
 8006b86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b88:	88bb      	ldrh	r3, [r7, #4]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b98:	88fb      	ldrh	r3, [r7, #6]
 8006b9a:	005a      	lsls	r2, r3, #1
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ba4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006baa:	e01e      	b.n	8006bea <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	b21a      	sxth	r2, r3
 8006bbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	b21b      	sxth	r3, r3
 8006bc4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	8a7a      	ldrh	r2, [r7, #18]
 8006bca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	3302      	adds	r3, #2
 8006bd0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	3302      	adds	r3, #2
 8006bd6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	3301      	adds	r3, #1
 8006be2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	3b01      	subs	r3, #1
 8006be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1dd      	bne.n	8006bac <USB_WritePMA+0x3a>
  }
}
 8006bf0:	bf00      	nop
 8006bf2:	bf00      	nop
 8006bf4:	372c      	adds	r7, #44	@ 0x2c
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr

08006bfc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b08b      	sub	sp, #44	@ 0x2c
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4611      	mov	r1, r2
 8006c08:	461a      	mov	r2, r3
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	80fb      	strh	r3, [r7, #6]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c12:	88bb      	ldrh	r3, [r7, #4]
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	005a      	lsls	r2, r3, #1
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c2e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c34:	e01b      	b.n	8006c6e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	3302      	adds	r3, #2
 8006c42:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	0a1b      	lsrs	r3, r3, #8
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	3302      	adds	r3, #2
 8006c66:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e0      	bne.n	8006c36 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006c74:	88bb      	ldrh	r3, [r7, #4]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	701a      	strb	r2, [r3, #0]
  }
}
 8006c90:	bf00      	nop
 8006c92:	372c      	adds	r7, #44	@ 0x2c
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr

08006c9a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e01a      	b.n	8006ce8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	79fa      	ldrb	r2, [r7, #7]
 8006cde:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f001 fc03 	bl	80084ec <USBD_LL_Init>

  return USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73fb      	strb	r3, [r7, #15]
 8006d10:	e001      	b.n	8006d16 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d12:	2302      	movs	r3, #2
 8006d14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr

08006d22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 fc26 	bl	800857c <USBD_LL_Start>

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr

08006d4e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00c      	beq.n	8006d82 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	78fa      	ldrb	r2, [r7, #3]
 8006d72:	4611      	mov	r1, r2
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	78fa      	ldrb	r2, [r7, #3]
 8006da2:	4611      	mov	r1, r2
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3

  return USBD_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 fed8 	bl	8007b7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006de6:	f003 031f 	and.w	r3, r3, #31
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d016      	beq.n	8006e1c <USBD_LL_SetupStage+0x6a>
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d81c      	bhi.n	8006e2c <USBD_LL_SetupStage+0x7a>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <USBD_LL_SetupStage+0x4a>
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d008      	beq.n	8006e0c <USBD_LL_SetupStage+0x5a>
 8006dfa:	e017      	b.n	8006e2c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f9cb 	bl	80071a0 <USBD_StdDevReq>
      break;
 8006e0a:	e01a      	b.n	8006e42 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fa2d 	bl	8007274 <USBD_StdItfReq>
      break;
 8006e1a:	e012      	b.n	8006e42 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fa6d 	bl	8007304 <USBD_StdEPReq>
      break;
 8006e2a:	e00a      	b.n	8006e42 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006e32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fbfe 	bl	800863c <USBD_LL_StallEP>
      break;
 8006e40:	bf00      	nop
  }

  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	460b      	mov	r3, r1
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e5a:	7afb      	ldrb	r3, [r7, #11]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d14b      	bne.n	8006ef8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006e66:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d134      	bne.n	8006edc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d919      	bls.n	8006eb2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	1ad2      	subs	r2, r2, r3
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d203      	bcs.n	8006ea0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	e002      	b.n	8006ea6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f001 f8f0 	bl	8008090 <USBD_CtlContinueRx>
 8006eb0:	e038      	b.n	8006f24 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d105      	bne.n	8006ed4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f001 f8ed 	bl	80080b4 <USBD_CtlSendStatus>
 8006eda:	e023      	b.n	8006f24 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d11e      	bne.n	8006f24 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006eee:	2100      	movs	r1, #0
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f001 fba3 	bl	800863c <USBD_LL_StallEP>
 8006ef6:	e015      	b.n	8006f24 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00d      	beq.n	8006f20 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d108      	bne.n	8006f20 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	7afa      	ldrb	r2, [r7, #11]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	4798      	blx	r3
 8006f1e:	e001      	b.n	8006f24 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f20:	2302      	movs	r3, #2
 8006f22:	e000      	b.n	8006f26 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	460b      	mov	r3, r1
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f3c:	7afb      	ldrb	r3, [r7, #11]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d17f      	bne.n	8007042 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3314      	adds	r3, #20
 8006f46:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d15c      	bne.n	800700c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d915      	bls.n	8006f8a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f001 f878 	bl	800806c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2100      	movs	r1, #0
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f001 fc05 	bl	8008792 <USBD_LL_PrepareReceive>
 8006f88:	e04e      	b.n	8007028 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	6912      	ldr	r2, [r2, #16]
 8006f92:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f96:	fb01 f202 	mul.w	r2, r1, r2
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d11c      	bne.n	8006fda <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d316      	bcc.n	8006fda <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d20f      	bcs.n	8006fda <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f001 f854 	bl	800806c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fcc:	2300      	movs	r3, #0
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f001 fbdd 	bl	8008792 <USBD_LL_PrepareReceive>
 8006fd8:	e026      	b.n	8007028 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d105      	bne.n	8006ffc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ffc:	2180      	movs	r1, #128	@ 0x80
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f001 fb1c 	bl	800863c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f001 f868 	bl	80080da <USBD_CtlReceiveStatus>
 800700a:	e00d      	b.n	8007028 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007012:	2b04      	cmp	r3, #4
 8007014:	d004      	beq.n	8007020 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800701c:	2b00      	cmp	r3, #0
 800701e:	d103      	bne.n	8007028 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007020:	2180      	movs	r1, #128	@ 0x80
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f001 fb0a 	bl	800863c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d11d      	bne.n	800706e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7ff fe81 	bl	8006d3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007040:	e015      	b.n	800706e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00d      	beq.n	800706a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007054:	2b03      	cmp	r3, #3
 8007056:	d108      	bne.n	800706a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	7afa      	ldrb	r2, [r7, #11]
 8007062:	4611      	mov	r1, r2
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	4798      	blx	r3
 8007068:	e001      	b.n	800706e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800706a:	2302      	movs	r3, #2
 800706c:	e000      	b.n	8007070 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007080:	2340      	movs	r3, #64	@ 0x40
 8007082:	2200      	movs	r2, #0
 8007084:	2100      	movs	r1, #0
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f001 fa93 	bl	80085b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2240      	movs	r2, #64	@ 0x40
 8007098:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800709c:	2340      	movs	r3, #64	@ 0x40
 800709e:	2200      	movs	r2, #0
 80070a0:	2180      	movs	r1, #128	@ 0x80
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 fa85 	bl	80085b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2240      	movs	r2, #64	@ 0x40
 80070b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d009      	beq.n	80070f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6852      	ldr	r2, [r2, #4]
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	4611      	mov	r1, r2
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4798      	blx	r3
  }

  return USBD_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr

08007118 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2204      	movs	r2, #4
 8007130:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr

08007140 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800714e:	2b04      	cmp	r3, #4
 8007150:	d105      	bne.n	800715e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr

0800716a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007178:	2b03      	cmp	r3, #3
 800717a:	d10b      	bne.n	8007194 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071b6:	2b40      	cmp	r3, #64	@ 0x40
 80071b8:	d005      	beq.n	80071c6 <USBD_StdDevReq+0x26>
 80071ba:	2b40      	cmp	r3, #64	@ 0x40
 80071bc:	d84f      	bhi.n	800725e <USBD_StdDevReq+0xbe>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <USBD_StdDevReq+0x36>
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d14b      	bne.n	800725e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
      break;
 80071d4:	e048      	b.n	8007268 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	2b09      	cmp	r3, #9
 80071dc:	d839      	bhi.n	8007252 <USBD_StdDevReq+0xb2>
 80071de:	a201      	add	r2, pc, #4	@ (adr r2, 80071e4 <USBD_StdDevReq+0x44>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007235 	.word	0x08007235
 80071e8:	08007249 	.word	0x08007249
 80071ec:	08007253 	.word	0x08007253
 80071f0:	0800723f 	.word	0x0800723f
 80071f4:	08007253 	.word	0x08007253
 80071f8:	08007217 	.word	0x08007217
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	08007253 	.word	0x08007253
 8007204:	0800722b 	.word	0x0800722b
 8007208:	08007221 	.word	0x08007221
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f9dc 	bl	80075cc <USBD_GetDescriptor>
          break;
 8007214:	e022      	b.n	800725c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fb3f 	bl	800789c <USBD_SetAddress>
          break;
 800721e:	e01d      	b.n	800725c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fb7e 	bl	8007924 <USBD_SetConfig>
          break;
 8007228:	e018      	b.n	800725c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fc07 	bl	8007a40 <USBD_GetConfig>
          break;
 8007232:	e013      	b.n	800725c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fc37 	bl	8007aaa <USBD_GetStatus>
          break;
 800723c:	e00e      	b.n	800725c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fc65 	bl	8007b10 <USBD_SetFeature>
          break;
 8007246:	e009      	b.n	800725c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fc74 	bl	8007b38 <USBD_ClrFeature>
          break;
 8007250:	e004      	b.n	800725c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fcc9 	bl	8007bec <USBD_CtlError>
          break;
 800725a:	bf00      	nop
      }
      break;
 800725c:	e004      	b.n	8007268 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fcc3 	bl	8007bec <USBD_CtlError>
      break;
 8007266:	bf00      	nop
  }

  return ret;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop

08007274 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800728a:	2b40      	cmp	r3, #64	@ 0x40
 800728c:	d005      	beq.n	800729a <USBD_StdItfReq+0x26>
 800728e:	2b40      	cmp	r3, #64	@ 0x40
 8007290:	d82e      	bhi.n	80072f0 <USBD_StdItfReq+0x7c>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <USBD_StdItfReq+0x26>
 8007296:	2b20      	cmp	r3, #32
 8007298:	d12a      	bne.n	80072f0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072a0:	3b01      	subs	r3, #1
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d81d      	bhi.n	80072e2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	889b      	ldrh	r3, [r3, #4]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d813      	bhi.n	80072d8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	4798      	blx	r3
 80072be:	4603      	mov	r3, r0
 80072c0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	88db      	ldrh	r3, [r3, #6]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d110      	bne.n	80072ec <USBD_StdItfReq+0x78>
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10d      	bne.n	80072ec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 feef 	bl	80080b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072d6:	e009      	b.n	80072ec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fc86 	bl	8007bec <USBD_CtlError>
          break;
 80072e0:	e004      	b.n	80072ec <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fc81 	bl	8007bec <USBD_CtlError>
          break;
 80072ea:	e000      	b.n	80072ee <USBD_StdItfReq+0x7a>
          break;
 80072ec:	bf00      	nop
      }
      break;
 80072ee:	e004      	b.n	80072fa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fc7a 	bl	8007bec <USBD_CtlError>
      break;
 80072f8:	bf00      	nop
  }

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	889b      	ldrh	r3, [r3, #4]
 8007316:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007320:	2b40      	cmp	r3, #64	@ 0x40
 8007322:	d007      	beq.n	8007334 <USBD_StdEPReq+0x30>
 8007324:	2b40      	cmp	r3, #64	@ 0x40
 8007326:	f200 8146 	bhi.w	80075b6 <USBD_StdEPReq+0x2b2>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <USBD_StdEPReq+0x40>
 800732e:	2b20      	cmp	r3, #32
 8007330:	f040 8141 	bne.w	80075b6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
      break;
 8007342:	e13d      	b.n	80075c0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800734c:	2b20      	cmp	r3, #32
 800734e:	d10a      	bne.n	8007366 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	e12d      	b.n	80075c2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	2b03      	cmp	r3, #3
 800736c:	d007      	beq.n	800737e <USBD_StdEPReq+0x7a>
 800736e:	2b03      	cmp	r3, #3
 8007370:	f300 811b 	bgt.w	80075aa <USBD_StdEPReq+0x2a6>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d072      	beq.n	800745e <USBD_StdEPReq+0x15a>
 8007378:	2b01      	cmp	r3, #1
 800737a:	d03a      	beq.n	80073f2 <USBD_StdEPReq+0xee>
 800737c:	e115      	b.n	80075aa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007384:	2b02      	cmp	r3, #2
 8007386:	d002      	beq.n	800738e <USBD_StdEPReq+0x8a>
 8007388:	2b03      	cmp	r3, #3
 800738a:	d015      	beq.n	80073b8 <USBD_StdEPReq+0xb4>
 800738c:	e02b      	b.n	80073e6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00c      	beq.n	80073ae <USBD_StdEPReq+0xaa>
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	2b80      	cmp	r3, #128	@ 0x80
 8007398:	d009      	beq.n	80073ae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 f94c 	bl	800863c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073a4:	2180      	movs	r1, #128	@ 0x80
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 f948 	bl	800863c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073ac:	e020      	b.n	80073f0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fc1b 	bl	8007bec <USBD_CtlError>
              break;
 80073b6:	e01b      	b.n	80073f0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	885b      	ldrh	r3, [r3, #2]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10e      	bne.n	80073de <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <USBD_StdEPReq+0xda>
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b80      	cmp	r3, #128	@ 0x80
 80073ca:	d008      	beq.n	80073de <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	88db      	ldrh	r3, [r3, #6]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d104      	bne.n	80073de <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 f92f 	bl	800863c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fe68 	bl	80080b4 <USBD_CtlSendStatus>

              break;
 80073e4:	e004      	b.n	80073f0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fbff 	bl	8007bec <USBD_CtlError>
              break;
 80073ee:	bf00      	nop
          }
          break;
 80073f0:	e0e0      	b.n	80075b4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d002      	beq.n	8007402 <USBD_StdEPReq+0xfe>
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d015      	beq.n	800742c <USBD_StdEPReq+0x128>
 8007400:	e026      	b.n	8007450 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007402:	7bbb      	ldrb	r3, [r7, #14]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00c      	beq.n	8007422 <USBD_StdEPReq+0x11e>
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	2b80      	cmp	r3, #128	@ 0x80
 800740c:	d009      	beq.n	8007422 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 f912 	bl	800863c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007418:	2180      	movs	r1, #128	@ 0x80
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 f90e 	bl	800863c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007420:	e01c      	b.n	800745c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fbe1 	bl	8007bec <USBD_CtlError>
              break;
 800742a:	e017      	b.n	800745c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	885b      	ldrh	r3, [r3, #2]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d112      	bne.n	800745a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800743a:	2b00      	cmp	r3, #0
 800743c:	d004      	beq.n	8007448 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 f919 	bl	800867a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fe33 	bl	80080b4 <USBD_CtlSendStatus>
              }
              break;
 800744e:	e004      	b.n	800745a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fbca 	bl	8007bec <USBD_CtlError>
              break;
 8007458:	e000      	b.n	800745c <USBD_StdEPReq+0x158>
              break;
 800745a:	bf00      	nop
          }
          break;
 800745c:	e0aa      	b.n	80075b4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007464:	2b02      	cmp	r3, #2
 8007466:	d002      	beq.n	800746e <USBD_StdEPReq+0x16a>
 8007468:	2b03      	cmp	r3, #3
 800746a:	d032      	beq.n	80074d2 <USBD_StdEPReq+0x1ce>
 800746c:	e097      	b.n	800759e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d007      	beq.n	8007484 <USBD_StdEPReq+0x180>
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b80      	cmp	r3, #128	@ 0x80
 8007478:	d004      	beq.n	8007484 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fbb5 	bl	8007bec <USBD_CtlError>
                break;
 8007482:	e091      	b.n	80075a8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007488:	2b00      	cmp	r3, #0
 800748a:	da0b      	bge.n	80074a4 <USBD_StdEPReq+0x1a0>
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	3310      	adds	r3, #16
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	4413      	add	r3, r2
 80074a0:	3304      	adds	r3, #4
 80074a2:	e00b      	b.n	80074bc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074aa:	4613      	mov	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	4413      	add	r3, r2
 80074ba:	3304      	adds	r3, #4
 80074bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2202      	movs	r2, #2
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fdb2 	bl	8008034 <USBD_CtlSendData>
              break;
 80074d0:	e06a      	b.n	80075a8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da11      	bge.n	80074fe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	f003 020f 	and.w	r2, r3, #15
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	440b      	add	r3, r1
 80074ec:	3318      	adds	r3, #24
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d117      	bne.n	8007524 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fb78 	bl	8007bec <USBD_CtlError>
                  break;
 80074fc:	e054      	b.n	80075a8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	f003 020f 	and.w	r2, r3, #15
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	440b      	add	r3, r1
 8007510:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d104      	bne.n	8007524 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fb65 	bl	8007bec <USBD_CtlError>
                  break;
 8007522:	e041      	b.n	80075a8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007528:	2b00      	cmp	r3, #0
 800752a:	da0b      	bge.n	8007544 <USBD_StdEPReq+0x240>
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007532:	4613      	mov	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	3310      	adds	r3, #16
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	4413      	add	r3, r2
 8007540:	3304      	adds	r3, #4
 8007542:	e00b      	b.n	800755c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	3304      	adds	r3, #4
 800755c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <USBD_StdEPReq+0x266>
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	2b80      	cmp	r3, #128	@ 0x80
 8007568:	d103      	bne.n	8007572 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	e00e      	b.n	8007590 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 f89e 	bl	80086b8 <USBD_LL_IsStallEP>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2201      	movs	r2, #1
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	e002      	b.n	8007590 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2202      	movs	r2, #2
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fd4c 	bl	8008034 <USBD_CtlSendData>
              break;
 800759c:	e004      	b.n	80075a8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fb23 	bl	8007bec <USBD_CtlError>
              break;
 80075a6:	bf00      	nop
          }
          break;
 80075a8:	e004      	b.n	80075b4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fb1d 	bl	8007bec <USBD_CtlError>
          break;
 80075b2:	bf00      	nop
      }
      break;
 80075b4:	e004      	b.n	80075c0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fb17 	bl	8007bec <USBD_CtlError>
      break;
 80075be:	bf00      	nop
  }

  return ret;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	885b      	ldrh	r3, [r3, #2]
 80075e6:	0a1b      	lsrs	r3, r3, #8
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	2b06      	cmp	r3, #6
 80075ee:	f200 8128 	bhi.w	8007842 <USBD_GetDescriptor+0x276>
 80075f2:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <USBD_GetDescriptor+0x2c>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	08007615 	.word	0x08007615
 80075fc:	0800762d 	.word	0x0800762d
 8007600:	0800766d 	.word	0x0800766d
 8007604:	08007843 	.word	0x08007843
 8007608:	08007843 	.word	0x08007843
 800760c:	080077e3 	.word	0x080077e3
 8007610:	0800780f 	.word	0x0800780f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	7c12      	ldrb	r2, [r2, #16]
 8007620:	f107 0108 	add.w	r1, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
      break;
 800762a:	e112      	b.n	8007852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	7c1b      	ldrb	r3, [r3, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10d      	bne.n	8007650 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	f107 0208 	add.w	r2, r7, #8
 8007640:	4610      	mov	r0, r2
 8007642:	4798      	blx	r3
 8007644:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	2202      	movs	r2, #2
 800764c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800764e:	e100      	b.n	8007852 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007658:	f107 0208 	add.w	r2, r7, #8
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
 8007660:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3301      	adds	r3, #1
 8007666:	2202      	movs	r2, #2
 8007668:	701a      	strb	r2, [r3, #0]
      break;
 800766a:	e0f2      	b.n	8007852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	885b      	ldrh	r3, [r3, #2]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b05      	cmp	r3, #5
 8007674:	f200 80ac 	bhi.w	80077d0 <USBD_GetDescriptor+0x204>
 8007678:	a201      	add	r2, pc, #4	@ (adr r2, 8007680 <USBD_GetDescriptor+0xb4>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	08007699 	.word	0x08007699
 8007684:	080076cd 	.word	0x080076cd
 8007688:	08007701 	.word	0x08007701
 800768c:	08007735 	.word	0x08007735
 8007690:	08007769 	.word	0x08007769
 8007694:	0800779d 	.word	0x0800779d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	7c12      	ldrb	r2, [r2, #16]
 80076b0:	f107 0108 	add.w	r1, r7, #8
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
 80076b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ba:	e091      	b.n	80077e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa94 	bl	8007bec <USBD_CtlError>
            err++;
 80076c4:	7afb      	ldrb	r3, [r7, #11]
 80076c6:	3301      	adds	r3, #1
 80076c8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ca:	e089      	b.n	80077e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	7c12      	ldrb	r2, [r2, #16]
 80076e4:	f107 0108 	add.w	r1, r7, #8
 80076e8:	4610      	mov	r0, r2
 80076ea:	4798      	blx	r3
 80076ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ee:	e077      	b.n	80077e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa7a 	bl	8007bec <USBD_CtlError>
            err++;
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	3301      	adds	r3, #1
 80076fc:	72fb      	strb	r3, [r7, #11]
          break;
 80076fe:	e06f      	b.n	80077e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	7c12      	ldrb	r2, [r2, #16]
 8007718:	f107 0108 	add.w	r1, r7, #8
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
 8007720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007722:	e05d      	b.n	80077e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa60 	bl	8007bec <USBD_CtlError>
            err++;
 800772c:	7afb      	ldrb	r3, [r7, #11]
 800772e:	3301      	adds	r3, #1
 8007730:	72fb      	strb	r3, [r7, #11]
          break;
 8007732:	e055      	b.n	80077e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7c12      	ldrb	r2, [r2, #16]
 800774c:	f107 0108 	add.w	r1, r7, #8
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007756:	e043      	b.n	80077e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa46 	bl	8007bec <USBD_CtlError>
            err++;
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	3301      	adds	r3, #1
 8007764:	72fb      	strb	r3, [r7, #11]
          break;
 8007766:	e03b      	b.n	80077e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	7c12      	ldrb	r2, [r2, #16]
 8007780:	f107 0108 	add.w	r1, r7, #8
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778a:	e029      	b.n	80077e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa2c 	bl	8007bec <USBD_CtlError>
            err++;
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	3301      	adds	r3, #1
 8007798:	72fb      	strb	r3, [r7, #11]
          break;
 800779a:	e021      	b.n	80077e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	7c12      	ldrb	r2, [r2, #16]
 80077b4:	f107 0108 	add.w	r1, r7, #8
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
 80077bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077be:	e00f      	b.n	80077e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa12 	bl	8007bec <USBD_CtlError>
            err++;
 80077c8:	7afb      	ldrb	r3, [r7, #11]
 80077ca:	3301      	adds	r3, #1
 80077cc:	72fb      	strb	r3, [r7, #11]
          break;
 80077ce:	e007      	b.n	80077e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa0a 	bl	8007bec <USBD_CtlError>
          err++;
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	3301      	adds	r3, #1
 80077dc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077de:	e038      	b.n	8007852 <USBD_GetDescriptor+0x286>
 80077e0:	e037      	b.n	8007852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	7c1b      	ldrb	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f2:	f107 0208 	add.w	r2, r7, #8
 80077f6:	4610      	mov	r0, r2
 80077f8:	4798      	blx	r3
 80077fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077fc:	e029      	b.n	8007852 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f9f3 	bl	8007bec <USBD_CtlError>
        err++;
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	3301      	adds	r3, #1
 800780a:	72fb      	strb	r3, [r7, #11]
      break;
 800780c:	e021      	b.n	8007852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	7c1b      	ldrb	r3, [r3, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10d      	bne.n	8007832 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800781c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781e:	f107 0208 	add.w	r2, r7, #8
 8007822:	4610      	mov	r0, r2
 8007824:	4798      	blx	r3
 8007826:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3301      	adds	r3, #1
 800782c:	2207      	movs	r2, #7
 800782e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007830:	e00f      	b.n	8007852 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f9d9 	bl	8007bec <USBD_CtlError>
        err++;
 800783a:	7afb      	ldrb	r3, [r7, #11]
 800783c:	3301      	adds	r3, #1
 800783e:	72fb      	strb	r3, [r7, #11]
      break;
 8007840:	e007      	b.n	8007852 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f9d1 	bl	8007bec <USBD_CtlError>
      err++;
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	3301      	adds	r3, #1
 800784e:	72fb      	strb	r3, [r7, #11]
      break;
 8007850:	bf00      	nop
  }

  if (err != 0U)
 8007852:	7afb      	ldrb	r3, [r7, #11]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d11c      	bne.n	8007892 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007858:	893b      	ldrh	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d011      	beq.n	8007882 <USBD_GetDescriptor+0x2b6>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	88db      	ldrh	r3, [r3, #6]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00d      	beq.n	8007882 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	88da      	ldrh	r2, [r3, #6]
 800786a:	893b      	ldrh	r3, [r7, #8]
 800786c:	4293      	cmp	r3, r2
 800786e:	bf28      	it	cs
 8007870:	4613      	movcs	r3, r2
 8007872:	b29b      	uxth	r3, r3
 8007874:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007876:	893b      	ldrh	r3, [r7, #8]
 8007878:	461a      	mov	r2, r3
 800787a:	68f9      	ldr	r1, [r7, #12]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fbd9 	bl	8008034 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	88db      	ldrh	r3, [r3, #6]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d104      	bne.n	8007894 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fc12 	bl	80080b4 <USBD_CtlSendStatus>
 8007890:	e000      	b.n	8007894 <USBD_GetDescriptor+0x2c8>
    return;
 8007892:	bf00      	nop
    }
  }
}
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop

0800789c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	889b      	ldrh	r3, [r3, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d130      	bne.n	8007910 <USBD_SetAddress+0x74>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	88db      	ldrh	r3, [r3, #6]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d12c      	bne.n	8007910 <USBD_SetAddress+0x74>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	885b      	ldrh	r3, [r3, #2]
 80078ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80078bc:	d828      	bhi.n	8007910 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	885b      	ldrh	r3, [r3, #2]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d104      	bne.n	80078de <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f988 	bl	8007bec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078dc:	e01d      	b.n	800791a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7bfa      	ldrb	r2, [r7, #15]
 80078e2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 ff0f 	bl	800870e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fbdf 	bl	80080b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007904:	e009      	b.n	800791a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790e:	e004      	b.n	800791a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f96a 	bl	8007bec <USBD_CtlError>
  }
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	885b      	ldrh	r3, [r3, #2]
 8007932:	b2da      	uxtb	r2, r3
 8007934:	4b41      	ldr	r3, [pc, #260]	@ (8007a3c <USBD_SetConfig+0x118>)
 8007936:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007938:	4b40      	ldr	r3, [pc, #256]	@ (8007a3c <USBD_SetConfig+0x118>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d904      	bls.n	800794a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f952 	bl	8007bec <USBD_CtlError>
 8007948:	e075      	b.n	8007a36 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007950:	2b02      	cmp	r3, #2
 8007952:	d002      	beq.n	800795a <USBD_SetConfig+0x36>
 8007954:	2b03      	cmp	r3, #3
 8007956:	d023      	beq.n	80079a0 <USBD_SetConfig+0x7c>
 8007958:	e062      	b.n	8007a20 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800795a:	4b38      	ldr	r3, [pc, #224]	@ (8007a3c <USBD_SetConfig+0x118>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d01a      	beq.n	8007998 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007962:	4b36      	ldr	r3, [pc, #216]	@ (8007a3c <USBD_SetConfig+0x118>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2203      	movs	r2, #3
 8007970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007974:	4b31      	ldr	r3, [pc, #196]	@ (8007a3c <USBD_SetConfig+0x118>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff f9e7 	bl	8006d4e <USBD_SetClassConfig>
 8007980:	4603      	mov	r3, r0
 8007982:	2b02      	cmp	r3, #2
 8007984:	d104      	bne.n	8007990 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f92f 	bl	8007bec <USBD_CtlError>
            return;
 800798e:	e052      	b.n	8007a36 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fb8f 	bl	80080b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007996:	e04e      	b.n	8007a36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fb8b 	bl	80080b4 <USBD_CtlSendStatus>
        break;
 800799e:	e04a      	b.n	8007a36 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079a0:	4b26      	ldr	r3, [pc, #152]	@ (8007a3c <USBD_SetConfig+0x118>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d112      	bne.n	80079ce <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80079b0:	4b22      	ldr	r3, [pc, #136]	@ (8007a3c <USBD_SetConfig+0x118>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	461a      	mov	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079ba:	4b20      	ldr	r3, [pc, #128]	@ (8007a3c <USBD_SetConfig+0x118>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff f9e3 	bl	8006d8c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fb74 	bl	80080b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079cc:	e033      	b.n	8007a36 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079ce:	4b1b      	ldr	r3, [pc, #108]	@ (8007a3c <USBD_SetConfig+0x118>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d01d      	beq.n	8007a18 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff f9d1 	bl	8006d8c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079ea:	4b14      	ldr	r3, [pc, #80]	@ (8007a3c <USBD_SetConfig+0x118>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079f4:	4b11      	ldr	r3, [pc, #68]	@ (8007a3c <USBD_SetConfig+0x118>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff f9a7 	bl	8006d4e <USBD_SetClassConfig>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d104      	bne.n	8007a10 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f8ef 	bl	8007bec <USBD_CtlError>
            return;
 8007a0e:	e012      	b.n	8007a36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fb4f 	bl	80080b4 <USBD_CtlSendStatus>
        break;
 8007a16:	e00e      	b.n	8007a36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fb4b 	bl	80080b4 <USBD_CtlSendStatus>
        break;
 8007a1e:	e00a      	b.n	8007a36 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f8e2 	bl	8007bec <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a28:	4b04      	ldr	r3, [pc, #16]	@ (8007a3c <USBD_SetConfig+0x118>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff f9ac 	bl	8006d8c <USBD_ClrClassConfig>
        break;
 8007a34:	bf00      	nop
    }
  }
}
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20000450 	.word	0x20000450

08007a40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	88db      	ldrh	r3, [r3, #6]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d004      	beq.n	8007a5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f8c9 	bl	8007bec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a5a:	e022      	b.n	8007aa2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	dc02      	bgt.n	8007a6c <USBD_GetConfig+0x2c>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dc03      	bgt.n	8007a72 <USBD_GetConfig+0x32>
 8007a6a:	e015      	b.n	8007a98 <USBD_GetConfig+0x58>
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d00b      	beq.n	8007a88 <USBD_GetConfig+0x48>
 8007a70:	e012      	b.n	8007a98 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fad7 	bl	8008034 <USBD_CtlSendData>
        break;
 8007a86:	e00c      	b.n	8007aa2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 facf 	bl	8008034 <USBD_CtlSendData>
        break;
 8007a96:	e004      	b.n	8007aa2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f8a6 	bl	8007bec <USBD_CtlError>
        break;
 8007aa0:	bf00      	nop
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aba:	3b01      	subs	r3, #1
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d81e      	bhi.n	8007afe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	88db      	ldrh	r3, [r3, #6]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d004      	beq.n	8007ad2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f88e 	bl	8007bec <USBD_CtlError>
        break;
 8007ad0:	e01a      	b.n	8007b08 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f043 0202 	orr.w	r2, r3, #2
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	330c      	adds	r3, #12
 8007af2:	2202      	movs	r2, #2
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa9c 	bl	8008034 <USBD_CtlSendData>
      break;
 8007afc:	e004      	b.n	8007b08 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f873 	bl	8007bec <USBD_CtlError>
      break;
 8007b06:	bf00      	nop
  }
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	885b      	ldrh	r3, [r3, #2]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d106      	bne.n	8007b30 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fac2 	bl	80080b4 <USBD_CtlSendStatus>
  }
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d80b      	bhi.n	8007b66 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	885b      	ldrh	r3, [r3, #2]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d10c      	bne.n	8007b70 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 faa8 	bl	80080b4 <USBD_CtlSendStatus>
      }
      break;
 8007b64:	e004      	b.n	8007b70 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f83f 	bl	8007bec <USBD_CtlError>
      break;
 8007b6e:	e000      	b.n	8007b72 <USBD_ClrFeature+0x3a>
      break;
 8007b70:	bf00      	nop
  }
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781a      	ldrb	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	785a      	ldrb	r2, [r3, #1]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	3302      	adds	r3, #2
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	3303      	adds	r3, #3
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	3305      	adds	r3, #5
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	3306      	adds	r3, #6
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	3307      	adds	r3, #7
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4413      	add	r3, r2
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	80da      	strh	r2, [r3, #6]

}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr

08007bec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007bf6:	2180      	movs	r1, #128	@ 0x80
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fd1f 	bl	800863c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007bfe:	2100      	movs	r1, #0
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fd1b 	bl	800863c <USBD_LL_StallEP>
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b086      	sub	sp, #24
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d032      	beq.n	8007c8a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 f834 	bl	8007c92 <USBD_GetLen>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	75fa      	strb	r2, [r7, #23]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4413      	add	r3, r2
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	75fa      	strb	r2, [r7, #23]
 8007c50:	461a      	mov	r2, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4413      	add	r3, r2
 8007c56:	2203      	movs	r2, #3
 8007c58:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c5a:	e012      	b.n	8007c82 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	60fa      	str	r2, [r7, #12]
 8007c62:	7dfa      	ldrb	r2, [r7, #23]
 8007c64:	1c51      	adds	r1, r2, #1
 8007c66:	75f9      	strb	r1, [r7, #23]
 8007c68:	4611      	mov	r1, r2
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	440a      	add	r2, r1
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	75fa      	strb	r2, [r7, #23]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e8      	bne.n	8007c5c <USBD_GetString+0x4e>
    }
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c9e:	e005      	b.n	8007cac <USBD_GetLen+0x1a>
  {
    len++;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1f5      	bne.n	8007ca0 <USBD_GetLen+0xe>
  }

  return len;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr

08007cc0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007ccc:	2304      	movs	r3, #4
 8007cce:	2203      	movs	r2, #3
 8007cd0:	2181      	movs	r1, #129	@ 0x81
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fc6d 	bl	80085b2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007cde:	2010      	movs	r0, #16
 8007ce0:	f000 fd7a 	bl	80087d8 <USBD_static_malloc>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e005      	b.n	8007d06 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d00:	2200      	movs	r2, #0
 8007d02:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007d1a:	2181      	movs	r1, #129	@ 0x81
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fc6e 	bl	80085fe <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d009      	beq.n	8007d46 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fd59 	bl	80087f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_HID_Setup>:
  * @retval status
  */

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d60:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d045      	beq.n	8007e0a <USBD_HID_Setup+0xba>
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	f040 80d3 	bne.w	8007f2a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	785b      	ldrb	r3, [r3, #1]
 8007d88:	3b02      	subs	r3, #2
 8007d8a:	2b09      	cmp	r3, #9
 8007d8c:	d835      	bhi.n	8007dfa <USBD_HID_Setup+0xaa>
 8007d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d94 <USBD_HID_Setup+0x44>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007deb 	.word	0x08007deb
 8007d98:	08007dcb 	.word	0x08007dcb
 8007d9c:	08007dfb 	.word	0x08007dfb
 8007da0:	08007dfb 	.word	0x08007dfb
 8007da4:	08007dfb 	.word	0x08007dfb
 8007da8:	08007dfb 	.word	0x08007dfb
 8007dac:	08007dfb 	.word	0x08007dfb
 8007db0:	08007dfb 	.word	0x08007dfb
 8007db4:	08007dd9 	.word	0x08007dd9
 8007db8:	08007dbd 	.word	0x08007dbd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	885b      	ldrh	r3, [r3, #2]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	601a      	str	r2, [r3, #0]
          break;
 8007dc8:	e01e      	b.n	8007e08 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f92f 	bl	8008034 <USBD_CtlSendData>
          break;
 8007dd6:	e017      	b.n	8007e08 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	885b      	ldrh	r3, [r3, #2]
 8007ddc:	0a1b      	lsrs	r3, r3, #8
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	605a      	str	r2, [r3, #4]
          break;
 8007de8:	e00e      	b.n	8007e08 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3304      	adds	r3, #4
 8007dee:	2201      	movs	r2, #1
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f91e 	bl	8008034 <USBD_CtlSendData>
          break;
 8007df8:	e006      	b.n	8007e08 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff fef5 	bl	8007bec <USBD_CtlError>
          ret = USBD_FAIL;
 8007e02:	2302      	movs	r3, #2
 8007e04:	75fb      	strb	r3, [r7, #23]
          break;
 8007e06:	bf00      	nop
      }
      break;
 8007e08:	e096      	b.n	8007f38 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b0b      	cmp	r3, #11
 8007e10:	f200 8083 	bhi.w	8007f1a <USBD_HID_Setup+0x1ca>
 8007e14:	a201      	add	r2, pc, #4	@ (adr r2, 8007e1c <USBD_HID_Setup+0xcc>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007e4d 	.word	0x08007e4d
 8007e20:	08007f1b 	.word	0x08007f1b
 8007e24:	08007f1b 	.word	0x08007f1b
 8007e28:	08007f1b 	.word	0x08007f1b
 8007e2c:	08007f1b 	.word	0x08007f1b
 8007e30:	08007f1b 	.word	0x08007f1b
 8007e34:	08007e75 	.word	0x08007e75
 8007e38:	08007f1b 	.word	0x08007f1b
 8007e3c:	08007f1b 	.word	0x08007f1b
 8007e40:	08007f1b 	.word	0x08007f1b
 8007e44:	08007ecd 	.word	0x08007ecd
 8007e48:	08007ef5 	.word	0x08007ef5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d107      	bne.n	8007e66 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e56:	f107 030e 	add.w	r3, r7, #14
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8e8 	bl	8008034 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e64:	e060      	b.n	8007f28 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff febf 	bl	8007bec <USBD_CtlError>
            ret = USBD_FAIL;
 8007e6e:	2302      	movs	r3, #2
 8007e70:	75fb      	strb	r3, [r7, #23]
          break;
 8007e72:	e059      	b.n	8007f28 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	885b      	ldrh	r3, [r3, #2]
 8007e78:	0a1b      	lsrs	r3, r3, #8
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	2b22      	cmp	r3, #34	@ 0x22
 8007e7e:	d108      	bne.n	8007e92 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	2b73      	cmp	r3, #115	@ 0x73
 8007e86:	bf28      	it	cs
 8007e88:	2373      	movcs	r3, #115	@ 0x73
 8007e8a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8007f44 <USBD_HID_Setup+0x1f4>)
 8007e8e:	61bb      	str	r3, [r7, #24]
 8007e90:	e015      	b.n	8007ebe <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	885b      	ldrh	r3, [r3, #2]
 8007e96:	0a1b      	lsrs	r3, r3, #8
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b21      	cmp	r3, #33	@ 0x21
 8007e9c:	d108      	bne.n	8007eb0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8007f48 <USBD_HID_Setup+0x1f8>)
 8007ea0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	88db      	ldrh	r3, [r3, #6]
 8007ea6:	2b09      	cmp	r3, #9
 8007ea8:	bf28      	it	cs
 8007eaa:	2309      	movcs	r3, #9
 8007eac:	83fb      	strh	r3, [r7, #30]
 8007eae:	e006      	b.n	8007ebe <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff fe9a 	bl	8007bec <USBD_CtlError>
            ret = USBD_FAIL;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	75fb      	strb	r3, [r7, #23]
            break;
 8007ebc:	e034      	b.n	8007f28 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007ebe:	8bfb      	ldrh	r3, [r7, #30]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	69b9      	ldr	r1, [r7, #24]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f8b5 	bl	8008034 <USBD_CtlSendData>
          break;
 8007eca:	e02d      	b.n	8007f28 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d107      	bne.n	8007ee6 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	3308      	adds	r3, #8
 8007eda:	2201      	movs	r2, #1
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f8a8 	bl	8008034 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ee4:	e020      	b.n	8007f28 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff fe7f 	bl	8007bec <USBD_CtlError>
            ret = USBD_FAIL;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ef2:	e019      	b.n	8007f28 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d106      	bne.n	8007f0c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	885b      	ldrh	r3, [r3, #2]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f0a:	e00d      	b.n	8007f28 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff fe6c 	bl	8007bec <USBD_CtlError>
            ret = USBD_FAIL;
 8007f14:	2302      	movs	r3, #2
 8007f16:	75fb      	strb	r3, [r7, #23]
          break;
 8007f18:	e006      	b.n	8007f28 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff fe65 	bl	8007bec <USBD_CtlError>
          ret = USBD_FAIL;
 8007f22:	2302      	movs	r3, #2
 8007f24:	75fb      	strb	r3, [r7, #23]
          break;
 8007f26:	bf00      	nop
      }
      break;
 8007f28:	e006      	b.n	8007f38 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff fe5d 	bl	8007bec <USBD_CtlError>
      ret = USBD_FAIL;
 8007f32:	2302      	movs	r3, #2
 8007f34:	75fb      	strb	r3, [r7, #23]
      break;
 8007f36:	bf00      	nop
  }

  return ret;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3720      	adds	r7, #32
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	200000cc 	.word	0x200000cc
 8007f48:	200000b4 	.word	0x200000b4

08007f4c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f60:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d10c      	bne.n	8007f86 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	7b1b      	ldrb	r3, [r3, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d108      	bne.n	8007f86 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2201      	movs	r2, #1
 8007f78:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	2181      	movs	r1, #129	@ 0x81
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 fbe3 	bl	800874c <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2222      	movs	r2, #34	@ 0x22
 8007f9c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007f9e:	4b03      	ldr	r3, [pc, #12]	@ (8007fac <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	20000048 	.word	0x20000048

08007fb0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2222      	movs	r2, #34	@ 0x22
 8007fbc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007fbe:	4b03      	ldr	r3, [pc, #12]	@ (8007fcc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	2000006c 	.word	0x2000006c

08007fd0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2222      	movs	r2, #34	@ 0x22
 8007fdc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007fde:	4b03      	ldr	r3, [pc, #12]	@ (8007fec <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bc80      	pop	{r7}
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000090 	.word	0x20000090

08007ff0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008002:	2200      	movs	r2, #0
 8008004:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr
	...

08008014 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	220a      	movs	r2, #10
 8008020:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008022:	4b03      	ldr	r3, [pc, #12]	@ (8008030 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	200000c0 	.word	0x200000c0

08008034 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2202      	movs	r2, #2
 8008046:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800804a:	88fa      	ldrh	r2, [r7, #6]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008050:	88fa      	ldrh	r2, [r7, #6]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	2100      	movs	r1, #0
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 fb75 	bl	800874c <USBD_LL_Transmit>

  return USBD_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	2100      	movs	r1, #0
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fb63 	bl	800874c <USBD_LL_Transmit>

  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	4613      	mov	r3, r2
 800809c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800809e:	88fb      	ldrh	r3, [r7, #6]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	2100      	movs	r1, #0
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fb74 	bl	8008792 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2204      	movs	r2, #4
 80080c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080c4:	2300      	movs	r3, #0
 80080c6:	2200      	movs	r2, #0
 80080c8:	2100      	movs	r1, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fb3e 	bl	800874c <USBD_LL_Transmit>

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2205      	movs	r2, #5
 80080e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080ea:	2300      	movs	r3, #0
 80080ec:	2200      	movs	r2, #0
 80080ee:	2100      	movs	r1, #0
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fb4e 	bl	8008792 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008104:	2200      	movs	r2, #0
 8008106:	490e      	ldr	r1, [pc, #56]	@ (8008140 <MX_USB_DEVICE_Init+0x40>)
 8008108:	480e      	ldr	r0, [pc, #56]	@ (8008144 <MX_USB_DEVICE_Init+0x44>)
 800810a:	f7fe fdc6 	bl	8006c9a <USBD_Init>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008114:	f7f8 fc95 	bl	8000a42 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008118:	490b      	ldr	r1, [pc, #44]	@ (8008148 <MX_USB_DEVICE_Init+0x48>)
 800811a:	480a      	ldr	r0, [pc, #40]	@ (8008144 <MX_USB_DEVICE_Init+0x44>)
 800811c:	f7fe fde8 	bl	8006cf0 <USBD_RegisterClass>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008126:	f7f8 fc8c 	bl	8000a42 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800812a:	4806      	ldr	r0, [pc, #24]	@ (8008144 <MX_USB_DEVICE_Init+0x44>)
 800812c:	f7fe fdf9 	bl	8006d22 <USBD_Start>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008136:	f7f8 fc84 	bl	8000a42 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800813a:	bf00      	nop
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000140 	.word	0x20000140
 8008144:	20000454 	.word	0x20000454
 8008148:	20000010 	.word	0x20000010

0800814c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	6039      	str	r1, [r7, #0]
 8008156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2212      	movs	r2, #18
 800815c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800815e:	4b03      	ldr	r3, [pc, #12]	@ (800816c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	bc80      	pop	{r7}
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	2000015c 	.word	0x2000015c

08008170 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	6039      	str	r1, [r7, #0]
 800817a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2204      	movs	r2, #4
 8008180:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008182:	4b03      	ldr	r3, [pc, #12]	@ (8008190 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008184:	4618      	mov	r0, r3
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	bc80      	pop	{r7}
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20000170 	.word	0x20000170

08008194 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d105      	bne.n	80081b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	4907      	ldr	r1, [pc, #28]	@ (80081c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80081aa:	4808      	ldr	r0, [pc, #32]	@ (80081cc <USBD_FS_ProductStrDescriptor+0x38>)
 80081ac:	f7ff fd2f 	bl	8007c0e <USBD_GetString>
 80081b0:	e004      	b.n	80081bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4904      	ldr	r1, [pc, #16]	@ (80081c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80081b6:	4805      	ldr	r0, [pc, #20]	@ (80081cc <USBD_FS_ProductStrDescriptor+0x38>)
 80081b8:	f7ff fd29 	bl	8007c0e <USBD_GetString>
  }
  return USBD_StrDesc;
 80081bc:	4b02      	ldr	r3, [pc, #8]	@ (80081c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20000718 	.word	0x20000718
 80081cc:	08008900 	.word	0x08008900

080081d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	6039      	str	r1, [r7, #0]
 80081da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	4904      	ldr	r1, [pc, #16]	@ (80081f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081e0:	4804      	ldr	r0, [pc, #16]	@ (80081f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081e2:	f7ff fd14 	bl	8007c0e <USBD_GetString>
  return USBD_StrDesc;
 80081e6:	4b02      	ldr	r3, [pc, #8]	@ (80081f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20000718 	.word	0x20000718
 80081f4:	08008910 	.word	0x08008910

080081f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	221a      	movs	r2, #26
 8008208:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800820a:	f000 f843 	bl	8008294 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800820e:	4b02      	ldr	r3, [pc, #8]	@ (8008218 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20000174 	.word	0x20000174

0800821c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	6039      	str	r1, [r7, #0]
 8008226:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d105      	bne.n	800823a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	4907      	ldr	r1, [pc, #28]	@ (8008250 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008232:	4808      	ldr	r0, [pc, #32]	@ (8008254 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008234:	f7ff fceb 	bl	8007c0e <USBD_GetString>
 8008238:	e004      	b.n	8008244 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	4904      	ldr	r1, [pc, #16]	@ (8008250 <USBD_FS_ConfigStrDescriptor+0x34>)
 800823e:	4805      	ldr	r0, [pc, #20]	@ (8008254 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008240:	f7ff fce5 	bl	8007c0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008244:	4b02      	ldr	r3, [pc, #8]	@ (8008250 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000718 	.word	0x20000718
 8008254:	08008918 	.word	0x08008918

08008258 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	6039      	str	r1, [r7, #0]
 8008262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008264:	79fb      	ldrb	r3, [r7, #7]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	4907      	ldr	r1, [pc, #28]	@ (800828c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800826e:	4808      	ldr	r0, [pc, #32]	@ (8008290 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008270:	f7ff fccd 	bl	8007c0e <USBD_GetString>
 8008274:	e004      	b.n	8008280 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	4904      	ldr	r1, [pc, #16]	@ (800828c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800827a:	4805      	ldr	r0, [pc, #20]	@ (8008290 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800827c:	f7ff fcc7 	bl	8007c0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008280:	4b02      	ldr	r3, [pc, #8]	@ (800828c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000718 	.word	0x20000718
 8008290:	08008924 	.word	0x08008924

08008294 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800829a:	4b0f      	ldr	r3, [pc, #60]	@ (80082d8 <Get_SerialNum+0x44>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082a0:	4b0e      	ldr	r3, [pc, #56]	@ (80082dc <Get_SerialNum+0x48>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082a6:	4b0e      	ldr	r3, [pc, #56]	@ (80082e0 <Get_SerialNum+0x4c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4413      	add	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082ba:	2208      	movs	r2, #8
 80082bc:	4909      	ldr	r1, [pc, #36]	@ (80082e4 <Get_SerialNum+0x50>)
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 f814 	bl	80082ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082c4:	2204      	movs	r2, #4
 80082c6:	4908      	ldr	r1, [pc, #32]	@ (80082e8 <Get_SerialNum+0x54>)
 80082c8:	68b8      	ldr	r0, [r7, #8]
 80082ca:	f000 f80f 	bl	80082ec <IntToUnicode>
  }
}
 80082ce:	bf00      	nop
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	1ffff7e8 	.word	0x1ffff7e8
 80082dc:	1ffff7ec 	.word	0x1ffff7ec
 80082e0:	1ffff7f0 	.word	0x1ffff7f0
 80082e4:	20000176 	.word	0x20000176
 80082e8:	20000186 	.word	0x20000186

080082ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082fe:	2300      	movs	r3, #0
 8008300:	75fb      	strb	r3, [r7, #23]
 8008302:	e027      	b.n	8008354 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	0f1b      	lsrs	r3, r3, #28
 8008308:	2b09      	cmp	r3, #9
 800830a:	d80b      	bhi.n	8008324 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	0f1b      	lsrs	r3, r3, #28
 8008310:	b2da      	uxtb	r2, r3
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	4619      	mov	r1, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	440b      	add	r3, r1
 800831c:	3230      	adds	r2, #48	@ 0x30
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	e00a      	b.n	800833a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	0f1b      	lsrs	r3, r3, #28
 8008328:	b2da      	uxtb	r2, r3
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	4619      	mov	r1, r3
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	440b      	add	r3, r1
 8008334:	3237      	adds	r2, #55	@ 0x37
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	011b      	lsls	r3, r3, #4
 800833e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008340:	7dfb      	ldrb	r3, [r7, #23]
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	3301      	adds	r3, #1
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	4413      	add	r3, r2
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	3301      	adds	r3, #1
 8008352:	75fb      	strb	r3, [r7, #23]
 8008354:	7dfa      	ldrb	r2, [r7, #23]
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	429a      	cmp	r2, r3
 800835a:	d3d3      	bcc.n	8008304 <IntToUnicode+0x18>
  }
}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	bc80      	pop	{r7}
 8008366:	4770      	bx	lr

08008368 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a0d      	ldr	r2, [pc, #52]	@ (80083ac <HAL_PCD_MspInit+0x44>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d113      	bne.n	80083a2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800837a:	4b0d      	ldr	r3, [pc, #52]	@ (80083b0 <HAL_PCD_MspInit+0x48>)
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	4a0c      	ldr	r2, [pc, #48]	@ (80083b0 <HAL_PCD_MspInit+0x48>)
 8008380:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008384:	61d3      	str	r3, [r2, #28]
 8008386:	4b0a      	ldr	r3, [pc, #40]	@ (80083b0 <HAL_PCD_MspInit+0x48>)
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008392:	2200      	movs	r2, #0
 8008394:	2100      	movs	r1, #0
 8008396:	2014      	movs	r0, #20
 8008398:	f7f8 fdd3 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800839c:	2014      	movs	r0, #20
 800839e:	f7f8 fdec 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80083a2:	bf00      	nop
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	40005c00 	.word	0x40005c00
 80083b0:	40021000 	.word	0x40021000

080083b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f7fe fcf1 	bl	8006db2 <USBD_LL_SetupStage>
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80083ea:	78fa      	ldrb	r2, [r7, #3]
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	00db      	lsls	r3, r3, #3
 80083f6:	440b      	add	r3, r1
 80083f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	4619      	mov	r1, r3
 8008402:	f7fe fd23 	bl	8006e4c <USBD_LL_DataOutStage>
}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008420:	78fa      	ldrb	r2, [r7, #3]
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	440b      	add	r3, r1
 800842e:	3324      	adds	r3, #36	@ 0x24
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	4619      	mov	r1, r3
 8008436:	f7fe fd7a 	bl	8006f2e <USBD_LL_DataInStage>
}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fe8a 	bl	800716a <USBD_LL_SOF>
}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008466:	2301      	movs	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	799b      	ldrb	r3, [r3, #6]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d001      	beq.n	8008476 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008472:	f7f8 fae6 	bl	8000a42 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800847c:	7bfa      	ldrb	r2, [r7, #15]
 800847e:	4611      	mov	r1, r2
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fe3a 	bl	80070fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fdf3 	bl	8007078 <USBD_LL_Reset>
}
 8008492:	bf00      	nop
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe fe34 	bl	8007118 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	7a9b      	ldrb	r3, [r3, #10]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d005      	beq.n	80084c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084b8:	4b04      	ldr	r3, [pc, #16]	@ (80084cc <HAL_PCD_SuspendCallback+0x30>)
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	4a03      	ldr	r2, [pc, #12]	@ (80084cc <HAL_PCD_SuspendCallback+0x30>)
 80084be:	f043 0306 	orr.w	r3, r3, #6
 80084c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	e000ed00 	.word	0xe000ed00

080084d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fe2e 	bl	8007140 <USBD_LL_Resume>
}
 80084e4:	bf00      	nop
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80084f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008574 <USBD_LL_Init+0x88>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008574 <USBD_LL_Init+0x88>)
 8008500:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008504:	4b1b      	ldr	r3, [pc, #108]	@ (8008574 <USBD_LL_Init+0x88>)
 8008506:	4a1c      	ldr	r2, [pc, #112]	@ (8008578 <USBD_LL_Init+0x8c>)
 8008508:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800850a:	4b1a      	ldr	r3, [pc, #104]	@ (8008574 <USBD_LL_Init+0x88>)
 800850c:	2208      	movs	r2, #8
 800850e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008510:	4b18      	ldr	r3, [pc, #96]	@ (8008574 <USBD_LL_Init+0x88>)
 8008512:	2202      	movs	r2, #2
 8008514:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008516:	4b17      	ldr	r3, [pc, #92]	@ (8008574 <USBD_LL_Init+0x88>)
 8008518:	2200      	movs	r2, #0
 800851a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800851c:	4b15      	ldr	r3, [pc, #84]	@ (8008574 <USBD_LL_Init+0x88>)
 800851e:	2200      	movs	r2, #0
 8008520:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008522:	4b14      	ldr	r3, [pc, #80]	@ (8008574 <USBD_LL_Init+0x88>)
 8008524:	2200      	movs	r2, #0
 8008526:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008528:	4812      	ldr	r0, [pc, #72]	@ (8008574 <USBD_LL_Init+0x88>)
 800852a:	f7f8 ffa8 	bl	800147e <HAL_PCD_Init>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008534:	f7f8 fa85 	bl	8000a42 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800853e:	2318      	movs	r3, #24
 8008540:	2200      	movs	r2, #0
 8008542:	2100      	movs	r1, #0
 8008544:	f7fa fca2 	bl	8002e8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800854e:	2358      	movs	r3, #88	@ 0x58
 8008550:	2200      	movs	r2, #0
 8008552:	2180      	movs	r1, #128	@ 0x80
 8008554:	f7fa fc9a 	bl	8002e8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800855e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008562:	2200      	movs	r2, #0
 8008564:	2181      	movs	r1, #129	@ 0x81
 8008566:	f7fa fc91 	bl	8002e8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000918 	.word	0x20000918
 8008578:	40005c00 	.word	0x40005c00

0800857c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008592:	4618      	mov	r0, r3
 8008594:	f7f9 f869 	bl	800166a <HAL_PCD_Start>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 f93a 	bl	8008818 <USBD_Get_USB_Status>
 80085a4:	4603      	mov	r3, r0
 80085a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	4608      	mov	r0, r1
 80085bc:	4611      	mov	r1, r2
 80085be:	461a      	mov	r2, r3
 80085c0:	4603      	mov	r3, r0
 80085c2:	70fb      	strb	r3, [r7, #3]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70bb      	strb	r3, [r7, #2]
 80085c8:	4613      	mov	r3, r2
 80085ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085da:	78bb      	ldrb	r3, [r7, #2]
 80085dc:	883a      	ldrh	r2, [r7, #0]
 80085de:	78f9      	ldrb	r1, [r7, #3]
 80085e0:	f7f9 f9bd 	bl	800195e <HAL_PCD_EP_Open>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 f914 	bl	8008818 <USBD_Get_USB_Status>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	460b      	mov	r3, r1
 8008608:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008618:	78fa      	ldrb	r2, [r7, #3]
 800861a:	4611      	mov	r1, r2
 800861c:	4618      	mov	r0, r3
 800861e:	f7f9 f9fb 	bl	8001a18 <HAL_PCD_EP_Close>
 8008622:	4603      	mov	r3, r0
 8008624:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f8f5 	bl	8008818 <USBD_Get_USB_Status>
 800862e:	4603      	mov	r3, r0
 8008630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008632:	7bbb      	ldrb	r3, [r7, #14]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008656:	78fa      	ldrb	r2, [r7, #3]
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7f9 fa8c 	bl	8001b78 <HAL_PCD_EP_SetStall>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f8d6 	bl	8008818 <USBD_Get_USB_Status>
 800866c:	4603      	mov	r3, r0
 800866e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008670:	7bbb      	ldrb	r3, [r7, #14]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008694:	78fa      	ldrb	r2, [r7, #3]
 8008696:	4611      	mov	r1, r2
 8008698:	4618      	mov	r0, r3
 800869a:	f7f9 facd 	bl	8001c38 <HAL_PCD_EP_ClrStall>
 800869e:	4603      	mov	r3, r0
 80086a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f8b7 	bl	8008818 <USBD_Get_USB_Status>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	da0b      	bge.n	80086ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086da:	68f9      	ldr	r1, [r7, #12]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	440b      	add	r3, r1
 80086e6:	3312      	adds	r3, #18
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	e00b      	b.n	8008704 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	440b      	add	r3, r1
 80086fe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008702:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr

0800870e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f7f9 f8f2 	bl	8001916 <HAL_PCD_SetAddress>
 8008732:	4603      	mov	r3, r0
 8008734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008736:	7bfb      	ldrb	r3, [r7, #15]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 f86d 	bl	8008818 <USBD_Get_USB_Status>
 800873e:	4603      	mov	r3, r0
 8008740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008742:	7bbb      	ldrb	r3, [r7, #14]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	461a      	mov	r2, r3
 8008758:	460b      	mov	r3, r1
 800875a:	72fb      	strb	r3, [r7, #11]
 800875c:	4613      	mov	r3, r2
 800875e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800876e:	893b      	ldrh	r3, [r7, #8]
 8008770:	7af9      	ldrb	r1, [r7, #11]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	f7f9 f9c9 	bl	8001b0a <HAL_PCD_EP_Transmit>
 8008778:	4603      	mov	r3, r0
 800877a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800877c:	7dfb      	ldrb	r3, [r7, #23]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 f84a 	bl	8008818 <USBD_Get_USB_Status>
 8008784:	4603      	mov	r3, r0
 8008786:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008788:	7dbb      	ldrb	r3, [r7, #22]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b086      	sub	sp, #24
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	461a      	mov	r2, r3
 800879e:	460b      	mov	r3, r1
 80087a0:	72fb      	strb	r3, [r7, #11]
 80087a2:	4613      	mov	r3, r2
 80087a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087b4:	893b      	ldrh	r3, [r7, #8]
 80087b6:	7af9      	ldrb	r1, [r7, #11]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	f7f9 f975 	bl	8001aa8 <HAL_PCD_EP_Receive>
 80087be:	4603      	mov	r3, r0
 80087c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 f827 	bl	8008818 <USBD_Get_USB_Status>
 80087ca:	4603      	mov	r3, r0
 80087cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087e0:	4b02      	ldr	r3, [pc, #8]	@ (80087ec <USBD_static_malloc+0x14>)
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr
 80087ec:	20000bf0 	.word	0x20000bf0

080087f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]

}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc80      	pop	{r7}
 8008800:	4770      	bx	lr

08008802 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	460b      	mov	r3, r1
 800880c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr

08008818 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d817      	bhi.n	800885c <USBD_Get_USB_Status+0x44>
 800882c:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <USBD_Get_USB_Status+0x1c>)
 800882e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008832:	bf00      	nop
 8008834:	08008845 	.word	0x08008845
 8008838:	0800884b 	.word	0x0800884b
 800883c:	08008851 	.word	0x08008851
 8008840:	08008857 	.word	0x08008857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
    break;
 8008848:	e00b      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800884a:	2302      	movs	r3, #2
 800884c:	73fb      	strb	r3, [r7, #15]
    break;
 800884e:	e008      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008850:	2301      	movs	r3, #1
 8008852:	73fb      	strb	r3, [r7, #15]
    break;
 8008854:	e005      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008856:	2302      	movs	r3, #2
 8008858:	73fb      	strb	r3, [r7, #15]
    break;
 800885a:	e002      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800885c:	2302      	movs	r3, #2
 800885e:	73fb      	strb	r3, [r7, #15]
    break;
 8008860:	bf00      	nop
  }
  return usb_status;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop

08008870 <memset>:
 8008870:	4603      	mov	r3, r0
 8008872:	4402      	add	r2, r0
 8008874:	4293      	cmp	r3, r2
 8008876:	d100      	bne.n	800887a <memset+0xa>
 8008878:	4770      	bx	lr
 800887a:	f803 1b01 	strb.w	r1, [r3], #1
 800887e:	e7f9      	b.n	8008874 <memset+0x4>

08008880 <__libc_init_array>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	2600      	movs	r6, #0
 8008884:	4d0c      	ldr	r5, [pc, #48]	@ (80088b8 <__libc_init_array+0x38>)
 8008886:	4c0d      	ldr	r4, [pc, #52]	@ (80088bc <__libc_init_array+0x3c>)
 8008888:	1b64      	subs	r4, r4, r5
 800888a:	10a4      	asrs	r4, r4, #2
 800888c:	42a6      	cmp	r6, r4
 800888e:	d109      	bne.n	80088a4 <__libc_init_array+0x24>
 8008890:	f000 f81a 	bl	80088c8 <_init>
 8008894:	2600      	movs	r6, #0
 8008896:	4d0a      	ldr	r5, [pc, #40]	@ (80088c0 <__libc_init_array+0x40>)
 8008898:	4c0a      	ldr	r4, [pc, #40]	@ (80088c4 <__libc_init_array+0x44>)
 800889a:	1b64      	subs	r4, r4, r5
 800889c:	10a4      	asrs	r4, r4, #2
 800889e:	42a6      	cmp	r6, r4
 80088a0:	d105      	bne.n	80088ae <__libc_init_array+0x2e>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a8:	4798      	blx	r3
 80088aa:	3601      	adds	r6, #1
 80088ac:	e7ee      	b.n	800888c <__libc_init_array+0xc>
 80088ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b2:	4798      	blx	r3
 80088b4:	3601      	adds	r6, #1
 80088b6:	e7f2      	b.n	800889e <__libc_init_array+0x1e>
 80088b8:	08008960 	.word	0x08008960
 80088bc:	08008960 	.word	0x08008960
 80088c0:	08008960 	.word	0x08008960
 80088c4:	08008964 	.word	0x08008964

080088c8 <_init>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr

080088d4 <_fini>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr
