
STM32F103HidDeviceEmulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008938  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08008a44  08008a44  00009a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ac4  08008ac4  0000a190  2**0
                  CONTENTS
  4 .ARM          00000000  08008ac4  08008ac4  0000a190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ac4  08008ac4  0000a190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac4  08008ac4  00009ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ac8  08008ac8  00009ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08008acc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000143c  20000190  08008c5c  0000a190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015cc  08008c5c  0000a5cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117b3  00000000  00000000  0000a1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000390c  00000000  00000000  0001b96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001f278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a60  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5d1  00000000  00000000  00020ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017289  00000000  00000000  0003b091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872c7  00000000  00000000  0005231a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d95e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  000d9624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000dcb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	08008a2c 	.word	0x08008a2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	08008a2c 	.word	0x08008a2c

0800014c <HAL_UART_RxCpltCallback>:
uint8_t length = 0;
uint8_t parsedData = 0;
uint8_t buffer[1024] = {};
uint32_t timer = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t byte = rxcall;
 8000154:	4b2b      	ldr	r3, [pc, #172]	@ (8000204 <HAL_UART_RxCpltCallback+0xb8>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	73fb      	strb	r3, [r7, #15]
	if((HAL_GetTick()-timer) > 2){
 800015a:	f000 fe9f 	bl	8000e9c <HAL_GetTick>
 800015e:	4602      	mov	r2, r0
 8000160:	4b29      	ldr	r3, [pc, #164]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	1ad3      	subs	r3, r2, r3
 8000166:	2b02      	cmp	r3, #2
 8000168:	d905      	bls.n	8000176 <HAL_UART_RxCpltCallback+0x2a>
		length = 0;
 800016a:	4b28      	ldr	r3, [pc, #160]	@ (800020c <HAL_UART_RxCpltCallback+0xc0>)
 800016c:	2200      	movs	r2, #0
 800016e:	701a      	strb	r2, [r3, #0]
		parsedData = 0;
 8000170:	4b27      	ldr	r3, [pc, #156]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 8000172:	2200      	movs	r2, #0
 8000174:	701a      	strb	r2, [r3, #0]
	}
	if(byte == HEADER || parsedData > 0){
 8000176:	7bfb      	ldrb	r3, [r7, #15]
 8000178:	2bc5      	cmp	r3, #197	@ 0xc5
 800017a:	d003      	beq.n	8000184 <HAL_UART_RxCpltCallback+0x38>
 800017c:	4b24      	ldr	r3, [pc, #144]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d031      	beq.n	80001e8 <HAL_UART_RxCpltCallback+0x9c>
		buffer[parsedData] = byte;
 8000184:	4b22      	ldr	r3, [pc, #136]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	4a22      	ldr	r2, [pc, #136]	@ (8000214 <HAL_UART_RxCpltCallback+0xc8>)
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	5453      	strb	r3, [r2, r1]
		if(parsedData == 4)
 8000190:	4b1f      	ldr	r3, [pc, #124]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b04      	cmp	r3, #4
 8000196:	d106      	bne.n	80001a6 <HAL_UART_RxCpltCallback+0x5a>
			length = (uint16_t)(buffer[parsedData-1]) | (uint16_t)(buffer[parsedData] << 8);
 8000198:	4b1d      	ldr	r3, [pc, #116]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	3b01      	subs	r3, #1
 800019e:	4a1d      	ldr	r2, [pc, #116]	@ (8000214 <HAL_UART_RxCpltCallback+0xc8>)
 80001a0:	5cd2      	ldrb	r2, [r2, r3]
 80001a2:	4b1a      	ldr	r3, [pc, #104]	@ (800020c <HAL_UART_RxCpltCallback+0xc0>)
 80001a4:	701a      	strb	r2, [r3, #0]
		if(parsedData >= length+5){
 80001a6:	4b19      	ldr	r3, [pc, #100]	@ (800020c <HAL_UART_RxCpltCallback+0xc0>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	3304      	adds	r3, #4
 80001ac:	4a18      	ldr	r2, [pc, #96]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 80001ae:	7812      	ldrb	r2, [r2, #0]
 80001b0:	4293      	cmp	r3, r2
 80001b2:	da13      	bge.n	80001dc <HAL_UART_RxCpltCallback+0x90>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001b8:	4817      	ldr	r0, [pc, #92]	@ (8000218 <HAL_UART_RxCpltCallback+0xcc>)
 80001ba:	f001 f9f9 	bl	80015b0 <HAL_GPIO_TogglePin>
			ParsingData(buffer, parsedData+1);
 80001be:	4b14      	ldr	r3, [pc, #80]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	3301      	adds	r3, #1
 80001c4:	b29b      	uxth	r3, r3
 80001c6:	4619      	mov	r1, r3
 80001c8:	4812      	ldr	r0, [pc, #72]	@ (8000214 <HAL_UART_RxCpltCallback+0xc8>)
 80001ca:	f000 fd85 	bl	8000cd8 <ParsingData>
			length = 0;
 80001ce:	4b0f      	ldr	r3, [pc, #60]	@ (800020c <HAL_UART_RxCpltCallback+0xc0>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	701a      	strb	r2, [r3, #0]
			parsedData = 0;
 80001d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
 80001da:	e005      	b.n	80001e8 <HAL_UART_RxCpltCallback+0x9c>
		}else
			parsedData++;
 80001dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <HAL_UART_RxCpltCallback+0xc4>)
 80001e6:	701a      	strb	r2, [r3, #0]
	}
	timer = HAL_GetTick();
 80001e8:	f000 fe58 	bl	8000e9c <HAL_GetTick>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4a06      	ldr	r2, [pc, #24]	@ (8000208 <HAL_UART_RxCpltCallback+0xbc>)
 80001f0:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart,&rxcall,1);
 80001f2:	2201      	movs	r2, #1
 80001f4:	4903      	ldr	r1, [pc, #12]	@ (8000204 <HAL_UART_RxCpltCallback+0xb8>)
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f003 fcdd 	bl	8003bb6 <HAL_UART_Receive_IT>
}
 80001fc:	bf00      	nop
 80001fe:	3710      	adds	r7, #16
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	200005fc 	.word	0x200005fc
 8000208:	200005b0 	.word	0x200005b0
 800020c:	200001ac 	.word	0x200001ac
 8000210:	200001ad 	.word	0x200001ad
 8000214:	200001b0 	.word	0x200001b0
 8000218:	40011000 	.word	0x40011000

0800021c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000230:	4b24      	ldr	r3, [pc, #144]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a23      	ldr	r2, [pc, #140]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 8000236:	f043 0310 	orr.w	r3, r3, #16
 800023a:	6193      	str	r3, [r2, #24]
 800023c:	4b21      	ldr	r3, [pc, #132]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f003 0310 	and.w	r3, r3, #16
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000248:	4b1e      	ldr	r3, [pc, #120]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a1d      	ldr	r2, [pc, #116]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b1b      	ldr	r3, [pc, #108]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0320 	and.w	r3, r3, #32
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000260:	4b18      	ldr	r3, [pc, #96]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a17      	ldr	r2, [pc, #92]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 8000266:	f043 0304 	orr.w	r3, r3, #4
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b15      	ldr	r3, [pc, #84]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0304 	and.w	r3, r3, #4
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000278:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a11      	ldr	r2, [pc, #68]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <MX_GPIO_Init+0xa8>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0308 	and.w	r3, r3, #8
 800028c:	603b      	str	r3, [r7, #0]
 800028e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000296:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <MX_GPIO_Init+0xac>)
 8000298:	f001 f972 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800029c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2302      	movs	r3, #2
 80002ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	4619      	mov	r1, r3
 80002b4:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <MX_GPIO_Init+0xac>)
 80002b6:	f000 ffdf 	bl	8001278 <HAL_GPIO_Init>

}
 80002ba:	bf00      	nop
 80002bc:	3720      	adds	r7, #32
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40011000 	.word	0x40011000

080002cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MX_USART3_UART_Init+0x4c>)
 80002d2:	4a12      	ldr	r2, [pc, #72]	@ (800031c <MX_USART3_UART_Init+0x50>)
 80002d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80002d6:	4b10      	ldr	r3, [pc, #64]	@ (8000318 <MX_USART3_UART_Init+0x4c>)
 80002d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <MX_USART3_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <MX_USART3_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000318 <MX_USART3_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80002f0:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <MX_USART3_UART_Init+0x4c>)
 80002f2:	220c      	movs	r2, #12
 80002f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <MX_USART3_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <MX_USART3_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000302:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_USART3_UART_Init+0x4c>)
 8000304:	f003 fb7c 	bl	8003a00 <HAL_UART_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800030e:	f000 f8f0 	bl	80004f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	200005b4 	.word	0x200005b4
 800031c:	40004800 	.word	0x40004800

08000320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a20      	ldr	r2, [pc, #128]	@ (80003bc <HAL_UART_MspInit+0x9c>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d139      	bne.n	80003b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000340:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <HAL_UART_MspInit+0xa0>)
 8000342:	69db      	ldr	r3, [r3, #28]
 8000344:	4a1e      	ldr	r2, [pc, #120]	@ (80003c0 <HAL_UART_MspInit+0xa0>)
 8000346:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800034a:	61d3      	str	r3, [r2, #28]
 800034c:	4b1c      	ldr	r3, [pc, #112]	@ (80003c0 <HAL_UART_MspInit+0xa0>)
 800034e:	69db      	ldr	r3, [r3, #28]
 8000350:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000358:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <HAL_UART_MspInit+0xa0>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a18      	ldr	r2, [pc, #96]	@ (80003c0 <HAL_UART_MspInit+0xa0>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b16      	ldr	r3, [pc, #88]	@ (80003c0 <HAL_UART_MspInit+0xa0>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0308 	and.w	r3, r3, #8
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000376:	2302      	movs	r3, #2
 8000378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037a:	2303      	movs	r3, #3
 800037c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	480f      	ldr	r0, [pc, #60]	@ (80003c4 <HAL_UART_MspInit+0xa4>)
 8000386:	f000 ff77 	bl	8001278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800038a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800038e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	4619      	mov	r1, r3
 800039e:	4809      	ldr	r0, [pc, #36]	@ (80003c4 <HAL_UART_MspInit+0xa4>)
 80003a0:	f000 ff6a 	bl	8001278 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2101      	movs	r1, #1
 80003a8:	2027      	movs	r0, #39	@ 0x27
 80003aa:	f000 fe7c 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80003ae:	2027      	movs	r0, #39	@ 0x27
 80003b0:	f000 fe95 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40004800 	.word	0x40004800
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <main>:
Animation animation = {0, 0, {}};

void SystemClock_Config(void);

int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	HAL_Init();
 80003cc:	f000 fd0e 	bl	8000dec <HAL_Init>
	SystemClock_Config();
 80003d0:	f000 f834 	bl	800043c <SystemClock_Config>
	MX_GPIO_Init();
 80003d4:	f7ff ff22 	bl	800021c <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80003d8:	f007 ff44 	bl	8008264 <MX_USB_DEVICE_Init>
	MX_USART3_UART_Init();
 80003dc:	f7ff ff76 	bl	80002cc <MX_USART3_UART_Init>
	HAL_UART_Receive_IT(&huart3,&rxcall,1);
 80003e0:	2201      	movs	r2, #1
 80003e2:	4913      	ldr	r1, [pc, #76]	@ (8000430 <main+0x68>)
 80003e4:	4813      	ldr	r0, [pc, #76]	@ (8000434 <main+0x6c>)
 80003e6:	f003 fbe6 	bl	8003bb6 <HAL_UART_Receive_IT>

	while (1)
	{
		switch(action.device){
 80003ea:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <main+0x70>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b03      	cmp	r3, #3
 80003f0:	d014      	beq.n	800041c <main+0x54>
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	dc19      	bgt.n	800042a <main+0x62>
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d002      	beq.n	8000400 <main+0x38>
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d007      	beq.n	800040e <main+0x46>
 80003fe:	e014      	b.n	800042a <main+0x62>
			case(MOUSE):
				MouseCommandSetup(&action);
 8000400:	480d      	ldr	r0, [pc, #52]	@ (8000438 <main+0x70>)
 8000402:	f000 fb81 	bl	8000b08 <MouseCommandSetup>
				action.device = 0;
 8000406:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <main+0x70>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
				break;
 800040c:	e00d      	b.n	800042a <main+0x62>
			case(KEYBOARD):
				KeyboardSetup(&action);
 800040e:	480a      	ldr	r0, [pc, #40]	@ (8000438 <main+0x70>)
 8000410:	f000 fae2 	bl	80009d8 <KeyboardSetup>
				action.device = 0;
 8000414:	4b08      	ldr	r3, [pc, #32]	@ (8000438 <main+0x70>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
				break;
 800041a:	e006      	b.n	800042a <main+0x62>
			case(ANIMATION):
				AnimationSetup(&action);
 800041c:	4806      	ldr	r0, [pc, #24]	@ (8000438 <main+0x70>)
 800041e:	f000 f8e7 	bl	80005f0 <AnimationSetup>
				action.device = 0;
 8000422:	4b05      	ldr	r3, [pc, #20]	@ (8000438 <main+0x70>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
				break;
 8000428:	bf00      	nop
		}
		Animate();
 800042a:	f000 f93b 	bl	80006a4 <Animate>
		switch(action.device){
 800042e:	e7dc      	b.n	80003ea <main+0x22>
 8000430:	200005fc 	.word	0x200005fc
 8000434:	200005b4 	.word	0x200005b4
 8000438:	20000600 	.word	0x20000600

0800043c <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b094      	sub	sp, #80	@ 0x50
 8000440:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000446:	2228      	movs	r2, #40	@ 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f008 fac2 	bl	80089d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800046c:	2301      	movs	r3, #1
 800046e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000470:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000474:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047a:	2301      	movs	r3, #1
 800047c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000486:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000488:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800048c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000492:	4618      	mov	r0, r3
 8000494:	f002 fdee 	bl	8003074 <HAL_RCC_OscConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800049e:	f000 f828 	bl	80004f2 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	230f      	movs	r3, #15
 80004a4:	617b      	str	r3, [r7, #20]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004b2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f003 f85a 	bl	8003578 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x92>
	{
		Error_Handler();
 80004ca:	f000 f812 	bl	80004f2 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004ce:	2310      	movs	r3, #16
 80004d0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80004d6:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4618      	mov	r0, r3
 80004dc:	f003 f9da 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0xae>
	{
		Error_Handler();
 80004e6:	f000 f804 	bl	80004f2 <Error_Handler>
	}
}
 80004ea:	bf00      	nop
 80004ec:	3750      	adds	r7, #80	@ 0x50
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <Error_Handler>:

void Error_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f6:	b672      	cpsid	i
}
 80004f8:	bf00      	nop
  __disable_irq();
  while (1){}
 80004fa:	bf00      	nop
 80004fc:	e7fd      	b.n	80004fa <Error_Handler+0x8>
	...

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	@ (800055c <HAL_MspInit+0x5c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a14      	ldr	r2, [pc, #80]	@ (800055c <HAL_MspInit+0x5c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <HAL_MspInit+0x5c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <HAL_MspInit+0x5c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <HAL_MspInit+0x5c>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <HAL_MspInit+0x5c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000536:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <HAL_MspInit+0x60>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <HAL_MspInit+0x60>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	40010000 	.word	0x40010000

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <NMI_Handler+0x4>

0800056c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <MemManage_Handler+0x4>

0800057c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <UsageFault_Handler+0x4>

0800058c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 fc60 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005c2:	f001 f92a 	bl	800181a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200012e0 	.word	0x200012e0

080005d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80005d4:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <USART3_IRQHandler+0x10>)
 80005d6:	f003 fb13 	bl	8003c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200005b4 	.word	0x200005b4

080005e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <AnimationSetup>:
extern USBD_HandleTypeDef hUsbDeviceFS;
uint32_t time = 0;
uint8_t flag = 1;
uint16_t data_set = 0;

void AnimationSetup(Action *act){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	switch(act->command){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d002      	beq.n	8000606 <AnimationSetup+0x16>
 8000600:	2b02      	cmp	r3, #2
 8000602:	d009      	beq.n	8000618 <AnimationSetup+0x28>
				break;
		case(REMOVE_COMMAND):
				AnimationRemove();
				break;
	}
}
 8000604:	e00b      	b.n	800061e <AnimationSetup+0x2e>
				AnimationSet(act->data, act->length);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	1d1a      	adds	r2, r3, #4
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	885b      	ldrh	r3, [r3, #2]
 800060e:	4619      	mov	r1, r3
 8000610:	4610      	mov	r0, r2
 8000612:	f000 f809 	bl	8000628 <AnimationSet>
				break;
 8000616:	e002      	b.n	800061e <AnimationSetup+0x2e>
				AnimationRemove();
 8000618:	f000 f838 	bl	800068c <AnimationRemove>
				break;
 800061c:	bf00      	nop
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <AnimationSet>:

void AnimationSet(uint8_t *data, uint16_t len){
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
	flag = 1;
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <AnimationSet+0x5c>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
	animation.id = data[0];
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <AnimationSet+0x60>)
 8000640:	701a      	strb	r2, [r3, #0]
	animation.length = len-1;
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	3b01      	subs	r3, #1
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <AnimationSet+0x60>)
 800064a:	805a      	strh	r2, [r3, #2]
	for(uint8_t i=0; i<animation.length; i++)
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e00c      	b.n	800066c <AnimationSet+0x44>
		animation.data[i] = data[i+1];
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	3301      	adds	r3, #1
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	441a      	add	r2, r3
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	7811      	ldrb	r1, [r2, #0]
 800065e:	4a0a      	ldr	r2, [pc, #40]	@ (8000688 <AnimationSet+0x60>)
 8000660:	4413      	add	r3, r2
 8000662:	460a      	mov	r2, r1
 8000664:	711a      	strb	r2, [r3, #4]
	for(uint8_t i=0; i<animation.length; i++)
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	3301      	adds	r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <AnimationSet+0x60>)
 8000672:	885b      	ldrh	r3, [r3, #2]
 8000674:	429a      	cmp	r2, r3
 8000676:	d3ec      	bcc.n	8000652 <AnimationSet+0x2a>
}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	20000004 	.word	0x20000004
 8000688:	20000a04 	.word	0x20000a04

0800068c <AnimationRemove>:

void AnimationRemove(){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	animation.id = 0;
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <AnimationRemove+0x14>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000a04 	.word	0x20000a04

080006a4 <Animate>:

void Animate(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	switch(animation.id){
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <Animate+0x24>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d002      	beq.n	80006b6 <Animate+0x12>
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d003      	beq.n	80006bc <Animate+0x18>
			break;
		case(KEYBOARD_TEXT_ANIMATION):
			KeyboardTextAnimation();
			break;
	}
}
 80006b4:	e005      	b.n	80006c2 <Animate+0x1e>
			MouseMoveAnimation();
 80006b6:	f000 f809 	bl	80006cc <MouseMoveAnimation>
			break;
 80006ba:	e002      	b.n	80006c2 <Animate+0x1e>
			KeyboardTextAnimation();
 80006bc:	f000 f882 	bl	80007c4 <KeyboardTextAnimation>
			break;
 80006c0:	bf00      	nop
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000a04 	.word	0x20000a04

080006cc <MouseMoveAnimation>:

void MouseMoveAnimation(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	if((HAL_GetTick()-time) >= 5){
 80006d2:	f000 fbe3 	bl	8000e9c <HAL_GetTick>
 80006d6:	4602      	mov	r2, r0
 80006d8:	4b37      	ldr	r3, [pc, #220]	@ (80007b8 <MouseMoveAnimation+0xec>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d965      	bls.n	80007ae <MouseMoveAnimation+0xe2>
		uint8_t data_out[5] = {0x01, animation.data[1], 0, 0, 0};
 80006e2:	2301      	movs	r3, #1
 80006e4:	703b      	strb	r3, [r7, #0]
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <MouseMoveAnimation+0xf0>)
 80006e8:	795b      	ldrb	r3, [r3, #5]
 80006ea:	707b      	strb	r3, [r7, #1]
 80006ec:	2300      	movs	r3, #0
 80006ee:	70bb      	strb	r3, [r7, #2]
 80006f0:	2300      	movs	r3, #0
 80006f2:	70fb      	strb	r3, [r7, #3]
 80006f4:	2300      	movs	r3, #0
 80006f6:	713b      	strb	r3, [r7, #4]
		switch((char)animation.data[0]){
 80006f8:	4b30      	ldr	r3, [pc, #192]	@ (80007bc <MouseMoveAnimation+0xf0>)
 80006fa:	791b      	ldrb	r3, [r3, #4]
 80006fc:	3b62      	subs	r3, #98	@ 0x62
 80006fe:	2b12      	cmp	r3, #18
 8000700:	d84a      	bhi.n	8000798 <MouseMoveAnimation+0xcc>
 8000702:	a201      	add	r2, pc, #4	@ (adr r2, 8000708 <MouseMoveAnimation+0x3c>)
 8000704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000708:	08000777 	.word	0x08000777
 800070c:	08000799 	.word	0x08000799
 8000710:	08000799 	.word	0x08000799
 8000714:	08000799 	.word	0x08000799
 8000718:	08000799 	.word	0x08000799
 800071c:	08000799 	.word	0x08000799
 8000720:	08000799 	.word	0x08000799
 8000724:	08000799 	.word	0x08000799
 8000728:	08000799 	.word	0x08000799
 800072c:	08000799 	.word	0x08000799
 8000730:	08000765 	.word	0x08000765
 8000734:	08000799 	.word	0x08000799
 8000738:	08000799 	.word	0x08000799
 800073c:	08000799 	.word	0x08000799
 8000740:	08000799 	.word	0x08000799
 8000744:	08000799 	.word	0x08000799
 8000748:	08000755 	.word	0x08000755
 800074c:	08000799 	.word	0x08000799
 8000750:	08000787 	.word	0x08000787
			case('r'):
				data_out[2] = 1+2*animation.data[2];
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MouseMoveAnimation+0xf0>)
 8000756:	799b      	ldrb	r3, [r3, #6]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	3301      	adds	r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	70bb      	strb	r3, [r7, #2]
				break;
 8000762:	e019      	b.n	8000798 <MouseMoveAnimation+0xcc>
			case('l'):
				data_out[2] = 254-2*animation.data[2];
 8000764:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MouseMoveAnimation+0xf0>)
 8000766:	799b      	ldrb	r3, [r3, #6]
 8000768:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800076c:	b2db      	uxtb	r3, r3
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	70bb      	strb	r3, [r7, #2]
				break;
 8000774:	e010      	b.n	8000798 <MouseMoveAnimation+0xcc>
			case('b'):
				data_out[3] = 1+2*animation.data[2];
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MouseMoveAnimation+0xf0>)
 8000778:	799b      	ldrb	r3, [r3, #6]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	3301      	adds	r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	70fb      	strb	r3, [r7, #3]
				break;
 8000784:	e008      	b.n	8000798 <MouseMoveAnimation+0xcc>
			case('t'):
				data_out[3] = 254-2*animation.data[2];
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <MouseMoveAnimation+0xf0>)
 8000788:	799b      	ldrb	r3, [r3, #6]
 800078a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800078e:	b2db      	uxtb	r3, r3
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	b2db      	uxtb	r3, r3
 8000794:	70fb      	strb	r3, [r7, #3]
				break;
 8000796:	bf00      	nop
		}
		USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8000798:	463b      	mov	r3, r7
 800079a:	2205      	movs	r2, #5
 800079c:	4619      	mov	r1, r3
 800079e:	4808      	ldr	r0, [pc, #32]	@ (80007c0 <MouseMoveAnimation+0xf4>)
 80007a0:	f007 fc86 	bl	80080b0 <USBD_HID_SendReport>
		time = HAL_GetTick();
 80007a4:	f000 fb7a 	bl	8000e9c <HAL_GetTick>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a03      	ldr	r2, [pc, #12]	@ (80007b8 <MouseMoveAnimation+0xec>)
 80007ac:	6013      	str	r3, [r2, #0]
	}
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000e08 	.word	0x20000e08
 80007bc:	20000a04 	.word	0x20000a04
 80007c0:	20000e1c 	.word	0x20000e1c

080007c4 <KeyboardTextAnimation>:
void KeyboardTextAnimation(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
	static uint32_t repeat_timer = 0;
	if((HAL_GetTick()-time) > 5){
 80007ca:	f000 fb67 	bl	8000e9c <HAL_GetTick>
 80007ce:	4602      	mov	r2, r0
 80007d0:	4b7a      	ldr	r3, [pc, #488]	@ (80009bc <KeyboardTextAnimation+0x1f8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	2b05      	cmp	r3, #5
 80007d8:	f240 80eb 	bls.w	80009b2 <KeyboardTextAnimation+0x1ee>
		if(flag){
 80007dc:	4b78      	ldr	r3, [pc, #480]	@ (80009c0 <KeyboardTextAnimation+0x1fc>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	f000 80bf 	beq.w	8000964 <KeyboardTextAnimation+0x1a0>
			uint8_t sp = 0, symb = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	75fb      	strb	r3, [r7, #23]
 80007ea:	2300      	movs	r3, #0
 80007ec:	75bb      	strb	r3, [r7, #22]
			if (animation.data[data_set] >= (uint8_t)'0' && animation.data[data_set] <= (uint8_t)'9'){
 80007ee:	4b75      	ldr	r3, [pc, #468]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b74      	ldr	r3, [pc, #464]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 80007f6:	4413      	add	r3, r2
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80007fc:	d923      	bls.n	8000846 <KeyboardTextAnimation+0x82>
 80007fe:	4b71      	ldr	r3, [pc, #452]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	4b70      	ldr	r3, [pc, #448]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 8000806:	4413      	add	r3, r2
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	2b39      	cmp	r3, #57	@ 0x39
 800080c:	d81b      	bhi.n	8000846 <KeyboardTextAnimation+0x82>
				if (animation.data[data_set] == 48)
 800080e:	4b6d      	ldr	r3, [pc, #436]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	4b6c      	ldr	r3, [pc, #432]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 8000816:	4413      	add	r3, r2
 8000818:	791b      	ldrb	r3, [r3, #4]
 800081a:	2b30      	cmp	r3, #48	@ 0x30
 800081c:	d108      	bne.n	8000830 <KeyboardTextAnimation+0x6c>
					symb = animation.data[data_set]-9;
 800081e:	4b69      	ldr	r3, [pc, #420]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	4b68      	ldr	r3, [pc, #416]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 8000826:	4413      	add	r3, r2
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	3b09      	subs	r3, #9
 800082c:	75bb      	strb	r3, [r7, #22]
 800082e:	e007      	b.n	8000840 <KeyboardTextAnimation+0x7c>
				else
					symb = animation.data[data_set]-19;
 8000830:	4b64      	ldr	r3, [pc, #400]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b64      	ldr	r3, [pc, #400]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 8000838:	4413      	add	r3, r2
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	3b13      	subs	r3, #19
 800083e:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	75fb      	strb	r3, [r7, #23]
 8000844:	e04a      	b.n	80008dc <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] >= (uint8_t)'A' && animation.data[data_set] <= (uint8_t)'Z'){
 8000846:	4b5f      	ldr	r3, [pc, #380]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	4b5e      	ldr	r3, [pc, #376]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 800084e:	4413      	add	r3, r2
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	2b40      	cmp	r3, #64	@ 0x40
 8000854:	d912      	bls.n	800087c <KeyboardTextAnimation+0xb8>
 8000856:	4b5b      	ldr	r3, [pc, #364]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	4b5a      	ldr	r3, [pc, #360]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 800085e:	4413      	add	r3, r2
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	2b5a      	cmp	r3, #90	@ 0x5a
 8000864:	d80a      	bhi.n	800087c <KeyboardTextAnimation+0xb8>
				symb = animation.data[data_set]-61;
 8000866:	4b57      	ldr	r3, [pc, #348]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	4b56      	ldr	r3, [pc, #344]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 800086e:	4413      	add	r3, r2
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	3b3d      	subs	r3, #61	@ 0x3d
 8000874:	75bb      	strb	r3, [r7, #22]
				sp = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	75fb      	strb	r3, [r7, #23]
 800087a:	e02f      	b.n	80008dc <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] >= (uint8_t)'a' && animation.data[data_set] <= (uint8_t)'z'){
 800087c:	4b51      	ldr	r3, [pc, #324]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b51      	ldr	r3, [pc, #324]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 8000884:	4413      	add	r3, r2
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	2b60      	cmp	r3, #96	@ 0x60
 800088a:	d912      	bls.n	80008b2 <KeyboardTextAnimation+0xee>
 800088c:	4b4d      	ldr	r3, [pc, #308]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b4d      	ldr	r3, [pc, #308]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 8000894:	4413      	add	r3, r2
 8000896:	791b      	ldrb	r3, [r3, #4]
 8000898:	2b7a      	cmp	r3, #122	@ 0x7a
 800089a:	d80a      	bhi.n	80008b2 <KeyboardTextAnimation+0xee>
				symb = animation.data[data_set]-93;
 800089c:	4b49      	ldr	r3, [pc, #292]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b49      	ldr	r3, [pc, #292]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 80008a4:	4413      	add	r3, r2
 80008a6:	791b      	ldrb	r3, [r3, #4]
 80008a8:	3b5d      	subs	r3, #93	@ 0x5d
 80008aa:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	75fb      	strb	r3, [r7, #23]
 80008b0:	e014      	b.n	80008dc <KeyboardTextAnimation+0x118>
			}else if(animation.data[data_set] == (uint8_t)' '){
 80008b2:	4b44      	ldr	r3, [pc, #272]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b43      	ldr	r3, [pc, #268]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 80008ba:	4413      	add	r3, r2
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	2b20      	cmp	r3, #32
 80008c0:	d10a      	bne.n	80008d8 <KeyboardTextAnimation+0x114>
				symb = animation.data[data_set]+12;
 80008c2:	4b40      	ldr	r3, [pc, #256]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b3f      	ldr	r3, [pc, #252]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 80008ca:	4413      	add	r3, r2
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	330c      	adds	r3, #12
 80008d0:	75bb      	strb	r3, [r7, #22]
				sp = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	75fb      	strb	r3, [r7, #23]
 80008d6:	e001      	b.n	80008dc <KeyboardTextAnimation+0x118>
			}else
				symb = 85;
 80008d8:	2355      	movs	r3, #85	@ 0x55
 80008da:	75bb      	strb	r3, [r7, #22]
			uint8_t data_out[9] = {0x02, sp, 0, symb, 0, 0, 0, 0, 0};
 80008dc:	2302      	movs	r3, #2
 80008de:	733b      	strb	r3, [r7, #12]
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	737b      	strb	r3, [r7, #13]
 80008e4:	2300      	movs	r3, #0
 80008e6:	73bb      	strb	r3, [r7, #14]
 80008e8:	7dbb      	ldrb	r3, [r7, #22]
 80008ea:	73fb      	strb	r3, [r7, #15]
 80008ec:	2300      	movs	r3, #0
 80008ee:	743b      	strb	r3, [r7, #16]
 80008f0:	2300      	movs	r3, #0
 80008f2:	747b      	strb	r3, [r7, #17]
 80008f4:	2300      	movs	r3, #0
 80008f6:	74bb      	strb	r3, [r7, #18]
 80008f8:	2300      	movs	r3, #0
 80008fa:	74fb      	strb	r3, [r7, #19]
 80008fc:	2300      	movs	r3, #0
 80008fe:	753b      	strb	r3, [r7, #20]
			data_set++;
 8000900:	4b30      	ldr	r3, [pc, #192]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b2e      	ldr	r3, [pc, #184]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 800090a:	801a      	strh	r2, [r3, #0]

			USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2209      	movs	r2, #9
 8000912:	4619      	mov	r1, r3
 8000914:	482d      	ldr	r0, [pc, #180]	@ (80009cc <KeyboardTextAnimation+0x208>)
 8000916:	f007 fbcb 	bl	80080b0 <USBD_HID_SendReport>
			HAL_Delay(30);
 800091a:	201e      	movs	r0, #30
 800091c:	f000 fac8 	bl	8000eb0 <HAL_Delay>
			uint8_t data_res[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 8000920:	4a2b      	ldr	r2, [pc, #172]	@ (80009d0 <KeyboardTextAnimation+0x20c>)
 8000922:	463b      	mov	r3, r7
 8000924:	ca07      	ldmia	r2, {r0, r1, r2}
 8000926:	c303      	stmia	r3!, {r0, r1}
 8000928:	701a      	strb	r2, [r3, #0]
			USBD_HID_SendReport(&hUsbDeviceFS, data_res, 9);
 800092a:	463b      	mov	r3, r7
 800092c:	2209      	movs	r2, #9
 800092e:	4619      	mov	r1, r3
 8000930:	4826      	ldr	r0, [pc, #152]	@ (80009cc <KeyboardTextAnimation+0x208>)
 8000932:	f007 fbbd 	bl	80080b0 <USBD_HID_SendReport>
			HAL_Delay(30);
 8000936:	201e      	movs	r0, #30
 8000938:	f000 faba 	bl	8000eb0 <HAL_Delay>

			if(data_set >= animation.length-1){
 800093c:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 8000944:	885b      	ldrh	r3, [r3, #2]
 8000946:	3b01      	subs	r3, #1
 8000948:	429a      	cmp	r2, r3
 800094a:	db2d      	blt.n	80009a8 <KeyboardTextAnimation+0x1e4>
				data_set = 0;
 800094c:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <KeyboardTextAnimation+0x200>)
 800094e:	2200      	movs	r2, #0
 8000950:	801a      	strh	r2, [r3, #0]
				flag = 0;
 8000952:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <KeyboardTextAnimation+0x1fc>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
				repeat_timer = HAL_GetTick();
 8000958:	f000 faa0 	bl	8000e9c <HAL_GetTick>
 800095c:	4603      	mov	r3, r0
 800095e:	4a1d      	ldr	r2, [pc, #116]	@ (80009d4 <KeyboardTextAnimation+0x210>)
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e021      	b.n	80009a8 <KeyboardTextAnimation+0x1e4>
			}
		}else if (animation.data[animation.length-1] != 0){
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 8000966:	885b      	ldrh	r3, [r3, #2]
 8000968:	3b01      	subs	r3, #1
 800096a:	4a17      	ldr	r2, [pc, #92]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 800096c:	4413      	add	r3, r2
 800096e:	791b      	ldrb	r3, [r3, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d019      	beq.n	80009a8 <KeyboardTextAnimation+0x1e4>
			if((HAL_GetTick()-repeat_timer) >= animation.data[animation.length-1]*100){
 8000974:	f000 fa92 	bl	8000e9c <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <KeyboardTextAnimation+0x210>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	4a11      	ldr	r2, [pc, #68]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 8000982:	8852      	ldrh	r2, [r2, #2]
 8000984:	3a01      	subs	r2, #1
 8000986:	4910      	ldr	r1, [pc, #64]	@ (80009c8 <KeyboardTextAnimation+0x204>)
 8000988:	440a      	add	r2, r1
 800098a:	7912      	ldrb	r2, [r2, #4]
 800098c:	4611      	mov	r1, r2
 800098e:	2264      	movs	r2, #100	@ 0x64
 8000990:	fb01 f202 	mul.w	r2, r1, r2
 8000994:	4293      	cmp	r3, r2
 8000996:	d307      	bcc.n	80009a8 <KeyboardTextAnimation+0x1e4>
				flag = 1;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <KeyboardTextAnimation+0x1fc>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
				repeat_timer = HAL_GetTick();
 800099e:	f000 fa7d 	bl	8000e9c <HAL_GetTick>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <KeyboardTextAnimation+0x210>)
 80009a6:	6013      	str	r3, [r2, #0]
			}
		}
		time = HAL_GetTick();
 80009a8:	f000 fa78 	bl	8000e9c <HAL_GetTick>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a03      	ldr	r2, [pc, #12]	@ (80009bc <KeyboardTextAnimation+0x1f8>)
 80009b0:	6013      	str	r3, [r2, #0]
	}

}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000e08 	.word	0x20000e08
 80009c0:	20000004 	.word	0x20000004
 80009c4:	20000e0c 	.word	0x20000e0c
 80009c8:	20000a04 	.word	0x20000a04
 80009cc:	20000e1c 	.word	0x20000e1c
 80009d0:	08008a44 	.word	0x08008a44
 80009d4:	20000e10 	.word	0x20000e10

080009d8 <KeyboardSetup>:
 */

#include "modules/KeyboardModule.h"
extern USBD_HandleTypeDef hUsbDeviceFS;

void KeyboardSetup(Action *act){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	switch(act->command){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d00c      	beq.n	8000a02 <KeyboardSetup+0x2a>
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	dc13      	bgt.n	8000a14 <KeyboardSetup+0x3c>
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d002      	beq.n	80009f6 <KeyboardSetup+0x1e>
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d00c      	beq.n	8000a0e <KeyboardSetup+0x36>
				break;
		case(REMOVE_COMMAND):
				KeyboardRemove();
				break;
	}
}
 80009f4:	e00e      	b.n	8000a14 <KeyboardSetup+0x3c>
				KeyboardSet(act->data);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3304      	adds	r3, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f80e 	bl	8000a1c <KeyboardSet>
				break;
 8000a00:	e008      	b.n	8000a14 <KeyboardSetup+0x3c>
				KeyboardClick(act->data);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3304      	adds	r3, #4
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f836 	bl	8000a78 <KeyboardClick>
				break;
 8000a0c:	e002      	b.n	8000a14 <KeyboardSetup+0x3c>
				KeyboardRemove();
 8000a0e:	f000 f865 	bl	8000adc <KeyboardRemove>
				break;
 8000a12:	bf00      	nop
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <KeyboardSet>:

void KeyboardSet(uint8_t *data){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 8000a32:	2302      	movs	r3, #2
 8000a34:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	75fb      	strb	r3, [r7, #23]
 8000a3a:	e00c      	b.n	8000a56 <KeyboardSet+0x3a>
		data_out[i+1] = data[i];
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	441a      	add	r2, r3
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	3301      	adds	r3, #1
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	3318      	adds	r3, #24
 8000a4a:	443b      	add	r3, r7
 8000a4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	3301      	adds	r3, #1
 8000a54:	75fb      	strb	r3, [r7, #23]
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	2b07      	cmp	r3, #7
 8000a5a:	d9ef      	bls.n	8000a3c <KeyboardSet+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2209      	movs	r2, #9
 8000a62:	4619      	mov	r1, r3
 8000a64:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <KeyboardSet+0x58>)
 8000a66:	f007 fb23 	bl	80080b0 <USBD_HID_SendReport>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000e1c 	.word	0x20000e1c

08000a78 <KeyboardClick>:

void KeyboardClick(uint8_t *data){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	uint8_t data_out[9] = {};
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	711a      	strb	r2, [r3, #4]
	data_out[0] = 0x02;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	733b      	strb	r3, [r7, #12]
	for(uint8_t i =0; i<8; i++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	75fb      	strb	r3, [r7, #23]
 8000a96:	e00c      	b.n	8000ab2 <KeyboardClick+0x3a>
		data_out[i+1] = data[i];
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	441a      	add	r2, r3
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	7812      	ldrb	r2, [r2, #0]
 8000aa4:	3318      	adds	r3, #24
 8000aa6:	443b      	add	r3, r7
 8000aa8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i =0; i<8; i++)
 8000aac:	7dfb      	ldrb	r3, [r7, #23]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	75fb      	strb	r3, [r7, #23]
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	2b07      	cmp	r3, #7
 8000ab6:	d9ef      	bls.n	8000a98 <KeyboardClick+0x20>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2209      	movs	r2, #9
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <KeyboardClick+0x60>)
 8000ac2:	f007 faf5 	bl	80080b0 <USBD_HID_SendReport>
	HAL_Delay(30);
 8000ac6:	201e      	movs	r0, #30
 8000ac8:	f000 f9f2 	bl	8000eb0 <HAL_Delay>
	KeyboardRemove();
 8000acc:	f000 f806 	bl	8000adc <KeyboardRemove>
}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000e1c 	.word	0x20000e1c

08000adc <KeyboardRemove>:

void KeyboardRemove(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
	uint8_t data_out[9] = {0x02, 0, 0, 0, 0, 0, 0, 0, 0};
 8000ae2:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <KeyboardRemove+0x24>)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ae8:	c303      	stmia	r3!, {r0, r1}
 8000aea:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 9);
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2209      	movs	r2, #9
 8000af0:	4619      	mov	r1, r3
 8000af2:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <KeyboardRemove+0x28>)
 8000af4:	f007 fadc 	bl	80080b0 <USBD_HID_SendReport>
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	08008a50 	.word	0x08008a50
 8000b04:	20000e1c 	.word	0x20000e1c

08000b08 <MouseCommandSetup>:
 */

#include <modules/MouseModule.h>
extern USBD_HandleTypeDef hUsbDeviceFS;

void MouseCommandSetup(Action *act){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	switch(act->command){
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	785b      	ldrb	r3, [r3, #1]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d00c      	beq.n	8000b32 <MouseCommandSetup+0x2a>
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	dc13      	bgt.n	8000b44 <MouseCommandSetup+0x3c>
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d002      	beq.n	8000b26 <MouseCommandSetup+0x1e>
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d00c      	beq.n	8000b3e <MouseCommandSetup+0x36>
			break;
		case(REMOVE_COMMAND):
			MouseRemove();
			break;
	}
}
 8000b24:	e00e      	b.n	8000b44 <MouseCommandSetup+0x3c>
			MouseSet(act->data);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f80e 	bl	8000b4c <MouseSet>
			break;
 8000b30:	e008      	b.n	8000b44 <MouseCommandSetup+0x3c>
			MouseClick(act->data[0]);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	791b      	ldrb	r3, [r3, #4]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f836 	bl	8000ba8 <MouseClick>
			break;
 8000b3c:	e002      	b.n	8000b44 <MouseCommandSetup+0x3c>
			MouseRemove();
 8000b3e:	f000 f855 	bl	8000bec <MouseRemove>
			break;
 8000b42:	bf00      	nop
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <MouseSet>:

void MouseSet(uint8_t *data){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <MouseSet+0x54>)
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5e:	6018      	str	r0, [r3, #0]
 8000b60:	3304      	adds	r3, #4
 8000b62:	7019      	strb	r1, [r3, #0]
	for(uint8_t i=0; i<4; i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e00c      	b.n	8000b84 <MouseSet+0x38>
		data_out[i+1] = data[i];
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	441a      	add	r2, r3
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	3301      	adds	r3, #1
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	3310      	adds	r3, #16
 8000b78:	443b      	add	r3, r7
 8000b7a:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i=0; i<4; i++)
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	3301      	adds	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d9ef      	bls.n	8000b6a <MouseSet+0x1e>
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2205      	movs	r2, #5
 8000b90:	4619      	mov	r1, r3
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MouseSet+0x58>)
 8000b94:	f007 fa8c 	bl	80080b0 <USBD_HID_SendReport>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08008a5c 	.word	0x08008a5c
 8000ba4:	20000e1c 	.word	0x20000e1c

08000ba8 <MouseClick>:

void MouseClick(uint8_t buttons){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[5] = {0x01, buttons, 0, 0, 0};
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	723b      	strb	r3, [r7, #8]
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	727b      	strb	r3, [r7, #9]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	72bb      	strb	r3, [r7, #10]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	72fb      	strb	r3, [r7, #11]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	733b      	strb	r3, [r7, #12]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	2205      	movs	r2, #5
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <MouseClick+0x40>)
 8000bd0:	f007 fa6e 	bl	80080b0 <USBD_HID_SendReport>
	HAL_Delay(30);
 8000bd4:	201e      	movs	r0, #30
 8000bd6:	f000 f96b 	bl	8000eb0 <HAL_Delay>
	MouseRemove();
 8000bda:	f000 f807 	bl	8000bec <MouseRemove>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000e1c 	.word	0x20000e1c

08000bec <MouseRemove>:

void MouseRemove(){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	uint8_t data_out[5] = {0x01, 0, 0, 0, 0};
 8000bf2:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <MouseRemove+0x28>)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bfa:	6018      	str	r0, [r3, #0]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	7019      	strb	r1, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, data_out, 5);
 8000c00:	463b      	mov	r3, r7
 8000c02:	2205      	movs	r2, #5
 8000c04:	4619      	mov	r1, r3
 8000c06:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <MouseRemove+0x2c>)
 8000c08:	f007 fa52 	bl	80080b0 <USBD_HID_SendReport>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	08008a5c 	.word	0x08008a5c
 8000c18:	20000e1c 	.word	0x20000e1c

08000c1c <crc8>:
#ifndef INC_CRC8_H_
#define INC_CRC8_H_

#include "main.h"

uint8_t crc8(uint8_t *buffer, uint8_t size) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < size; i++) {
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73bb      	strb	r3, [r7, #14]
 8000c30:	e027      	b.n	8000c82 <crc8+0x66>
		uint8_t data = buffer[i];
 8000c32:	7bbb      	ldrb	r3, [r7, #14]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	e019      	b.n	8000c76 <crc8+0x5a>
		crc = ((crc ^ data) & 1) ? (crc >> 1) ^ 0x8C : (crc >> 1);
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	4053      	eors	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d007      	beq.n	8000c62 <crc8+0x46>
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	085b      	lsrs	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	e002      	b.n	8000c68 <crc8+0x4c>
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	085b      	lsrs	r3, r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	73fb      	strb	r3, [r7, #15]
		data >>= 1;
 8000c6a:	7b7b      	ldrb	r3, [r7, #13]
 8000c6c:	085b      	lsrs	r3, r3, #1
 8000c6e:	737b      	strb	r3, [r7, #13]
		for (int j = 8; j > 0; j--) {
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	dce2      	bgt.n	8000c42 <crc8+0x26>
	for (uint8_t i = 0; i < size; i++) {
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	73bb      	strb	r3, [r7, #14]
 8000c82:	7bba      	ldrb	r2, [r7, #14]
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3d3      	bcc.n	8000c32 <crc8+0x16>
		}
	}
	return crc;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
	...

08000c98 <answer>:
#include "controllers/UsartController.h"
#include "crc8.h"

extern UART_HandleTypeDef huart3;

void answer(uint8_t data){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_out[3] = {HEADER, data, 0};
 8000ca2:	23c5      	movs	r3, #197	@ 0xc5
 8000ca4:	733b      	strb	r3, [r7, #12]
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	737b      	strb	r3, [r7, #13]
 8000caa:	2300      	movs	r3, #0
 8000cac:	73bb      	strb	r3, [r7, #14]
	data_out[2] = crc8(data_out, 2);
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffb1 	bl	8000c1c <crc8>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, data_out, 3, 100);
 8000cbe:	f107 010c 	add.w	r1, r7, #12
 8000cc2:	2364      	movs	r3, #100	@ 0x64
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	4803      	ldr	r0, [pc, #12]	@ (8000cd4 <answer+0x3c>)
 8000cc8:	f002 feea 	bl	8003aa0 <HAL_UART_Transmit>
}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200005b4 	.word	0x200005b4

08000cd8 <ParsingData>:

#include <modules/UsartAnswerModule.h>
#include <modules/UsartParserModule.h>
#include "crc8.h"

void ParsingData(uint8_t *buffer, uint16_t len){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
	if(buffer[0] == HEADER){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2bc5      	cmp	r3, #197	@ 0xc5
 8000cea:	d152      	bne.n	8000d92 <ParsingData+0xba>
		uint16_t length_now = (uint16_t)buffer[3] | (uint16_t)(buffer[4] << 8);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3303      	adds	r3, #3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	81bb      	strh	r3, [r7, #12]
		if(length_now+6 == len){
 8000d02:	89bb      	ldrh	r3, [r7, #12]
 8000d04:	1d9a      	adds	r2, r3, #6
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d142      	bne.n	8000d92 <ParsingData+0xba>
			if(crc8(buffer, length_now+5) == buffer[length_now+5]){
 8000d0c:	89bb      	ldrh	r3, [r7, #12]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	3305      	adds	r3, #5
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff80 	bl	8000c1c <crc8>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	89bb      	ldrh	r3, [r7, #12]
 8000d22:	3305      	adds	r3, #5
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	d12e      	bne.n	8000d8c <ParsingData+0xb4>
				answer(USART_OK);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff ffb2 	bl	8000c98 <answer>
				action.command = buffer[2];
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	789a      	ldrb	r2, [r3, #2]
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <ParsingData+0xc4>)
 8000d3a:	705a      	strb	r2, [r3, #1]
				action.length = (uint16_t)buffer[3] | (uint16_t)(buffer[4] << 8);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3303      	adds	r3, #3
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3304      	adds	r3, #4
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <ParsingData+0xc4>)
 8000d54:	805a      	strh	r2, [r3, #2]
				for(uint8_t i=0; i<action.length; i++){
 8000d56:	2300      	movs	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e00c      	b.n	8000d76 <ParsingData+0x9e>
					action.data[i] = buffer[i+5];
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	3305      	adds	r3, #5
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	441a      	add	r2, r3
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	7811      	ldrb	r1, [r2, #0]
 8000d68:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <ParsingData+0xc4>)
 8000d6a:	4413      	add	r3, r2
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	711a      	strb	r2, [r3, #4]
				for(uint8_t i=0; i<action.length; i++){
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	3301      	adds	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <ParsingData+0xc4>)
 8000d7c:	885b      	ldrh	r3, [r3, #2]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d3ec      	bcc.n	8000d5c <ParsingData+0x84>
				}
				action.device = buffer[1];
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	785a      	ldrb	r2, [r3, #1]
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <ParsingData+0xc4>)
 8000d88:	701a      	strb	r2, [r3, #0]
			}else
				answer(USART_ERROR);
		}
	}
}
 8000d8a:	e002      	b.n	8000d92 <ParsingData+0xba>
				answer(USART_ERROR);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff ff83 	bl	8000c98 <answer>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000600 	.word	0x20000600

08000da0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da0:	f7ff fc20 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da4:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000da6:	490c      	ldr	r1, [pc, #48]	@ (8000dd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000da8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a09      	ldr	r2, [pc, #36]	@ (8000de0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dbc:	4c09      	ldr	r4, [pc, #36]	@ (8000de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dca:	f007 fe0b 	bl	80089e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dce:	f7ff fafb 	bl	80003c8 <main>
  bx lr
 8000dd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000ddc:	08008acc 	.word	0x08008acc
  ldr r2, =_sbss
 8000de0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000de4:	200015cc 	.word	0x200015cc

08000de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_2_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_Init+0x28>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_Init+0x28>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f947 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fb7a 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40022000 	.word	0x40022000

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f95f 	bl	80010fa <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f927 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	20000008 	.word	0x20000008

08000e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <HAL_IncTick+0x1c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a03      	ldr	r2, [pc, #12]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	2000000c 	.word	0x2000000c
 8000e98:	20000e14 	.word	0x20000e14

08000e9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b02      	ldr	r3, [pc, #8]	@ (8000eac <HAL_GetTick+0x10>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000e14 	.word	0x20000e14

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff fff0 	bl	8000e9c <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffe0 	bl	8000e9c <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000000c 	.word	0x2000000c

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4906      	ldr	r1, [pc, #24]	@ (8000f90 <__NVIC_EnableIRQ+0x34>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	@ (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	@ (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	@ 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff90 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff2d 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff42 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff90 	bl	8000fe8 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5f 	bl	8000f94 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff35 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d008      	beq.n	800113c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2204      	movs	r2, #4
 800112e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e020      	b.n	800117e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 020e 	bic.w	r2, r2, #14
 800114a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001164:	2101      	movs	r1, #1
 8001166:	fa01 f202 	lsl.w	r2, r1, r2
 800116a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d005      	beq.n	80011ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2204      	movs	r2, #4
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	e051      	b.n	8001250 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 020e 	bic.w	r2, r2, #14
 80011ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a22      	ldr	r2, [pc, #136]	@ (800125c <HAL_DMA_Abort_IT+0xd4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d029      	beq.n	800122a <HAL_DMA_Abort_IT+0xa2>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <HAL_DMA_Abort_IT+0xd8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d022      	beq.n	8001226 <HAL_DMA_Abort_IT+0x9e>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <HAL_DMA_Abort_IT+0xdc>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01a      	beq.n	8001220 <HAL_DMA_Abort_IT+0x98>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001268 <HAL_DMA_Abort_IT+0xe0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d012      	beq.n	800121a <HAL_DMA_Abort_IT+0x92>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1c      	ldr	r2, [pc, #112]	@ (800126c <HAL_DMA_Abort_IT+0xe4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00a      	beq.n	8001214 <HAL_DMA_Abort_IT+0x8c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1b      	ldr	r2, [pc, #108]	@ (8001270 <HAL_DMA_Abort_IT+0xe8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d102      	bne.n	800120e <HAL_DMA_Abort_IT+0x86>
 8001208:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800120c:	e00e      	b.n	800122c <HAL_DMA_Abort_IT+0xa4>
 800120e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001212:	e00b      	b.n	800122c <HAL_DMA_Abort_IT+0xa4>
 8001214:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001218:	e008      	b.n	800122c <HAL_DMA_Abort_IT+0xa4>
 800121a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121e:	e005      	b.n	800122c <HAL_DMA_Abort_IT+0xa4>
 8001220:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001224:	e002      	b.n	800122c <HAL_DMA_Abort_IT+0xa4>
 8001226:	2310      	movs	r3, #16
 8001228:	e000      	b.n	800122c <HAL_DMA_Abort_IT+0xa4>
 800122a:	2301      	movs	r3, #1
 800122c:	4a11      	ldr	r2, [pc, #68]	@ (8001274 <HAL_DMA_Abort_IT+0xec>)
 800122e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	4798      	blx	r3
    } 
  }
  return status;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020008 	.word	0x40020008
 8001260:	4002001c 	.word	0x4002001c
 8001264:	40020030 	.word	0x40020030
 8001268:	40020044 	.word	0x40020044
 800126c:	40020058 	.word	0x40020058
 8001270:	4002006c 	.word	0x4002006c
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b08b      	sub	sp, #44	@ 0x2c
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	e169      	b.n	8001560 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800128c:	2201      	movs	r2, #1
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8158 	bne.w	800155a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4a9a      	ldr	r2, [pc, #616]	@ (8001518 <HAL_GPIO_Init+0x2a0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d05e      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012b4:	4a98      	ldr	r2, [pc, #608]	@ (8001518 <HAL_GPIO_Init+0x2a0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d875      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012ba:	4a98      	ldr	r2, [pc, #608]	@ (800151c <HAL_GPIO_Init+0x2a4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d058      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012c0:	4a96      	ldr	r2, [pc, #600]	@ (800151c <HAL_GPIO_Init+0x2a4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d86f      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012c6:	4a96      	ldr	r2, [pc, #600]	@ (8001520 <HAL_GPIO_Init+0x2a8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d052      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012cc:	4a94      	ldr	r2, [pc, #592]	@ (8001520 <HAL_GPIO_Init+0x2a8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d869      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012d2:	4a94      	ldr	r2, [pc, #592]	@ (8001524 <HAL_GPIO_Init+0x2ac>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d04c      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012d8:	4a92      	ldr	r2, [pc, #584]	@ (8001524 <HAL_GPIO_Init+0x2ac>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d863      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012de:	4a92      	ldr	r2, [pc, #584]	@ (8001528 <HAL_GPIO_Init+0x2b0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d046      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012e4:	4a90      	ldr	r2, [pc, #576]	@ (8001528 <HAL_GPIO_Init+0x2b0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d85d      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d82a      	bhi.n	8001344 <HAL_GPIO_Init+0xcc>
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d859      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012f2:	a201      	add	r2, pc, #4	@ (adr r2, 80012f8 <HAL_GPIO_Init+0x80>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001373 	.word	0x08001373
 80012fc:	0800134d 	.word	0x0800134d
 8001300:	0800135f 	.word	0x0800135f
 8001304:	080013a1 	.word	0x080013a1
 8001308:	080013a7 	.word	0x080013a7
 800130c:	080013a7 	.word	0x080013a7
 8001310:	080013a7 	.word	0x080013a7
 8001314:	080013a7 	.word	0x080013a7
 8001318:	080013a7 	.word	0x080013a7
 800131c:	080013a7 	.word	0x080013a7
 8001320:	080013a7 	.word	0x080013a7
 8001324:	080013a7 	.word	0x080013a7
 8001328:	080013a7 	.word	0x080013a7
 800132c:	080013a7 	.word	0x080013a7
 8001330:	080013a7 	.word	0x080013a7
 8001334:	080013a7 	.word	0x080013a7
 8001338:	080013a7 	.word	0x080013a7
 800133c:	08001355 	.word	0x08001355
 8001340:	08001369 	.word	0x08001369
 8001344:	4a79      	ldr	r2, [pc, #484]	@ (800152c <HAL_GPIO_Init+0x2b4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800134a:	e02c      	b.n	80013a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e029      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	3304      	adds	r3, #4
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e024      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	3308      	adds	r3, #8
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e01f      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	330c      	adds	r3, #12
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e01a      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137a:	2304      	movs	r3, #4
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e013      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	2308      	movs	r3, #8
 800138a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	611a      	str	r2, [r3, #16]
          break;
 8001392:	e009      	b.n	80013a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001394:	2308      	movs	r3, #8
 8001396:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	615a      	str	r2, [r3, #20]
          break;
 800139e:	e003      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          break;
 80013a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2bff      	cmp	r3, #255	@ 0xff
 80013ac:	d801      	bhi.n	80013b2 <HAL_GPIO_Init+0x13a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	e001      	b.n	80013b6 <HAL_GPIO_Init+0x13e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3304      	adds	r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2bff      	cmp	r3, #255	@ 0xff
 80013bc:	d802      	bhi.n	80013c4 <HAL_GPIO_Init+0x14c>
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	e002      	b.n	80013ca <HAL_GPIO_Init+0x152>
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	3b08      	subs	r3, #8
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	210f      	movs	r1, #15
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	6a39      	ldr	r1, [r7, #32]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80b1 	beq.w	800155a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001530 <HAL_GPIO_Init+0x2b8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001530 <HAL_GPIO_Init+0x2b8>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b4a      	ldr	r3, [pc, #296]	@ (8001530 <HAL_GPIO_Init+0x2b8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <HAL_GPIO_Init+0x2bc>)
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a40      	ldr	r2, [pc, #256]	@ (8001538 <HAL_GPIO_Init+0x2c0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d013      	beq.n	8001464 <HAL_GPIO_Init+0x1ec>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a3f      	ldr	r2, [pc, #252]	@ (800153c <HAL_GPIO_Init+0x2c4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d00d      	beq.n	8001460 <HAL_GPIO_Init+0x1e8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a3e      	ldr	r2, [pc, #248]	@ (8001540 <HAL_GPIO_Init+0x2c8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d007      	beq.n	800145c <HAL_GPIO_Init+0x1e4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3d      	ldr	r2, [pc, #244]	@ (8001544 <HAL_GPIO_Init+0x2cc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d101      	bne.n	8001458 <HAL_GPIO_Init+0x1e0>
 8001454:	2303      	movs	r3, #3
 8001456:	e006      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001458:	2304      	movs	r3, #4
 800145a:	e004      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 800145c:	2302      	movs	r3, #2
 800145e:	e002      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001464:	2300      	movs	r3, #0
 8001466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001468:	f002 0203 	and.w	r2, r2, #3
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	4093      	lsls	r3, r2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001476:	492f      	ldr	r1, [pc, #188]	@ (8001534 <HAL_GPIO_Init+0x2bc>)
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001490:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	492c      	ldr	r1, [pc, #176]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	608b      	str	r3, [r1, #8]
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800149e:	4b2a      	ldr	r3, [pc, #168]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4928      	ldr	r1, [pc, #160]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b8:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	4922      	ldr	r1, [pc, #136]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014c6:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	491e      	ldr	r1, [pc, #120]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e0:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4918      	ldr	r1, [pc, #96]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4914      	ldr	r1, [pc, #80]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d021      	beq.n	800154c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	490e      	ldr	r1, [pc, #56]	@ (8001548 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
 8001514:	e021      	b.n	800155a <HAL_GPIO_Init+0x2e2>
 8001516:	bf00      	nop
 8001518:	10320000 	.word	0x10320000
 800151c:	10310000 	.word	0x10310000
 8001520:	10220000 	.word	0x10220000
 8001524:	10210000 	.word	0x10210000
 8001528:	10120000 	.word	0x10120000
 800152c:	10110000 	.word	0x10110000
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	40010800 	.word	0x40010800
 800153c:	40010c00 	.word	0x40010c00
 8001540:	40011000 	.word	0x40011000
 8001544:	40011400 	.word	0x40011400
 8001548:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_GPIO_Init+0x304>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	43db      	mvns	r3, r3
 8001554:	4909      	ldr	r1, [pc, #36]	@ (800157c <HAL_GPIO_Init+0x304>)
 8001556:	4013      	ands	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	3301      	adds	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	f47f ae8e 	bne.w	800128c <HAL_GPIO_Init+0x14>
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	372c      	adds	r7, #44	@ 0x2c
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	041a      	lsls	r2, r3, #16
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43d9      	mvns	r1, r3
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	400b      	ands	r3, r1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	611a      	str	r2, [r3, #16]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0e8      	b.n	80017c6 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d106      	bne.n	800160e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f006 ff5f 	bl	80084cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f003 f87a 	bl	800471a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3304      	adds	r3, #4
 800162e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001630:	f003 f850 	bl	80046d4 <USB_CoreInit>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2202      	movs	r2, #2
 800163e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0bf      	b.n	80017c6 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f003 f87e 	bl	800474e <USB_SetCurrentMode>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0b0      	b.n	80017c6 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e03e      	b.n	80016e8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	3311      	adds	r3, #17
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	3310      	adds	r3, #16
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	440b      	add	r3, r1
 80016a0:	3313      	adds	r3, #19
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	3320      	adds	r3, #32
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3324      	adds	r3, #36	@ 0x24
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	3301      	adds	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	791b      	ldrb	r3, [r3, #4]
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d3bb      	bcc.n	800166a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e044      	b.n	8001782 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800173a:	7bfa      	ldrb	r2, [r7, #15]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	3301      	adds	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	791b      	ldrb	r3, [r3, #4]
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	429a      	cmp	r2, r3
 800178a:	d3b5      	bcc.n	80016f8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3304      	adds	r3, #4
 8001794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001796:	f002 ffe6 	bl	8004766 <USB_DevInit>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2202      	movs	r2, #2
 80017a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e00c      	b.n	80017c6 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fa65 	bl	8006c8e <USB_DevDisconnect>

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_PCD_Start+0x16>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e016      	b.n	8001812 <HAL_PCD_Start+0x44>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 ff7c 	bl	80046ee <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017f6:	2101      	movs	r1, #1
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f007 f8b4 	bl	8008966 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f005 fa39 	bl	8006c7a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b088      	sub	sp, #32
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f005 fa3b 	bl	8006ca2 <USB_ReadInterrupts>
 800182c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fb03 	bl	8001e44 <PCD_EP_ISR_Handler>

    return;
 800183e:	e119      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001846:	2b00      	cmp	r3, #0
 8001848:	d013      	beq.n	8001872 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001852:	b29a      	uxth	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800185c:	b292      	uxth	r2, r2
 800185e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f006 fead 	bl	80085c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f905 	bl	8001a7a <HAL_PCD_SetAddress>

    return;
 8001870:	e100      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00c      	beq.n	8001896 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800188e:	b292      	uxth	r2, r2
 8001890:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001894:	e0ee      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80018b2:	b292      	uxth	r2, r2
 80018b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80018b8:	e0dc      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d027      	beq.n	8001914 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0204 	bic.w	r2, r2, #4
 80018d6:	b292      	uxth	r2, r2
 80018d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0208 	bic.w	r2, r2, #8
 80018ee:	b292      	uxth	r2, r2
 80018f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f006 fe9d 	bl	8008634 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001902:	b29a      	uxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800190c:	b292      	uxth	r2, r2
 800190e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001912:	e0af      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8083 	beq.w	8001a26 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	77fb      	strb	r3, [r7, #31]
 8001924:	e010      	b.n	8001948 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	7ffb      	ldrb	r3, [r7, #31]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	441a      	add	r2, r3
 8001932:	7ffb      	ldrb	r3, [r7, #31]
 8001934:	8812      	ldrh	r2, [r2, #0]
 8001936:	b292      	uxth	r2, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	3320      	adds	r3, #32
 800193c:	443b      	add	r3, r7
 800193e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	3301      	adds	r3, #1
 8001946:	77fb      	strb	r3, [r7, #31]
 8001948:	7ffb      	ldrb	r3, [r7, #31]
 800194a:	2b07      	cmp	r3, #7
 800194c:	d9eb      	bls.n	8001926 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001956:	b29a      	uxth	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	b292      	uxth	r2, r2
 8001962:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	b292      	uxth	r2, r2
 800197a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800197e:	bf00      	nop
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001988:	b29b      	uxth	r3, r3
 800198a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f6      	beq.n	8001980 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800199a:	b29a      	uxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019a4:	b292      	uxth	r2, r2
 80019a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	77fb      	strb	r3, [r7, #31]
 80019ae:	e00f      	b.n	80019d0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	4611      	mov	r1, r2
 80019b8:	7ffa      	ldrb	r2, [r7, #31]
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	440a      	add	r2, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	3320      	adds	r3, #32
 80019c2:	443b      	add	r3, r7
 80019c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80019c8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	3301      	adds	r3, #1
 80019ce:	77fb      	strb	r3, [r7, #31]
 80019d0:	7ffb      	ldrb	r3, [r7, #31]
 80019d2:	2b07      	cmp	r3, #7
 80019d4:	d9ec      	bls.n	80019b0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0208 	orr.w	r2, r2, #8
 80019e8:	b292      	uxth	r2, r2
 80019ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a00:	b292      	uxth	r2, r2
 8001a02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0204 	orr.w	r2, r2, #4
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f006 fdee 	bl	8008600 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a24:	e026      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00f      	beq.n	8001a50 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a42:	b292      	uxth	r2, r2
 8001a44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f006 fdac 	bl	80085a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a4e:	e011      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00c      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a6c:	b292      	uxth	r2, r2
 8001a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a72:	bf00      	nop
  }
}
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_PCD_SetAddress+0x1a>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e012      	b.n	8001aba <HAL_PCD_SetAddress+0x40>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 f8d2 	bl	8006c54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	4608      	mov	r0, r1
 8001acc:	4611      	mov	r1, r2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	70fb      	strb	r3, [r7, #3]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	803b      	strh	r3, [r7, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da0e      	bge.n	8001b06 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	f003 0207 	and.w	r2, r3, #7
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	3310      	adds	r3, #16
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2201      	movs	r2, #1
 8001b02:	705a      	strb	r2, [r3, #1]
 8001b04:	e00e      	b.n	8001b24 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 0207 	and.w	r2, r3, #7
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b30:	883a      	ldrh	r2, [r7, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	78ba      	ldrb	r2, [r7, #2]
 8001b3a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b3c:	78bb      	ldrb	r3, [r7, #2]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d102      	bne.n	8001b48 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_PCD_EP_Open+0x94>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e00e      	b.n	8001b74 <HAL_PCD_EP_Open+0xb2>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68f9      	ldr	r1, [r7, #12]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fe1b 	bl	80047a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001b72:	7afb      	ldrb	r3, [r7, #11]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da0e      	bge.n	8001bae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 0207 	and.w	r2, r3, #7
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	3310      	adds	r3, #16
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	705a      	strb	r2, [r3, #1]
 8001bac:	e00e      	b.n	8001bcc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f003 0207 	and.w	r2, r3, #7
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_PCD_EP_Close+0x6a>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e00e      	b.n	8001c04 <HAL_PCD_EP_Close+0x88>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 f993 	bl	8004f20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6979      	ldr	r1, [r7, #20]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 fb4a 	bl	80052f8 <USB_EPStartXfer>

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f003 0207 	and.w	r2, r3, #7
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	3310      	adds	r3, #16
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6979      	ldr	r1, [r7, #20]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fb13 	bl	80052f8 <USB_EPStartXfer>

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	7912      	ldrb	r2, [r2, #4]
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e04c      	b.n	8001d94 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da0e      	bge.n	8001d20 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 0207 	and.w	r2, r3, #7
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	3310      	adds	r3, #16
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	705a      	strb	r2, [r3, #1]
 8001d1e:	e00c      	b.n	8001d3a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_PCD_EP_SetStall+0x7e>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e01c      	b.n	8001d94 <HAL_PCD_EP_SetStall+0xb8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68f9      	ldr	r1, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fe76 	bl	8006a5a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d108      	bne.n	8001d8a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f004 ff9b 	bl	8006cc0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	7912      	ldrb	r2, [r2, #4]
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e040      	b.n	8001e3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da0e      	bge.n	8001de0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 0207 	and.w	r2, r3, #7
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	3310      	adds	r3, #16
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	705a      	strb	r2, [r3, #1]
 8001dde:	e00e      	b.n	8001dfe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 0207 	and.w	r2, r3, #7
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_PCD_EP_ClrStall+0x82>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e00e      	b.n	8001e3c <HAL_PCD_EP_ClrStall+0xa0>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68f9      	ldr	r1, [r7, #12]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 fe64 	bl	8006afa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	@ 0x58
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e4c:	e3bb      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001e68:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 8175 	bne.w	800215c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d14e      	bne.n	8001f1c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e8e:	81fb      	strh	r3, [r7, #14]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	89fb      	ldrh	r3, [r7, #14]
 8001e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3310      	adds	r3, #16
 8001ea6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	441a      	add	r2, r3
 8001ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f006 fb44 	bl	8008572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7b5b      	ldrb	r3, [r3, #13]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8368 	beq.w	80025c6 <PCD_EP_ISR_Handler+0x782>
 8001ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 8363 	bne.w	80025c6 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7b5b      	ldrb	r3, [r3, #13]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	735a      	strb	r2, [r3, #13]
 8001f1a:	e354      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f22:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d034      	beq.n	8001fa4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3306      	adds	r3, #6
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	f004 fef1 	bl	8006d60 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	823b      	strh	r3, [r7, #16]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	8a3a      	ldrh	r2, [r7, #16]
 8001f94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f006 fabb 	bl	8008518 <HAL_PCD_SetupStageCallback>
 8001fa2:	e310      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fa4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f280 830c 	bge.w	80025c6 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001fba:	4013      	ands	r3, r2
 8001fbc:	83fb      	strh	r3, [r7, #30]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	8bfa      	ldrh	r2, [r7, #30]
 8001fc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3306      	adds	r3, #6
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d019      	beq.n	8002034 <PCD_EP_ISR_Handler+0x1f0>
 8002000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200e:	6959      	ldr	r1, [r3, #20]
 8002010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002012:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002016:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002018:	b29b      	uxth	r3, r3
 800201a:	f004 fea1 	bl	8006d60 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800201e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	441a      	add	r2, r3
 8002028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800202c:	2100      	movs	r1, #0
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f006 fa84 	bl	800853c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800203e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 82bd 	bne.w	80025c6 <PCD_EP_ISR_Handler+0x782>
 800204c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002050:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002054:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002058:	f000 82b5 	beq.w	80025c6 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4413      	add	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002086:	b29a      	uxth	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	801a      	strh	r2, [r3, #0]
 800208c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b3e      	cmp	r3, #62	@ 0x3e
 8002092:	d91d      	bls.n	80020d0 <PCD_EP_ISR_Handler+0x28c>
 8002094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	647b      	str	r3, [r7, #68]	@ 0x44
 800209c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <PCD_EP_ISR_Handler+0x26a>
 80020a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020aa:	3b01      	subs	r3, #1
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	e026      	b.n	800211e <PCD_EP_ISR_Handler+0x2da>
 80020d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <PCD_EP_ISR_Handler+0x2aa>
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	801a      	strh	r2, [r3, #0]
 80020ec:	e017      	b.n	800211e <PCD_EP_ISR_Handler+0x2da>
 80020ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80020f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <PCD_EP_ISR_Handler+0x2c4>
 8002102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002104:	3301      	adds	r3, #1
 8002106:	647b      	str	r3, [r7, #68]	@ 0x44
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29a      	uxth	r2, r3
 800210e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002110:	b29b      	uxth	r3, r3
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	b29b      	uxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b29a      	uxth	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800212a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800212e:	827b      	strh	r3, [r7, #18]
 8002130:	8a7b      	ldrh	r3, [r7, #18]
 8002132:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002136:	827b      	strh	r3, [r7, #18]
 8002138:	8a7b      	ldrh	r3, [r7, #18]
 800213a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800213e:	827b      	strh	r3, [r7, #18]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	8a7b      	ldrh	r3, [r7, #18]
 8002146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800214a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800214e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002156:	b29b      	uxth	r3, r3
 8002158:	8013      	strh	r3, [r2, #0]
 800215a:	e234      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002170:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002174:	2b00      	cmp	r3, #0
 8002176:	f280 80fc 	bge.w	8002372 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29a      	uxth	r2, r3
 800218c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002190:	4013      	ands	r3, r2
 8002192:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80021a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021ac:	b292      	uxth	r2, r2
 80021ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021b0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c8:	7b1b      	ldrb	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d125      	bne.n	800221a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	3306      	adds	r3, #6
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80021fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8092 	beq.w	8002328 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220a:	6959      	ldr	r1, [r3, #20]
 800220c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220e:	88da      	ldrh	r2, [r3, #6]
 8002210:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002214:	f004 fda4 	bl	8006d60 <USB_ReadPMA>
 8002218:	e086      	b.n	8002328 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800221a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221c:	78db      	ldrb	r3, [r3, #3]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d10a      	bne.n	8002238 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002222:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002226:	461a      	mov	r2, r3
 8002228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f9d9 	bl	80025e2 <HAL_PCD_EP_DB_Receive>
 8002230:	4603      	mov	r3, r0
 8002232:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002236:	e077      	b.n	8002328 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800224e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002252:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	441a      	add	r2, r3
 8002264:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800226c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002274:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002278:	b29b      	uxth	r3, r3
 800227a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d024      	beq.n	80022e0 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800229e:	b29b      	uxth	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	3302      	adds	r3, #2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80022c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02e      	beq.n	8002328 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d0:	6959      	ldr	r1, [r3, #20]
 80022d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d4:	891a      	ldrh	r2, [r3, #8]
 80022d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022da:	f004 fd41 	bl	8006d60 <USB_ReadPMA>
 80022de:	e023      	b.n	8002328 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	3306      	adds	r3, #6
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002308:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800230c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800231a:	6959      	ldr	r1, [r3, #20]
 800231c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800231e:	895a      	ldrh	r2, [r3, #10]
 8002320:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002324:	f004 fd1c 	bl	8006d60 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002330:	441a      	add	r2, r3
 8002332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002334:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800233e:	441a      	add	r2, r3
 8002340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002342:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <PCD_EP_ISR_Handler+0x514>
 800234c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	d206      	bcs.n	8002366 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f006 f8ec 	bl	800853c <HAL_PCD_DataOutStageCallback>
 8002364:	e005      	b.n	8002372 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800236c:	4618      	mov	r0, r3
 800236e:	f002 ffc3 	bl	80052f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002372:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8123 	beq.w	80025c6 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002380:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	3310      	adds	r3, #16
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80023aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	441a      	add	r2, r3
 80023c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80023c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80023d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d2:	78db      	ldrb	r3, [r3, #3]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	f040 80a2 	bne.w	800251e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80023da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e2:	7b1b      	ldrb	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8093 	beq.w	8002510 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d046      	beq.n	8002484 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d126      	bne.n	800244c <PCD_EP_ISR_Handler+0x608>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	4413      	add	r3, r2
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
 8002416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	011a      	lsls	r2, r3, #4
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	4413      	add	r3, r2
 8002420:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002430:	b29a      	uxth	r2, r3
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002444:	b29a      	uxth	r2, r3
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e061      	b.n	8002510 <PCD_EP_ISR_Handler+0x6cc>
 800244c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d15d      	bne.n	8002510 <PCD_EP_ISR_Handler+0x6cc>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002468:	4413      	add	r3, r2
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800246c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	011a      	lsls	r2, r3, #4
 8002472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002474:	4413      	add	r3, r2
 8002476:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	e045      	b.n	8002510 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800248a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248c:	785b      	ldrb	r3, [r3, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d126      	bne.n	80024e0 <PCD_EP_ISR_Handler+0x69c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	637b      	str	r3, [r7, #52]	@ 0x34
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a6:	4413      	add	r3, r2
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80024aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	011a      	lsls	r2, r3, #4
 80024b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b2:	4413      	add	r3, r2
 80024b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d8:	b29a      	uxth	r2, r3
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	e017      	b.n	8002510 <PCD_EP_ISR_Handler+0x6cc>
 80024e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024e2:	785b      	ldrb	r3, [r3, #1]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d113      	bne.n	8002510 <PCD_EP_ISR_Handler+0x6cc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f6:	4413      	add	r3, r2
 80024f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	011a      	lsls	r2, r3, #4
 8002500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002502:	4413      	add	r3, r2
 8002504:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800250a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250c:	2200      	movs	r2, #0
 800250e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f006 f82b 	bl	8008572 <HAL_PCD_DataInStageCallback>
 800251c:	e053      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800251e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d146      	bne.n	80025b8 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	3302      	adds	r3, #2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002552:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800255e:	429a      	cmp	r2, r3
 8002560:	d907      	bls.n	8002572 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800256a:	1ad2      	subs	r2, r2, r3
 800256c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256e:	619a      	str	r2, [r3, #24]
 8002570:	e002      	b.n	8002578 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f005 fff3 	bl	8008572 <HAL_PCD_DataInStageCallback>
 800258c:	e01b      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800258e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002596:	441a      	add	r2, r3
 8002598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800259c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025a4:	441a      	add	r2, r3
 80025a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fea1 	bl	80052f8 <USB_EPStartXfer>
 80025b6:	e006      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025bc:	461a      	mov	r2, r3
 80025be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f91b 	bl	80027fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f6ff ac3b 	blt.w	8001e4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3758      	adds	r7, #88	@ 0x58
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b088      	sub	sp, #32
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	4613      	mov	r3, r2
 80025ee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d07e      	beq.n	80026f8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	3302      	adds	r3, #2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4413      	add	r3, r2
 8002618:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002622:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	8b7b      	ldrh	r3, [r7, #26]
 800262a:	429a      	cmp	r2, r3
 800262c:	d306      	bcc.n	800263c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	8b7b      	ldrh	r3, [r7, #26]
 8002634:	1ad2      	subs	r2, r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	619a      	str	r2, [r3, #24]
 800263a:	e002      	b.n	8002642 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d123      	bne.n	8002692 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002664:	833b      	strh	r3, [r7, #24]
 8002666:	8b3b      	ldrh	r3, [r7, #24]
 8002668:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800266c:	833b      	strh	r3, [r7, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	441a      	add	r2, r3
 800267c:	8b3b      	ldrh	r3, [r7, #24]
 800267e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800268a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800268e:	b29b      	uxth	r3, r3
 8002690:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01f      	beq.n	80026dc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b6:	82fb      	strh	r3, [r7, #22]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	8afb      	ldrh	r3, [r7, #22]
 80026c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80026d8:	b29b      	uxth	r3, r3
 80026da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026dc:	8b7b      	ldrh	r3, [r7, #26]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8087 	beq.w	80027f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	6959      	ldr	r1, [r3, #20]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	891a      	ldrh	r2, [r3, #8]
 80026f0:	8b7b      	ldrh	r3, [r7, #26]
 80026f2:	f004 fb35 	bl	8006d60 <USB_ReadPMA>
 80026f6:	e07c      	b.n	80027f2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	3306      	adds	r3, #6
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002720:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	8b7b      	ldrh	r3, [r7, #26]
 8002728:	429a      	cmp	r2, r3
 800272a:	d306      	bcc.n	800273a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	699a      	ldr	r2, [r3, #24]
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	619a      	str	r2, [r3, #24]
 8002738:	e002      	b.n	8002740 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d123      	bne.n	8002790 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800275e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002762:	83fb      	strh	r3, [r7, #30]
 8002764:	8bfb      	ldrh	r3, [r7, #30]
 8002766:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800276a:	83fb      	strh	r3, [r7, #30]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	8bfb      	ldrh	r3, [r7, #30]
 800277c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278c:	b29b      	uxth	r3, r3
 800278e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d11f      	bne.n	80027da <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b4:	83bb      	strh	r3, [r7, #28]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	8bbb      	ldrh	r3, [r7, #28]
 80027c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027da:	8b7b      	ldrh	r3, [r7, #26]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	6959      	ldr	r1, [r3, #20]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	895a      	ldrh	r2, [r3, #10]
 80027ec:	8b7b      	ldrh	r3, [r7, #26]
 80027ee:	f004 fab7 	bl	8006d60 <USB_ReadPMA>
    }
  }

  return count;
 80027f2:	8b7b      	ldrh	r3, [r7, #26]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0a4      	sub	sp, #144	@ 0x90
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 81dd 	beq.w	8002bd0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800281e:	b29b      	uxth	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	3302      	adds	r3, #2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800284a:	429a      	cmp	r2, r3
 800284c:	d907      	bls.n	800285e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002856:	1ad2      	subs	r2, r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	619a      	str	r2, [r3, #24]
 800285c:	e002      	b.n	8002864 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f040 80b9 	bne.w	80029e0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	785b      	ldrb	r3, [r3, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d126      	bne.n	80028c4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288a:	4413      	add	r3, r2
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	011a      	lsls	r2, r3, #4
 8002894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002896:	4413      	add	r3, r2
 8002898:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800289c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800289e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028bc:	b29a      	uxth	r2, r3
 80028be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c0:	801a      	strh	r2, [r3, #0]
 80028c2:	e01a      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d116      	bne.n	80028fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028da:	b29b      	uxth	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e0:	4413      	add	r3, r2
 80028e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	011a      	lsls	r2, r3, #4
 80028ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ec:	4413      	add	r3, r2
 80028ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80028f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80028f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f6:	2200      	movs	r2, #0
 80028f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d126      	bne.n	8002956 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	011a      	lsls	r2, r3, #4
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293a:	b29a      	uxth	r2, r3
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800294e:	b29a      	uxth	r2, r3
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	801a      	strh	r2, [r3, #0]
 8002954:	e017      	b.n	8002986 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d113      	bne.n	8002986 <HAL_PCD_EP_DB_Transmit+0x18a>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	4413      	add	r3, r2
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	011a      	lsls	r2, r3, #4
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	4413      	add	r3, r2
 800297a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	2200      	movs	r2, #0
 8002984:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f005 fdf0 	bl	8008572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 82fc 	beq.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b8:	82fb      	strh	r3, [r7, #22]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	441a      	add	r2, r3
 80029c8:	8afb      	ldrh	r3, [r7, #22]
 80029ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029da:	b29b      	uxth	r3, r3
 80029dc:	8013      	strh	r3, [r2, #0]
 80029de:	e2da      	b.n	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d021      	beq.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	441a      	add	r2, r3
 8002a16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	f040 82ae 	bne.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a42:	441a      	add	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a50:	441a      	add	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6a1a      	ldr	r2, [r3, #32]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d30b      	bcc.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	6a1a      	ldr	r2, [r3, #32]
 8002a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a72:	1ad2      	subs	r2, r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	621a      	str	r2, [r3, #32]
 8002a78:	e017      	b.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002a82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a92:	e00a      	b.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d165      	bne.n	8002b7e <HAL_PCD_EP_DB_Transmit+0x382>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac6:	4413      	add	r3, r2
 8002ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	011a      	lsls	r2, r3, #4
 8002ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aee:	2b3e      	cmp	r3, #62	@ 0x3e
 8002af0:	d91d      	bls.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x332>
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x310>
 8002b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	e044      	b.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x350>
 8002b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	e035      	b.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b62:	3301      	adds	r3, #1
 8002b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	e01c      	b.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	785b      	ldrb	r3, [r3, #1]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d118      	bne.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b9a:	4413      	add	r3, r2
 8002b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	011a      	lsls	r2, r3, #4
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bac:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bb6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	6959      	ldr	r1, [r3, #20]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	891a      	ldrh	r2, [r3, #8]
 8002bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f004 f884 	bl	8006cd6 <USB_WritePMA>
 8002bce:	e1e2      	b.n	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	3306      	adds	r3, #6
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d307      	bcc.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c10:	1ad2      	subs	r2, r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	619a      	str	r2, [r3, #24]
 8002c16:	e002      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 80c0 	bne.w	8002da8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d126      	bne.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x482>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c44:	4413      	add	r3, r2
 8002c46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	011a      	lsls	r2, r3, #4
 8002c4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c50:	4413      	add	r3, r2
 8002c52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	e01a      	b.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d116      	bne.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c9a:	4413      	add	r3, r2
 8002c9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	011a      	lsls	r2, r3, #4
 8002ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cac:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	785b      	ldrb	r3, [r3, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d12b      	bne.n	8002d1a <HAL_PCD_EP_DB_Transmit+0x51e>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cd6:	4413      	add	r3, r2
 8002cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	011a      	lsls	r2, r3, #4
 8002ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ce8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d16:	801a      	strh	r2, [r3, #0]
 8002d18:	e017      	b.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	785b      	ldrb	r3, [r3, #1]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d113      	bne.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d30:	4413      	add	r3, r2
 8002d32:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	011a      	lsls	r2, r3, #4
 8002d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d42:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d46:	2200      	movs	r2, #0
 8002d48:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f005 fc0e 	bl	8008572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 811a 	bne.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	441a      	add	r2, r3
 8002d8e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	8013      	strh	r3, [r2, #0]
 8002da6:	e0f6      	b.n	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d121      	bne.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dcc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	441a      	add	r2, r3
 8002dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	f040 80ca 	bne.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e18:	441a      	add	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d30b      	bcc.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e3a:	1ad2      	subs	r2, r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	621a      	str	r2, [r3, #32]
 8002e40:	e017      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d108      	bne.n	8002e5c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002e4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e5a:	e00a      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d165      	bne.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x750>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e94:	4413      	add	r3, r2
 8002e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	011a      	lsls	r2, r3, #4
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ebc:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ebe:	d91d      	bls.n	8002efc <HAL_PCD_EP_DB_Transmit+0x700>
 8002ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <HAL_PCD_EP_DB_Transmit+0x6de>
 8002ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	029b      	lsls	r3, r3, #10
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef8:	801a      	strh	r2, [r3, #0]
 8002efa:	e041      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002f04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	e032      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_PCD_EP_DB_Transmit+0x738>
 8002f2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f30:	3301      	adds	r3, #1
 8002f32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	029b      	lsls	r3, r3, #10
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	4313      	orrs	r3, r2
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f48:	801a      	strh	r2, [r3, #0]
 8002f4a:	e019      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d115      	bne.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f62:	4413      	add	r3, r2
 8002f64:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	011a      	lsls	r2, r3, #4
 8002f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6e:	4413      	add	r3, r2
 8002f70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f74:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f7e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6959      	ldr	r1, [r3, #20]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	895a      	ldrh	r2, [r3, #10]
 8002f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f003 fea0 	bl	8006cd6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fb0:	82bb      	strh	r3, [r7, #20]
 8002fb2:	8abb      	ldrh	r3, [r7, #20]
 8002fb4:	f083 0310 	eor.w	r3, r3, #16
 8002fb8:	82bb      	strh	r3, [r7, #20]
 8002fba:	8abb      	ldrh	r3, [r7, #20]
 8002fbc:	f083 0320 	eor.w	r3, r3, #32
 8002fc0:	82bb      	strh	r3, [r7, #20]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	441a      	add	r2, r3
 8002fd0:	8abb      	ldrh	r3, [r7, #20]
 8002fd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3790      	adds	r7, #144	@ 0x90
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	4613      	mov	r3, r2
 8003000:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300e:	897b      	ldrh	r3, [r7, #10]
 8003010:	f003 0207 	and.w	r2, r3, #7
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	3310      	adds	r3, #16
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e009      	b.n	800303a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003026:	897a      	ldrh	r2, [r7, #10]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800303a:	893b      	ldrh	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d107      	bne.n	8003050 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	b29a      	uxth	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	80da      	strh	r2, [r3, #6]
 800304e:	e00b      	b.n	8003068 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2201      	movs	r2, #1
 8003054:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	b29a      	uxth	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	b29a      	uxth	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e272      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8087 	beq.w	80031a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003094:	4b92      	ldr	r3, [pc, #584]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b04      	cmp	r3, #4
 800309e:	d00c      	beq.n	80030ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030a0:	4b8f      	ldr	r3, [pc, #572]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d112      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5e>
 80030ac:	4b8c      	ldr	r3, [pc, #560]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ba:	4b89      	ldr	r3, [pc, #548]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d06c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x12c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d168      	bne.n	80031a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e24c      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x76>
 80030dc:	4b80      	ldr	r3, [pc, #512]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a7f      	ldr	r2, [pc, #508]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e02e      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0x98>
 80030f2:	4b7b      	ldr	r3, [pc, #492]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a7a      	ldr	r2, [pc, #488]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b78      	ldr	r3, [pc, #480]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a77      	ldr	r2, [pc, #476]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003104:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0xbc>
 8003116:	4b72      	ldr	r3, [pc, #456]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a71      	ldr	r2, [pc, #452]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b6f      	ldr	r3, [pc, #444]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6e      	ldr	r2, [pc, #440]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 8003130:	4b6b      	ldr	r3, [pc, #428]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a6a      	ldr	r2, [pc, #424]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b68      	ldr	r3, [pc, #416]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a67      	ldr	r2, [pc, #412]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003146:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fd fea4 	bl	8000e9c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7fd fea0 	bl	8000e9c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e200      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b5d      	ldr	r3, [pc, #372]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xe4>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fd fe90 	bl	8000e9c <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fd fe8c 	bl	8000e9c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	@ 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1ec      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	4b53      	ldr	r3, [pc, #332]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x10c>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d063      	beq.n	8003276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ae:	4b4c      	ldr	r3, [pc, #304]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031ba:	4b49      	ldr	r3, [pc, #292]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x18c>
 80031c6:	4b46      	ldr	r3, [pc, #280]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b43      	ldr	r3, [pc, #268]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x176>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1c0      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3d      	ldr	r3, [pc, #244]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4939      	ldr	r1, [pc, #228]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b36      	ldr	r3, [pc, #216]	@ (80032e4 <HAL_RCC_OscConfig+0x270>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fd fe45 	bl	8000e9c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003216:	f7fd fe41 	bl	8000e9c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1a1      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b2d      	ldr	r3, [pc, #180]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b2a      	ldr	r3, [pc, #168]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4927      	ldr	r1, [pc, #156]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b26      	ldr	r3, [pc, #152]	@ (80032e4 <HAL_RCC_OscConfig+0x270>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fd fe24 	bl	8000e9c <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003258:	f7fd fe20 	bl	8000e9c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e180      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d03a      	beq.n	80032f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d019      	beq.n	80032be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b17      	ldr	r3, [pc, #92]	@ (80032e8 <HAL_RCC_OscConfig+0x274>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fd fe04 	bl	8000e9c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7fd fe00 	bl	8000e9c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e160      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032b6:	2001      	movs	r0, #1
 80032b8:	f000 face 	bl	8003858 <RCC_Delay>
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032be:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <HAL_RCC_OscConfig+0x274>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c4:	f7fd fdea 	bl	8000e9c <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ca:	e00f      	b.n	80032ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032cc:	f7fd fde6 	bl	8000e9c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d908      	bls.n	80032ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e146      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	42420000 	.word	0x42420000
 80032e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ec:	4b92      	ldr	r3, [pc, #584]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e9      	bne.n	80032cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80a6 	beq.w	8003452 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330a:	4b8b      	ldr	r3, [pc, #556]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	4b88      	ldr	r3, [pc, #544]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4a87      	ldr	r2, [pc, #540]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003320:	61d3      	str	r3, [r2, #28]
 8003322:	4b85      	ldr	r3, [pc, #532]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b82      	ldr	r3, [pc, #520]	@ (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b7f      	ldr	r3, [pc, #508]	@ (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7e      	ldr	r2, [pc, #504]	@ (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fd fda7 	bl	8000e9c <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fd fda3 	bl	8000e9c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b64      	cmp	r3, #100	@ 0x64
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e103      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b75      	ldr	r3, [pc, #468]	@ (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x312>
 8003378:	4b6f      	ldr	r3, [pc, #444]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a6e      	ldr	r2, [pc, #440]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6213      	str	r3, [r2, #32]
 8003384:	e02d      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x334>
 800338e:	4b6a      	ldr	r3, [pc, #424]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a69      	ldr	r2, [pc, #420]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6213      	str	r3, [r2, #32]
 800339a:	4b67      	ldr	r3, [pc, #412]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a66      	ldr	r2, [pc, #408]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	6213      	str	r3, [r2, #32]
 80033a6:	e01c      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0x356>
 80033b0:	4b61      	ldr	r3, [pc, #388]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4a60      	ldr	r2, [pc, #384]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6213      	str	r3, [r2, #32]
 80033bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	e00b      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 80033ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6213      	str	r3, [r2, #32]
 80033d6:	4b58      	ldr	r3, [pc, #352]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4a57      	ldr	r2, [pc, #348]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d015      	beq.n	8003416 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ea:	f7fd fd57 	bl	8000e9c <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fd fd53 	bl	8000e9c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0b1      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	4b4b      	ldr	r3, [pc, #300]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ee      	beq.n	80033f2 <HAL_RCC_OscConfig+0x37e>
 8003414:	e014      	b.n	8003440 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003416:	f7fd fd41 	bl	8000e9c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fd fd3d 	bl	8000e9c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e09b      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	4b40      	ldr	r3, [pc, #256]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b3c      	ldr	r3, [pc, #240]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4a3b      	ldr	r2, [pc, #236]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003450:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8087 	beq.w	800356a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345c:	4b36      	ldr	r3, [pc, #216]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d061      	beq.n	800352c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d146      	bne.n	80034fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b33      	ldr	r3, [pc, #204]	@ (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fd fd11 	bl	8000e9c <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fd fd0d 	bl	8000e9c <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e06d      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003490:	4b29      	ldr	r3, [pc, #164]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a4:	d108      	bne.n	80034b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034a6:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4921      	ldr	r1, [pc, #132]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a19      	ldr	r1, [r3, #32]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	430b      	orrs	r3, r1
 80034ca:	491b      	ldr	r1, [pc, #108]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fd fce1 	bl	8000e9c <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034de:	f7fd fcdd 	bl	8000e9c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e03d      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x46a>
 80034fc:	e035      	b.n	800356a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b10      	ldr	r3, [pc, #64]	@ (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fd fcca 	bl	8000e9c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fd fcc6 	bl	8000e9c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e026      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351e:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x498>
 800352a:	e01e      	b.n	800356a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e019      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
 8003540:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_RCC_OscConfig+0x500>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	429a      	cmp	r2, r3
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000

08003578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0d0      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b6a      	ldr	r3, [pc, #424]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d910      	bls.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b67      	ldr	r3, [pc, #412]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4965      	ldr	r1, [pc, #404]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b63      	ldr	r3, [pc, #396]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b8      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b59      	ldr	r3, [pc, #356]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a58      	ldr	r2, [pc, #352]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ec:	4b53      	ldr	r3, [pc, #332]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4a52      	ldr	r2, [pc, #328]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80035f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b50      	ldr	r3, [pc, #320]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494d      	ldr	r1, [pc, #308]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d040      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b47      	ldr	r3, [pc, #284]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d115      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07f      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b41      	ldr	r3, [pc, #260]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e073      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3d      	ldr	r3, [pc, #244]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06b      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b39      	ldr	r3, [pc, #228]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4936      	ldr	r1, [pc, #216]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7fd fc18 	bl	8000e9c <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fd fc14 	bl	8000e9c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e053      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2d      	ldr	r3, [pc, #180]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b27      	ldr	r3, [pc, #156]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d210      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b24      	ldr	r3, [pc, #144]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0207 	bic.w	r2, r3, #7
 80036ae:	4922      	ldr	r1, [pc, #136]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b20      	ldr	r3, [pc, #128]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e032      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b19      	ldr	r3, [pc, #100]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4916      	ldr	r1, [pc, #88]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036f2:	4b12      	ldr	r3, [pc, #72]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490e      	ldr	r1, [pc, #56]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003706:	f000 f821 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490a      	ldr	r1, [pc, #40]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a09      	ldr	r2, [pc, #36]	@ (8003744 <HAL_RCC_ClockConfig+0x1cc>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003722:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <HAL_RCC_ClockConfig+0x1d0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fb76 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40022000 	.word	0x40022000
 800373c:	40021000 	.word	0x40021000
 8003740:	08008a98 	.word	0x08008a98
 8003744:	20000000 	.word	0x20000000
 8003748:	20000008 	.word	0x20000008

0800374c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003766:	4b1e      	ldr	r3, [pc, #120]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d002      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x30>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d003      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x36>
 800377a:	e027      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800377c:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800377e:	613b      	str	r3, [r7, #16]
      break;
 8003780:	e027      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	0c9b      	lsrs	r3, r3, #18
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	4a17      	ldr	r2, [pc, #92]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800378c:	5cd3      	ldrb	r3, [r2, r3]
 800378e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d010      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800379a:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	0c5b      	lsrs	r3, r3, #17
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	4a11      	ldr	r2, [pc, #68]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ae:	fb03 f202 	mul.w	r2, r3, r2
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e004      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a0c      	ldr	r2, [pc, #48]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	613b      	str	r3, [r7, #16]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ce:	613b      	str	r3, [r7, #16]
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	693b      	ldr	r3, [r7, #16]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	007a1200 	.word	0x007a1200
 80037e8:	08008ab0 	.word	0x08008ab0
 80037ec:	08008ac0 	.word	0x08008ac0
 80037f0:	003d0900 	.word	0x003d0900

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b02      	ldr	r3, [pc, #8]	@ (8003804 <HAL_RCC_GetHCLKFreq+0x10>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	20000000 	.word	0x20000000

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800380c:	f7ff fff2 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	@ (800382c <HAL_RCC_GetPCLK1Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	08008aa8 	.word	0x08008aa8

08003830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003834:	f7ff ffde 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	0adb      	lsrs	r3, r3, #11
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	4903      	ldr	r1, [pc, #12]	@ (8003854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800384c:	4618      	mov	r0, r3
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	08008aa8 	.word	0x08008aa8

08003858 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003860:	4b0a      	ldr	r3, [pc, #40]	@ (800388c <RCC_Delay+0x34>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0a      	ldr	r2, [pc, #40]	@ (8003890 <RCC_Delay+0x38>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	0a5b      	lsrs	r3, r3, #9
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003874:	bf00      	nop
  }
  while (Delay --);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	60fa      	str	r2, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f9      	bne.n	8003874 <RCC_Delay+0x1c>
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	20000000 	.word	0x20000000
 8003890:	10624dd3 	.word	0x10624dd3

08003894 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d07d      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038b0:	2300      	movs	r3, #0
 80038b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b4:	4b4f      	ldr	r3, [pc, #316]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10d      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c0:	4b4c      	ldr	r3, [pc, #304]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	4a4b      	ldr	r2, [pc, #300]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	61d3      	str	r3, [r2, #28]
 80038cc:	4b49      	ldr	r3, [pc, #292]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	4b46      	ldr	r3, [pc, #280]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d118      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e8:	4b43      	ldr	r3, [pc, #268]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a42      	ldr	r2, [pc, #264]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f4:	f7fd fad2 	bl	8000e9c <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	e008      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fc:	f7fd face 	bl	8000e9c <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	@ 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e06d      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	4b3a      	ldr	r3, [pc, #232]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800391a:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003922:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d02e      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	429a      	cmp	r2, r3
 8003936:	d027      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003938:	4b2e      	ldr	r3, [pc, #184]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003940:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003942:	4b2e      	ldr	r3, [pc, #184]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003948:	4b2c      	ldr	r3, [pc, #176]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800394e:	4a29      	ldr	r2, [pc, #164]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d014      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7fd fa9d 	bl	8000e9c <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd fa99 	bl	8000e9c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e036      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	4b1d      	ldr	r3, [pc, #116]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ee      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003988:	4b1a      	ldr	r3, [pc, #104]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4917      	ldr	r1, [pc, #92]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003996:	4313      	orrs	r3, r2
 8003998:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800399a:	7dfb      	ldrb	r3, [r7, #23]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d105      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a0:	4b14      	ldr	r3, [pc, #80]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4a13      	ldr	r2, [pc, #76]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b8:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	490b      	ldr	r1, [pc, #44]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039d6:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	4904      	ldr	r1, [pc, #16]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
 80039fc:	42420440 	.word	0x42420440

08003a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e042      	b.n	8003a98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fc fc7a 	bl	8000320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2224      	movs	r2, #36	@ 0x24
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fdb7 	bl	80045b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	@ 0x28
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d175      	bne.n	8003bac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_UART_Transmit+0x2c>
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e06e      	b.n	8003bae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2221      	movs	r2, #33	@ 0x21
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ade:	f7fd f9dd 	bl	8000e9c <HAL_GetTick>
 8003ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	88fa      	ldrh	r2, [r7, #6]
 8003aee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af8:	d108      	bne.n	8003b0c <HAL_UART_Transmit+0x6c>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d104      	bne.n	8003b0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e003      	b.n	8003b14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b14:	e02e      	b.n	8003b74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2180      	movs	r1, #128	@ 0x80
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fb1c 	bl	800415e <UART_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e03a      	b.n	8003bae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	3302      	adds	r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e007      	b.n	8003b66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	3301      	adds	r3, #1
 8003b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1cb      	bne.n	8003b16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2200      	movs	r2, #0
 8003b86:	2140      	movs	r1, #64	@ 0x40
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fae8 	bl	800415e <UART_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e006      	b.n	8003bae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d112      	bne.n	8003bf6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_UART_Receive_IT+0x26>
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e00b      	b.n	8003bf8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	461a      	mov	r2, r3
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fb0f 	bl	8004210 <UART_Start_Receive_IT>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	e000      	b.n	8003bf8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b0ba      	sub	sp, #232	@ 0xe8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10f      	bne.n	8003c66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_UART_IRQHandler+0x66>
 8003c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fbec 	bl	800443c <UART_Receive_IT>
      return;
 8003c64:	e25b      	b.n	800411e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80de 	beq.w	8003e2c <HAL_UART_IRQHandler+0x22c>
 8003c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80d1 	beq.w	8003e2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_UART_IRQHandler+0xae>
 8003c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_UART_IRQHandler+0xd2>
 8003cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_UART_IRQHandler+0xf6>
 8003cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	f043 0204 	orr.w	r2, r3, #4
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d011      	beq.n	8003d26 <HAL_UART_IRQHandler+0x126>
 8003d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	f043 0208 	orr.w	r2, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 81f2 	beq.w	8004114 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_UART_IRQHandler+0x14e>
 8003d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fb77 	bl	800443c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <HAL_UART_IRQHandler+0x17a>
 8003d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d04f      	beq.n	8003e1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa81 	bl	8004282 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d041      	beq.n	8003e12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3314      	adds	r3, #20
 8003d94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1d9      	bne.n	8003d8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d013      	beq.n	8003e0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe0 <HAL_UART_IRQHandler+0x3e0>)
 8003de8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd f9ca 	bl	8001188 <HAL_DMA_Abort_IT>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e04:	4610      	mov	r0, r2
 8003e06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	e00e      	b.n	8003e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f993 	bl	8004136 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	e00a      	b.n	8003e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f98f 	bl	8004136 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	e006      	b.n	8003e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f98b 	bl	8004136 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e26:	e175      	b.n	8004114 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	bf00      	nop
    return;
 8003e2a:	e173      	b.n	8004114 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	f040 814f 	bne.w	80040d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8148 	beq.w	80040d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8141 	beq.w	80040d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80b6 	beq.w	8003fe4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8145 	beq.w	8004118 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e96:	429a      	cmp	r2, r3
 8003e98:	f080 813e 	bcs.w	8004118 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ea2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	f000 8088 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ece:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003edc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ee0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ee8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1d9      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3314      	adds	r3, #20
 8003f02:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f20:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f24:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e1      	bne.n	8003efc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3314      	adds	r3, #20
 8003f58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f5c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e3      	bne.n	8003f38 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f90:	f023 0310 	bic.w	r3, r3, #16
 8003f94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fa2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fa4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e3      	bne.n	8003f7e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fd f8a9 	bl	8001112 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8b6 	bl	8004148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fdc:	e09c      	b.n	8004118 <HAL_UART_IRQHandler+0x518>
 8003fde:	bf00      	nop
 8003fe0:	08004347 	.word	0x08004347
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 808e 	beq.w	800411c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8089 	beq.w	800411c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800401a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004020:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800402e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004030:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004034:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800403c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e3      	bne.n	800400a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	623b      	str	r3, [r7, #32]
   return(result);
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3314      	adds	r3, #20
 8004062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004066:	633a      	str	r2, [r7, #48]	@ 0x30
 8004068:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800406c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e3      	bne.n	8004042 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	60fb      	str	r3, [r7, #12]
   return(result);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0310 	bic.w	r3, r3, #16
 800409e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040ac:	61fa      	str	r2, [r7, #28]
 80040ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	69b9      	ldr	r1, [r7, #24]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	617b      	str	r3, [r7, #20]
   return(result);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e3      	bne.n	8004088 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040ca:	4619      	mov	r1, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f83b 	bl	8004148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040d2:	e023      	b.n	800411c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <HAL_UART_IRQHandler+0x4f4>
 80040e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f93e 	bl	800436e <UART_Transmit_IT>
    return;
 80040f2:	e014      	b.n	800411e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00e      	beq.n	800411e <HAL_UART_IRQHandler+0x51e>
 8004100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f97d 	bl	800440c <UART_EndTransmit_IT>
    return;
 8004112:	e004      	b.n	800411e <HAL_UART_IRQHandler+0x51e>
    return;
 8004114:	bf00      	nop
 8004116:	e002      	b.n	800411e <HAL_UART_IRQHandler+0x51e>
      return;
 8004118:	bf00      	nop
 800411a:	e000      	b.n	800411e <HAL_UART_IRQHandler+0x51e>
      return;
 800411c:	bf00      	nop
  }
}
 800411e:	37e8      	adds	r7, #232	@ 0xe8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b086      	sub	sp, #24
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	4613      	mov	r3, r2
 800416c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416e:	e03b      	b.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d037      	beq.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004178:	f7fc fe90 	bl	8000e9c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	6a3a      	ldr	r2, [r7, #32]
 8004184:	429a      	cmp	r2, r3
 8004186:	d302      	bcc.n	800418e <UART_WaitOnFlagUntilTimeout+0x30>
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e03a      	b.n	8004208 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d023      	beq.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b80      	cmp	r3, #128	@ 0x80
 80041a4:	d020      	beq.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b40      	cmp	r3, #64	@ 0x40
 80041aa:	d01d      	beq.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d116      	bne.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f856 	bl	8004282 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2208      	movs	r2, #8
 80041da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e00f      	b.n	8004208 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4013      	ands	r3, r2
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	bf0c      	ite	eq
 80041f8:	2301      	moveq	r3, #1
 80041fa:	2300      	movne	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	429a      	cmp	r2, r3
 8004204:	d0b4      	beq.n	8004170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	88fa      	ldrh	r2, [r7, #6]
 800422e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2222      	movs	r2, #34	@ 0x22
 800423a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004254:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0220 	orr.w	r2, r2, #32
 8004274:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004282:	b480      	push	{r7}
 8004284:	b095      	sub	sp, #84	@ 0x54
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80042ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e5      	bne.n	800428a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3314      	adds	r3, #20
 80042c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3314      	adds	r3, #20
 80042dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d119      	bne.n	800432e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	60bb      	str	r3, [r7, #8]
   return(result);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f023 0310 	bic.w	r3, r3, #16
 8004310:	647b      	str	r3, [r7, #68]	@ 0x44
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800431a:	61ba      	str	r2, [r7, #24]
 800431c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6979      	ldr	r1, [r7, #20]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	613b      	str	r3, [r7, #16]
   return(result);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e5      	bne.n	80042fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800433c:	bf00      	nop
 800433e:	3754      	adds	r7, #84	@ 0x54
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff fee8 	bl	8004136 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b21      	cmp	r3, #33	@ 0x21
 8004380:	d13e      	bne.n	8004400 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438a:	d114      	bne.n	80043b6 <UART_Transmit_IT+0x48>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d110      	bne.n	80043b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	621a      	str	r2, [r3, #32]
 80043b4:	e008      	b.n	80043c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	1c59      	adds	r1, r3, #1
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6211      	str	r1, [r2, #32]
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4619      	mov	r1, r3
 80043d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10f      	bne.n	80043fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004400:	2302      	movs	r3, #2
  }
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004422:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff fe79 	bl	8004124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08c      	sub	sp, #48	@ 0x30
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b22      	cmp	r3, #34	@ 0x22
 800444e:	f040 80ae 	bne.w	80045ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445a:	d117      	bne.n	800448c <UART_Receive_IT+0x50>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d113      	bne.n	800448c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447a:	b29a      	uxth	r2, r3
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	629a      	str	r2, [r3, #40]	@ 0x28
 800448a:	e026      	b.n	80044da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449e:	d007      	beq.n	80044b0 <UART_Receive_IT+0x74>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10a      	bne.n	80044be <UART_Receive_IT+0x82>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	e008      	b.n	80044d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4619      	mov	r1, r3
 80044e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d15d      	bne.n	80045aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0220 	bic.w	r2, r2, #32
 80044fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800450c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004530:	2b01      	cmp	r3, #1
 8004532:	d135      	bne.n	80045a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	613b      	str	r3, [r7, #16]
   return(result);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f023 0310 	bic.w	r3, r3, #16
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800455a:	623a      	str	r2, [r7, #32]
 800455c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	69f9      	ldr	r1, [r7, #28]
 8004560:	6a3a      	ldr	r2, [r7, #32]
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	61bb      	str	r3, [r7, #24]
   return(result);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e5      	bne.n	800453a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b10      	cmp	r3, #16
 800457a:	d10a      	bne.n	8004592 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff fdd5 	bl	8004148 <HAL_UARTEx_RxEventCallback>
 800459e:	e002      	b.n	80045a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7fb fdd3 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e002      	b.n	80045b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e000      	b.n	80045b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
  }
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3730      	adds	r7, #48	@ 0x30
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80045f2:	f023 030c 	bic.w	r3, r3, #12
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	430b      	orrs	r3, r1
 80045fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2c      	ldr	r2, [pc, #176]	@ (80046cc <UART_SetConfig+0x114>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d103      	bne.n	8004628 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004620:	f7ff f906 	bl	8003830 <HAL_RCC_GetPCLK2Freq>
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	e002      	b.n	800462e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004628:	f7ff f8ee 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 800462c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009a      	lsls	r2, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	4a22      	ldr	r2, [pc, #136]	@ (80046d0 <UART_SetConfig+0x118>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	0119      	lsls	r1, r3, #4
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009a      	lsls	r2, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	fbb2 f2f3 	udiv	r2, r2, r3
 8004664:	4b1a      	ldr	r3, [pc, #104]	@ (80046d0 <UART_SetConfig+0x118>)
 8004666:	fba3 0302 	umull	r0, r3, r3, r2
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	2064      	movs	r0, #100	@ 0x64
 800466e:	fb00 f303 	mul.w	r3, r0, r3
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	3332      	adds	r3, #50	@ 0x32
 8004678:	4a15      	ldr	r2, [pc, #84]	@ (80046d0 <UART_SetConfig+0x118>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004684:	4419      	add	r1, r3
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009a      	lsls	r2, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	fbb2 f2f3 	udiv	r2, r2, r3
 800469c:	4b0c      	ldr	r3, [pc, #48]	@ (80046d0 <UART_SetConfig+0x118>)
 800469e:	fba3 0302 	umull	r0, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2064      	movs	r0, #100	@ 0x64
 80046a6:	fb00 f303 	mul.w	r3, r0, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	3332      	adds	r3, #50	@ 0x32
 80046b0:	4a07      	ldr	r2, [pc, #28]	@ (80046d0 <UART_SetConfig+0x118>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	440a      	add	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40013800 	.word	0x40013800
 80046d0:	51eb851f 	.word	0x51eb851f

080046d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	4638      	mov	r0, r7
 80046de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046fe:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004702:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004722:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004726:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	b29b      	uxth	r3, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	b29b      	uxth	r3, r3
 8004738:	4013      	ands	r3, r2
 800473a:	b29a      	uxth	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr

0800474e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	4638      	mov	r0, r7
 8004770:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b09d      	sub	sp, #116	@ 0x74
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80047c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	78db      	ldrb	r3, [r3, #3]
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d81f      	bhi.n	8004812 <USB_ActivateEndpoint+0x72>
 80047d2:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <USB_ActivateEndpoint+0x38>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	080047e9 	.word	0x080047e9
 80047dc:	08004805 	.word	0x08004805
 80047e0:	0800481b 	.word	0x0800481b
 80047e4:	080047f7 	.word	0x080047f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80047e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80047f4:	e012      	b.n	800481c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80047f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047fa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80047fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004802:	e00b      	b.n	800481c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004804:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004808:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800480c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004810:	e004      	b.n	800481c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004818:	e000      	b.n	800481c <USB_ActivateEndpoint+0x7c>
      break;
 800481a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800482a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800482e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800483a:	b29b      	uxth	r3, r3
 800483c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004854:	b29b      	uxth	r3, r3
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800486e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800487a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800487e:	b29b      	uxth	r3, r3
 8004880:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	7b1b      	ldrb	r3, [r3, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 8178 	bne.w	8004b7c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	785b      	ldrb	r3, [r3, #1]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8084 	beq.w	800499e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	4413      	add	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	011a      	lsls	r2, r3, #4
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	88db      	ldrh	r3, [r3, #6]
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	827b      	strh	r3, [r7, #18]
 80048d8:	8a7b      	ldrh	r3, [r7, #18]
 80048da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01b      	beq.n	800491a <USB_ActivateEndpoint+0x17a>
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f8:	823b      	strh	r3, [r7, #16]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	441a      	add	r2, r3
 8004904:	8a3b      	ldrh	r3, [r7, #16]
 8004906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800490a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800490e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004912:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004916:	b29b      	uxth	r3, r3
 8004918:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	78db      	ldrb	r3, [r3, #3]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d020      	beq.n	8004964 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004934:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004938:	81bb      	strh	r3, [r7, #12]
 800493a:	89bb      	ldrh	r3, [r7, #12]
 800493c:	f083 0320 	eor.w	r3, r3, #32
 8004940:	81bb      	strh	r3, [r7, #12]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	89bb      	ldrh	r3, [r7, #12]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800495a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]
 8004962:	e2d5      	b.n	8004f10 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497a:	81fb      	strh	r3, [r7, #14]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	441a      	add	r2, r3
 8004986:	89fb      	ldrh	r3, [r7, #14]
 8004988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800498c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004998:	b29b      	uxth	r3, r3
 800499a:	8013      	strh	r3, [r2, #0]
 800499c:	e2b8      	b.n	8004f10 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	4413      	add	r3, r2
 80049b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	011a      	lsls	r2, r3, #4
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80049c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	88db      	ldrh	r3, [r3, #6]
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049dc:	b29b      	uxth	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	4413      	add	r3, r2
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	011a      	lsls	r2, r3, #4
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	4413      	add	r3, r2
 80049f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a0c:	d91d      	bls.n	8004a4a <USB_ActivateEndpoint+0x2aa>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <USB_ActivateEndpoint+0x288>
 8004a22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a24:	3b01      	subs	r3, #1
 8004a26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	029b      	lsls	r3, r3, #10
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	4313      	orrs	r3, r2
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	e026      	b.n	8004a98 <USB_ActivateEndpoint+0x2f8>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <USB_ActivateEndpoint+0x2c8>
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	801a      	strh	r2, [r3, #0]
 8004a66:	e017      	b.n	8004a98 <USB_ActivateEndpoint+0x2f8>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <USB_ActivateEndpoint+0x2e2>
 8004a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a7e:	3301      	adds	r3, #1
 8004a80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	029b      	lsls	r3, r3, #10
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4313      	orrs	r3, r2
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004aa6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01b      	beq.n	8004ae8 <USB_ActivateEndpoint+0x348>
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	843b      	strh	r3, [r7, #32]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	8c3b      	ldrh	r3, [r7, #32]
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004adc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d124      	bne.n	8004b3a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b06:	83bb      	strh	r3, [r7, #28]
 8004b08:	8bbb      	ldrh	r3, [r7, #28]
 8004b0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004b0e:	83bb      	strh	r3, [r7, #28]
 8004b10:	8bbb      	ldrh	r3, [r7, #28]
 8004b12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b16:	83bb      	strh	r3, [r7, #28]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	8bbb      	ldrh	r3, [r7, #28]
 8004b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
 8004b38:	e1ea      	b.n	8004f10 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b50:	83fb      	strh	r3, [r7, #30]
 8004b52:	8bfb      	ldrh	r3, [r7, #30]
 8004b54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b58:	83fb      	strh	r3, [r7, #30]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	8bfb      	ldrh	r3, [r7, #30]
 8004b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8013      	strh	r3, [r2, #0]
 8004b7a:	e1c9      	b.n	8004f10 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	78db      	ldrb	r3, [r3, #3]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d11e      	bne.n	8004bc2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bb4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8013      	strh	r3, [r2, #0]
 8004bc0:	e01d      	b.n	8004bfe <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	441a      	add	r2, r3
 8004be6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004bea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c0e:	4413      	add	r3, r2
 8004c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	011a      	lsls	r2, r3, #4
 8004c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	891b      	ldrh	r3, [r3, #8]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c42:	4413      	add	r3, r2
 8004c44:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	011a      	lsls	r2, r3, #4
 8004c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004c54:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	895b      	ldrh	r3, [r3, #10]
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c64:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 8093 	bne.w	8004d96 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004c80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01b      	beq.n	8004cc4 <USB_ActivateEndpoint+0x524>
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004cd2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01b      	beq.n	8004d14 <USB_ActivateEndpoint+0x574>
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004d2c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004d2e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d32:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004d34:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004d36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d3a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d72:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	8013      	strh	r3, [r2, #0]
 8004d94:	e0bc      	b.n	8004f10 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004da6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01d      	beq.n	8004dee <USB_ActivateEndpoint+0x64e>
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	441a      	add	r2, r3
 8004dd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004de2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004dfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01d      	beq.n	8004e46 <USB_ActivateEndpoint+0x6a6>
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e20:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	441a      	add	r2, r3
 8004e2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	78db      	ldrb	r3, [r3, #3]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d024      	beq.n	8004e98 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e64:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004e68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e6c:	f083 0320 	eor.w	r3, r3, #32
 8004e70:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]
 8004e96:	e01d      	b.n	8004ed4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004efc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004f10:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3774      	adds	r7, #116	@ 0x74
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bc80      	pop	{r7}
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop

08004f20 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b08d      	sub	sp, #52	@ 0x34
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	7b1b      	ldrb	r3, [r3, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 808e 	bne.w	8005050 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d044      	beq.n	8004fc6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	81bb      	strh	r3, [r7, #12]
 8004f4a:	89bb      	ldrh	r3, [r7, #12]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01b      	beq.n	8004f8c <USB_DeactivateEndpoint+0x6c>
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6a:	817b      	strh	r3, [r7, #10]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	441a      	add	r2, r3
 8004f76:	897b      	ldrh	r3, [r7, #10]
 8004f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fa2:	813b      	strh	r3, [r7, #8]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	441a      	add	r2, r3
 8004fae:	893b      	ldrh	r3, [r7, #8]
 8004fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	8013      	strh	r3, [r2, #0]
 8004fc4:	e192      	b.n	80052ec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	827b      	strh	r3, [r7, #18]
 8004fd4:	8a7b      	ldrh	r3, [r7, #18]
 8004fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01b      	beq.n	8005016 <USB_DeactivateEndpoint+0xf6>
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff4:	823b      	strh	r3, [r7, #16]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	8a3b      	ldrh	r3, [r7, #16]
 8005002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800500a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800500e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502c:	81fb      	strh	r3, [r7, #14]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	89fb      	ldrh	r3, [r7, #14]
 800503a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800503e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005042:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]
 800504e:	e14d      	b.n	80052ec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	785b      	ldrb	r3, [r3, #1]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f040 80a5 	bne.w	80051a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	843b      	strh	r3, [r7, #32]
 8005068:	8c3b      	ldrh	r3, [r7, #32]
 800506a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01b      	beq.n	80050aa <USB_DeactivateEndpoint+0x18a>
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005088:	83fb      	strh	r3, [r7, #30]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	8bfb      	ldrh	r3, [r7, #30]
 8005096:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800509a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800509e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	83bb      	strh	r3, [r7, #28]
 80050b8:	8bbb      	ldrh	r3, [r7, #28]
 80050ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01b      	beq.n	80050fa <USB_DeactivateEndpoint+0x1da>
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d8:	837b      	strh	r3, [r7, #26]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	8b7b      	ldrh	r3, [r7, #26]
 80050e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800510c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005110:	833b      	strh	r3, [r7, #24]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	8b3b      	ldrh	r3, [r7, #24]
 800511e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800512a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800512e:	b29b      	uxth	r3, r3
 8005130:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005148:	82fb      	strh	r3, [r7, #22]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	8afb      	ldrh	r3, [r7, #22]
 8005156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800515a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800515e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005166:	b29b      	uxth	r3, r3
 8005168:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800517c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005180:	82bb      	strh	r3, [r7, #20]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	8abb      	ldrh	r3, [r7, #20]
 800518e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800519a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800519e:	b29b      	uxth	r3, r3
 80051a0:	8013      	strh	r3, [r2, #0]
 80051a2:	e0a3      	b.n	80052ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80051b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80051b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <USB_DeactivateEndpoint+0x2d4>
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005202:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01b      	beq.n	8005244 <USB_DeactivateEndpoint+0x324>
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	b29b      	uxth	r3, r3
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005222:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	441a      	add	r2, r3
 800522e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800523c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005240:	b29b      	uxth	r3, r3
 8005242:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	441a      	add	r2, r3
 8005266:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800526c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005278:	b29b      	uxth	r3, r3
 800527a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800528e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005292:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	441a      	add	r2, r3
 800529e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	441a      	add	r2, r3
 80052d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3734      	adds	r7, #52	@ 0x34
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b0c2      	sub	sp, #264	@ 0x108
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005306:	6018      	str	r0, [r3, #0]
 8005308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005310:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b01      	cmp	r3, #1
 8005320:	f040 86b7 	bne.w	8006092 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	429a      	cmp	r2, r3
 800533e:	d908      	bls.n	8005352 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005350:	e007      	b.n	8005362 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	7b1b      	ldrb	r3, [r3, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d13a      	bne.n	80053e8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6959      	ldr	r1, [r3, #20]
 800537e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	88da      	ldrh	r2, [r3, #6]
 800538a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538e:	b29b      	uxth	r3, r3
 8005390:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005394:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005398:	6800      	ldr	r0, [r0, #0]
 800539a:	f001 fc9c 	bl	8006cd6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800539e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	011a      	lsls	r2, r3, #4
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	f000 be1f 	b.w	8006026 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80053e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	78db      	ldrb	r3, [r3, #3]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	f040 8462 	bne.w	8005cbe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80053fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	429a      	cmp	r2, r3
 8005414:	f240 83df 	bls.w	8005bd6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800543a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005460:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005464:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005468:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800546c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005470:	b29b      	uxth	r3, r3
 8005472:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6a1a      	ldr	r2, [r3, #32]
 8005480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005484:	1ad2      	subs	r2, r2, r3
 8005486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 81c7 	beq.w	8005848 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d177      	bne.n	80055c6 <USB_EPStartXfer+0x2ce>
 80054d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f6:	4413      	add	r3, r2
 80054f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	011a      	lsls	r2, r3, #4
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	4413      	add	r3, r2
 800550c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800551c:	b29a      	uxth	r2, r3
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	801a      	strh	r2, [r3, #0]
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005526:	2b3e      	cmp	r3, #62	@ 0x3e
 8005528:	d921      	bls.n	800556e <USB_EPStartXfer+0x276>
 800552a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <USB_EPStartXfer+0x252>
 8005540:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005544:	3b01      	subs	r3, #1
 8005546:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29a      	uxth	r2, r3
 8005550:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005554:	b29b      	uxth	r3, r3
 8005556:	029b      	lsls	r3, r3, #10
 8005558:	b29b      	uxth	r3, r3
 800555a:	4313      	orrs	r3, r2
 800555c:	b29b      	uxth	r3, r3
 800555e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005566:	b29a      	uxth	r2, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e050      	b.n	8005610 <USB_EPStartXfer+0x318>
 800556e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <USB_EPStartXfer+0x294>
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005584:	b29a      	uxth	r2, r3
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	801a      	strh	r2, [r3, #0]
 800558a:	e041      	b.n	8005610 <USB_EPStartXfer+0x318>
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <USB_EPStartXfer+0x2b4>
 80055a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80055a6:	3301      	adds	r3, #1
 80055a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	029b      	lsls	r3, r3, #10
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	4313      	orrs	r3, r2
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	e024      	b.n	8005610 <USB_EPStartXfer+0x318>
 80055c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	785b      	ldrb	r3, [r3, #1]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d11c      	bne.n	8005610 <USB_EPStartXfer+0x318>
 80055d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	4413      	add	r3, r2
 80055ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	011a      	lsls	r2, r3, #4
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	4413      	add	r3, r2
 8005600:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800560a:	b29a      	uxth	r2, r3
 800560c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	895b      	ldrh	r3, [r3, #10]
 800561c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6959      	ldr	r1, [r3, #20]
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005630:	b29b      	uxth	r3, r3
 8005632:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005636:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800563a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800563e:	6800      	ldr	r0, [r0, #0]
 8005640:	f001 fb49 	bl	8006cd6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005654:	441a      	add	r2, r3
 8005656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6a1a      	ldr	r2, [r3, #32]
 800566e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	429a      	cmp	r2, r3
 800567c:	d90f      	bls.n	800569e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800567e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a1a      	ldr	r2, [r3, #32]
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	621a      	str	r2, [r3, #32]
 800569c:	e00e      	b.n	80056bc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800569e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80056ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2200      	movs	r2, #0
 80056ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d177      	bne.n	80057bc <USB_EPStartXfer+0x4c4>
 80056cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	4413      	add	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	011a      	lsls	r2, r3, #4
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	4413      	add	r3, r2
 8005702:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005712:	b29a      	uxth	r2, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571c:	2b3e      	cmp	r3, #62	@ 0x3e
 800571e:	d921      	bls.n	8005764 <USB_EPStartXfer+0x46c>
 8005720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <USB_EPStartXfer+0x448>
 8005736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573a:	3b01      	subs	r3, #1
 800573c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29a      	uxth	r2, r3
 8005746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800574a:	b29b      	uxth	r3, r3
 800574c:	029b      	lsls	r3, r3, #10
 800574e:	b29b      	uxth	r3, r3
 8005750:	4313      	orrs	r3, r2
 8005752:	b29b      	uxth	r3, r3
 8005754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800575c:	b29a      	uxth	r2, r3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	e056      	b.n	8005812 <USB_EPStartXfer+0x51a>
 8005764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <USB_EPStartXfer+0x48a>
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577a:	b29a      	uxth	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	e047      	b.n	8005812 <USB_EPStartXfer+0x51a>
 8005782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <USB_EPStartXfer+0x4aa>
 8005798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800579c:	3301      	adds	r3, #1
 800579e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	029b      	lsls	r3, r3, #10
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	4313      	orrs	r3, r2
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	e02a      	b.n	8005812 <USB_EPStartXfer+0x51a>
 80057bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d122      	bne.n	8005812 <USB_EPStartXfer+0x51a>
 80057cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	623b      	str	r3, [r7, #32]
 80057d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	4413      	add	r3, r2
 80057ee:	623b      	str	r3, [r7, #32]
 80057f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	011a      	lsls	r2, r3, #4
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	4413      	add	r3, r2
 8005802:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580c:	b29a      	uxth	r2, r3
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	891b      	ldrh	r3, [r3, #8]
 800581e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6959      	ldr	r1, [r3, #20]
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005832:	b29b      	uxth	r3, r3
 8005834:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005838:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800583c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005840:	6800      	ldr	r0, [r0, #0]
 8005842:	f001 fa48 	bl	8006cd6 <USB_WritePMA>
 8005846:	e3ee      	b.n	8006026 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d177      	bne.n	8005948 <USB_EPStartXfer+0x650>
 8005858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005872:	b29b      	uxth	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005878:	4413      	add	r3, r2
 800587a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800587c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	011a      	lsls	r2, r3, #4
 800588a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800588c:	4413      	add	r3, r2
 800588e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005892:	647b      	str	r3, [r7, #68]	@ 0x44
 8005894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29b      	uxth	r3, r3
 800589a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800589e:	b29a      	uxth	r2, r3
 80058a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80058aa:	d921      	bls.n	80058f0 <USB_EPStartXfer+0x5f8>
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <USB_EPStartXfer+0x5d4>
 80058c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058c6:	3b01      	subs	r3, #1
 80058c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	029b      	lsls	r3, r3, #10
 80058da:	b29b      	uxth	r3, r3
 80058dc:	4313      	orrs	r3, r2
 80058de:	b29b      	uxth	r3, r3
 80058e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	e056      	b.n	800599e <USB_EPStartXfer+0x6a6>
 80058f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <USB_EPStartXfer+0x616>
 80058f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005906:	b29a      	uxth	r2, r3
 8005908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	e047      	b.n	800599e <USB_EPStartXfer+0x6a6>
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <USB_EPStartXfer+0x636>
 8005924:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005928:	3301      	adds	r3, #1
 800592a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800592e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29a      	uxth	r2, r3
 8005934:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005938:	b29b      	uxth	r3, r3
 800593a:	029b      	lsls	r3, r3, #10
 800593c:	b29b      	uxth	r3, r3
 800593e:	4313      	orrs	r3, r2
 8005940:	b29a      	uxth	r2, r3
 8005942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e02a      	b.n	800599e <USB_EPStartXfer+0x6a6>
 8005948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d122      	bne.n	800599e <USB_EPStartXfer+0x6a6>
 8005958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	653b      	str	r3, [r7, #80]	@ 0x50
 8005964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005972:	b29b      	uxth	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005978:	4413      	add	r3, r2
 800597a:	653b      	str	r3, [r7, #80]	@ 0x50
 800597c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	011a      	lsls	r2, r3, #4
 800598a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800598c:	4413      	add	r3, r2
 800598e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005998:	b29a      	uxth	r2, r3
 800599a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800599c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800599e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	891b      	ldrh	r3, [r3, #8]
 80059aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6959      	ldr	r1, [r3, #20]
 80059ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059cc:	6800      	ldr	r0, [r0, #0]
 80059ce:	f001 f982 	bl	8006cd6 <USB_WritePMA>
            ep->xfer_buff += len;
 80059d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695a      	ldr	r2, [r3, #20]
 80059de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e2:	441a      	add	r2, r3
 80059e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d90f      	bls.n	8005a2c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1c:	1ad2      	subs	r2, r2, r3
 8005a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	621a      	str	r2, [r3, #32]
 8005a2a:	e00e      	b.n	8005a4a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2200      	movs	r2, #0
 8005a48:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d177      	bne.n	8005b56 <USB_EPStartXfer+0x85e>
 8005a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a86:	4413      	add	r3, r2
 8005a88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	011a      	lsls	r2, r3, #4
 8005a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ab8:	d921      	bls.n	8005afe <USB_EPStartXfer+0x806>
 8005aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <USB_EPStartXfer+0x7e2>
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	029b      	lsls	r3, r3, #10
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	4313      	orrs	r3, r2
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	e050      	b.n	8005ba0 <USB_EPStartXfer+0x8a8>
 8005afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10a      	bne.n	8005b1c <USB_EPStartXfer+0x824>
 8005b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	e041      	b.n	8005ba0 <USB_EPStartXfer+0x8a8>
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <USB_EPStartXfer+0x844>
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	3301      	adds	r3, #1
 8005b38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	029b      	lsls	r3, r3, #10
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	e024      	b.n	8005ba0 <USB_EPStartXfer+0x8a8>
 8005b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	785b      	ldrb	r3, [r3, #1]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d11c      	bne.n	8005ba0 <USB_EPStartXfer+0x8a8>
 8005b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b7a:	4413      	add	r3, r2
 8005b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	011a      	lsls	r2, r3, #4
 8005b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b8e:	4413      	add	r3, r2
 8005b90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	895b      	ldrh	r3, [r3, #10]
 8005bac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6959      	ldr	r1, [r3, #20]
 8005bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bc6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bce:	6800      	ldr	r0, [r0, #0]
 8005bd0:	f001 f881 	bl	8006cd6 <USB_WritePMA>
 8005bd4:	e227      	b.n	8006026 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	441a      	add	r2, r3
 8005c2a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c62:	4413      	add	r3, r2
 8005c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	011a      	lsls	r2, r3, #4
 8005c74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	891b      	ldrh	r3, [r3, #8]
 8005c94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6959      	ldr	r1, [r3, #20]
 8005ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005cae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005cb2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005cb6:	6800      	ldr	r0, [r0, #0]
 8005cb8:	f001 f80d 	bl	8006cd6 <USB_WritePMA>
 8005cbc:	e1b3      	b.n	8006026 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6a1a      	ldr	r2, [r3, #32]
 8005cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 80c6 	beq.w	8005e90 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d177      	bne.n	8005e10 <USB_EPStartXfer+0xb18>
 8005d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d40:	4413      	add	r3, r2
 8005d42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	011a      	lsls	r2, r3, #4
 8005d52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d54:	4413      	add	r3, r2
 8005d56:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d70:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d72:	d921      	bls.n	8005db8 <USB_EPStartXfer+0xac0>
 8005d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <USB_EPStartXfer+0xa9c>
 8005d8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4313      	orrs	r3, r2
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	e050      	b.n	8005e5a <USB_EPStartXfer+0xb62>
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <USB_EPStartXfer+0xade>
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e041      	b.n	8005e5a <USB_EPStartXfer+0xb62>
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <USB_EPStartXfer+0xafe>
 8005dec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005df0:	3301      	adds	r3, #1
 8005df2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	029b      	lsls	r3, r3, #10
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	4313      	orrs	r3, r2
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e024      	b.n	8005e5a <USB_EPStartXfer+0xb62>
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d11c      	bne.n	8005e5a <USB_EPStartXfer+0xb62>
 8005e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e34:	4413      	add	r3, r2
 8005e36:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	011a      	lsls	r2, r3, #4
 8005e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e48:	4413      	add	r3, r2
 8005e4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	895b      	ldrh	r3, [r3, #10]
 8005e66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6959      	ldr	r1, [r3, #20]
 8005e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e88:	6800      	ldr	r0, [r0, #0]
 8005e8a:	f000 ff24 	bl	8006cd6 <USB_WritePMA>
 8005e8e:	e0ca      	b.n	8006026 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	785b      	ldrb	r3, [r3, #1]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d177      	bne.n	8005f90 <USB_EPStartXfer+0xc98>
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ec0:	4413      	add	r3, r2
 8005ec2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	011a      	lsls	r2, r3, #4
 8005ed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005eda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ef2:	d921      	bls.n	8005f38 <USB_EPStartXfer+0xc40>
 8005ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <USB_EPStartXfer+0xc1c>
 8005f0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	029b      	lsls	r3, r3, #10
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	4313      	orrs	r3, r2
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	e05c      	b.n	8005ff2 <USB_EPStartXfer+0xcfa>
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <USB_EPStartXfer+0xc5e>
 8005f40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	e04d      	b.n	8005ff2 <USB_EPStartXfer+0xcfa>
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <USB_EPStartXfer+0xc7e>
 8005f6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f70:	3301      	adds	r3, #1
 8005f72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	029b      	lsls	r3, r3, #10
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f8c:	801a      	strh	r2, [r3, #0]
 8005f8e:	e030      	b.n	8005ff2 <USB_EPStartXfer+0xcfa>
 8005f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d128      	bne.n	8005ff2 <USB_EPStartXfer+0xcfa>
 8005fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	011a      	lsls	r2, r3, #4
 8005fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fdc:	4413      	add	r3, r2
 8005fde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fe2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ff0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	891b      	ldrh	r3, [r3, #8]
 8005ffe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6959      	ldr	r1, [r3, #20]
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006012:	b29b      	uxth	r3, r3
 8006014:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006018:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800601c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006020:	6800      	ldr	r0, [r0, #0]
 8006022:	f000 fe58 	bl	8006cd6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800604c:	817b      	strh	r3, [r7, #10]
 800604e:	897b      	ldrh	r3, [r7, #10]
 8006050:	f083 0310 	eor.w	r3, r3, #16
 8006054:	817b      	strh	r3, [r7, #10]
 8006056:	897b      	ldrh	r3, [r7, #10]
 8006058:	f083 0320 	eor.w	r3, r3, #32
 800605c:	817b      	strh	r3, [r7, #10]
 800605e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	441a      	add	r2, r3
 8006078:	897b      	ldrh	r3, [r7, #10]
 800607a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800607e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608a:	b29b      	uxth	r3, r3
 800608c:	8013      	strh	r3, [r2, #0]
 800608e:	f000 bcde 	b.w	8006a4e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	7b1b      	ldrb	r3, [r3, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 80bb 	bne.w	800621a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80060a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d917      	bls.n	80060f0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e0:	1ad2      	subs	r2, r2, r3
 80060e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	619a      	str	r2, [r3, #24]
 80060ee:	e00e      	b.n	800610e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80060f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006132:	4413      	add	r3, r2
 8006134:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800614a:	4413      	add	r3, r2
 800614c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006150:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006160:	b29a      	uxth	r2, r3
 8006162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616c:	2b3e      	cmp	r3, #62	@ 0x3e
 800616e:	d924      	bls.n	80061ba <USB_EPStartXfer+0xec2>
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <USB_EPStartXfer+0xe98>
 8006186:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800618a:	3b01      	subs	r3, #1
 800618c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006190:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29a      	uxth	r2, r3
 8006198:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800619c:	b29b      	uxth	r3, r3
 800619e:	029b      	lsls	r3, r3, #10
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	4313      	orrs	r3, r2
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	f000 bc10 	b.w	80069da <USB_EPStartXfer+0x16e2>
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10c      	bne.n	80061dc <USB_EPStartXfer+0xee4>
 80061c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	e3fe      	b.n	80069da <USB_EPStartXfer+0x16e2>
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e0:	085b      	lsrs	r3, r3, #1
 80061e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <USB_EPStartXfer+0xf04>
 80061f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80061f6:	3301      	adds	r3, #1
 80061f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29a      	uxth	r2, r3
 8006204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006208:	b29b      	uxth	r3, r3
 800620a:	029b      	lsls	r3, r3, #10
 800620c:	b29b      	uxth	r3, r3
 800620e:	4313      	orrs	r3, r2
 8006210:	b29a      	uxth	r2, r3
 8006212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	e3df      	b.n	80069da <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800621a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	78db      	ldrb	r3, [r3, #3]
 8006226:	2b02      	cmp	r3, #2
 8006228:	f040 8218 	bne.w	800665c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800622c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 809d 	bne.w	8006378 <USB_EPStartXfer+0x1080>
 800623e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800625a:	b29b      	uxth	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006262:	4413      	add	r3, r2
 8006264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	011a      	lsls	r2, r3, #4
 8006276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800627a:	4413      	add	r3, r2
 800627c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006290:	b29a      	uxth	r2, r3
 8006292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80062a6:	d92b      	bls.n	8006300 <USB_EPStartXfer+0x1008>
 80062a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 031f 	and.w	r3, r3, #31
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d104      	bne.n	80062d8 <USB_EPStartXfer+0xfe0>
 80062ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d2:	3b01      	subs	r3, #1
 80062d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29a      	uxth	r2, r3
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	029b      	lsls	r3, r3, #10
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	4313      	orrs	r3, r2
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062fc:	801a      	strh	r2, [r3, #0]
 80062fe:	e070      	b.n	80063e2 <USB_EPStartXfer+0x10ea>
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10c      	bne.n	800632a <USB_EPStartXfer+0x1032>
 8006310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006320:	b29a      	uxth	r2, r3
 8006322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	e05b      	b.n	80063e2 <USB_EPStartXfer+0x10ea>
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	085b      	lsrs	r3, r3, #1
 8006338:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800633c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <USB_EPStartXfer+0x1062>
 8006350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006354:	3301      	adds	r3, #1
 8006356:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800635a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29a      	uxth	r2, r3
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006366:	b29b      	uxth	r3, r3
 8006368:	029b      	lsls	r3, r3, #10
 800636a:	b29b      	uxth	r3, r3
 800636c:	4313      	orrs	r3, r2
 800636e:	b29a      	uxth	r2, r3
 8006370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e034      	b.n	80063e2 <USB_EPStartXfer+0x10ea>
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d12c      	bne.n	80063e2 <USB_EPStartXfer+0x10ea>
 8006388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	461a      	mov	r2, r3
 80063a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063ac:	4413      	add	r3, r2
 80063ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	011a      	lsls	r2, r3, #4
 80063c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	b29a      	uxth	r2, r3
 80063dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	785b      	ldrb	r3, [r3, #1]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 809d 	bne.w	800653c <USB_EPStartXfer+0x1244>
 8006402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800641e:	b29b      	uxth	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006426:	4413      	add	r3, r2
 8006428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800642c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	011a      	lsls	r2, r3, #4
 800643a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800643e:	4413      	add	r3, r2
 8006440:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006454:	b29a      	uxth	r2, r3
 8006456:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b3e      	cmp	r3, #62	@ 0x3e
 800646a:	d92b      	bls.n	80064c4 <USB_EPStartXfer+0x11cc>
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 031f 	and.w	r3, r3, #31
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <USB_EPStartXfer+0x11a4>
 8006492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006496:	3b01      	subs	r3, #1
 8006498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800649c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	029b      	lsls	r3, r3, #10
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	4313      	orrs	r3, r2
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064c0:	801a      	strh	r2, [r3, #0]
 80064c2:	e069      	b.n	8006598 <USB_EPStartXfer+0x12a0>
 80064c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10c      	bne.n	80064ee <USB_EPStartXfer+0x11f6>
 80064d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	e054      	b.n	8006598 <USB_EPStartXfer+0x12a0>
 80064ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <USB_EPStartXfer+0x1226>
 8006514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006518:	3301      	adds	r3, #1
 800651a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800651e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29a      	uxth	r2, r3
 8006526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800652a:	b29b      	uxth	r3, r3
 800652c:	029b      	lsls	r3, r3, #10
 800652e:	b29b      	uxth	r3, r3
 8006530:	4313      	orrs	r3, r2
 8006532:	b29a      	uxth	r2, r3
 8006534:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006538:	801a      	strh	r2, [r3, #0]
 800653a:	e02d      	b.n	8006598 <USB_EPStartXfer+0x12a0>
 800653c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d125      	bne.n	8006598 <USB_EPStartXfer+0x12a0>
 800654c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006562:	4413      	add	r3, r2
 8006564:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	011a      	lsls	r2, r3, #4
 8006576:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800657a:	4413      	add	r3, r2
 800657c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006580:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	b29a      	uxth	r2, r3
 8006592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006596:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8218 	beq.w	80069da <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80065aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <USB_EPStartXfer+0x12ea>
 80065d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10d      	bne.n	80065fe <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f040 81f5 	bne.w	80069da <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 81ee 	bne.w	80069da <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006624:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	441a      	add	r2, r3
 8006642:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800664a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800664e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006652:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006656:	b29b      	uxth	r3, r3
 8006658:	8013      	strh	r3, [r2, #0]
 800665a:	e1be      	b.n	80069da <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	78db      	ldrb	r3, [r3, #3]
 8006668:	2b01      	cmp	r3, #1
 800666a:	f040 81b4 	bne.w	80069d6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800666e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	429a      	cmp	r2, r3
 8006688:	d917      	bls.n	80066ba <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800668a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800669a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066aa:	1ad2      	subs	r2, r2, r3
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	619a      	str	r2, [r3, #24]
 80066b8:	e00e      	b.n	80066d8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80066ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80066ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2200      	movs	r2, #0
 80066d6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f040 8085 	bne.w	80067f4 <USB_EPStartXfer+0x14fc>
 80066ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006706:	b29b      	uxth	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800670e:	4413      	add	r3, r2
 8006710:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	011a      	lsls	r2, r3, #4
 8006722:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006726:	4413      	add	r3, r2
 8006728:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800672c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006748:	2b3e      	cmp	r3, #62	@ 0x3e
 800674a:	d923      	bls.n	8006794 <USB_EPStartXfer+0x149c>
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	2b00      	cmp	r3, #0
 8006760:	d104      	bne.n	800676c <USB_EPStartXfer+0x1474>
 8006762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006766:	3b01      	subs	r3, #1
 8006768:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800676c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29a      	uxth	r2, r3
 8006774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006778:	b29b      	uxth	r3, r3
 800677a:	029b      	lsls	r3, r3, #10
 800677c:	b29b      	uxth	r3, r3
 800677e:	4313      	orrs	r3, r2
 8006780:	b29b      	uxth	r3, r3
 8006782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678a:	b29a      	uxth	r2, r3
 800678c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	e060      	b.n	8006856 <USB_EPStartXfer+0x155e>
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10c      	bne.n	80067b6 <USB_EPStartXfer+0x14be>
 800679c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e04f      	b.n	8006856 <USB_EPStartXfer+0x155e>
 80067b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <USB_EPStartXfer+0x14de>
 80067cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067d0:	3301      	adds	r3, #1
 80067d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80067d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	b29a      	uxth	r2, r3
 80067de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	029b      	lsls	r3, r3, #10
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	4313      	orrs	r3, r2
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e030      	b.n	8006856 <USB_EPStartXfer+0x155e>
 80067f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d128      	bne.n	8006856 <USB_EPStartXfer+0x155e>
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006828:	4413      	add	r3, r2
 800682a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800682e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	011a      	lsls	r2, r3, #4
 800683c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006840:	4413      	add	r3, r2
 8006842:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006846:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684e:	b29a      	uxth	r2, r3
 8006850:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	785b      	ldrb	r3, [r3, #1]
 8006870:	2b00      	cmp	r3, #0
 8006872:	f040 8085 	bne.w	8006980 <USB_EPStartXfer+0x1688>
 8006876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800689a:	4413      	add	r3, r2
 800689c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80068a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	011a      	lsls	r2, r3, #4
 80068ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80068b2:	4413      	add	r3, r2
 80068b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80068d6:	d923      	bls.n	8006920 <USB_EPStartXfer+0x1628>
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d104      	bne.n	80068f8 <USB_EPStartXfer+0x1600>
 80068ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068f2:	3b01      	subs	r3, #1
 80068f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29a      	uxth	r2, r3
 8006900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006904:	b29b      	uxth	r3, r3
 8006906:	029b      	lsls	r3, r3, #10
 8006908:	b29b      	uxth	r3, r3
 800690a:	4313      	orrs	r3, r2
 800690c:	b29b      	uxth	r3, r3
 800690e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006916:	b29a      	uxth	r2, r3
 8006918:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	e05c      	b.n	80069da <USB_EPStartXfer+0x16e2>
 8006920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10c      	bne.n	8006942 <USB_EPStartXfer+0x164a>
 8006928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29b      	uxth	r3, r3
 8006930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006938:	b29a      	uxth	r2, r3
 800693a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800693e:	801a      	strh	r2, [r3, #0]
 8006940:	e04b      	b.n	80069da <USB_EPStartXfer+0x16e2>
 8006942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006946:	085b      	lsrs	r3, r3, #1
 8006948:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800694c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <USB_EPStartXfer+0x166a>
 8006958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800695c:	3301      	adds	r3, #1
 800695e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29a      	uxth	r2, r3
 800696a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800696e:	b29b      	uxth	r3, r3
 8006970:	029b      	lsls	r3, r3, #10
 8006972:	b29b      	uxth	r3, r3
 8006974:	4313      	orrs	r3, r2
 8006976:	b29a      	uxth	r2, r3
 8006978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	e02c      	b.n	80069da <USB_EPStartXfer+0x16e2>
 8006980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d124      	bne.n	80069da <USB_EPStartXfer+0x16e2>
 8006990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006994:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800699e:	b29b      	uxth	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069a6:	4413      	add	r3, r2
 80069a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	011a      	lsls	r2, r3, #4
 80069ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069be:	4413      	add	r3, r2
 80069c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80069c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	e001      	b.n	80069da <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e03a      	b.n	8006a50 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006a04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006a08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006a10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006a14:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a18:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	441a      	add	r2, r3
 8006a36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d020      	beq.n	8006aae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a82:	81bb      	strh	r3, [r7, #12]
 8006a84:	89bb      	ldrh	r3, [r7, #12]
 8006a86:	f083 0310 	eor.w	r3, r3, #16
 8006a8a:	81bb      	strh	r3, [r7, #12]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	441a      	add	r2, r3
 8006a96:	89bb      	ldrh	r3, [r7, #12]
 8006a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	8013      	strh	r3, [r2, #0]
 8006aac:	e01f      	b.n	8006aee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac4:	81fb      	strh	r3, [r7, #14]
 8006ac6:	89fb      	ldrh	r3, [r7, #14]
 8006ac8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006acc:	81fb      	strh	r3, [r7, #14]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	441a      	add	r2, r3
 8006ad8:	89fb      	ldrh	r3, [r7, #14]
 8006ada:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ade:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr

08006afa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b087      	sub	sp, #28
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	7b1b      	ldrb	r3, [r3, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f040 809d 	bne.w	8006c48 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d04c      	beq.n	8006bb0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	823b      	strh	r3, [r7, #16]
 8006b24:	8a3b      	ldrh	r3, [r7, #16]
 8006b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01b      	beq.n	8006b66 <USB_EPClearStall+0x6c>
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b44:	81fb      	strh	r3, [r7, #14]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	89fb      	ldrh	r3, [r7, #14]
 8006b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	78db      	ldrb	r3, [r3, #3]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d06c      	beq.n	8006c48 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b84:	81bb      	strh	r3, [r7, #12]
 8006b86:	89bb      	ldrh	r3, [r7, #12]
 8006b88:	f083 0320 	eor.w	r3, r3, #32
 8006b8c:	81bb      	strh	r3, [r7, #12]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	89bb      	ldrh	r3, [r7, #12]
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]
 8006bae:	e04b      	b.n	8006c48 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	82fb      	strh	r3, [r7, #22]
 8006bbe:	8afb      	ldrh	r3, [r7, #22]
 8006bc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01b      	beq.n	8006c00 <USB_EPClearStall+0x106>
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bde:	82bb      	strh	r3, [r7, #20]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	441a      	add	r2, r3
 8006bea:	8abb      	ldrh	r3, [r7, #20]
 8006bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c16:	827b      	strh	r3, [r7, #18]
 8006c18:	8a7b      	ldrh	r3, [r7, #18]
 8006c1a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c1e:	827b      	strh	r3, [r7, #18]
 8006c20:	8a7b      	ldrh	r3, [r7, #18]
 8006c22:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c26:	827b      	strh	r3, [r7, #18]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	441a      	add	r2, r3
 8006c32:	8a7b      	ldrh	r3, [r7, #18]
 8006c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2280      	movs	r2, #128	@ 0x80
 8006c6a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr

08006c7a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr

08006c8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc80      	pop	{r7}
 8006cd4:	4770      	bx	lr

08006cd6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b08b      	sub	sp, #44	@ 0x2c
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	80fb      	strh	r3, [r7, #6]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006cec:	88bb      	ldrh	r3, [r7, #4]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	005a      	lsls	r2, r3, #1
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d08:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d0e:	e01e      	b.n	8006d4e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	b21a      	sxth	r2, r3
 8006d20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	b21b      	sxth	r3, r3
 8006d28:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	8a7a      	ldrh	r2, [r7, #18]
 8006d2e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	3302      	adds	r3, #2
 8006d34:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	3302      	adds	r3, #2
 8006d3a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	3301      	adds	r3, #1
 8006d46:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1dd      	bne.n	8006d10 <USB_WritePMA+0x3a>
  }
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	372c      	adds	r7, #44	@ 0x2c
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr

08006d60 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b08b      	sub	sp, #44	@ 0x2c
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	460b      	mov	r3, r1
 8006d70:	80fb      	strh	r3, [r7, #6]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d76:	88bb      	ldrh	r3, [r7, #4]
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	005a      	lsls	r2, r3, #1
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d92:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d98:	e01b      	b.n	8006dd2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	3302      	adds	r3, #2
 8006da6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	3302      	adds	r3, #2
 8006dca:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e0      	bne.n	8006d9a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006dd8:	88bb      	ldrh	r3, [r7, #4]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	701a      	strb	r2, [r3, #0]
  }
}
 8006df4:	bf00      	nop
 8006df6:	372c      	adds	r7, #44	@ 0x2c
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr

08006dfe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e12:	2302      	movs	r3, #2
 8006e14:	e01a      	b.n	8006e4c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	79fa      	ldrb	r2, [r7, #7]
 8006e42:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f001 fc03 	bl	8008650 <USBD_LL_Init>

  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d006      	beq.n	8006e76 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	e001      	b.n	8006e7a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e76:	2302      	movs	r3, #2
 8006e78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr

08006e86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 fc26 	bl	80086e0 <USBD_LL_Start>

  return USBD_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00c      	beq.n	8006ee6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	78fa      	ldrb	r2, [r7, #3]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	78fa      	ldrb	r2, [r7, #3]
 8006f06:	4611      	mov	r1, r2
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3

  return USBD_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fed8 	bl	8007cde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d016      	beq.n	8006f80 <USBD_LL_SetupStage+0x6a>
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d81c      	bhi.n	8006f90 <USBD_LL_SetupStage+0x7a>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <USBD_LL_SetupStage+0x4a>
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d008      	beq.n	8006f70 <USBD_LL_SetupStage+0x5a>
 8006f5e:	e017      	b.n	8006f90 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9cb 	bl	8007304 <USBD_StdDevReq>
      break;
 8006f6e:	e01a      	b.n	8006fa6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa2d 	bl	80073d8 <USBD_StdItfReq>
      break;
 8006f7e:	e012      	b.n	8006fa6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa6d 	bl	8007468 <USBD_StdEPReq>
      break;
 8006f8e:	e00a      	b.n	8006fa6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006f96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fbfe 	bl	80087a0 <USBD_LL_StallEP>
      break;
 8006fa4:	bf00      	nop
  }

  return USBD_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d14b      	bne.n	800705c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006fca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d134      	bne.n	8007040 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d919      	bls.n	8007016 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d203      	bcs.n	8007004 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007000:	b29b      	uxth	r3, r3
 8007002:	e002      	b.n	800700a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f001 f8f0 	bl	80081f4 <USBD_CtlContinueRx>
 8007014:	e038      	b.n	8007088 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007028:	2b03      	cmp	r3, #3
 800702a:	d105      	bne.n	8007038 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f001 f8ed 	bl	8008218 <USBD_CtlSendStatus>
 800703e:	e023      	b.n	8007088 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007046:	2b05      	cmp	r3, #5
 8007048:	d11e      	bne.n	8007088 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007052:	2100      	movs	r1, #0
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f001 fba3 	bl	80087a0 <USBD_LL_StallEP>
 800705a:	e015      	b.n	8007088 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00d      	beq.n	8007084 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800706e:	2b03      	cmp	r3, #3
 8007070:	d108      	bne.n	8007084 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	7afa      	ldrb	r2, [r7, #11]
 800707c:	4611      	mov	r1, r2
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	4798      	blx	r3
 8007082:	e001      	b.n	8007088 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007084:	2302      	movs	r3, #2
 8007086:	e000      	b.n	800708a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b086      	sub	sp, #24
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	460b      	mov	r3, r1
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070a0:	7afb      	ldrb	r3, [r7, #11]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d17f      	bne.n	80071a6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3314      	adds	r3, #20
 80070aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d15c      	bne.n	8007170 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d915      	bls.n	80070ee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	1ad2      	subs	r2, r2, r3
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f001 f878 	bl	80081d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070e0:	2300      	movs	r3, #0
 80070e2:	2200      	movs	r2, #0
 80070e4:	2100      	movs	r1, #0
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f001 fc05 	bl	80088f6 <USBD_LL_PrepareReceive>
 80070ec:	e04e      	b.n	800718c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	6912      	ldr	r2, [r2, #16]
 80070f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80070fa:	fb01 f202 	mul.w	r2, r1, r2
 80070fe:	1a9b      	subs	r3, r3, r2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d11c      	bne.n	800713e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800710c:	429a      	cmp	r2, r3
 800710e:	d316      	bcc.n	800713e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800711a:	429a      	cmp	r2, r3
 800711c:	d20f      	bcs.n	800713e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f001 f854 	bl	80081d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007130:	2300      	movs	r3, #0
 8007132:	2200      	movs	r2, #0
 8007134:	2100      	movs	r1, #0
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f001 fbdd 	bl	80088f6 <USBD_LL_PrepareReceive>
 800713c:	e026      	b.n	800718c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007150:	2b03      	cmp	r3, #3
 8007152:	d105      	bne.n	8007160 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007160:	2180      	movs	r1, #128	@ 0x80
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f001 fb1c 	bl	80087a0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f001 f868 	bl	800823e <USBD_CtlReceiveStatus>
 800716e:	e00d      	b.n	800718c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007176:	2b04      	cmp	r3, #4
 8007178:	d004      	beq.n	8007184 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007184:	2180      	movs	r1, #128	@ 0x80
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f001 fb0a 	bl	80087a0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007192:	2b01      	cmp	r3, #1
 8007194:	d11d      	bne.n	80071d2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7ff fe81 	bl	8006e9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80071a4:	e015      	b.n	80071d2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00d      	beq.n	80071ce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d108      	bne.n	80071ce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	7afa      	ldrb	r2, [r7, #11]
 80071c6:	4611      	mov	r1, r2
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	4798      	blx	r3
 80071cc:	e001      	b.n	80071d2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071ce:	2302      	movs	r3, #2
 80071d0:	e000      	b.n	80071d4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071e4:	2340      	movs	r3, #64	@ 0x40
 80071e6:	2200      	movs	r2, #0
 80071e8:	2100      	movs	r1, #0
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fa93 	bl	8008716 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2240      	movs	r2, #64	@ 0x40
 80071fc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007200:	2340      	movs	r3, #64	@ 0x40
 8007202:	2200      	movs	r2, #0
 8007204:	2180      	movs	r1, #128	@ 0x80
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fa85 	bl	8008716 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2240      	movs	r2, #64	@ 0x40
 8007216:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800723c:	2b00      	cmp	r3, #0
 800723e:	d009      	beq.n	8007254 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6852      	ldr	r2, [r2, #4]
 800724c:	b2d2      	uxtb	r2, r2
 800724e:	4611      	mov	r1, r2
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
  }

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	460b      	mov	r3, r1
 8007268:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	78fa      	ldrb	r2, [r7, #3]
 800726e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	bc80      	pop	{r7}
 800727a:	4770      	bx	lr

0800727c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2204      	movs	r2, #4
 8007294:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr

080072a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d105      	bne.n	80072c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr

080072ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d10b      	bne.n	80072f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800731a:	2b40      	cmp	r3, #64	@ 0x40
 800731c:	d005      	beq.n	800732a <USBD_StdDevReq+0x26>
 800731e:	2b40      	cmp	r3, #64	@ 0x40
 8007320:	d84f      	bhi.n	80073c2 <USBD_StdDevReq+0xbe>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <USBD_StdDevReq+0x36>
 8007326:	2b20      	cmp	r3, #32
 8007328:	d14b      	bne.n	80073c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4798      	blx	r3
      break;
 8007338:	e048      	b.n	80073cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	2b09      	cmp	r3, #9
 8007340:	d839      	bhi.n	80073b6 <USBD_StdDevReq+0xb2>
 8007342:	a201      	add	r2, pc, #4	@ (adr r2, 8007348 <USBD_StdDevReq+0x44>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	08007399 	.word	0x08007399
 800734c:	080073ad 	.word	0x080073ad
 8007350:	080073b7 	.word	0x080073b7
 8007354:	080073a3 	.word	0x080073a3
 8007358:	080073b7 	.word	0x080073b7
 800735c:	0800737b 	.word	0x0800737b
 8007360:	08007371 	.word	0x08007371
 8007364:	080073b7 	.word	0x080073b7
 8007368:	0800738f 	.word	0x0800738f
 800736c:	08007385 	.word	0x08007385
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9dc 	bl	8007730 <USBD_GetDescriptor>
          break;
 8007378:	e022      	b.n	80073c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fb3f 	bl	8007a00 <USBD_SetAddress>
          break;
 8007382:	e01d      	b.n	80073c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fb7e 	bl	8007a88 <USBD_SetConfig>
          break;
 800738c:	e018      	b.n	80073c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fc07 	bl	8007ba4 <USBD_GetConfig>
          break;
 8007396:	e013      	b.n	80073c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fc37 	bl	8007c0e <USBD_GetStatus>
          break;
 80073a0:	e00e      	b.n	80073c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fc65 	bl	8007c74 <USBD_SetFeature>
          break;
 80073aa:	e009      	b.n	80073c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fc74 	bl	8007c9c <USBD_ClrFeature>
          break;
 80073b4:	e004      	b.n	80073c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fcc9 	bl	8007d50 <USBD_CtlError>
          break;
 80073be:	bf00      	nop
      }
      break;
 80073c0:	e004      	b.n	80073cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fcc3 	bl	8007d50 <USBD_CtlError>
      break;
 80073ca:	bf00      	nop
  }

  return ret;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop

080073d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073ee:	2b40      	cmp	r3, #64	@ 0x40
 80073f0:	d005      	beq.n	80073fe <USBD_StdItfReq+0x26>
 80073f2:	2b40      	cmp	r3, #64	@ 0x40
 80073f4:	d82e      	bhi.n	8007454 <USBD_StdItfReq+0x7c>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <USBD_StdItfReq+0x26>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d12a      	bne.n	8007454 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007404:	3b01      	subs	r3, #1
 8007406:	2b02      	cmp	r3, #2
 8007408:	d81d      	bhi.n	8007446 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	889b      	ldrh	r3, [r3, #4]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d813      	bhi.n	800743c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
 8007422:	4603      	mov	r3, r0
 8007424:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	88db      	ldrh	r3, [r3, #6]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d110      	bne.n	8007450 <USBD_StdItfReq+0x78>
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10d      	bne.n	8007450 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 feef 	bl	8008218 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800743a:	e009      	b.n	8007450 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fc86 	bl	8007d50 <USBD_CtlError>
          break;
 8007444:	e004      	b.n	8007450 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fc81 	bl	8007d50 <USBD_CtlError>
          break;
 800744e:	e000      	b.n	8007452 <USBD_StdItfReq+0x7a>
          break;
 8007450:	bf00      	nop
      }
      break;
 8007452:	e004      	b.n	800745e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fc7a 	bl	8007d50 <USBD_CtlError>
      break;
 800745c:	bf00      	nop
  }

  return USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	889b      	ldrh	r3, [r3, #4]
 800747a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007484:	2b40      	cmp	r3, #64	@ 0x40
 8007486:	d007      	beq.n	8007498 <USBD_StdEPReq+0x30>
 8007488:	2b40      	cmp	r3, #64	@ 0x40
 800748a:	f200 8146 	bhi.w	800771a <USBD_StdEPReq+0x2b2>
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <USBD_StdEPReq+0x40>
 8007492:	2b20      	cmp	r3, #32
 8007494:	f040 8141 	bne.w	800771a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
      break;
 80074a6:	e13d      	b.n	8007724 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d10a      	bne.n	80074ca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	e12d      	b.n	8007726 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d007      	beq.n	80074e2 <USBD_StdEPReq+0x7a>
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	f300 811b 	bgt.w	800770e <USBD_StdEPReq+0x2a6>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d072      	beq.n	80075c2 <USBD_StdEPReq+0x15a>
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d03a      	beq.n	8007556 <USBD_StdEPReq+0xee>
 80074e0:	e115      	b.n	800770e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d002      	beq.n	80074f2 <USBD_StdEPReq+0x8a>
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d015      	beq.n	800751c <USBD_StdEPReq+0xb4>
 80074f0:	e02b      	b.n	800754a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00c      	beq.n	8007512 <USBD_StdEPReq+0xaa>
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	2b80      	cmp	r3, #128	@ 0x80
 80074fc:	d009      	beq.n	8007512 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 f94c 	bl	80087a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007508:	2180      	movs	r1, #128	@ 0x80
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 f948 	bl	80087a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007510:	e020      	b.n	8007554 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fc1b 	bl	8007d50 <USBD_CtlError>
              break;
 800751a:	e01b      	b.n	8007554 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	885b      	ldrh	r3, [r3, #2]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10e      	bne.n	8007542 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00b      	beq.n	8007542 <USBD_StdEPReq+0xda>
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b80      	cmp	r3, #128	@ 0x80
 800752e:	d008      	beq.n	8007542 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	88db      	ldrh	r3, [r3, #6]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 f92f 	bl	80087a0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fe68 	bl	8008218 <USBD_CtlSendStatus>

              break;
 8007548:	e004      	b.n	8007554 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fbff 	bl	8007d50 <USBD_CtlError>
              break;
 8007552:	bf00      	nop
          }
          break;
 8007554:	e0e0      	b.n	8007718 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800755c:	2b02      	cmp	r3, #2
 800755e:	d002      	beq.n	8007566 <USBD_StdEPReq+0xfe>
 8007560:	2b03      	cmp	r3, #3
 8007562:	d015      	beq.n	8007590 <USBD_StdEPReq+0x128>
 8007564:	e026      	b.n	80075b4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00c      	beq.n	8007586 <USBD_StdEPReq+0x11e>
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	2b80      	cmp	r3, #128	@ 0x80
 8007570:	d009      	beq.n	8007586 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 f912 	bl	80087a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800757c:	2180      	movs	r1, #128	@ 0x80
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f90e 	bl	80087a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007584:	e01c      	b.n	80075c0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fbe1 	bl	8007d50 <USBD_CtlError>
              break;
 800758e:	e017      	b.n	80075c0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	885b      	ldrh	r3, [r3, #2]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d112      	bne.n	80075be <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d004      	beq.n	80075ac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 f919 	bl	80087de <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fe33 	bl	8008218 <USBD_CtlSendStatus>
              }
              break;
 80075b2:	e004      	b.n	80075be <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fbca 	bl	8007d50 <USBD_CtlError>
              break;
 80075bc:	e000      	b.n	80075c0 <USBD_StdEPReq+0x158>
              break;
 80075be:	bf00      	nop
          }
          break;
 80075c0:	e0aa      	b.n	8007718 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d002      	beq.n	80075d2 <USBD_StdEPReq+0x16a>
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d032      	beq.n	8007636 <USBD_StdEPReq+0x1ce>
 80075d0:	e097      	b.n	8007702 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d007      	beq.n	80075e8 <USBD_StdEPReq+0x180>
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b80      	cmp	r3, #128	@ 0x80
 80075dc:	d004      	beq.n	80075e8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fbb5 	bl	8007d50 <USBD_CtlError>
                break;
 80075e6:	e091      	b.n	800770c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	da0b      	bge.n	8007608 <USBD_StdEPReq+0x1a0>
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	3310      	adds	r3, #16
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	4413      	add	r3, r2
 8007604:	3304      	adds	r3, #4
 8007606:	e00b      	b.n	8007620 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800760e:	4613      	mov	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	4413      	add	r3, r2
 800761e:	3304      	adds	r3, #4
 8007620:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2202      	movs	r2, #2
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fdb2 	bl	8008198 <USBD_CtlSendData>
              break;
 8007634:	e06a      	b.n	800770c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800763a:	2b00      	cmp	r3, #0
 800763c:	da11      	bge.n	8007662 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	f003 020f 	and.w	r2, r3, #15
 8007644:	6879      	ldr	r1, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	440b      	add	r3, r1
 8007650:	3318      	adds	r3, #24
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d117      	bne.n	8007688 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fb78 	bl	8007d50 <USBD_CtlError>
                  break;
 8007660:	e054      	b.n	800770c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	f003 020f 	and.w	r2, r3, #15
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	4613      	mov	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	440b      	add	r3, r1
 8007674:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d104      	bne.n	8007688 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fb65 	bl	8007d50 <USBD_CtlError>
                  break;
 8007686:	e041      	b.n	800770c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800768c:	2b00      	cmp	r3, #0
 800768e:	da0b      	bge.n	80076a8 <USBD_StdEPReq+0x240>
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007696:	4613      	mov	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	3310      	adds	r3, #16
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	4413      	add	r3, r2
 80076a4:	3304      	adds	r3, #4
 80076a6:	e00b      	b.n	80076c0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	3304      	adds	r3, #4
 80076c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <USBD_StdEPReq+0x266>
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b80      	cmp	r3, #128	@ 0x80
 80076cc:	d103      	bne.n	80076d6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	e00e      	b.n	80076f4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 f89e 	bl	800881c <USBD_LL_IsStallEP>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2201      	movs	r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	e002      	b.n	80076f4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2202      	movs	r2, #2
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fd4c 	bl	8008198 <USBD_CtlSendData>
              break;
 8007700:	e004      	b.n	800770c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fb23 	bl	8007d50 <USBD_CtlError>
              break;
 800770a:	bf00      	nop
          }
          break;
 800770c:	e004      	b.n	8007718 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fb1d 	bl	8007d50 <USBD_CtlError>
          break;
 8007716:	bf00      	nop
      }
      break;
 8007718:	e004      	b.n	8007724 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fb17 	bl	8007d50 <USBD_CtlError>
      break;
 8007722:	bf00      	nop
  }

  return ret;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	885b      	ldrh	r3, [r3, #2]
 800774a:	0a1b      	lsrs	r3, r3, #8
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	2b06      	cmp	r3, #6
 8007752:	f200 8128 	bhi.w	80079a6 <USBD_GetDescriptor+0x276>
 8007756:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <USBD_GetDescriptor+0x2c>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	08007779 	.word	0x08007779
 8007760:	08007791 	.word	0x08007791
 8007764:	080077d1 	.word	0x080077d1
 8007768:	080079a7 	.word	0x080079a7
 800776c:	080079a7 	.word	0x080079a7
 8007770:	08007947 	.word	0x08007947
 8007774:	08007973 	.word	0x08007973
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	7c12      	ldrb	r2, [r2, #16]
 8007784:	f107 0108 	add.w	r1, r7, #8
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	60f8      	str	r0, [r7, #12]
      break;
 800778e:	e112      	b.n	80079b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	7c1b      	ldrb	r3, [r3, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10d      	bne.n	80077b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800779e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a0:	f107 0208 	add.w	r2, r7, #8
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3301      	adds	r3, #1
 80077ae:	2202      	movs	r2, #2
 80077b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077b2:	e100      	b.n	80079b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077bc:	f107 0208 	add.w	r2, r7, #8
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3301      	adds	r3, #1
 80077ca:	2202      	movs	r2, #2
 80077cc:	701a      	strb	r2, [r3, #0]
      break;
 80077ce:	e0f2      	b.n	80079b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	885b      	ldrh	r3, [r3, #2]
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b05      	cmp	r3, #5
 80077d8:	f200 80ac 	bhi.w	8007934 <USBD_GetDescriptor+0x204>
 80077dc:	a201      	add	r2, pc, #4	@ (adr r2, 80077e4 <USBD_GetDescriptor+0xb4>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	080077fd 	.word	0x080077fd
 80077e8:	08007831 	.word	0x08007831
 80077ec:	08007865 	.word	0x08007865
 80077f0:	08007899 	.word	0x08007899
 80077f4:	080078cd 	.word	0x080078cd
 80077f8:	08007901 	.word	0x08007901
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	7c12      	ldrb	r2, [r2, #16]
 8007814:	f107 0108 	add.w	r1, r7, #8
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800781e:	e091      	b.n	8007944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fa94 	bl	8007d50 <USBD_CtlError>
            err++;
 8007828:	7afb      	ldrb	r3, [r7, #11]
 800782a:	3301      	adds	r3, #1
 800782c:	72fb      	strb	r3, [r7, #11]
          break;
 800782e:	e089      	b.n	8007944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	7c12      	ldrb	r2, [r2, #16]
 8007848:	f107 0108 	add.w	r1, r7, #8
 800784c:	4610      	mov	r0, r2
 800784e:	4798      	blx	r3
 8007850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007852:	e077      	b.n	8007944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa7a 	bl	8007d50 <USBD_CtlError>
            err++;
 800785c:	7afb      	ldrb	r3, [r7, #11]
 800785e:	3301      	adds	r3, #1
 8007860:	72fb      	strb	r3, [r7, #11]
          break;
 8007862:	e06f      	b.n	8007944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00b      	beq.n	8007888 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	7c12      	ldrb	r2, [r2, #16]
 800787c:	f107 0108 	add.w	r1, r7, #8
 8007880:	4610      	mov	r0, r2
 8007882:	4798      	blx	r3
 8007884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007886:	e05d      	b.n	8007944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa60 	bl	8007d50 <USBD_CtlError>
            err++;
 8007890:	7afb      	ldrb	r3, [r7, #11]
 8007892:	3301      	adds	r3, #1
 8007894:	72fb      	strb	r3, [r7, #11]
          break;
 8007896:	e055      	b.n	8007944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	7c12      	ldrb	r2, [r2, #16]
 80078b0:	f107 0108 	add.w	r1, r7, #8
 80078b4:	4610      	mov	r0, r2
 80078b6:	4798      	blx	r3
 80078b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ba:	e043      	b.n	8007944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa46 	bl	8007d50 <USBD_CtlError>
            err++;
 80078c4:	7afb      	ldrb	r3, [r7, #11]
 80078c6:	3301      	adds	r3, #1
 80078c8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ca:	e03b      	b.n	8007944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	7c12      	ldrb	r2, [r2, #16]
 80078e4:	f107 0108 	add.w	r1, r7, #8
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ee:	e029      	b.n	8007944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa2c 	bl	8007d50 <USBD_CtlError>
            err++;
 80078f8:	7afb      	ldrb	r3, [r7, #11]
 80078fa:	3301      	adds	r3, #1
 80078fc:	72fb      	strb	r3, [r7, #11]
          break;
 80078fe:	e021      	b.n	8007944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	7c12      	ldrb	r2, [r2, #16]
 8007918:	f107 0108 	add.w	r1, r7, #8
 800791c:	4610      	mov	r0, r2
 800791e:	4798      	blx	r3
 8007920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007922:	e00f      	b.n	8007944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa12 	bl	8007d50 <USBD_CtlError>
            err++;
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	3301      	adds	r3, #1
 8007930:	72fb      	strb	r3, [r7, #11]
          break;
 8007932:	e007      	b.n	8007944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa0a 	bl	8007d50 <USBD_CtlError>
          err++;
 800793c:	7afb      	ldrb	r3, [r7, #11]
 800793e:	3301      	adds	r3, #1
 8007940:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007942:	e038      	b.n	80079b6 <USBD_GetDescriptor+0x286>
 8007944:	e037      	b.n	80079b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7c1b      	ldrb	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007956:	f107 0208 	add.w	r2, r7, #8
 800795a:	4610      	mov	r0, r2
 800795c:	4798      	blx	r3
 800795e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007960:	e029      	b.n	80079b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9f3 	bl	8007d50 <USBD_CtlError>
        err++;
 800796a:	7afb      	ldrb	r3, [r7, #11]
 800796c:	3301      	adds	r3, #1
 800796e:	72fb      	strb	r3, [r7, #11]
      break;
 8007970:	e021      	b.n	80079b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7c1b      	ldrb	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10d      	bne.n	8007996 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007982:	f107 0208 	add.w	r2, r7, #8
 8007986:	4610      	mov	r0, r2
 8007988:	4798      	blx	r3
 800798a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3301      	adds	r3, #1
 8007990:	2207      	movs	r2, #7
 8007992:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007994:	e00f      	b.n	80079b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f9d9 	bl	8007d50 <USBD_CtlError>
        err++;
 800799e:	7afb      	ldrb	r3, [r7, #11]
 80079a0:	3301      	adds	r3, #1
 80079a2:	72fb      	strb	r3, [r7, #11]
      break;
 80079a4:	e007      	b.n	80079b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f9d1 	bl	8007d50 <USBD_CtlError>
      err++;
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	3301      	adds	r3, #1
 80079b2:	72fb      	strb	r3, [r7, #11]
      break;
 80079b4:	bf00      	nop
  }

  if (err != 0U)
 80079b6:	7afb      	ldrb	r3, [r7, #11]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d11c      	bne.n	80079f6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80079bc:	893b      	ldrh	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d011      	beq.n	80079e6 <USBD_GetDescriptor+0x2b6>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88db      	ldrh	r3, [r3, #6]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00d      	beq.n	80079e6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	88da      	ldrh	r2, [r3, #6]
 80079ce:	893b      	ldrh	r3, [r7, #8]
 80079d0:	4293      	cmp	r3, r2
 80079d2:	bf28      	it	cs
 80079d4:	4613      	movcs	r3, r2
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079da:	893b      	ldrh	r3, [r7, #8]
 80079dc:	461a      	mov	r2, r3
 80079de:	68f9      	ldr	r1, [r7, #12]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fbd9 	bl	8008198 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	88db      	ldrh	r3, [r3, #6]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d104      	bne.n	80079f8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fc12 	bl	8008218 <USBD_CtlSendStatus>
 80079f4:	e000      	b.n	80079f8 <USBD_GetDescriptor+0x2c8>
    return;
 80079f6:	bf00      	nop
    }
  }
}
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop

08007a00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	889b      	ldrh	r3, [r3, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d130      	bne.n	8007a74 <USBD_SetAddress+0x74>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	88db      	ldrh	r3, [r3, #6]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d12c      	bne.n	8007a74 <USBD_SetAddress+0x74>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	885b      	ldrh	r3, [r3, #2]
 8007a1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a20:	d828      	bhi.n	8007a74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	885b      	ldrh	r3, [r3, #2]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d104      	bne.n	8007a42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f988 	bl	8007d50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a40:	e01d      	b.n	8007a7e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	7bfa      	ldrb	r2, [r7, #15]
 8007a46:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 ff0f 	bl	8008872 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fbdf 	bl	8008218 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d004      	beq.n	8007a6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a68:	e009      	b.n	8007a7e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a72:	e004      	b.n	8007a7e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f96a 	bl	8007d50 <USBD_CtlError>
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	885b      	ldrh	r3, [r3, #2]
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	4b41      	ldr	r3, [pc, #260]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007a9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a9c:	4b40      	ldr	r3, [pc, #256]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d904      	bls.n	8007aae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f952 	bl	8007d50 <USBD_CtlError>
 8007aac:	e075      	b.n	8007b9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d002      	beq.n	8007abe <USBD_SetConfig+0x36>
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d023      	beq.n	8007b04 <USBD_SetConfig+0x7c>
 8007abc:	e062      	b.n	8007b84 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007abe:	4b38      	ldr	r3, [pc, #224]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01a      	beq.n	8007afc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007ac6:	4b36      	ldr	r3, [pc, #216]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ad8:	4b31      	ldr	r3, [pc, #196]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff f9e7 	bl	8006eb2 <USBD_SetClassConfig>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d104      	bne.n	8007af4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f92f 	bl	8007d50 <USBD_CtlError>
            return;
 8007af2:	e052      	b.n	8007b9a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fb8f 	bl	8008218 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007afa:	e04e      	b.n	8007b9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fb8b 	bl	8008218 <USBD_CtlSendStatus>
        break;
 8007b02:	e04a      	b.n	8007b9a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b04:	4b26      	ldr	r3, [pc, #152]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d112      	bne.n	8007b32 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007b14:	4b22      	ldr	r3, [pc, #136]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b1e:	4b20      	ldr	r3, [pc, #128]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff f9e3 	bl	8006ef0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fb74 	bl	8008218 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b30:	e033      	b.n	8007b9a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b32:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d01d      	beq.n	8007b7c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff f9d1 	bl	8006ef0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b4e:	4b14      	ldr	r3, [pc, #80]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b58:	4b11      	ldr	r3, [pc, #68]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff f9a7 	bl	8006eb2 <USBD_SetClassConfig>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d104      	bne.n	8007b74 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f8ef 	bl	8007d50 <USBD_CtlError>
            return;
 8007b72:	e012      	b.n	8007b9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fb4f 	bl	8008218 <USBD_CtlSendStatus>
        break;
 8007b7a:	e00e      	b.n	8007b9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fb4b 	bl	8008218 <USBD_CtlSendStatus>
        break;
 8007b82:	e00a      	b.n	8007b9a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f8e2 	bl	8007d50 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b8c:	4b04      	ldr	r3, [pc, #16]	@ (8007ba0 <USBD_SetConfig+0x118>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff f9ac 	bl	8006ef0 <USBD_ClrClassConfig>
        break;
 8007b98:	bf00      	nop
    }
  }
}
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000e18 	.word	0x20000e18

08007ba4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	88db      	ldrh	r3, [r3, #6]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d004      	beq.n	8007bc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f8c9 	bl	8007d50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bbe:	e022      	b.n	8007c06 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	dc02      	bgt.n	8007bd0 <USBD_GetConfig+0x2c>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dc03      	bgt.n	8007bd6 <USBD_GetConfig+0x32>
 8007bce:	e015      	b.n	8007bfc <USBD_GetConfig+0x58>
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d00b      	beq.n	8007bec <USBD_GetConfig+0x48>
 8007bd4:	e012      	b.n	8007bfc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3308      	adds	r3, #8
 8007be0:	2201      	movs	r2, #1
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fad7 	bl	8008198 <USBD_CtlSendData>
        break;
 8007bea:	e00c      	b.n	8007c06 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 facf 	bl	8008198 <USBD_CtlSendData>
        break;
 8007bfa:	e004      	b.n	8007c06 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f8a6 	bl	8007d50 <USBD_CtlError>
        break;
 8007c04:	bf00      	nop
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d81e      	bhi.n	8007c62 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	88db      	ldrh	r3, [r3, #6]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d004      	beq.n	8007c36 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f88e 	bl	8007d50 <USBD_CtlError>
        break;
 8007c34:	e01a      	b.n	8007c6c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f043 0202 	orr.w	r2, r3, #2
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	330c      	adds	r3, #12
 8007c56:	2202      	movs	r2, #2
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa9c 	bl	8008198 <USBD_CtlSendData>
      break;
 8007c60:	e004      	b.n	8007c6c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f873 	bl	8007d50 <USBD_CtlError>
      break;
 8007c6a:	bf00      	nop
  }
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	885b      	ldrh	r3, [r3, #2]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d106      	bne.n	8007c94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fac2 	bl	8008218 <USBD_CtlSendStatus>
  }
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cac:	3b01      	subs	r3, #1
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d80b      	bhi.n	8007cca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10c      	bne.n	8007cd4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 faa8 	bl	8008218 <USBD_CtlSendStatus>
      }
      break;
 8007cc8:	e004      	b.n	8007cd4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f83f 	bl	8007d50 <USBD_CtlError>
      break;
 8007cd2:	e000      	b.n	8007cd6 <USBD_ClrFeature+0x3a>
      break;
 8007cd4:	bf00      	nop
  }
}
 8007cd6:	bf00      	nop
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781a      	ldrb	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	785a      	ldrb	r2, [r3, #1]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	3302      	adds	r3, #2
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	3303      	adds	r3, #3
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	4413      	add	r3, r2
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	3304      	adds	r3, #4
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	3305      	adds	r3, #5
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	021b      	lsls	r3, r3, #8
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	4413      	add	r3, r2
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	3306      	adds	r3, #6
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	3307      	adds	r3, #7
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	4413      	add	r3, r2
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	80da      	strh	r2, [r3, #6]

}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr

08007d50 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d5a:	2180      	movs	r1, #128	@ 0x80
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fd1f 	bl	80087a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d62:	2100      	movs	r1, #0
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fd1b 	bl	80087a0 <USBD_LL_StallEP>
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d032      	beq.n	8007dee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 f834 	bl	8007df6 <USBD_GetLen>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	3301      	adds	r3, #1
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	75fa      	strb	r2, [r7, #23]
 8007da2:	461a      	mov	r2, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	4413      	add	r3, r2
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	7812      	ldrb	r2, [r2, #0]
 8007dac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	75fa      	strb	r2, [r7, #23]
 8007db4:	461a      	mov	r2, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	4413      	add	r3, r2
 8007dba:	2203      	movs	r2, #3
 8007dbc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007dbe:	e012      	b.n	8007de6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	60fa      	str	r2, [r7, #12]
 8007dc6:	7dfa      	ldrb	r2, [r7, #23]
 8007dc8:	1c51      	adds	r1, r2, #1
 8007dca:	75f9      	strb	r1, [r7, #23]
 8007dcc:	4611      	mov	r1, r2
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	440a      	add	r2, r1
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	75fa      	strb	r2, [r7, #23]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4413      	add	r3, r2
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e8      	bne.n	8007dc0 <USBD_GetString+0x4e>
    }
  }
}
 8007dee:	bf00      	nop
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e02:	e005      	b.n	8007e10 <USBD_GetLen+0x1a>
  {
    len++;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	3301      	adds	r3, #1
 8007e08:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1f5      	bne.n	8007e04 <USBD_GetLen+0xe>
  }

  return len;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007e30:	2304      	movs	r3, #4
 8007e32:	2203      	movs	r2, #3
 8007e34:	2181      	movs	r1, #129	@ 0x81
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fc6d 	bl	8008716 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007e42:	2010      	movs	r0, #16
 8007e44:	f000 fd7a 	bl	800893c <USBD_static_malloc>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e005      	b.n	8007e6a <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e64:	2200      	movs	r2, #0
 8007e66:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b082      	sub	sp, #8
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007e7e:	2181      	movs	r1, #129	@ 0x81
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fc6e 	bl	8008762 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fd59 	bl	8008954 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_HID_Setup>:
  * @retval status
  */

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d045      	beq.n	8007f6e <USBD_HID_Setup+0xba>
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	f040 80d3 	bne.w	800808e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	3b02      	subs	r3, #2
 8007eee:	2b09      	cmp	r3, #9
 8007ef0:	d835      	bhi.n	8007f5e <USBD_HID_Setup+0xaa>
 8007ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <USBD_HID_Setup+0x44>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f4f 	.word	0x08007f4f
 8007efc:	08007f2f 	.word	0x08007f2f
 8007f00:	08007f5f 	.word	0x08007f5f
 8007f04:	08007f5f 	.word	0x08007f5f
 8007f08:	08007f5f 	.word	0x08007f5f
 8007f0c:	08007f5f 	.word	0x08007f5f
 8007f10:	08007f5f 	.word	0x08007f5f
 8007f14:	08007f5f 	.word	0x08007f5f
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f21 	.word	0x08007f21
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	885b      	ldrh	r3, [r3, #2]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	461a      	mov	r2, r3
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	601a      	str	r2, [r3, #0]
          break;
 8007f2c:	e01e      	b.n	8007f6c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2201      	movs	r2, #1
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f92f 	bl	8008198 <USBD_CtlSendData>
          break;
 8007f3a:	e017      	b.n	8007f6c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	885b      	ldrh	r3, [r3, #2]
 8007f40:	0a1b      	lsrs	r3, r3, #8
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	461a      	mov	r2, r3
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	605a      	str	r2, [r3, #4]
          break;
 8007f4c:	e00e      	b.n	8007f6c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	3304      	adds	r3, #4
 8007f52:	2201      	movs	r2, #1
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f91e 	bl	8008198 <USBD_CtlSendData>
          break;
 8007f5c:	e006      	b.n	8007f6c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fef5 	bl	8007d50 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f66:	2302      	movs	r3, #2
 8007f68:	75fb      	strb	r3, [r7, #23]
          break;
 8007f6a:	bf00      	nop
      }
      break;
 8007f6c:	e096      	b.n	800809c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	785b      	ldrb	r3, [r3, #1]
 8007f72:	2b0b      	cmp	r3, #11
 8007f74:	f200 8083 	bhi.w	800807e <USBD_HID_Setup+0x1ca>
 8007f78:	a201      	add	r2, pc, #4	@ (adr r2, 8007f80 <USBD_HID_Setup+0xcc>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007fb1 	.word	0x08007fb1
 8007f84:	0800807f 	.word	0x0800807f
 8007f88:	0800807f 	.word	0x0800807f
 8007f8c:	0800807f 	.word	0x0800807f
 8007f90:	0800807f 	.word	0x0800807f
 8007f94:	0800807f 	.word	0x0800807f
 8007f98:	08007fd9 	.word	0x08007fd9
 8007f9c:	0800807f 	.word	0x0800807f
 8007fa0:	0800807f 	.word	0x0800807f
 8007fa4:	0800807f 	.word	0x0800807f
 8007fa8:	08008031 	.word	0x08008031
 8007fac:	08008059 	.word	0x08008059
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d107      	bne.n	8007fca <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007fba:	f107 030e 	add.w	r3, r7, #14
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f8e8 	bl	8008198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fc8:	e060      	b.n	800808c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff febf 	bl	8007d50 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fd6:	e059      	b.n	800808c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	885b      	ldrh	r3, [r3, #2]
 8007fdc:	0a1b      	lsrs	r3, r3, #8
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2b22      	cmp	r3, #34	@ 0x22
 8007fe2:	d108      	bne.n	8007ff6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	88db      	ldrh	r3, [r3, #6]
 8007fe8:	2b73      	cmp	r3, #115	@ 0x73
 8007fea:	bf28      	it	cs
 8007fec:	2373      	movcs	r3, #115	@ 0x73
 8007fee:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80080a8 <USBD_HID_Setup+0x1f4>)
 8007ff2:	61bb      	str	r3, [r7, #24]
 8007ff4:	e015      	b.n	8008022 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	885b      	ldrh	r3, [r3, #2]
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	2b21      	cmp	r3, #33	@ 0x21
 8008000:	d108      	bne.n	8008014 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008002:	4b2a      	ldr	r3, [pc, #168]	@ (80080ac <USBD_HID_Setup+0x1f8>)
 8008004:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	88db      	ldrh	r3, [r3, #6]
 800800a:	2b09      	cmp	r3, #9
 800800c:	bf28      	it	cs
 800800e:	2309      	movcs	r3, #9
 8008010:	83fb      	strh	r3, [r7, #30]
 8008012:	e006      	b.n	8008022 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff fe9a 	bl	8007d50 <USBD_CtlError>
            ret = USBD_FAIL;
 800801c:	2302      	movs	r3, #2
 800801e:	75fb      	strb	r3, [r7, #23]
            break;
 8008020:	e034      	b.n	800808c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008022:	8bfb      	ldrh	r3, [r7, #30]
 8008024:	461a      	mov	r2, r3
 8008026:	69b9      	ldr	r1, [r7, #24]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f8b5 	bl	8008198 <USBD_CtlSendData>
          break;
 800802e:	e02d      	b.n	800808c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008036:	2b03      	cmp	r3, #3
 8008038:	d107      	bne.n	800804a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	3308      	adds	r3, #8
 800803e:	2201      	movs	r2, #1
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f8a8 	bl	8008198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008048:	e020      	b.n	800808c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff fe7f 	bl	8007d50 <USBD_CtlError>
            ret = USBD_FAIL;
 8008052:	2302      	movs	r3, #2
 8008054:	75fb      	strb	r3, [r7, #23]
          break;
 8008056:	e019      	b.n	800808c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800805e:	2b03      	cmp	r3, #3
 8008060:	d106      	bne.n	8008070 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	885b      	ldrh	r3, [r3, #2]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800806e:	e00d      	b.n	800808c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff fe6c 	bl	8007d50 <USBD_CtlError>
            ret = USBD_FAIL;
 8008078:	2302      	movs	r3, #2
 800807a:	75fb      	strb	r3, [r7, #23]
          break;
 800807c:	e006      	b.n	800808c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff fe65 	bl	8007d50 <USBD_CtlError>
          ret = USBD_FAIL;
 8008086:	2302      	movs	r3, #2
 8008088:	75fb      	strb	r3, [r7, #23]
          break;
 800808a:	bf00      	nop
      }
      break;
 800808c:	e006      	b.n	800809c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff fe5d 	bl	8007d50 <USBD_CtlError>
      ret = USBD_FAIL;
 8008096:	2302      	movs	r3, #2
 8008098:	75fb      	strb	r3, [r7, #23]
      break;
 800809a:	bf00      	nop
  }

  return ret;
 800809c:	7dfb      	ldrb	r3, [r7, #23]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3720      	adds	r7, #32
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200000cc 	.word	0x200000cc
 80080ac:	200000b4 	.word	0x200000b4

080080b0 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080c4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d10c      	bne.n	80080ea <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	7b1b      	ldrb	r3, [r3, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d108      	bne.n	80080ea <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2201      	movs	r2, #1
 80080dc:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80080de:	88fb      	ldrh	r3, [r7, #6]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	2181      	movs	r1, #129	@ 0x81
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 fbe3 	bl	80088b0 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2222      	movs	r2, #34	@ 0x22
 8008100:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008102:	4b03      	ldr	r3, [pc, #12]	@ (8008110 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20000048 	.word	0x20000048

08008114 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2222      	movs	r2, #34	@ 0x22
 8008120:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8008122:	4b03      	ldr	r3, [pc, #12]	@ (8008130 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	2000006c 	.word	0x2000006c

08008134 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2222      	movs	r2, #34	@ 0x22
 8008140:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008142:	4b03      	ldr	r3, [pc, #12]	@ (8008150 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	bc80      	pop	{r7}
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	20000090 	.word	0x20000090

08008154 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008166:	2200      	movs	r2, #0
 8008168:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr
	...

08008178 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	220a      	movs	r2, #10
 8008184:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008186:	4b03      	ldr	r3, [pc, #12]	@ (8008194 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	200000c0 	.word	0x200000c0

08008198 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80081ae:	88fa      	ldrh	r2, [r7, #6]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80081b4:	88fa      	ldrh	r2, [r7, #6]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	2100      	movs	r1, #0
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 fb75 	bl	80088b0 <USBD_LL_Transmit>

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081de:	88fb      	ldrh	r3, [r7, #6]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	2100      	movs	r1, #0
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 fb63 	bl	80088b0 <USBD_LL_Transmit>

  return USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	4613      	mov	r3, r2
 8008200:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	2100      	movs	r1, #0
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 fb74 	bl	80088f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2204      	movs	r2, #4
 8008224:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008228:	2300      	movs	r3, #0
 800822a:	2200      	movs	r2, #0
 800822c:	2100      	movs	r1, #0
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fb3e 	bl	80088b0 <USBD_LL_Transmit>

  return USBD_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2205      	movs	r2, #5
 800824a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800824e:	2300      	movs	r3, #0
 8008250:	2200      	movs	r2, #0
 8008252:	2100      	movs	r1, #0
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb4e 	bl	80088f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008268:	2200      	movs	r2, #0
 800826a:	490e      	ldr	r1, [pc, #56]	@ (80082a4 <MX_USB_DEVICE_Init+0x40>)
 800826c:	480e      	ldr	r0, [pc, #56]	@ (80082a8 <MX_USB_DEVICE_Init+0x44>)
 800826e:	f7fe fdc6 	bl	8006dfe <USBD_Init>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008278:	f7f8 f93b 	bl	80004f2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800827c:	490b      	ldr	r1, [pc, #44]	@ (80082ac <MX_USB_DEVICE_Init+0x48>)
 800827e:	480a      	ldr	r0, [pc, #40]	@ (80082a8 <MX_USB_DEVICE_Init+0x44>)
 8008280:	f7fe fde8 	bl	8006e54 <USBD_RegisterClass>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800828a:	f7f8 f932 	bl	80004f2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800828e:	4806      	ldr	r0, [pc, #24]	@ (80082a8 <MX_USB_DEVICE_Init+0x44>)
 8008290:	f7fe fdf9 	bl	8006e86 <USBD_Start>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800829a:	f7f8 f92a 	bl	80004f2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800829e:	bf00      	nop
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20000140 	.word	0x20000140
 80082a8:	20000e1c 	.word	0x20000e1c
 80082ac:	20000010 	.word	0x20000010

080082b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	6039      	str	r1, [r7, #0]
 80082ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2212      	movs	r2, #18
 80082c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082c2:	4b03      	ldr	r3, [pc, #12]	@ (80082d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	2000015c 	.word	0x2000015c

080082d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	6039      	str	r1, [r7, #0]
 80082de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2204      	movs	r2, #4
 80082e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082e6:	4b03      	ldr	r3, [pc, #12]	@ (80082f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bc80      	pop	{r7}
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20000170 	.word	0x20000170

080082f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	6039      	str	r1, [r7, #0]
 8008302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d105      	bne.n	8008316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	4907      	ldr	r1, [pc, #28]	@ (800832c <USBD_FS_ProductStrDescriptor+0x34>)
 800830e:	4808      	ldr	r0, [pc, #32]	@ (8008330 <USBD_FS_ProductStrDescriptor+0x38>)
 8008310:	f7ff fd2f 	bl	8007d72 <USBD_GetString>
 8008314:	e004      	b.n	8008320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	4904      	ldr	r1, [pc, #16]	@ (800832c <USBD_FS_ProductStrDescriptor+0x34>)
 800831a:	4805      	ldr	r0, [pc, #20]	@ (8008330 <USBD_FS_ProductStrDescriptor+0x38>)
 800831c:	f7ff fd29 	bl	8007d72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008320:	4b02      	ldr	r3, [pc, #8]	@ (800832c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	200010e0 	.word	0x200010e0
 8008330:	08008a64 	.word	0x08008a64

08008334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	6039      	str	r1, [r7, #0]
 800833e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	4904      	ldr	r1, [pc, #16]	@ (8008354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008344:	4804      	ldr	r0, [pc, #16]	@ (8008358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008346:	f7ff fd14 	bl	8007d72 <USBD_GetString>
  return USBD_StrDesc;
 800834a:	4b02      	ldr	r3, [pc, #8]	@ (8008354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	200010e0 	.word	0x200010e0
 8008358:	08008a74 	.word	0x08008a74

0800835c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	221a      	movs	r2, #26
 800836c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800836e:	f000 f843 	bl	80083f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008372:	4b02      	ldr	r3, [pc, #8]	@ (800837c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20000174 	.word	0x20000174

08008380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	6039      	str	r1, [r7, #0]
 800838a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	4907      	ldr	r1, [pc, #28]	@ (80083b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008396:	4808      	ldr	r0, [pc, #32]	@ (80083b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008398:	f7ff fceb 	bl	8007d72 <USBD_GetString>
 800839c:	e004      	b.n	80083a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4904      	ldr	r1, [pc, #16]	@ (80083b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083a2:	4805      	ldr	r0, [pc, #20]	@ (80083b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083a4:	f7ff fce5 	bl	8007d72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083a8:	4b02      	ldr	r3, [pc, #8]	@ (80083b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	200010e0 	.word	0x200010e0
 80083b8:	08008a7c 	.word	0x08008a7c

080083bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	6039      	str	r1, [r7, #0]
 80083c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d105      	bne.n	80083da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	4907      	ldr	r1, [pc, #28]	@ (80083f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083d2:	4808      	ldr	r0, [pc, #32]	@ (80083f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083d4:	f7ff fccd 	bl	8007d72 <USBD_GetString>
 80083d8:	e004      	b.n	80083e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	4904      	ldr	r1, [pc, #16]	@ (80083f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083de:	4805      	ldr	r0, [pc, #20]	@ (80083f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083e0:	f7ff fcc7 	bl	8007d72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083e4:	4b02      	ldr	r3, [pc, #8]	@ (80083f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	200010e0 	.word	0x200010e0
 80083f4:	08008a88 	.word	0x08008a88

080083f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083fe:	4b0f      	ldr	r3, [pc, #60]	@ (800843c <Get_SerialNum+0x44>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008404:	4b0e      	ldr	r3, [pc, #56]	@ (8008440 <Get_SerialNum+0x48>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800840a:	4b0e      	ldr	r3, [pc, #56]	@ (8008444 <Get_SerialNum+0x4c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4413      	add	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800841e:	2208      	movs	r2, #8
 8008420:	4909      	ldr	r1, [pc, #36]	@ (8008448 <Get_SerialNum+0x50>)
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f814 	bl	8008450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008428:	2204      	movs	r2, #4
 800842a:	4908      	ldr	r1, [pc, #32]	@ (800844c <Get_SerialNum+0x54>)
 800842c:	68b8      	ldr	r0, [r7, #8]
 800842e:	f000 f80f 	bl	8008450 <IntToUnicode>
  }
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	1ffff7e8 	.word	0x1ffff7e8
 8008440:	1ffff7ec 	.word	0x1ffff7ec
 8008444:	1ffff7f0 	.word	0x1ffff7f0
 8008448:	20000176 	.word	0x20000176
 800844c:	20000186 	.word	0x20000186

08008450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]
 8008466:	e027      	b.n	80084b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	0f1b      	lsrs	r3, r3, #28
 800846c:	2b09      	cmp	r3, #9
 800846e:	d80b      	bhi.n	8008488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	0f1b      	lsrs	r3, r3, #28
 8008474:	b2da      	uxtb	r2, r3
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	4619      	mov	r1, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	440b      	add	r3, r1
 8008480:	3230      	adds	r2, #48	@ 0x30
 8008482:	b2d2      	uxtb	r2, r2
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	e00a      	b.n	800849e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	0f1b      	lsrs	r3, r3, #28
 800848c:	b2da      	uxtb	r2, r3
 800848e:	7dfb      	ldrb	r3, [r7, #23]
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	4619      	mov	r1, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	440b      	add	r3, r1
 8008498:	3237      	adds	r2, #55	@ 0x37
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	3301      	adds	r3, #1
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	4413      	add	r3, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	3301      	adds	r3, #1
 80084b6:	75fb      	strb	r3, [r7, #23]
 80084b8:	7dfa      	ldrb	r2, [r7, #23]
 80084ba:	79fb      	ldrb	r3, [r7, #7]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d3d3      	bcc.n	8008468 <IntToUnicode+0x18>
  }
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr

080084cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a0d      	ldr	r2, [pc, #52]	@ (8008510 <HAL_PCD_MspInit+0x44>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d113      	bne.n	8008506 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80084de:	4b0d      	ldr	r3, [pc, #52]	@ (8008514 <HAL_PCD_MspInit+0x48>)
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008514 <HAL_PCD_MspInit+0x48>)
 80084e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80084e8:	61d3      	str	r3, [r2, #28]
 80084ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008514 <HAL_PCD_MspInit+0x48>)
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80084f6:	2200      	movs	r2, #0
 80084f8:	2100      	movs	r1, #0
 80084fa:	2014      	movs	r0, #20
 80084fc:	f7f8 fdd3 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008500:	2014      	movs	r0, #20
 8008502:	f7f8 fdec 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40005c00 	.word	0x40005c00
 8008514:	40021000 	.word	0x40021000

08008518 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	f7fe fcf1 	bl	8006f16 <USBD_LL_SetupStage>
}
 8008534:	bf00      	nop
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	440b      	add	r3, r1
 800855c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	4619      	mov	r1, r3
 8008566:	f7fe fd23 	bl	8006fb0 <USBD_LL_DataOutStage>
}
 800856a:	bf00      	nop
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	440b      	add	r3, r1
 8008592:	3324      	adds	r3, #36	@ 0x24
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	4619      	mov	r1, r3
 800859a:	f7fe fd7a 	bl	8007092 <USBD_LL_DataInStage>
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fe8a 	bl	80072ce <USBD_LL_SOF>
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085ca:	2301      	movs	r3, #1
 80085cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	799b      	ldrb	r3, [r3, #6]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d001      	beq.n	80085da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80085d6:	f7f7 ff8c 	bl	80004f2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085e0:	7bfa      	ldrb	r2, [r7, #15]
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe fe3a 	bl	800725e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe fdf3 	bl	80071dc <USBD_LL_Reset>
}
 80085f6:	bf00      	nop
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fe34 	bl	800727c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	7a9b      	ldrb	r3, [r3, #10]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800861c:	4b04      	ldr	r3, [pc, #16]	@ (8008630 <HAL_PCD_SuspendCallback+0x30>)
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	4a03      	ldr	r2, [pc, #12]	@ (8008630 <HAL_PCD_SuspendCallback+0x30>)
 8008622:	f043 0306 	orr.w	r3, r3, #6
 8008626:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	e000ed00 	.word	0xe000ed00

08008634 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fe2e 	bl	80072a4 <USBD_LL_Resume>
}
 8008648:	bf00      	nop
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008658:	4a1f      	ldr	r2, [pc, #124]	@ (80086d8 <USBD_LL_Init+0x88>)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a1d      	ldr	r2, [pc, #116]	@ (80086d8 <USBD_LL_Init+0x88>)
 8008664:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008668:	4b1b      	ldr	r3, [pc, #108]	@ (80086d8 <USBD_LL_Init+0x88>)
 800866a:	4a1c      	ldr	r2, [pc, #112]	@ (80086dc <USBD_LL_Init+0x8c>)
 800866c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800866e:	4b1a      	ldr	r3, [pc, #104]	@ (80086d8 <USBD_LL_Init+0x88>)
 8008670:	2208      	movs	r2, #8
 8008672:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008674:	4b18      	ldr	r3, [pc, #96]	@ (80086d8 <USBD_LL_Init+0x88>)
 8008676:	2202      	movs	r2, #2
 8008678:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800867a:	4b17      	ldr	r3, [pc, #92]	@ (80086d8 <USBD_LL_Init+0x88>)
 800867c:	2200      	movs	r2, #0
 800867e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008680:	4b15      	ldr	r3, [pc, #84]	@ (80086d8 <USBD_LL_Init+0x88>)
 8008682:	2200      	movs	r2, #0
 8008684:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008686:	4b14      	ldr	r3, [pc, #80]	@ (80086d8 <USBD_LL_Init+0x88>)
 8008688:	2200      	movs	r2, #0
 800868a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800868c:	4812      	ldr	r0, [pc, #72]	@ (80086d8 <USBD_LL_Init+0x88>)
 800868e:	f7f8 ffa8 	bl	80015e2 <HAL_PCD_Init>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008698:	f7f7 ff2b 	bl	80004f2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086a2:	2318      	movs	r3, #24
 80086a4:	2200      	movs	r2, #0
 80086a6:	2100      	movs	r1, #0
 80086a8:	f7fa fca2 	bl	8002ff0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086b2:	2358      	movs	r3, #88	@ 0x58
 80086b4:	2200      	movs	r2, #0
 80086b6:	2180      	movs	r1, #128	@ 0x80
 80086b8:	f7fa fc9a 	bl	8002ff0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80086c6:	2200      	movs	r2, #0
 80086c8:	2181      	movs	r1, #129	@ 0x81
 80086ca:	f7fa fc91 	bl	8002ff0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	200012e0 	.word	0x200012e0
 80086dc:	40005c00 	.word	0x40005c00

080086e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7f9 f869 	bl	80017ce <HAL_PCD_Start>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	4618      	mov	r0, r3
 8008704:	f000 f93a 	bl	800897c <USBD_Get_USB_Status>
 8008708:	4603      	mov	r3, r0
 800870a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800870c:	7bbb      	ldrb	r3, [r7, #14]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	461a      	mov	r2, r3
 8008724:	4603      	mov	r3, r0
 8008726:	70fb      	strb	r3, [r7, #3]
 8008728:	460b      	mov	r3, r1
 800872a:	70bb      	strb	r3, [r7, #2]
 800872c:	4613      	mov	r3, r2
 800872e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800873e:	78bb      	ldrb	r3, [r7, #2]
 8008740:	883a      	ldrh	r2, [r7, #0]
 8008742:	78f9      	ldrb	r1, [r7, #3]
 8008744:	f7f9 f9bd 	bl	8001ac2 <HAL_PCD_EP_Open>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f914 	bl	800897c <USBD_Get_USB_Status>
 8008754:	4603      	mov	r3, r0
 8008756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008758:	7bbb      	ldrb	r3, [r7, #14]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800877c:	78fa      	ldrb	r2, [r7, #3]
 800877e:	4611      	mov	r1, r2
 8008780:	4618      	mov	r0, r3
 8008782:	f7f9 f9fb 	bl	8001b7c <HAL_PCD_EP_Close>
 8008786:	4603      	mov	r3, r0
 8008788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	4618      	mov	r0, r3
 800878e:	f000 f8f5 	bl	800897c <USBD_Get_USB_Status>
 8008792:	4603      	mov	r3, r0
 8008794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008796:	7bbb      	ldrb	r3, [r7, #14]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087ba:	78fa      	ldrb	r2, [r7, #3]
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f7f9 fa8c 	bl	8001cdc <HAL_PCD_EP_SetStall>
 80087c4:	4603      	mov	r3, r0
 80087c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 f8d6 	bl	800897c <USBD_Get_USB_Status>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087f8:	78fa      	ldrb	r2, [r7, #3]
 80087fa:	4611      	mov	r1, r2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7f9 facd 	bl	8001d9c <HAL_PCD_EP_ClrStall>
 8008802:	4603      	mov	r3, r0
 8008804:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	4618      	mov	r0, r3
 800880a:	f000 f8b7 	bl	800897c <USBD_Get_USB_Status>
 800880e:	4603      	mov	r3, r0
 8008810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008812:	7bbb      	ldrb	r3, [r7, #14]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800882e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008834:	2b00      	cmp	r3, #0
 8008836:	da0b      	bge.n	8008850 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800883e:	68f9      	ldr	r1, [r7, #12]
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	440b      	add	r3, r1
 800884a:	3312      	adds	r3, #18
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	e00b      	b.n	8008868 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008856:	68f9      	ldr	r1, [r7, #12]
 8008858:	4613      	mov	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	440b      	add	r3, r1
 8008862:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008866:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr

08008872 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800888c:	78fa      	ldrb	r2, [r7, #3]
 800888e:	4611      	mov	r1, r2
 8008890:	4618      	mov	r0, r3
 8008892:	f7f9 f8f2 	bl	8001a7a <HAL_PCD_SetAddress>
 8008896:	4603      	mov	r3, r0
 8008898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	4618      	mov	r0, r3
 800889e:	f000 f86d 	bl	800897c <USBD_Get_USB_Status>
 80088a2:	4603      	mov	r3, r0
 80088a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	607a      	str	r2, [r7, #4]
 80088ba:	461a      	mov	r2, r3
 80088bc:	460b      	mov	r3, r1
 80088be:	72fb      	strb	r3, [r7, #11]
 80088c0:	4613      	mov	r3, r2
 80088c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088d2:	893b      	ldrh	r3, [r7, #8]
 80088d4:	7af9      	ldrb	r1, [r7, #11]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	f7f9 f9c9 	bl	8001c6e <HAL_PCD_EP_Transmit>
 80088dc:	4603      	mov	r3, r0
 80088de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f84a 	bl	800897c <USBD_Get_USB_Status>
 80088e8:	4603      	mov	r3, r0
 80088ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	461a      	mov	r2, r3
 8008902:	460b      	mov	r3, r1
 8008904:	72fb      	strb	r3, [r7, #11]
 8008906:	4613      	mov	r3, r2
 8008908:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008918:	893b      	ldrh	r3, [r7, #8]
 800891a:	7af9      	ldrb	r1, [r7, #11]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	f7f9 f975 	bl	8001c0c <HAL_PCD_EP_Receive>
 8008922:	4603      	mov	r3, r0
 8008924:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f827 	bl	800897c <USBD_Get_USB_Status>
 800892e:	4603      	mov	r3, r0
 8008930:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008932:	7dbb      	ldrb	r3, [r7, #22]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008944:	4b02      	ldr	r3, [pc, #8]	@ (8008950 <USBD_static_malloc+0x14>)
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr
 8008950:	200015b8 	.word	0x200015b8

08008954 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]

}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	bc80      	pop	{r7}
 8008964:	4770      	bx	lr

08008966 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008966:	b480      	push	{r7}
 8008968:	b083      	sub	sp, #12
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	460b      	mov	r3, r1
 8008970:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr

0800897c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	2b03      	cmp	r3, #3
 800898e:	d817      	bhi.n	80089c0 <USBD_Get_USB_Status+0x44>
 8008990:	a201      	add	r2, pc, #4	@ (adr r2, 8008998 <USBD_Get_USB_Status+0x1c>)
 8008992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008996:	bf00      	nop
 8008998:	080089a9 	.word	0x080089a9
 800899c:	080089af 	.word	0x080089af
 80089a0:	080089b5 	.word	0x080089b5
 80089a4:	080089bb 	.word	0x080089bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
    break;
 80089ac:	e00b      	b.n	80089c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089ae:	2302      	movs	r3, #2
 80089b0:	73fb      	strb	r3, [r7, #15]
    break;
 80089b2:	e008      	b.n	80089c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089b4:	2301      	movs	r3, #1
 80089b6:	73fb      	strb	r3, [r7, #15]
    break;
 80089b8:	e005      	b.n	80089c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089ba:	2302      	movs	r3, #2
 80089bc:	73fb      	strb	r3, [r7, #15]
    break;
 80089be:	e002      	b.n	80089c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089c0:	2302      	movs	r3, #2
 80089c2:	73fb      	strb	r3, [r7, #15]
    break;
 80089c4:	bf00      	nop
  }
  return usb_status;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bc80      	pop	{r7}
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <memset>:
 80089d4:	4603      	mov	r3, r0
 80089d6:	4402      	add	r2, r0
 80089d8:	4293      	cmp	r3, r2
 80089da:	d100      	bne.n	80089de <memset+0xa>
 80089dc:	4770      	bx	lr
 80089de:	f803 1b01 	strb.w	r1, [r3], #1
 80089e2:	e7f9      	b.n	80089d8 <memset+0x4>

080089e4 <__libc_init_array>:
 80089e4:	b570      	push	{r4, r5, r6, lr}
 80089e6:	2600      	movs	r6, #0
 80089e8:	4d0c      	ldr	r5, [pc, #48]	@ (8008a1c <__libc_init_array+0x38>)
 80089ea:	4c0d      	ldr	r4, [pc, #52]	@ (8008a20 <__libc_init_array+0x3c>)
 80089ec:	1b64      	subs	r4, r4, r5
 80089ee:	10a4      	asrs	r4, r4, #2
 80089f0:	42a6      	cmp	r6, r4
 80089f2:	d109      	bne.n	8008a08 <__libc_init_array+0x24>
 80089f4:	f000 f81a 	bl	8008a2c <_init>
 80089f8:	2600      	movs	r6, #0
 80089fa:	4d0a      	ldr	r5, [pc, #40]	@ (8008a24 <__libc_init_array+0x40>)
 80089fc:	4c0a      	ldr	r4, [pc, #40]	@ (8008a28 <__libc_init_array+0x44>)
 80089fe:	1b64      	subs	r4, r4, r5
 8008a00:	10a4      	asrs	r4, r4, #2
 8008a02:	42a6      	cmp	r6, r4
 8008a04:	d105      	bne.n	8008a12 <__libc_init_array+0x2e>
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0c:	4798      	blx	r3
 8008a0e:	3601      	adds	r6, #1
 8008a10:	e7ee      	b.n	80089f0 <__libc_init_array+0xc>
 8008a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a16:	4798      	blx	r3
 8008a18:	3601      	adds	r6, #1
 8008a1a:	e7f2      	b.n	8008a02 <__libc_init_array+0x1e>
 8008a1c:	08008ac4 	.word	0x08008ac4
 8008a20:	08008ac4 	.word	0x08008ac4
 8008a24:	08008ac4 	.word	0x08008ac4
 8008a28:	08008ac8 	.word	0x08008ac8

08008a2c <_init>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	bf00      	nop
 8008a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a32:	bc08      	pop	{r3}
 8008a34:	469e      	mov	lr, r3
 8008a36:	4770      	bx	lr

08008a38 <_fini>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr
