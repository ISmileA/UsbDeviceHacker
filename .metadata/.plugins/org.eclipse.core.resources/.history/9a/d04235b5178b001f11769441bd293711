
#include "main.h"
#include "Perif.h"
#include "crc16.h"
#include "serial.h"
#include "bootloader.h"

//#define LOCK_ON

uint8_t crc8(uint8_t *buffer, uint8_t size);

uint8_t recive_start = 0;

int main(void)
{
	uint8_t flash_end = 0;
	flash_end = (*(__IO uint16_t*)(END_EEPROM_ADDRESS - 4));
	Init();
	#ifdef LOCK_ON
		if ((FLASH->OBR & FLASH_OBR_RDPRT) != FLASH_OBR_RDPRT) {
			FLASH->KEYR = FLASH_KEY1;
			FLASH->KEYR = FLASH_KEY2;
			FLASH->OPTKEYR = FLASH_OPTKEY1;
			FLASH->OPTKEYR = FLASH_OPTKEY2;

			FLASH->CR |= FLASH_CR_OPTER; /* RDP_LEVEL */
			FLASH->CR |= FLASH_CR_STRT;
			LL_mDelay(5);
			FLASH->CR &= ~ FLASH_CR_OPTER;
			FLASH->CR |= FLASH_CR_OPTPG;
			OB->RDP = OB_RDP_LEVEL_1;
			LL_mDelay(5);
			FLASH->CR &= ~FLASH_CR_OPTPG;	/* End RDP_LEVEL */

			NVIC_SystemReset();
			FLASH->CR &= ~ FLASH_CR_OPTWRE;
			FLASH->CR |= FLASH_CR_LOCK;

		}
	#endif
	timer = HAL_GetTick();
	while((HAL_GetTick() - timer) < 2000){ 	/* waiting */
		if (status == 1){
			break;
		}
	}
	while (1)
	{
		if (status){ /* flash update or test uart, can */
			recive_start = 1;
			if (flag_rx_update){
				recive_start = 0;
				flag_rx_update = 0;
				if (parsing()){		/* start parsing */
					if (parseData_t.command == PROTOCOL_COMMAND_START_UPDATE_FIRMWARE){ 	/* start update firmware */
						EraseFlash(APP1_START, 57);
						answerOK(PROTOCOL_COMMAND_START_UPDATE_FIRMWARE);
						update();		/* Lets go update! */
						if (flash_end != 1)
							writeEnd();
						recive_start = 1;
						jumpToApp(APP1_START);
						/* Lets go in app! */
						NVIC_SystemReset();
					}
				}else
					answerFALSE(error);
			}
			if (can_send == 1){
				can_send = 0;
				if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) 	/* can send */
						 LL_GPIO_TogglePin(IN1_GPIO_Port, IN1_Pin);
			}

		}else if (flash_end == 1)	/* Lets go in app! */
		{
			jumpToApp(APP1_START);
			NVIC_SystemReset();
		}else {		/* Flash is clean */
			LL_GPIO_TogglePin(IN1_GPIO_Port, IN1_Pin);
			LL_mDelay(500);
		}
	}
}
void  USART1_RX_Callback()
{
	uint8_t byte = 0;
	uint8_t crc = 0;
	byte = USART1->DR;
	if (byte == PROTOCOL_HEAD || state == 1){
		if (byte == PROTOCOL_HEAD && idxIN1 == 0){	/* Signal for start update firmware */
			rx_true = 1;
			state = 1;
		}
		if (idxIN1 == 1){
			size_chet = byte;
		}
		if (rx_true){
			write_buff(byte); 	/* write byte in parsing buffer */
			idxIN1++;
		}
		if (size_chet == idxIN1-2){
			idxIN1 = 0;
			rx_true = 0;
			flag_rx_update = 1;
		}
	}else{
		if (byte == 0xCC || chek > 0){ 	/* Signal for check MPU */
			chek = 1;
			if (byte == 0x01){
				status = 1;
				LL_GPIO_TogglePin(IN1_GPIO_Port, IN1_Pin);
				USART1->DR = 0x6A;
				while ((USART1->SR & USART_SR_TXE) == 0);
				LL_mDelay(5);
				MX_USART1_UART_Init115200();
				chek = 0;
			}
		}
		else if (byte == 0xA1 || chek1 > 0){	/* Signal from tester MPU */
			return_buf[chek1] = byte;
			chek1++;
			if(chek1 == 3){
				crc = crc8(return_buf, 2);
				if (crc == return_buf[2]){
					return_buf[1] +=1;
					USART_TRANSMIT_IT(USART1, return_buf, 2);
					status = 1;
				}
				chek1 = 0;
			}
		}
	}

}

void  USART2_RX_Callback()
{
	uint8_t byte = 0;
	byte = USART2->DR;
	if ((byte == 0xA1 || chek2 == 1) && recive_start){
		chek2++;
		if(chek2 == 2){
			return_buf[1] = byte+1;
			USART_TRANSMIT_IT(USART2, return_buf, 2);
			chek2 = 0;
		}
	}
}
void  USART3_RX_Callback()
{
	uint8_t byte = 0;
	LL_GPIO_SetOutputPin(IN1_GPIO_Port, IN1_GPIO_Port);
	byte = USART3->DR;
	if ((byte == 0xA1 || chek3 == 1) && recive_start){
		chek3++;
		if(chek3 == 2){
			return_buf[1] = byte+1;
			LL_mDelay(10);
			LL_GPIO_SetOutputPin(USART_485_Port, USART_485_Pin);
			USART_TRANSMIT_IT(USART3, return_buf, 2);
			LL_mDelay(5);
			LL_GPIO_ResetOutputPin(USART_485_Port, USART_485_Pin);
			chek3 = 0;
		}
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
    if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
    {
    	if (RxData[0] == 0xA1){
    		can_send = 1;
    		status = 1;
    		for (int i = 0; i<8; i++){
    			TxData[i] = RxData[i] + 1;
    		}

    	}
    }
}

uint8_t crc8(uint8_t *buffer, uint8_t size) {
	uint8_t crc = 0;
  for (uint8_t i = 0; i < size; i++) {
	  uint8_t data = buffer[i];
    for (int j = 8; j > 0; j--) {
      crc = ((crc ^ data) & 1) ? (crc >> 1) ^ 0x8C : (crc >> 1);
      data >>= 1;
    }
  }
  return crc;
}
